
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009438  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08009618  08009618  00019618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009894  08009894  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08009894  08009894  00019894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800989c  0800989c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800989c  0800989c  0001989c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080098a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  2000005c  08009900  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08009900  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c6be  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039d1  00000000  00000000  0003c78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  00040160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e7  00000000  00000000  00041738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029e37  00000000  00000000  0004281f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c60f  00000000  00000000  0006c656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112ada  00000000  00000000  00088c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060b8  00000000  00000000  0019b740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  001a17f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009600 	.word	0x08009600

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08009600 	.word	0x08009600

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08c      	sub	sp, #48	; 0x30
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2220      	movs	r2, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f008 fb7d 	bl	8008cd4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005da:	4b33      	ldr	r3, [pc, #204]	; (80006a8 <MX_ADC1_Init+0xec>)
 80005dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e2:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <MX_ADC1_Init+0xec>)
 80005e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ea:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <MX_ADC1_Init+0xec>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f0:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <MX_ADC1_Init+0xec>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005f6:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <MX_ADC1_Init+0xec>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <MX_ADC1_Init+0xec>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <MX_ADC1_Init+0xec>)
 8000604:	2204      	movs	r2, #4
 8000606:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <MX_ADC1_Init+0xec>)
 800060a:	2200      	movs	r2, #0
 800060c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060e:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <MX_ADC1_Init+0xec>)
 8000610:	2200      	movs	r2, #0
 8000612:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <MX_ADC1_Init+0xec>)
 8000616:	2201      	movs	r2, #1
 8000618:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <MX_ADC1_Init+0xec>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <MX_ADC1_Init+0xec>)
 8000624:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_ADC1_Init+0xec>)
 800062c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000630:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_ADC1_Init+0xec>)
 8000634:	2201      	movs	r2, #1
 8000636:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_ADC1_Init+0xec>)
 800063c:	2200      	movs	r2, #0
 800063e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_ADC1_Init+0xec>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000648:	4817      	ldr	r0, [pc, #92]	; (80006a8 <MX_ADC1_Init+0xec>)
 800064a:	f001 fc7f 	bl	8001f4c <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000654:	f000 fb92 	bl	8000d7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800065c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000660:	4619      	mov	r1, r3
 8000662:	4811      	ldr	r0, [pc, #68]	; (80006a8 <MX_ADC1_Init+0xec>)
 8000664:	f002 fd66 	bl	8003134 <HAL_ADCEx_MultiModeConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800066e:	f000 fb85 	bl	8000d7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_ADC1_Init+0xf0>)
 8000674:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000676:	2306      	movs	r3, #6
 8000678:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800067a:	2304      	movs	r3, #4
 800067c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800067e:	237f      	movs	r3, #127	; 0x7f
 8000680:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000682:	2304      	movs	r3, #4
 8000684:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4619      	mov	r1, r3
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <MX_ADC1_Init+0xec>)
 8000690:	f001 ff06 	bl	80024a0 <HAL_ADC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800069a:	f000 fb6f 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	3730      	adds	r7, #48	; 0x30
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000078 	.word	0x20000078
 80006ac:	21800100 	.word	0x21800100

080006b0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2220      	movs	r2, #32
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f008 fb09 	bl	8008cd4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <MX_ADC2_Init+0xc0>)
 80006c4:	4a2b      	ldr	r2, [pc, #172]	; (8000774 <MX_ADC2_Init+0xc4>)
 80006c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <MX_ADC2_Init+0xc0>)
 80006ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006ce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006d0:	4b27      	ldr	r3, [pc, #156]	; (8000770 <MX_ADC2_Init+0xc0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <MX_ADC2_Init+0xc0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <MX_ADC2_Init+0xc0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MX_ADC2_Init+0xc0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_ADC2_Init+0xc0>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_ADC2_Init+0xc0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_ADC2_Init+0xc0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_ADC2_Init+0xc0>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_ADC2_Init+0xc0>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_ADC2_Init+0xc0>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_ADC2_Init+0xc0>)
 800071e:	2200      	movs	r2, #0
 8000720:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_ADC2_Init+0xc0>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800072a:	4811      	ldr	r0, [pc, #68]	; (8000770 <MX_ADC2_Init+0xc0>)
 800072c:	f001 fc0e 	bl	8001f4c <HAL_ADC_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000736:	f000 fb21 	bl	8000d7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_ADC2_Init+0xc8>)
 800073c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073e:	2306      	movs	r3, #6
 8000740:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000746:	237f      	movs	r3, #127	; 0x7f
 8000748:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800074a:	2304      	movs	r3, #4
 800074c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <MX_ADC2_Init+0xc0>)
 8000758:	f001 fea2 	bl	80024a0 <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000762:	f000 fb0b 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3720      	adds	r7, #32
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000e4 	.word	0x200000e4
 8000774:	50000100 	.word	0x50000100
 8000778:	19200040 	.word	0x19200040

0800077c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b0a4      	sub	sp, #144	; 0x90
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000798:	2254      	movs	r2, #84	; 0x54
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f008 fa99 	bl	8008cd4 <memset>
  if(adcHandle->Instance==ADC1)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007aa:	f040 80a0 	bne.w	80008ee <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007b4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 f9aa 	bl	8004b18 <HAL_RCCEx_PeriphCLKConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80007ca:	f000 fad7 	bl	8000d7c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007ce:	4b79      	ldr	r3, [pc, #484]	; (80009b4 <HAL_ADC_MspInit+0x238>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3301      	adds	r3, #1
 80007d4:	4a77      	ldr	r2, [pc, #476]	; (80009b4 <HAL_ADC_MspInit+0x238>)
 80007d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007d8:	4b76      	ldr	r3, [pc, #472]	; (80009b4 <HAL_ADC_MspInit+0x238>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d10b      	bne.n	80007f8 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007e0:	4b75      	ldr	r3, [pc, #468]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 80007e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e4:	4a74      	ldr	r2, [pc, #464]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 80007e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ec:	4b72      	ldr	r3, [pc, #456]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f8:	4b6f      	ldr	r3, [pc, #444]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fc:	4a6e      	ldr	r2, [pc, #440]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000804:	4b6c      	ldr	r3, [pc, #432]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	623b      	str	r3, [r7, #32]
 800080e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b69      	ldr	r3, [pc, #420]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	4a68      	ldr	r2, [pc, #416]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081c:	4b66      	ldr	r3, [pc, #408]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
 8000826:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000828:	4b63      	ldr	r3, [pc, #396]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	4a62      	ldr	r2, [pc, #392]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 800082e:	f043 0302 	orr.w	r3, r3, #2
 8000832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000834:	4b60      	ldr	r3, [pc, #384]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	f003 0302 	and.w	r3, r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000840:	2304      	movs	r3, #4
 8000842:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000844:	2303      	movs	r3, #3
 8000846:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000854:	4619      	mov	r1, r3
 8000856:	4859      	ldr	r0, [pc, #356]	; (80009bc <HAL_ADC_MspInit+0x240>)
 8000858:	f003 f986 	bl	8003b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800085c:	2302      	movs	r3, #2
 800085e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000860:	2303      	movs	r3, #3
 8000862:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f003 f977 	bl	8003b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_Imes_Pin|V_Imes_Pin;
 800087a:	2303      	movs	r3, #3
 800087c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800088e:	4619      	mov	r1, r3
 8000890:	484b      	ldr	r0, [pc, #300]	; (80009c0 <HAL_ADC_MspInit+0x244>)
 8000892:	f003 f969 	bl	8003b68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000896:	4b4b      	ldr	r3, [pc, #300]	; (80009c4 <HAL_ADC_MspInit+0x248>)
 8000898:	4a4b      	ldr	r2, [pc, #300]	; (80009c8 <HAL_ADC_MspInit+0x24c>)
 800089a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800089c:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <HAL_ADC_MspInit+0x248>)
 800089e:	2205      	movs	r2, #5
 80008a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a2:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <HAL_ADC_MspInit+0x248>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a8:	4b46      	ldr	r3, [pc, #280]	; (80009c4 <HAL_ADC_MspInit+0x248>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008ae:	4b45      	ldr	r3, [pc, #276]	; (80009c4 <HAL_ADC_MspInit+0x248>)
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008b4:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <HAL_ADC_MspInit+0x248>)
 80008b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008bc:	4b41      	ldr	r3, [pc, #260]	; (80009c4 <HAL_ADC_MspInit+0x248>)
 80008be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008c4:	4b3f      	ldr	r3, [pc, #252]	; (80009c4 <HAL_ADC_MspInit+0x248>)
 80008c6:	2220      	movs	r2, #32
 80008c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008ca:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <HAL_ADC_MspInit+0x248>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008d0:	483c      	ldr	r0, [pc, #240]	; (80009c4 <HAL_ADC_MspInit+0x248>)
 80008d2:	f002 fe17 	bl	8003504 <HAL_DMA_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 80008dc:	f000 fa4e 	bl	8000d7c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a38      	ldr	r2, [pc, #224]	; (80009c4 <HAL_ADC_MspInit+0x248>)
 80008e4:	655a      	str	r2, [r3, #84]	; 0x54
 80008e6:	4a37      	ldr	r2, [pc, #220]	; (80009c4 <HAL_ADC_MspInit+0x248>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008ec:	e05e      	b.n	80009ac <HAL_ADC_MspInit+0x230>
  else if(adcHandle->Instance==ADC2)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a36      	ldr	r2, [pc, #216]	; (80009cc <HAL_ADC_MspInit+0x250>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d159      	bne.n	80009ac <HAL_ADC_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008fe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000902:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000908:	4618      	mov	r0, r3
 800090a:	f004 f905 	bl	8004b18 <HAL_RCCEx_PeriphCLKConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 8000914:	f000 fa32 	bl	8000d7c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <HAL_ADC_MspInit+0x238>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	4a25      	ldr	r2, [pc, #148]	; (80009b4 <HAL_ADC_MspInit+0x238>)
 8000920:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000922:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <HAL_ADC_MspInit+0x238>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d10b      	bne.n	8000942 <HAL_ADC_MspInit+0x1c6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 8000930:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_ADC_MspInit+0x23c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000972:	230b      	movs	r3, #11
 8000974:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000976:	2303      	movs	r3, #3
 8000978:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000986:	4619      	mov	r1, r3
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <HAL_ADC_MspInit+0x240>)
 800098a:	f003 f8ed 	bl	8003b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800098e:	2301      	movs	r3, #1
 8000990:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000992:	2303      	movs	r3, #3
 8000994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f003 f8de 	bl	8003b68 <HAL_GPIO_Init>
}
 80009ac:	bf00      	nop
 80009ae:	3790      	adds	r7, #144	; 0x90
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200001b0 	.word	0x200001b0
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000800 	.word	0x48000800
 80009c0:	48000400 	.word	0x48000400
 80009c4:	20000150 	.word	0x20000150
 80009c8:	40020008 	.word	0x40020008
 80009cc:	50000100 	.word	0x50000100

080009d0 <Adc_init>:
uint32_t courant_mes;
char courant_str[5];
int print_courant = 0;
int val_moy = 0 ;

void Adc_init(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	if (HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)){
 80009d4:	217f      	movs	r1, #127	; 0x7f
 80009d6:	4810      	ldr	r0, [pc, #64]	; (8000a18 <Adc_init+0x48>)
 80009d8:	f002 fb4a 	bl	8003070 <HAL_ADCEx_Calibration_Start>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <Adc_init+0x20>
		HAL_UART_Transmit(&huart2, error_calib, 21, HAL_MAX_DELAY);
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	2215      	movs	r2, #21
 80009e8:	490c      	ldr	r1, [pc, #48]	; (8000a1c <Adc_init+0x4c>)
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <Adc_init+0x50>)
 80009ec:	f006 f92b 	bl	8006c46 <HAL_UART_Transmit>
	}
	if (HAL_OK != HAL_ADC_Start_DMA(&hadc1, &courant_mes, ADC_BUFFER)){
 80009f0:	2201      	movs	r2, #1
 80009f2:	490c      	ldr	r1, [pc, #48]	; (8000a24 <Adc_init+0x54>)
 80009f4:	4808      	ldr	r0, [pc, #32]	; (8000a18 <Adc_init+0x48>)
 80009f6:	f001 fc6b 	bl	80022d0 <HAL_ADC_Start_DMA>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d006      	beq.n	8000a0e <Adc_init+0x3e>
		HAL_UART_Transmit(&huart2, error_start, 17, HAL_MAX_DELAY);
 8000a00:	f04f 33ff 	mov.w	r3, #4294967295
 8000a04:	2211      	movs	r2, #17
 8000a06:	4908      	ldr	r1, [pc, #32]	; (8000a28 <Adc_init+0x58>)
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <Adc_init+0x50>)
 8000a0a:	f006 f91c 	bl	8006c46 <HAL_UART_Transmit>
	}
	HAL_TIM_Base_Start(&htim1);
 8000a0e:	4807      	ldr	r0, [pc, #28]	; (8000a2c <Adc_init+0x5c>)
 8000a10:	f004 fb32 	bl	8005078 <HAL_TIM_Base_Start>
		HAL_ADC_Start(&hadc1);
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	}
	val_moy = val_moy / 100;
	*/
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000078 	.word	0x20000078
 8000a1c:	0800965c 	.word	0x0800965c
 8000a20:	200002e4 	.word	0x200002e4
 8000a24:	200001b4 	.word	0x200001b4
 8000a28:	08009674 	.word	0x08009674
 8000a2c:	2000024c 	.word	0x2000024c

08000a30 <Mes_Courant>:

void Mes_Courant(void){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	courant_mes = (1/50)*((courant_mes)*(3300/4095) - 1650);
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <Mes_Courant+0x38>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
	sprintf(courant_str, "%ld", courant_mes);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <Mes_Courant+0x38>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	490a      	ldr	r1, [pc, #40]	; (8000a6c <Mes_Courant+0x3c>)
 8000a42:	480b      	ldr	r0, [pc, #44]	; (8000a70 <Mes_Courant+0x40>)
 8000a44:	f008 f926 	bl	8008c94 <siprintf>
	HAL_UART_Transmit(&huart2, courant, 10, HAL_MAX_DELAY);
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	4909      	ldr	r1, [pc, #36]	; (8000a74 <Mes_Courant+0x44>)
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <Mes_Courant+0x48>)
 8000a52:	f006 f8f8 	bl	8006c46 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, courant_str, 5, HAL_MAX_DELAY);
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	2205      	movs	r2, #5
 8000a5c:	4904      	ldr	r1, [pc, #16]	; (8000a70 <Mes_Courant+0x40>)
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <Mes_Courant+0x48>)
 8000a60:	f006 f8f1 	bl	8006c46 <HAL_UART_Transmit>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	sprintf(courant_str, "%ld", courant_mes);
	HAL_UART_Transmit(&huart2, courant, 10, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, courant_str, 5, HAL_MAX_DELAY);
	*/
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200001b4 	.word	0x200001b4
 8000a6c:	08009618 	.word	0x08009618
 8000a70:	200001b8 	.word	0x200001b8
 8000a74:	08009650 	.word	0x08009650
 8000a78:	200002e4 	.word	0x200002e4

08000a7c <DMA_ADC_PrintValue>:

void DMA_ADC_PrintValue(void){
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_DMA_Init+0x50>)
 8000a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a96:	4a11      	ldr	r2, [pc, #68]	; (8000adc <MX_DMA_Init+0x50>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6493      	str	r3, [r2, #72]	; 0x48
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_DMA_Init+0x50>)
 8000aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_DMA_Init+0x50>)
 8000aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <MX_DMA_Init+0x50>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_DMA_Init+0x50>)
 8000ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	200b      	movs	r0, #11
 8000ac8:	f002 fcf4 	bl	80034b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000acc:	200b      	movs	r0, #11
 8000ace:	f002 fd0b 	bl	80034e8 <HAL_NVIC_EnableIRQ>

}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000

08000ae0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b3f      	ldr	r3, [pc, #252]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	4a3e      	ldr	r2, [pc, #248]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b02:	4b3c      	ldr	r3, [pc, #240]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b0e:	4b39      	ldr	r3, [pc, #228]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	4a38      	ldr	r2, [pc, #224]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000b14:	f043 0320 	orr.w	r3, r3, #32
 8000b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1a:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	f003 0320 	and.w	r3, r3, #32
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b33      	ldr	r3, [pc, #204]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	4a32      	ldr	r2, [pc, #200]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b32:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4a2c      	ldr	r2, [pc, #176]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b56:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4a26      	ldr	r2, [pc, #152]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <MX_GPIO_Init+0x114>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2120      	movs	r1, #32
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f003 f979 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	481e      	ldr	r0, [pc, #120]	; (8000bf8 <MX_GPIO_Init+0x118>)
 8000b80:	f003 f974 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4818      	ldr	r0, [pc, #96]	; (8000bfc <MX_GPIO_Init+0x11c>)
 8000b9c:	f002 ffe4 	bl	8003b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f002 ffd5 	bl	8003b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <MX_GPIO_Init+0x118>)
 8000bd6:	f002 ffc7 	bl	8003b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2028      	movs	r0, #40	; 0x28
 8000be0:	f002 fc68 	bl	80034b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000be4:	2028      	movs	r0, #40	; 0x28
 8000be6:	f002 fc7f 	bl	80034e8 <HAL_NVIC_EnableIRQ>

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48000c00 	.word	0x48000c00
 8000bfc:	48000800 	.word	0x48000800

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c04:	f000 ff01 	bl	8001a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c08:	f000 f83c 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0c:	f7ff ff68 	bl	8000ae0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c10:	f7ff ff3c 	bl	8000a8c <MX_DMA_Init>
  MX_ADC2_Init();
 8000c14:	f7ff fd4c 	bl	80006b0 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000c18:	f7ff fcd0 	bl	80005bc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c1c:	f000 fbae 	bl	800137c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c20:	f000 fc5c 	bl	80014dc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000c24:	f000 fd90 	bl	8001748 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c28:	f000 fdda 	bl	80017e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, started, 31, HAL_MAX_DELAY);
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	221f      	movs	r2, #31
 8000c32:	490f      	ldr	r1, [pc, #60]	; (8000c70 <main+0x70>)
 8000c34:	480f      	ldr	r0, [pc, #60]	; (8000c74 <main+0x74>)
 8000c36:	f006 f806 	bl	8006c46 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	2205      	movs	r2, #5
 8000c40:	490d      	ldr	r1, [pc, #52]	; (8000c78 <main+0x78>)
 8000c42:	480c      	ldr	r0, [pc, #48]	; (8000c74 <main+0x74>)
 8000c44:	f005 ffff 	bl	8006c46 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	490c      	ldr	r1, [pc, #48]	; (8000c7c <main+0x7c>)
 8000c4c:	4809      	ldr	r0, [pc, #36]	; (8000c74 <main+0x74>)
 8000c4e:	f006 f891 	bl	8006d74 <HAL_UART_Receive_IT>
  Adc_init();
 8000c52:	f7ff febd 	bl	80009d0 <Adc_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (it_uart == 1){
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <main+0x80>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d1fb      	bne.n	8000c56 <main+0x56>
		  UART_Echo();
 8000c5e:	f000 fa41 	bl	80010e4 <UART_Echo>
		  UART_Create_Cmd();
 8000c62:	f000 f961 	bl	8000f28 <UART_Create_Cmd>
		  it_uart = 0;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <main+0x80>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
	  if (it_uart == 1){
 8000c6c:	e7f3      	b.n	8000c56 <main+0x56>
 8000c6e:	bf00      	nop
 8000c70:	080097f8 	.word	0x080097f8
 8000c74:	200002e4 	.word	0x200002e4
 8000c78:	08009818 	.word	0x08009818
 8000c7c:	200001f8 	.word	0x200001f8
 8000c80:	200001c0 	.word	0x200001c0

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b094      	sub	sp, #80	; 0x50
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	2238      	movs	r2, #56	; 0x38
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f008 f81e 	bl	8008cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f003 f91c 	bl	8003ee4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000cbe:	2306      	movs	r3, #6
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cc2:	2355      	movs	r3, #85	; 0x55
 8000cc4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd2:	f107 0318 	add.w	r3, r7, #24
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f003 f9b8 	bl	800404c <HAL_RCC_OscConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ce2:	f000 f84b 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cea:	2303      	movs	r3, #3
 8000cec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 fcbc 	bl	800467c <HAL_RCC_ClockConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d0a:	f000 f837 	bl	8000d7c <Error_Handler>
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3750      	adds	r7, #80	; 0x50
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* __________________________________________________________________________________________________________________________________________________________________________________________________*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	it_uart = 1;
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_UART_RxCpltCallback+0x20>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 8000d26:	2201      	movs	r2, #1
 8000d28:	4904      	ldr	r1, [pc, #16]	; (8000d3c <HAL_UART_RxCpltCallback+0x24>)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_UART_RxCpltCallback+0x28>)
 8000d2c:	f006 f822 	bl	8006d74 <HAL_UART_Receive_IT>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200001c0 	.word	0x200001c0
 8000d3c:	200001f8 	.word	0x200001f8
 8000d40:	200002e4 	.word	0x200002e4

08000d44 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	DMA_ADC_PrintValue();
 8000d4c:	f7ff fe96 	bl	8000a7c <DMA_ADC_PrintValue>
	//HAL_ADC_Stop_DMA(&hadc1);
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d101      	bne.n	8000d6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d6a:	f000 fe67 	bl	8001a3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40001000 	.word	0x40001000

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <Change_Speed>:

int speed_buffer[4];
const uint8_t maxSpeed[] = "Too fast my friend, too fast";
const uint8_t speedChangedFin[] = "Speed changed";

void Change_Speed(char cmd[CMD_BUFFER_SIZE]){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	/* Debug

	HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, cmd, 10, HAL_MAX_DELAY);
*/
	speed_buffer[0] = cmd[6] - '0';
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3306      	adds	r3, #6
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	3b30      	subs	r3, #48	; 0x30
 8000d98:	4a39      	ldr	r2, [pc, #228]	; (8000e80 <Change_Speed+0xf8>)
 8000d9a:	6013      	str	r3, [r2, #0]
	speed_buffer[1] = cmd[7] - '0';
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3307      	adds	r3, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	3b30      	subs	r3, #48	; 0x30
 8000da4:	4a36      	ldr	r2, [pc, #216]	; (8000e80 <Change_Speed+0xf8>)
 8000da6:	6053      	str	r3, [r2, #4]
	speed_buffer[2] = cmd[8] - '0';
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3308      	adds	r3, #8
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	3b30      	subs	r3, #48	; 0x30
 8000db0:	4a33      	ldr	r2, [pc, #204]	; (8000e80 <Change_Speed+0xf8>)
 8000db2:	6093      	str	r3, [r2, #8]
	speed_buffer[3] = cmd[9] - '0';
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3309      	adds	r3, #9
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	3b30      	subs	r3, #48	; 0x30
 8000dbc:	4a30      	ldr	r2, [pc, #192]	; (8000e80 <Change_Speed+0xf8>)
 8000dbe:	60d3      	str	r3, [r2, #12]
	int speed = speed_buffer[0]*1000 + speed_buffer[1]*100 + speed_buffer[2]*10 + speed_buffer[3];
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <Change_Speed+0xf8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dc8:	fb03 f202 	mul.w	r2, r3, r2
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <Change_Speed+0xf8>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2164      	movs	r1, #100	; 0x64
 8000dd2:	fb01 f303 	mul.w	r3, r1, r3
 8000dd6:	18d1      	adds	r1, r2, r3
 8000dd8:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <Change_Speed+0xf8>)
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	18ca      	adds	r2, r1, r3
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <Change_Speed+0xf8>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60bb      	str	r3, [r7, #8]
	if (speed > MAX_SPEED){
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000df4:	db0e      	blt.n	8000e14 <Change_Speed+0x8c>
		HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	4921      	ldr	r1, [pc, #132]	; (8000e84 <Change_Speed+0xfc>)
 8000dfe:	4822      	ldr	r0, [pc, #136]	; (8000e88 <Change_Speed+0x100>)
 8000e00:	f005 ff21 	bl	8006c46 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, maxSpeed, 28, HAL_MAX_DELAY);
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
 8000e08:	221c      	movs	r2, #28
 8000e0a:	4920      	ldr	r1, [pc, #128]	; (8000e8c <Change_Speed+0x104>)
 8000e0c:	481e      	ldr	r0, [pc, #120]	; (8000e88 <Change_Speed+0x100>)
 8000e0e:	f005 ff1a 	bl	8006c46 <HAL_UART_Transmit>
		}
		/*HAL_UART_Transmit(&huart2, speedChangedFin, 13, HAL_MAX_DELAY);*/

	}

}
 8000e12:	e031      	b.n	8000e78 <Change_Speed+0xf0>
		int speed_actl = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1);
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <Change_Speed+0x108>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1a:	60fb      	str	r3, [r7, #12]
		if (speed > speed_actl){
 8000e1c:	68ba      	ldr	r2, [r7, #8]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dd25      	ble.n	8000e70 <Change_Speed+0xe8>
			while (speed_actl < speed){
 8000e24:	e00f      	b.n	8000e46 <Change_Speed+0xbe>
				speed_actl++;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed_actl);
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <Change_Speed+0x108>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,MAX_SPEED + 1 - speed_actl);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <Change_Speed+0x108>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(25);
 8000e40:	2019      	movs	r0, #25
 8000e42:	f000 fe19 	bl	8001a78 <HAL_Delay>
			while (speed_actl < speed){
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dbeb      	blt.n	8000e26 <Change_Speed+0x9e>
}
 8000e4e:	e013      	b.n	8000e78 <Change_Speed+0xf0>
				speed_actl--;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed_actl);
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <Change_Speed+0x108>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,MAX_SPEED + 1 - speed_actl);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <Change_Speed+0x108>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(25);
 8000e6a:	2019      	movs	r0, #25
 8000e6c:	f000 fe04 	bl	8001a78 <HAL_Delay>
			while (speed_actl > speed){
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dceb      	bgt.n	8000e50 <Change_Speed+0xc8>
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200001c4 	.word	0x200001c4
 8000e84:	0800961c 	.word	0x0800961c
 8000e88:	200002e4 	.word	0x200002e4
 8000e8c:	08009688 	.word	0x08009688
 8000e90:	2000024c 	.word	0x2000024c

08000e94 <Start_Motor>:

void Start_Motor(char cmd[CMD_BUFFER_SIZE]){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,500);
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <Start_Motor+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,500);
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <Start_Motor+0x64>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000eae:	639a      	str	r2, [r3, #56]	; 0x38
	cmd[6] = '0'; // Pour éviter speed 6 en première instruction
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3306      	adds	r3, #6
 8000eb4:	2230      	movs	r2, #48	; 0x30
 8000eb6:	701a      	strb	r2, [r3, #0]
	cmd[7] = '5'; // Qui n'est pas compris comme 'trop rapide'
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3307      	adds	r3, #7
 8000ebc:	2235      	movs	r2, #53	; 0x35
 8000ebe:	701a      	strb	r2, [r3, #0]
	cmd[8] = '0';
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3308      	adds	r3, #8
 8000ec4:	2230      	movs	r2, #48	; 0x30
 8000ec6:	701a      	strb	r2, [r3, #0]
	cmd[9] = '0';
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3309      	adds	r3, #9
 8000ecc:	2230      	movs	r2, #48	; 0x30
 8000ece:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <Start_Motor+0x64>)
 8000ed4:	f004 fa10 	bl	80052f8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <Start_Motor+0x64>)
 8000edc:	f005 fb90 	bl	8006600 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <Start_Motor+0x64>)
 8000ee4:	f004 fa08 	bl	80052f8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000ee8:	2104      	movs	r1, #4
 8000eea:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <Start_Motor+0x64>)
 8000eec:	f005 fb88 	bl	8006600 <HAL_TIMEx_PWMN_Start>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000024c 	.word	0x2000024c

08000efc <Stop_Motor>:

void Stop_Motor(void){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000f00:	2100      	movs	r1, #0
 8000f02:	4808      	ldr	r0, [pc, #32]	; (8000f24 <Stop_Motor+0x28>)
 8000f04:	f004 fb0a 	bl	800551c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <Stop_Motor+0x28>)
 8000f0c:	f005 fc3a 	bl	8006784 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000f10:	2104      	movs	r1, #4
 8000f12:	4804      	ldr	r0, [pc, #16]	; (8000f24 <Stop_Motor+0x28>)
 8000f14:	f004 fb02 	bl	800551c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4802      	ldr	r0, [pc, #8]	; (8000f24 <Stop_Motor+0x28>)
 8000f1c:	f005 fc32 	bl	8006784 <HAL_TIMEx_PWMN_Stop>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000024c 	.word	0x2000024c

08000f28 <UART_Create_Cmd>:
const uint8_t newLine[] = "\r\n>>>";
int idxCmd = 0;
char cmd[CMD_BUFFER_SIZE];
char buffer_cmd[1];

char* UART_Create_Cmd(void){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	if (buffer_cmd[0] == '\r'){
 8000f2c:	4b5c      	ldr	r3, [pc, #368]	; (80010a0 <UART_Create_Cmd+0x178>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b0d      	cmp	r3, #13
 8000f32:	f040 809f 	bne.w	8001074 <UART_Create_Cmd+0x14c>
		if (!(strncmp(cmd,"help",4))){
 8000f36:	2204      	movs	r2, #4
 8000f38:	495a      	ldr	r1, [pc, #360]	; (80010a4 <UART_Create_Cmd+0x17c>)
 8000f3a:	485b      	ldr	r0, [pc, #364]	; (80010a8 <UART_Create_Cmd+0x180>)
 8000f3c:	f007 fed2 	bl	8008ce4 <strncmp>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10e      	bne.n	8000f64 <UART_Create_Cmd+0x3c>
			HAL_UART_Transmit(&huart2, help, 157, HAL_MAX_DELAY);
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	229d      	movs	r2, #157	; 0x9d
 8000f4c:	4957      	ldr	r1, [pc, #348]	; (80010ac <UART_Create_Cmd+0x184>)
 8000f4e:	4858      	ldr	r0, [pc, #352]	; (80010b0 <UART_Create_Cmd+0x188>)
 8000f50:	f005 fe79 	bl	8006c46 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	2205      	movs	r2, #5
 8000f5a:	4956      	ldr	r1, [pc, #344]	; (80010b4 <UART_Create_Cmd+0x18c>)
 8000f5c:	4854      	ldr	r0, [pc, #336]	; (80010b0 <UART_Create_Cmd+0x188>)
 8000f5e:	f005 fe72 	bl	8006c46 <HAL_UART_Transmit>
 8000f62:	e083      	b.n	800106c <UART_Create_Cmd+0x144>
		}else if(!(strncmp(cmd,"pinout",6))){
 8000f64:	2206      	movs	r2, #6
 8000f66:	4954      	ldr	r1, [pc, #336]	; (80010b8 <UART_Create_Cmd+0x190>)
 8000f68:	484f      	ldr	r0, [pc, #316]	; (80010a8 <UART_Create_Cmd+0x180>)
 8000f6a:	f007 febb 	bl	8008ce4 <strncmp>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10e      	bne.n	8000f92 <UART_Create_Cmd+0x6a>
			HAL_UART_Transmit(&huart2, pinout, 88, HAL_MAX_DELAY);
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	2258      	movs	r2, #88	; 0x58
 8000f7a:	4950      	ldr	r1, [pc, #320]	; (80010bc <UART_Create_Cmd+0x194>)
 8000f7c:	484c      	ldr	r0, [pc, #304]	; (80010b0 <UART_Create_Cmd+0x188>)
 8000f7e:	f005 fe62 	bl	8006c46 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	2205      	movs	r2, #5
 8000f88:	494a      	ldr	r1, [pc, #296]	; (80010b4 <UART_Create_Cmd+0x18c>)
 8000f8a:	4849      	ldr	r0, [pc, #292]	; (80010b0 <UART_Create_Cmd+0x188>)
 8000f8c:	f005 fe5b 	bl	8006c46 <HAL_UART_Transmit>
 8000f90:	e06c      	b.n	800106c <UART_Create_Cmd+0x144>
		}else if(!(strncmp(cmd,"start",5))){
 8000f92:	2205      	movs	r2, #5
 8000f94:	494a      	ldr	r1, [pc, #296]	; (80010c0 <UART_Create_Cmd+0x198>)
 8000f96:	4844      	ldr	r0, [pc, #272]	; (80010a8 <UART_Create_Cmd+0x180>)
 8000f98:	f007 fea4 	bl	8008ce4 <strncmp>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d111      	bne.n	8000fc6 <UART_Create_Cmd+0x9e>
			Start_Motor(cmd);
 8000fa2:	4841      	ldr	r0, [pc, #260]	; (80010a8 <UART_Create_Cmd+0x180>)
 8000fa4:	f7ff ff76 	bl	8000e94 <Start_Motor>
			HAL_UART_Transmit(&huart2, powerOn, 23, HAL_MAX_DELAY);
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fac:	2217      	movs	r2, #23
 8000fae:	4945      	ldr	r1, [pc, #276]	; (80010c4 <UART_Create_Cmd+0x19c>)
 8000fb0:	483f      	ldr	r0, [pc, #252]	; (80010b0 <UART_Create_Cmd+0x188>)
 8000fb2:	f005 fe48 	bl	8006c46 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	2205      	movs	r2, #5
 8000fbc:	493d      	ldr	r1, [pc, #244]	; (80010b4 <UART_Create_Cmd+0x18c>)
 8000fbe:	483c      	ldr	r0, [pc, #240]	; (80010b0 <UART_Create_Cmd+0x188>)
 8000fc0:	f005 fe41 	bl	8006c46 <HAL_UART_Transmit>
 8000fc4:	e052      	b.n	800106c <UART_Create_Cmd+0x144>
		}else if(!(strncmp(cmd,"stop",4))){
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	493f      	ldr	r1, [pc, #252]	; (80010c8 <UART_Create_Cmd+0x1a0>)
 8000fca:	4837      	ldr	r0, [pc, #220]	; (80010a8 <UART_Create_Cmd+0x180>)
 8000fcc:	f007 fe8a 	bl	8008ce4 <strncmp>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d110      	bne.n	8000ff8 <UART_Create_Cmd+0xd0>
			Stop_Motor();
 8000fd6:	f7ff ff91 	bl	8000efc <Stop_Motor>
			HAL_UART_Transmit(&huart2, powerOff, 23, HAL_MAX_DELAY);
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	2217      	movs	r2, #23
 8000fe0:	493a      	ldr	r1, [pc, #232]	; (80010cc <UART_Create_Cmd+0x1a4>)
 8000fe2:	4833      	ldr	r0, [pc, #204]	; (80010b0 <UART_Create_Cmd+0x188>)
 8000fe4:	f005 fe2f 	bl	8006c46 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	2205      	movs	r2, #5
 8000fee:	4931      	ldr	r1, [pc, #196]	; (80010b4 <UART_Create_Cmd+0x18c>)
 8000ff0:	482f      	ldr	r0, [pc, #188]	; (80010b0 <UART_Create_Cmd+0x188>)
 8000ff2:	f005 fe28 	bl	8006c46 <HAL_UART_Transmit>
 8000ff6:	e039      	b.n	800106c <UART_Create_Cmd+0x144>
		}else if(!(strncmp(cmd,"speed",5))){
 8000ff8:	2205      	movs	r2, #5
 8000ffa:	4935      	ldr	r1, [pc, #212]	; (80010d0 <UART_Create_Cmd+0x1a8>)
 8000ffc:	482a      	ldr	r0, [pc, #168]	; (80010a8 <UART_Create_Cmd+0x180>)
 8000ffe:	f007 fe71 	bl	8008ce4 <strncmp>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d111      	bne.n	800102c <UART_Create_Cmd+0x104>
			HAL_UART_Transmit(&huart2, speedChanged, 14, HAL_MAX_DELAY);
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	220e      	movs	r2, #14
 800100e:	4931      	ldr	r1, [pc, #196]	; (80010d4 <UART_Create_Cmd+0x1ac>)
 8001010:	4827      	ldr	r0, [pc, #156]	; (80010b0 <UART_Create_Cmd+0x188>)
 8001012:	f005 fe18 	bl	8006c46 <HAL_UART_Transmit>
			Change_Speed(cmd);
 8001016:	4824      	ldr	r0, [pc, #144]	; (80010a8 <UART_Create_Cmd+0x180>)
 8001018:	f7ff feb6 	bl	8000d88 <Change_Speed>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	2205      	movs	r2, #5
 8001022:	4924      	ldr	r1, [pc, #144]	; (80010b4 <UART_Create_Cmd+0x18c>)
 8001024:	4822      	ldr	r0, [pc, #136]	; (80010b0 <UART_Create_Cmd+0x188>)
 8001026:	f005 fe0e 	bl	8006c46 <HAL_UART_Transmit>
 800102a:	e01f      	b.n	800106c <UART_Create_Cmd+0x144>
		}else if(!(strncmp(cmd,"courant",7))){
 800102c:	2207      	movs	r2, #7
 800102e:	492a      	ldr	r1, [pc, #168]	; (80010d8 <UART_Create_Cmd+0x1b0>)
 8001030:	481d      	ldr	r0, [pc, #116]	; (80010a8 <UART_Create_Cmd+0x180>)
 8001032:	f007 fe57 	bl	8008ce4 <strncmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d109      	bne.n	8001050 <UART_Create_Cmd+0x128>
			Mes_Courant();
 800103c:	f7ff fcf8 	bl	8000a30 <Mes_Courant>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	2205      	movs	r2, #5
 8001046:	491b      	ldr	r1, [pc, #108]	; (80010b4 <UART_Create_Cmd+0x18c>)
 8001048:	4819      	ldr	r0, [pc, #100]	; (80010b0 <UART_Create_Cmd+0x188>)
 800104a:	f005 fdfc 	bl	8006c46 <HAL_UART_Transmit>
 800104e:	e00d      	b.n	800106c <UART_Create_Cmd+0x144>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, 17, HAL_MAX_DELAY);
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	2211      	movs	r2, #17
 8001056:	4921      	ldr	r1, [pc, #132]	; (80010dc <UART_Create_Cmd+0x1b4>)
 8001058:	4815      	ldr	r0, [pc, #84]	; (80010b0 <UART_Create_Cmd+0x188>)
 800105a:	f005 fdf4 	bl	8006c46 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	2205      	movs	r2, #5
 8001064:	4913      	ldr	r1, [pc, #76]	; (80010b4 <UART_Create_Cmd+0x18c>)
 8001066:	4812      	ldr	r0, [pc, #72]	; (80010b0 <UART_Create_Cmd+0x188>)
 8001068:	f005 fded 	bl	8006c46 <HAL_UART_Transmit>
		}
		idxCmd = 0;
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <UART_Create_Cmd+0x1b8>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	e011      	b.n	8001098 <UART_Create_Cmd+0x170>
	}else{
		cmd[idxCmd] = buffer_cmd[0];
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <UART_Create_Cmd+0x1b8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <UART_Create_Cmd+0x178>)
 800107a:	7811      	ldrb	r1, [r2, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <UART_Create_Cmd+0x180>)
 800107e:	54d1      	strb	r1, [r2, r3]
		idxCmd += 1;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <UART_Create_Cmd+0x1b8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <UART_Create_Cmd+0x1b8>)
 8001088:	6013      	str	r3, [r2, #0]
		if (idxCmd > CMD_BUFFER_SIZE){
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <UART_Create_Cmd+0x1b8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b20      	cmp	r3, #32
 8001090:	dd02      	ble.n	8001098 <UART_Create_Cmd+0x170>
			idxCmd = 0;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <UART_Create_Cmd+0x1b8>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
		}
	}
	return cmd;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <UART_Create_Cmd+0x180>)
}
 800109a:	4618      	mov	r0, r3
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200001f8 	.word	0x200001f8
 80010a4:	08009620 	.word	0x08009620
 80010a8:	200001d8 	.word	0x200001d8
 80010ac:	080096a8 	.word	0x080096a8
 80010b0:	200002e4 	.word	0x200002e4
 80010b4:	08009818 	.word	0x08009818
 80010b8:	08009628 	.word	0x08009628
 80010bc:	08009748 	.word	0x08009748
 80010c0:	08009630 	.word	0x08009630
 80010c4:	080097a4 	.word	0x080097a4
 80010c8:	08009638 	.word	0x08009638
 80010cc:	080097bc 	.word	0x080097bc
 80010d0:	08009640 	.word	0x08009640
 80010d4:	080097d4 	.word	0x080097d4
 80010d8:	08009648 	.word	0x08009648
 80010dc:	080097e4 	.word	0x080097e4
 80010e0:	200001d4 	.word	0x200001d4

080010e4 <UART_Echo>:

void UART_Echo(void){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	if (buffer_cmd[0] == '\r'){
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <UART_Echo+0x38>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b0d      	cmp	r3, #13
 80010ee:	d107      	bne.n	8001100 <UART_Echo+0x1c>
	  HAL_UART_Transmit(&huart2, newLine, 2, HAL_MAX_DELAY);
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	2202      	movs	r2, #2
 80010f6:	490a      	ldr	r1, [pc, #40]	; (8001120 <UART_Echo+0x3c>)
 80010f8:	480a      	ldr	r0, [pc, #40]	; (8001124 <UART_Echo+0x40>)
 80010fa:	f005 fda4 	bl	8006c46 <HAL_UART_Transmit>
 80010fe:	e006      	b.n	800110e <UART_Echo+0x2a>
	}else{
	  HAL_UART_Transmit(&huart2, buffer_cmd, 1, HAL_MAX_DELAY);
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	2201      	movs	r2, #1
 8001106:	4905      	ldr	r1, [pc, #20]	; (800111c <UART_Echo+0x38>)
 8001108:	4806      	ldr	r0, [pc, #24]	; (8001124 <UART_Echo+0x40>)
 800110a:	f005 fd9c 	bl	8006c46 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 800110e:	2201      	movs	r2, #1
 8001110:	4902      	ldr	r1, [pc, #8]	; (800111c <UART_Echo+0x38>)
 8001112:	4804      	ldr	r0, [pc, #16]	; (8001124 <UART_Echo+0x40>)
 8001114:	f005 fe2e 	bl	8006d74 <HAL_UART_Receive_IT>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200001f8 	.word	0x200001f8
 8001120:	08009818 	.word	0x08009818
 8001124:	200002e4 	.word	0x200002e4

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_MspInit+0x44>)
 8001130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <HAL_MspInit+0x44>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6613      	str	r3, [r2, #96]	; 0x60
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_MspInit+0x44>)
 800113c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_MspInit+0x44>)
 8001148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x44>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	6593      	str	r3, [r2, #88]	; 0x58
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x44>)
 8001154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800115e:	f002 ff65 	bl	800402c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <HAL_InitTick+0xc4>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	4a2b      	ldr	r2, [pc, #172]	; (8001234 <HAL_InitTick+0xc4>)
 8001186:	f043 0310 	orr.w	r3, r3, #16
 800118a:	6593      	str	r3, [r2, #88]	; 0x58
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <HAL_InitTick+0xc4>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001198:	f107 020c 	add.w	r2, r7, #12
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 fc40 	bl	8004a28 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011a8:	f003 fc12 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 80011ac:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b0:	4a21      	ldr	r2, [pc, #132]	; (8001238 <HAL_InitTick+0xc8>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	0c9b      	lsrs	r3, r3, #18
 80011b8:	3b01      	subs	r3, #1
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_InitTick+0xcc>)
 80011be:	4a20      	ldr	r2, [pc, #128]	; (8001240 <HAL_InitTick+0xd0>)
 80011c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HAL_InitTick+0xcc>)
 80011c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <HAL_InitTick+0xcc>)
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_InitTick+0xcc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_InitTick+0xcc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <HAL_InitTick+0xcc>)
 80011de:	f003 fee9 	bl	8004fb4 <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d11b      	bne.n	8001228 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011f0:	4812      	ldr	r0, [pc, #72]	; (800123c <HAL_InitTick+0xcc>)
 80011f2:	f003 ffb1 	bl	8005158 <HAL_TIM_Base_Start_IT>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001200:	2b00      	cmp	r3, #0
 8001202:	d111      	bne.n	8001228 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001204:	2036      	movs	r0, #54	; 0x36
 8001206:	f002 f96f 	bl	80034e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d808      	bhi.n	8001222 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	2036      	movs	r0, #54	; 0x36
 8001216:	f002 f94d 	bl	80034b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_InitTick+0xd4>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e002      	b.n	8001228 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800122c:	4618      	mov	r0, r3
 800122e:	3730      	adds	r7, #48	; 0x30
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000
 8001238:	431bde83 	.word	0x431bde83
 800123c:	200001fc 	.word	0x200001fc
 8001240:	40001000 	.word	0x40001000
 8001244:	20000004 	.word	0x20000004

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <DMA1_Channel1_IRQHandler+0x10>)
 80012a6:	f002 fb10 	bl	80038ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000150 	.word	0x20000150

080012b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <USART2_IRQHandler+0x10>)
 80012ba:	f005 fdb1 	bl	8006e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200002e4 	.word	0x200002e4

080012c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80012cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012d0:	f002 fde4 	bl	8003e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <TIM6_DAC_IRQHandler+0x10>)
 80012de:	f004 f9b9 	bl	8005654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200001fc 	.word	0x200001fc

080012ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f4:	4a14      	ldr	r2, [pc, #80]	; (8001348 <_sbrk+0x5c>)
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <_sbrk+0x60>)
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <_sbrk+0x64>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <_sbrk+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d207      	bcs.n	800132c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800131c:	f007 fcf4 	bl	8008d08 <__errno>
 8001320:	4603      	mov	r3, r0
 8001322:	220c      	movs	r2, #12
 8001324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	e009      	b.n	8001340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <_sbrk+0x64>)
 800133c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20020000 	.word	0x20020000
 800134c:	00000400 	.word	0x00000400
 8001350:	20000248 	.word	0x20000248
 8001354:	20000550 	.word	0x20000550

08001358 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <SystemInit+0x20>)
 800135e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <SystemInit+0x20>)
 8001364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b098      	sub	sp, #96	; 0x60
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001382:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2234      	movs	r2, #52	; 0x34
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f007 fc93 	bl	8008cd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ae:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <MX_TIM1_Init+0x158>)
 80013b0:	4a49      	ldr	r2, [pc, #292]	; (80014d8 <MX_TIM1_Init+0x15c>)
 80013b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80013b4:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <MX_TIM1_Init+0x158>)
 80013b6:	2207      	movs	r2, #7
 80013b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80013ba:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <MX_TIM1_Init+0x158>)
 80013bc:	2220      	movs	r2, #32
 80013be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80013c0:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <MX_TIM1_Init+0x158>)
 80013c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <MX_TIM1_Init+0x158>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ce:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <MX_TIM1_Init+0x158>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d4:	4b3f      	ldr	r3, [pc, #252]	; (80014d4 <MX_TIM1_Init+0x158>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013da:	483e      	ldr	r0, [pc, #248]	; (80014d4 <MX_TIM1_Init+0x158>)
 80013dc:	f003 ff34 	bl	8005248 <HAL_TIM_PWM_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80013e6:	f7ff fcc9 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80013ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013f2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013fc:	4619      	mov	r1, r3
 80013fe:	4835      	ldr	r0, [pc, #212]	; (80014d4 <MX_TIM1_Init+0x158>)
 8001400:	f005 fa1e 	bl	8006840 <HAL_TIMEx_MasterConfigSynchronization>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800140a:	f7ff fcb7 	bl	8000d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140e:	2360      	movs	r3, #96	; 0x60
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 400;
 8001412:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001418:	2300      	movs	r3, #0
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800141c:	2300      	movs	r3, #0
 800141e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	4827      	ldr	r0, [pc, #156]	; (80014d4 <MX_TIM1_Init+0x158>)
 8001436:	f004 fa8d 	bl	8005954 <HAL_TIM_PWM_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001440:	f7ff fc9c 	bl	8000d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001444:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001448:	2204      	movs	r2, #4
 800144a:	4619      	mov	r1, r3
 800144c:	4821      	ldr	r0, [pc, #132]	; (80014d4 <MX_TIM1_Init+0x158>)
 800144e:	f004 fa81 	bl	8005954 <HAL_TIM_PWM_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8001458:	f7ff fc90 	bl	8000d7c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001460:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001464:	2208      	movs	r2, #8
 8001466:	4619      	mov	r1, r3
 8001468:	481a      	ldr	r0, [pc, #104]	; (80014d4 <MX_TIM1_Init+0x158>)
 800146a:	f004 fa73 	bl	8005954 <HAL_TIM_PWM_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001474:	f7ff fc82 	bl	8000d7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 44;
 8001484:	232c      	movs	r3, #44	; 0x2c
 8001486:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800148c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001490:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800149e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4807      	ldr	r0, [pc, #28]	; (80014d4 <MX_TIM1_Init+0x158>)
 80014b6:	f005 fa59 	bl	800696c <HAL_TIMEx_ConfigBreakDeadTime>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80014c0:	f7ff fc5c 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <MX_TIM1_Init+0x158>)
 80014c6:	f000 f8d7 	bl	8001678 <HAL_TIM_MspPostInit>

}
 80014ca:	bf00      	nop
 80014cc:	3760      	adds	r7, #96	; 0x60
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000024c 	.word	0x2000024c
 80014d8:	40012c00 	.word	0x40012c00

080014dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_TIM3_Init+0x90>)
 80014fc:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <MX_TIM3_Init+0x94>)
 80014fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_TIM3_Init+0x90>)
 8001502:	2200      	movs	r2, #0
 8001504:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_TIM3_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_TIM3_Init+0x90>)
 800150e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001512:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_TIM3_Init+0x90>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_TIM3_Init+0x90>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4619      	mov	r1, r3
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_TIM3_Init+0x90>)
 8001538:	f004 ffb3 	bl	80064a2 <HAL_TIMEx_HallSensor_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001542:	f7ff fc1b 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001546:	2350      	movs	r3, #80	; 0x50
 8001548:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_TIM3_Init+0x90>)
 8001554:	f005 f974 	bl	8006840 <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800155e:	f7ff fc0d 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000298 	.word	0x20000298
 8001570:	40000400 	.word	0x40000400

08001574 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_TIM_PWM_MspInit+0x38>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d10b      	bne.n	800159e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158a:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800158c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001590:	6613      	str	r3, [r2, #96]	; 0x60
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40012c00 	.word	0x40012c00
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a26      	ldr	r2, [pc, #152]	; (800166c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d145      	bne.n	8001662 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	4a25      	ldr	r2, [pc, #148]	; (8001670 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6593      	str	r3, [r2, #88]	; 0x58
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a1f      	ldr	r2, [pc, #124]	; (8001670 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a19      	ldr	r2, [pc, #100]	; (8001670 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800161e:	2350      	movs	r3, #80	; 0x50
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800162e:	2302      	movs	r3, #2
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f002 fa94 	bl	8003b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001652:	2302      	movs	r3, #2
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800165e:	f002 fa83 	bl	8003b68 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40000400 	.word	0x40000400
 8001670:	40021000 	.word	0x40021000
 8001674:	48000800 	.word	0x48000800

08001678 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a29      	ldr	r2, [pc, #164]	; (800173c <HAL_TIM_MspPostInit+0xc4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d14b      	bne.n	8001732 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_TIM_MspPostInit+0xc8>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	4a28      	ldr	r2, [pc, #160]	; (8001740 <HAL_TIM_MspPostInit+0xc8>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_TIM_MspPostInit+0xc8>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <HAL_TIM_MspPostInit+0xc8>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	4a22      	ldr	r2, [pc, #136]	; (8001740 <HAL_TIM_MspPostInit+0xc8>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_TIM_MspPostInit+0xc8>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80016ca:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016dc:	2306      	movs	r3, #6
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4817      	ldr	r0, [pc, #92]	; (8001744 <HAL_TIM_MspPostInit+0xcc>)
 80016e8:	f002 fa3e 	bl	8003b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80016ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80016fe:	2304      	movs	r3, #4
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	480e      	ldr	r0, [pc, #56]	; (8001744 <HAL_TIM_MspPostInit+0xcc>)
 800170a:	f002 fa2d 	bl	8003b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800170e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001720:	2306      	movs	r3, #6
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172e:	f002 fa1b 	bl	8003b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40012c00 	.word	0x40012c00
 8001740:	40021000 	.word	0x40021000
 8001744:	48000400 	.word	0x48000400

08001748 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 800174e:	4a23      	ldr	r2, [pc, #140]	; (80017dc <MX_USART2_UART_Init+0x94>)
 8001750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 8001754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001790:	4811      	ldr	r0, [pc, #68]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 8001792:	f005 fa08 	bl	8006ba6 <HAL_UART_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800179c:	f7ff faee 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a0:	2100      	movs	r1, #0
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 80017a4:	f007 f9ab 	bl	8008afe <HAL_UARTEx_SetTxFifoThreshold>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017ae:	f7ff fae5 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4808      	ldr	r0, [pc, #32]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 80017b6:	f007 f9e0 	bl	8008b7a <HAL_UARTEx_SetRxFifoThreshold>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f7ff fadc 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_USART2_UART_Init+0x90>)
 80017c6:	f007 f961 	bl	8008a8c <HAL_UARTEx_DisableFifoMode>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017d0:	f7ff fad4 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200002e4 	.word	0x200002e4
 80017dc:	40004400 	.word	0x40004400

080017e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <MX_USART3_UART_Init+0x90>)
 80017e6:	4a23      	ldr	r2, [pc, #140]	; (8001874 <MX_USART3_UART_Init+0x94>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <MX_USART3_UART_Init+0x90>)
 80017ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <MX_USART3_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <MX_USART3_UART_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <MX_USART3_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <MX_USART3_UART_Init+0x90>)
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <MX_USART3_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <MX_USART3_UART_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <MX_USART3_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_USART3_UART_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <MX_USART3_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001828:	4811      	ldr	r0, [pc, #68]	; (8001870 <MX_USART3_UART_Init+0x90>)
 800182a:	f005 f9bc 	bl	8006ba6 <HAL_UART_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001834:	f7ff faa2 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001838:	2100      	movs	r1, #0
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_USART3_UART_Init+0x90>)
 800183c:	f007 f95f 	bl	8008afe <HAL_UARTEx_SetTxFifoThreshold>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001846:	f7ff fa99 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800184a:	2100      	movs	r1, #0
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <MX_USART3_UART_Init+0x90>)
 800184e:	f007 f994 	bl	8008b7a <HAL_UARTEx_SetRxFifoThreshold>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001858:	f7ff fa90 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_USART3_UART_Init+0x90>)
 800185e:	f007 f915 	bl	8008a8c <HAL_UARTEx_DisableFifoMode>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001868:	f7ff fa88 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000374 	.word	0x20000374
 8001874:	40004800 	.word	0x40004800

08001878 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b0a0      	sub	sp, #128	; 0x80
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001890:	f107 0318 	add.w	r3, r7, #24
 8001894:	2254      	movs	r2, #84	; 0x54
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f007 fa1b 	bl	8008cd4 <memset>
  if(uartHandle->Instance==USART2)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a41      	ldr	r2, [pc, #260]	; (80019a8 <HAL_UART_MspInit+0x130>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d13f      	bne.n	8001928 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b0:	f107 0318 	add.w	r3, r7, #24
 80018b4:	4618      	mov	r0, r3
 80018b6:	f003 f92f 	bl	8004b18 <HAL_RCCEx_PeriphCLKConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018c0:	f7ff fa5c 	bl	8000d7c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c4:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_UART_MspInit+0x134>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	4a38      	ldr	r2, [pc, #224]	; (80019ac <HAL_UART_MspInit+0x134>)
 80018ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ce:	6593      	str	r3, [r2, #88]	; 0x58
 80018d0:	4b36      	ldr	r3, [pc, #216]	; (80019ac <HAL_UART_MspInit+0x134>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	4b33      	ldr	r3, [pc, #204]	; (80019ac <HAL_UART_MspInit+0x134>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	4a32      	ldr	r2, [pc, #200]	; (80019ac <HAL_UART_MspInit+0x134>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <HAL_UART_MspInit+0x134>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018f4:	230c      	movs	r3, #12
 80018f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001904:	2307      	movs	r3, #7
 8001906:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800190c:	4619      	mov	r1, r3
 800190e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001912:	f002 f929 	bl	8003b68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	2026      	movs	r0, #38	; 0x26
 800191c:	f001 fdca 	bl	80034b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001920:	2026      	movs	r0, #38	; 0x26
 8001922:	f001 fde1 	bl	80034e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001926:	e03b      	b.n	80019a0 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a20      	ldr	r2, [pc, #128]	; (80019b0 <HAL_UART_MspInit+0x138>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d136      	bne.n	80019a0 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001932:	2304      	movs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800193a:	f107 0318 	add.w	r3, r7, #24
 800193e:	4618      	mov	r0, r3
 8001940:	f003 f8ea 	bl	8004b18 <HAL_RCCEx_PeriphCLKConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800194a:	f7ff fa17 	bl	8000d7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_UART_MspInit+0x134>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	4a16      	ldr	r2, [pc, #88]	; (80019ac <HAL_UART_MspInit+0x134>)
 8001954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001958:	6593      	str	r3, [r2, #88]	; 0x58
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_UART_MspInit+0x134>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_UART_MspInit+0x134>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <HAL_UART_MspInit+0x134>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_UART_MspInit+0x134>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800197e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001982:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001990:	2307      	movs	r3, #7
 8001992:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001994:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001998:	4619      	mov	r1, r3
 800199a:	4806      	ldr	r0, [pc, #24]	; (80019b4 <HAL_UART_MspInit+0x13c>)
 800199c:	f002 f8e4 	bl	8003b68 <HAL_GPIO_Init>
}
 80019a0:	bf00      	nop
 80019a2:	3780      	adds	r7, #128	; 0x80
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40004400 	.word	0x40004400
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40004800 	.word	0x40004800
 80019b4:	48000800 	.word	0x48000800

080019b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019b8:	480d      	ldr	r0, [pc, #52]	; (80019f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	480d      	ldr	r0, [pc, #52]	; (80019f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019be:	490e      	ldr	r1, [pc, #56]	; (80019f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <LoopForever+0xe>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d4:	4c0b      	ldr	r4, [pc, #44]	; (8001a04 <LoopForever+0x16>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019e2:	f7ff fcb9 	bl	8001358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e6:	f007 f995 	bl	8008d14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ea:	f7ff f909 	bl	8000c00 <main>

080019ee <LoopForever>:

LoopForever:
    b LoopForever
 80019ee:	e7fe      	b.n	80019ee <LoopForever>
  ldr   r0, =_estack
 80019f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80019fc:	080098a4 	.word	0x080098a4
  ldr r2, =_sbss
 8001a00:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001a04:	20000550 	.word	0x20000550

08001a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_2_IRQHandler>

08001a0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f001 fd42 	bl	800349e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a1a:	200f      	movs	r0, #15
 8001a1c:	f7ff fba8 	bl	8001170 <HAL_InitTick>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	e001      	b.n	8001a30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a2c:	f7ff fb7c 	bl	8001128 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a30:	79fb      	ldrb	r3, [r7, #7]

}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_IncTick+0x1c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_IncTick+0x20>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <HAL_IncTick+0x1c>)
 8001a4c:	6013      	str	r3, [r2, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	20000404 	.word	0x20000404
 8001a5c:	20000008 	.word	0x20000008

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000404 	.word	0x20000404

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff ffee 	bl	8001a60 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d004      	beq.n	8001a9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_Delay+0x40>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9c:	bf00      	nop
 8001a9e:	f7ff ffdf 	bl	8001a60 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d8f7      	bhi.n	8001a9e <HAL_Delay+0x26>
  {
  }
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000008 	.word	0x20000008

08001abc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3360      	adds	r3, #96	; 0x60
 8001b36:	461a      	mov	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <LL_ADC_SetOffset+0x44>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	4313      	orrs	r3, r2
 8001b54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b5c:	bf00      	nop
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	03fff000 	.word	0x03fff000

08001b6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3360      	adds	r3, #96	; 0x60
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3360      	adds	r3, #96	; 0x60
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bc2:	bf00      	nop
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b087      	sub	sp, #28
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3360      	adds	r3, #96	; 0x60
 8001bde:	461a      	mov	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3360      	adds	r3, #96	; 0x60
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	615a      	str	r2, [r3, #20]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b087      	sub	sp, #28
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3330      	adds	r3, #48	; 0x30
 8001c96:	461a      	mov	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	4413      	add	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	211f      	movs	r1, #31
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	401a      	ands	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	0e9b      	lsrs	r3, r3, #26
 8001cbe:	f003 011f 	and.w	r1, r3, #31
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cd2:	bf00      	nop
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b087      	sub	sp, #28
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3314      	adds	r3, #20
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	0e5b      	lsrs	r3, r3, #25
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	0d1b      	lsrs	r3, r3, #20
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	2107      	movs	r1, #7
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	401a      	ands	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	0d1b      	lsrs	r3, r3, #20
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	431a      	orrs	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d28:	bf00      	nop
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d10a      	bne.n	8001d5e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d54:	431a      	orrs	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	407f0000 	.word	0x407f0000

08001d84 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 031f 	and.w	r3, r3, #31
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001db0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6093      	str	r3, [r2, #8]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dd8:	d101      	bne.n	8001dde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001dfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e28:	d101      	bne.n	8001e2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e78:	f043 0202 	orr.w	r2, r3, #2
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <LL_ADC_IsEnabled+0x18>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <LL_ADC_IsEnabled+0x1a>
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d101      	bne.n	8001eca <LL_ADC_IsDisableOngoing+0x18>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <LL_ADC_IsDisableOngoing+0x1a>
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ee8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eec:	f043 0204 	orr.w	r2, r3, #4
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d101      	bne.n	8001f18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d101      	bne.n	8001f3e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e1af      	b.n	80022c6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe fc01 	bl	800077c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff19 	bl	8001dc4 <LL_ADC_IsDeepPowerDownEnabled>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff feff 	bl	8001da0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff34 	bl	8001e14 <LL_ADC_IsInternalRegulatorEnabled>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d115      	bne.n	8001fde <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff18 	bl	8001dec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fbc:	4b9f      	ldr	r3, [pc, #636]	; (800223c <HAL_ADC_Init+0x2f0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	4a9f      	ldr	r2, [pc, #636]	; (8002240 <HAL_ADC_Init+0x2f4>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	099b      	lsrs	r3, r3, #6
 8001fca:	3301      	adds	r3, #1
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fd0:	e002      	b.n	8001fd8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f9      	bne.n	8001fd2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff16 	bl	8001e14 <LL_ADC_IsInternalRegulatorEnabled>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10d      	bne.n	800200a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	f043 0210 	orr.w	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff76 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 8002014:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 8148 	bne.w	80022b4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 8144 	bne.w	80022b4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002034:	f043 0202 	orr.w	r2, r3, #2
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff23 	bl	8001e8c <LL_ADC_IsEnabled>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d141      	bne.n	80020d0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002054:	d004      	beq.n	8002060 <HAL_ADC_Init+0x114>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a7a      	ldr	r2, [pc, #488]	; (8002244 <HAL_ADC_Init+0x2f8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d10f      	bne.n	8002080 <HAL_ADC_Init+0x134>
 8002060:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002064:	f7ff ff12 	bl	8001e8c <LL_ADC_IsEnabled>
 8002068:	4604      	mov	r4, r0
 800206a:	4876      	ldr	r0, [pc, #472]	; (8002244 <HAL_ADC_Init+0x2f8>)
 800206c:	f7ff ff0e 	bl	8001e8c <LL_ADC_IsEnabled>
 8002070:	4603      	mov	r3, r0
 8002072:	4323      	orrs	r3, r4
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e012      	b.n	80020a6 <HAL_ADC_Init+0x15a>
 8002080:	4871      	ldr	r0, [pc, #452]	; (8002248 <HAL_ADC_Init+0x2fc>)
 8002082:	f7ff ff03 	bl	8001e8c <LL_ADC_IsEnabled>
 8002086:	4604      	mov	r4, r0
 8002088:	4870      	ldr	r0, [pc, #448]	; (800224c <HAL_ADC_Init+0x300>)
 800208a:	f7ff feff 	bl	8001e8c <LL_ADC_IsEnabled>
 800208e:	4603      	mov	r3, r0
 8002090:	431c      	orrs	r4, r3
 8002092:	486f      	ldr	r0, [pc, #444]	; (8002250 <HAL_ADC_Init+0x304>)
 8002094:	f7ff fefa 	bl	8001e8c <LL_ADC_IsEnabled>
 8002098:	4603      	mov	r3, r0
 800209a:	4323      	orrs	r3, r4
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d012      	beq.n	80020d0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b2:	d004      	beq.n	80020be <HAL_ADC_Init+0x172>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a62      	ldr	r2, [pc, #392]	; (8002244 <HAL_ADC_Init+0x2f8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_Init+0x176>
 80020be:	4a65      	ldr	r2, [pc, #404]	; (8002254 <HAL_ADC_Init+0x308>)
 80020c0:	e000      	b.n	80020c4 <HAL_ADC_Init+0x178>
 80020c2:	4a65      	ldr	r2, [pc, #404]	; (8002258 <HAL_ADC_Init+0x30c>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f7ff fcf6 	bl	8001abc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7f5b      	ldrb	r3, [r3, #29]
 80020d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80020e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80020e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d106      	bne.n	800210c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	3b01      	subs	r3, #1
 8002104:	045b      	lsls	r3, r3, #17
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d009      	beq.n	8002128 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	4b4b      	ldr	r3, [pc, #300]	; (800225c <HAL_ADC_Init+0x310>)
 8002130:	4013      	ands	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	430b      	orrs	r3, r1
 800213a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fed2 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 800215c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fedf 	bl	8001f26 <LL_ADC_INJ_IsConversionOngoing>
 8002168:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d17f      	bne.n	8002270 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d17c      	bne.n	8002270 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800217a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002182:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002192:	f023 0302 	bic.w	r3, r3, #2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	69b9      	ldr	r1, [r7, #24]
 800219c:	430b      	orrs	r3, r1
 800219e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d017      	beq.n	80021d8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80021c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6911      	ldr	r1, [r2, #16]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	430b      	orrs	r3, r1
 80021d2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80021d6:	e013      	b.n	8002200 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021fc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002206:	2b01      	cmp	r3, #1
 8002208:	d12a      	bne.n	8002260 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002214:	f023 0304 	bic.w	r3, r3, #4
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002220:	4311      	orrs	r1, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002226:	4311      	orrs	r1, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800222c:	430a      	orrs	r2, r1
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	611a      	str	r2, [r3, #16]
 800223a:	e019      	b.n	8002270 <HAL_ADC_Init+0x324>
 800223c:	20000000 	.word	0x20000000
 8002240:	053e2d63 	.word	0x053e2d63
 8002244:	50000100 	.word	0x50000100
 8002248:	50000400 	.word	0x50000400
 800224c:	50000500 	.word	0x50000500
 8002250:	50000600 	.word	0x50000600
 8002254:	50000300 	.word	0x50000300
 8002258:	50000700 	.word	0x50000700
 800225c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d10c      	bne.n	8002292 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f023 010f 	bic.w	r1, r3, #15
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	1e5a      	subs	r2, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
 8002290:	e007      	b.n	80022a2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 020f 	bic.w	r2, r2, #15
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	f023 0303 	bic.w	r3, r3, #3
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80022b2:	e007      	b.n	80022c4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	f043 0210 	orr.w	r2, r3, #16
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	; 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd90      	pop	{r4, r7, pc}
 80022ce:	bf00      	nop

080022d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e4:	d004      	beq.n	80022f0 <HAL_ADC_Start_DMA+0x20>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a5a      	ldr	r2, [pc, #360]	; (8002454 <HAL_ADC_Start_DMA+0x184>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_Start_DMA+0x24>
 80022f0:	4b59      	ldr	r3, [pc, #356]	; (8002458 <HAL_ADC_Start_DMA+0x188>)
 80022f2:	e000      	b.n	80022f6 <HAL_ADC_Start_DMA+0x26>
 80022f4:	4b59      	ldr	r3, [pc, #356]	; (800245c <HAL_ADC_Start_DMA+0x18c>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fd44 	bl	8001d84 <LL_ADC_GetMultimode>
 80022fc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fdfc 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 809b 	bne.w	8002446 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_ADC_Start_DMA+0x4e>
 800231a:	2302      	movs	r3, #2
 800231c:	e096      	b.n	800244c <HAL_ADC_Start_DMA+0x17c>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a4d      	ldr	r2, [pc, #308]	; (8002460 <HAL_ADC_Start_DMA+0x190>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d008      	beq.n	8002342 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	2b05      	cmp	r3, #5
 800233a:	d002      	beq.n	8002342 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	2b09      	cmp	r3, #9
 8002340:	d17a      	bne.n	8002438 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fcec 	bl	8002d20 <ADC_Enable>
 8002348:	4603      	mov	r3, r0
 800234a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800234c:	7dfb      	ldrb	r3, [r7, #23]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d16d      	bne.n	800242e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002356:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800235a:	f023 0301 	bic.w	r3, r3, #1
 800235e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <HAL_ADC_Start_DMA+0x184>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d009      	beq.n	8002384 <HAL_ADC_Start_DMA+0xb4>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a3b      	ldr	r2, [pc, #236]	; (8002464 <HAL_ADC_Start_DMA+0x194>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d002      	beq.n	8002380 <HAL_ADC_Start_DMA+0xb0>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	e003      	b.n	8002388 <HAL_ADC_Start_DMA+0xb8>
 8002380:	4b39      	ldr	r3, [pc, #228]	; (8002468 <HAL_ADC_Start_DMA+0x198>)
 8002382:	e001      	b.n	8002388 <HAL_ADC_Start_DMA+0xb8>
 8002384:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	4293      	cmp	r3, r2
 800238e:	d002      	beq.n	8002396 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d105      	bne.n	80023a2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b2:	f023 0206 	bic.w	r2, r3, #6
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	661a      	str	r2, [r3, #96]	; 0x60
 80023ba:	e002      	b.n	80023c2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c6:	4a29      	ldr	r2, [pc, #164]	; (800246c <HAL_ADC_Start_DMA+0x19c>)
 80023c8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	4a28      	ldr	r2, [pc, #160]	; (8002470 <HAL_ADC_Start_DMA+0x1a0>)
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	4a27      	ldr	r2, [pc, #156]	; (8002474 <HAL_ADC_Start_DMA+0x1a4>)
 80023d8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	221c      	movs	r2, #28
 80023e0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0210 	orr.w	r2, r2, #16
 80023f8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3340      	adds	r3, #64	; 0x40
 8002414:	4619      	mov	r1, r3
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f001 f91b 	bl	8003654 <HAL_DMA_Start_IT>
 800241e:	4603      	mov	r3, r0
 8002420:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fd56 	bl	8001ed8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800242c:	e00d      	b.n	800244a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002436:	e008      	b.n	800244a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002444:	e001      	b.n	800244a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002446:	2302      	movs	r3, #2
 8002448:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800244a:	7dfb      	ldrb	r3, [r7, #23]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	50000100 	.word	0x50000100
 8002458:	50000300 	.word	0x50000300
 800245c:	50000700 	.word	0x50000700
 8002460:	50000600 	.word	0x50000600
 8002464:	50000500 	.word	0x50000500
 8002468:	50000400 	.word	0x50000400
 800246c:	08002ea3 	.word	0x08002ea3
 8002470:	08002f7b 	.word	0x08002f7b
 8002474:	08002f97 	.word	0x08002f97

08002478 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b0b6      	sub	sp, #216	; 0xd8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d102      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x24>
 80024be:	2302      	movs	r3, #2
 80024c0:	f000 bc13 	b.w	8002cea <HAL_ADC_ConfigChannel+0x84a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fd15 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f040 83f3 	bne.w	8002cc4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f7ff fbcb 	bl	8001c86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fd03 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 80024fa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fd0f 	bl	8001f26 <LL_ADC_INJ_IsConversionOngoing>
 8002508:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800250c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 81d9 	bne.w	80028c8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002516:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 81d4 	bne.w	80028c8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002528:	d10f      	bne.n	800254a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2200      	movs	r2, #0
 8002534:	4619      	mov	r1, r3
 8002536:	f7ff fbd2 	bl	8001cde <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fb79 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonConfig>
 8002548:	e00e      	b.n	8002568 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6819      	ldr	r1, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	461a      	mov	r2, r3
 8002558:	f7ff fbc1 	bl	8001cde <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fb69 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	08db      	lsrs	r3, r3, #3
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b04      	cmp	r3, #4
 8002588:	d022      	beq.n	80025d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6919      	ldr	r1, [r3, #16]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800259a:	f7ff fac3 	bl	8001b24 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6919      	ldr	r1, [r3, #16]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	461a      	mov	r2, r3
 80025ac:	f7ff fb0f 	bl	8001bce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6919      	ldr	r1, [r3, #16]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	7f1b      	ldrb	r3, [r3, #28]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d102      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x126>
 80025c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c4:	e000      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x128>
 80025c6:	2300      	movs	r3, #0
 80025c8:	461a      	mov	r2, r3
 80025ca:	f7ff fb1b 	bl	8001c04 <LL_ADC_SetOffsetSaturation>
 80025ce:	e17b      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fac8 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80025dc:	4603      	mov	r3, r0
 80025de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10a      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x15c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fabd 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80025f2:	4603      	mov	r3, r0
 80025f4:	0e9b      	lsrs	r3, r3, #26
 80025f6:	f003 021f 	and.w	r2, r3, #31
 80025fa:	e01e      	b.n	800263a <HAL_ADC_ConfigChannel+0x19a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fab2 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002608:	4603      	mov	r3, r0
 800260a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800261a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800261e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002622:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800262a:	2320      	movs	r3, #32
 800262c:	e004      	b.n	8002638 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800262e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002642:	2b00      	cmp	r3, #0
 8002644:	d105      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x1b2>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	0e9b      	lsrs	r3, r3, #26
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	e018      	b.n	8002684 <HAL_ADC_ConfigChannel+0x1e4>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800266a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800266e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002676:	2320      	movs	r3, #32
 8002678:	e004      	b.n	8002684 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800267a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002684:	429a      	cmp	r2, r3
 8002686:	d106      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fa81 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2101      	movs	r1, #1
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fa65 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10a      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x222>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fa5a 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	0e9b      	lsrs	r3, r3, #26
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	e01e      	b.n	8002700 <HAL_ADC_ConfigChannel+0x260>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2101      	movs	r1, #1
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fa4f 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80026e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80026e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80026f0:	2320      	movs	r3, #32
 80026f2:	e004      	b.n	80026fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80026f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x278>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	e018      	b.n	800274a <HAL_ADC_ConfigChannel+0x2aa>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002724:	fa93 f3a3 	rbit	r3, r3
 8002728:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800272c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800273c:	2320      	movs	r3, #32
 800273e:	e004      	b.n	800274a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002740:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800274a:	429a      	cmp	r2, r3
 800274c:	d106      	bne.n	800275c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2200      	movs	r2, #0
 8002754:	2101      	movs	r1, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fa1e 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2102      	movs	r1, #2
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fa02 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002768:	4603      	mov	r3, r0
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10a      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x2e8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2102      	movs	r1, #2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff f9f7 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800277e:	4603      	mov	r3, r0
 8002780:	0e9b      	lsrs	r3, r3, #26
 8002782:	f003 021f 	and.w	r2, r3, #31
 8002786:	e01e      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x326>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2102      	movs	r1, #2
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff f9ec 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80027a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80027ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80027b6:	2320      	movs	r3, #32
 80027b8:	e004      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80027ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d105      	bne.n	80027de <HAL_ADC_ConfigChannel+0x33e>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	0e9b      	lsrs	r3, r3, #26
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	e016      	b.n	800280c <HAL_ADC_ConfigChannel+0x36c>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80027fe:	2320      	movs	r3, #32
 8002800:	e004      	b.n	800280c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800280c:	429a      	cmp	r2, r3
 800280e:	d106      	bne.n	800281e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	2102      	movs	r1, #2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f9bd 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2103      	movs	r1, #3
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff f9a1 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <HAL_ADC_ConfigChannel+0x3aa>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2103      	movs	r1, #3
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f996 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	0e9b      	lsrs	r3, r3, #26
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	e017      	b.n	800287a <HAL_ADC_ConfigChannel+0x3da>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2103      	movs	r1, #3
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff f98b 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002864:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800286c:	2320      	movs	r3, #32
 800286e:	e003      	b.n	8002878 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x3f2>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	e011      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x416>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80028a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80028a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80028aa:	2320      	movs	r3, #32
 80028ac:	e003      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80028ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d106      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2200      	movs	r2, #0
 80028c0:	2103      	movs	r1, #3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f968 	bl	8001b98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fadd 	bl	8001e8c <LL_ADC_IsEnabled>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f040 813d 	bne.w	8002b54 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6819      	ldr	r1, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f7ff fa24 	bl	8001d34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4aa2      	ldr	r2, [pc, #648]	; (8002b7c <HAL_ADC_ConfigChannel+0x6dc>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	f040 812e 	bne.w	8002b54 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10b      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x480>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0e9b      	lsrs	r3, r3, #26
 800290e:	3301      	adds	r3, #1
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2b09      	cmp	r3, #9
 8002916:	bf94      	ite	ls
 8002918:	2301      	movls	r3, #1
 800291a:	2300      	movhi	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e019      	b.n	8002954 <HAL_ADC_ConfigChannel+0x4b4>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800292e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002930:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002938:	2320      	movs	r3, #32
 800293a:	e003      	b.n	8002944 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800293c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	3301      	adds	r3, #1
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	2b09      	cmp	r3, #9
 800294c:	bf94      	ite	ls
 800294e:	2301      	movls	r3, #1
 8002950:	2300      	movhi	r3, #0
 8002952:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002954:	2b00      	cmp	r3, #0
 8002956:	d079      	beq.n	8002a4c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x4d4>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	3301      	adds	r3, #1
 800296c:	069b      	lsls	r3, r3, #26
 800296e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002972:	e015      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x500>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002984:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e003      	b.n	8002998 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	3301      	adds	r3, #1
 800299a:	069b      	lsls	r3, r3, #26
 800299c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x520>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	3301      	adds	r3, #1
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2101      	movs	r1, #1
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	e017      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x550>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80029ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80029d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80029d8:	2320      	movs	r3, #32
 80029da:	e003      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80029dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	3301      	adds	r3, #1
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	ea42 0103 	orr.w	r1, r2, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x576>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0e9b      	lsrs	r3, r3, #26
 8002a06:	3301      	adds	r3, #1
 8002a08:	f003 021f 	and.w	r2, r3, #31
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	051b      	lsls	r3, r3, #20
 8002a14:	e018      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x5a8>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f003 021f 	and.w	r2, r3, #31
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	e07e      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d107      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x5c8>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0e9b      	lsrs	r3, r3, #26
 8002a5e:	3301      	adds	r3, #1
 8002a60:	069b      	lsls	r3, r3, #26
 8002a62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a66:	e015      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x5f4>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e003      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	069b      	lsls	r3, r3, #26
 8002a90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d109      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x614>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	2101      	movs	r1, #1
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	e017      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x644>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	61fb      	str	r3, [r7, #28]
  return result;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002acc:	2320      	movs	r3, #32
 8002ace:	e003      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	ea42 0103 	orr.w	r1, r2, r3
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10d      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x670>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0e9b      	lsrs	r3, r3, #26
 8002afa:	3301      	adds	r3, #1
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	3b1e      	subs	r3, #30
 8002b08:	051b      	lsls	r3, r3, #20
 8002b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	e01b      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x6a8>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	613b      	str	r3, [r7, #16]
  return result;
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002b28:	2320      	movs	r3, #32
 8002b2a:	e003      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f003 021f 	and.w	r2, r3, #31
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	3b1e      	subs	r3, #30
 8002b42:	051b      	lsls	r3, r3, #20
 8002b44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	6892      	ldr	r2, [r2, #8]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f7ff f8c5 	bl	8001cde <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_ADC_ConfigChannel+0x6e0>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80be 	beq.w	8002cde <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b6a:	d004      	beq.n	8002b76 <HAL_ADC_ConfigChannel+0x6d6>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <HAL_ADC_ConfigChannel+0x6e4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10a      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x6ec>
 8002b76:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <HAL_ADC_ConfigChannel+0x6e8>)
 8002b78:	e009      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x6ee>
 8002b7a:	bf00      	nop
 8002b7c:	407f0000 	.word	0x407f0000
 8002b80:	80080000 	.word	0x80080000
 8002b84:	50000100 	.word	0x50000100
 8002b88:	50000300 	.word	0x50000300
 8002b8c:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_ADC_ConfigChannel+0x854>)
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe ffba 	bl	8001b08 <LL_ADC_GetCommonPathInternalCh>
 8002b94:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a56      	ldr	r2, [pc, #344]	; (8002cf8 <HAL_ADC_ConfigChannel+0x858>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_ADC_ConfigChannel+0x70c>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a55      	ldr	r2, [pc, #340]	; (8002cfc <HAL_ADC_ConfigChannel+0x85c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d13a      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d134      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc0:	d005      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x72e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a4e      	ldr	r2, [pc, #312]	; (8002d00 <HAL_ADC_ConfigChannel+0x860>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	f040 8085 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd6:	d004      	beq.n	8002be2 <HAL_ADC_ConfigChannel+0x742>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a49      	ldr	r2, [pc, #292]	; (8002d04 <HAL_ADC_ConfigChannel+0x864>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x746>
 8002be2:	4a49      	ldr	r2, [pc, #292]	; (8002d08 <HAL_ADC_ConfigChannel+0x868>)
 8002be4:	e000      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x748>
 8002be6:	4a43      	ldr	r2, [pc, #268]	; (8002cf4 <HAL_ADC_ConfigChannel+0x854>)
 8002be8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	f7fe ff75 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bf8:	4b44      	ldr	r3, [pc, #272]	; (8002d0c <HAL_ADC_ConfigChannel+0x86c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	099b      	lsrs	r3, r3, #6
 8002bfe:	4a44      	ldr	r2, [pc, #272]	; (8002d10 <HAL_ADC_ConfigChannel+0x870>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c12:	e002      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f9      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c20:	e05a      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a3b      	ldr	r2, [pc, #236]	; (8002d14 <HAL_ADC_ConfigChannel+0x874>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d125      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x7d8>
 8002c2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d11f      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a31      	ldr	r2, [pc, #196]	; (8002d04 <HAL_ADC_ConfigChannel+0x864>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d104      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x7ac>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a34      	ldr	r2, [pc, #208]	; (8002d18 <HAL_ADC_ConfigChannel+0x878>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d047      	beq.n	8002cdc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c54:	d004      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0x7c0>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2a      	ldr	r2, [pc, #168]	; (8002d04 <HAL_ADC_ConfigChannel+0x864>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x7c4>
 8002c60:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <HAL_ADC_ConfigChannel+0x868>)
 8002c62:	e000      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x7c6>
 8002c64:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <HAL_ADC_ConfigChannel+0x854>)
 8002c66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4610      	mov	r0, r2
 8002c72:	f7fe ff36 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c76:	e031      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a27      	ldr	r2, [pc, #156]	; (8002d1c <HAL_ADC_ConfigChannel+0x87c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d12d      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d127      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <HAL_ADC_ConfigChannel+0x864>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d022      	beq.n	8002cde <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ca0:	d004      	beq.n	8002cac <HAL_ADC_ConfigChannel+0x80c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <HAL_ADC_ConfigChannel+0x864>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x810>
 8002cac:	4a16      	ldr	r2, [pc, #88]	; (8002d08 <HAL_ADC_ConfigChannel+0x868>)
 8002cae:	e000      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x812>
 8002cb0:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <HAL_ADC_ConfigChannel+0x854>)
 8002cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	f7fe ff10 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
 8002cc2:	e00c      	b.n	8002cde <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	f043 0220 	orr.w	r2, r3, #32
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002cd6:	e002      	b.n	8002cde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ce6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	37d8      	adds	r7, #216	; 0xd8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	50000700 	.word	0x50000700
 8002cf8:	c3210000 	.word	0xc3210000
 8002cfc:	90c00010 	.word	0x90c00010
 8002d00:	50000600 	.word	0x50000600
 8002d04:	50000100 	.word	0x50000100
 8002d08:	50000300 	.word	0x50000300
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	053e2d63 	.word	0x053e2d63
 8002d14:	c7520000 	.word	0xc7520000
 8002d18:	50000500 	.word	0x50000500
 8002d1c:	cb840000 	.word	0xcb840000

08002d20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff f8ad 	bl	8001e8c <LL_ADC_IsEnabled>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d14d      	bne.n	8002dd4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <ADC_Enable+0xc0>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00d      	beq.n	8002d62 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	f043 0210 	orr.w	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e039      	b.n	8002dd6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f868 	bl	8001e3c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d6c:	f7fe fe78 	bl	8001a60 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d72:	e028      	b.n	8002dc6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff f887 	bl	8001e8c <LL_ADC_IsEnabled>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d104      	bne.n	8002d8e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff f857 	bl	8001e3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d8e:	f7fe fe67 	bl	8001a60 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d914      	bls.n	8002dc6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d00d      	beq.n	8002dc6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dae:	f043 0210 	orr.w	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dba:	f043 0201 	orr.w	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e007      	b.n	8002dd6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d1cf      	bne.n	8002d74 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	8000003f 	.word	0x8000003f

08002de4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff f85e 	bl	8001eb2 <LL_ADC_IsDisableOngoing>
 8002df6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff f845 	bl	8001e8c <LL_ADC_IsEnabled>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d047      	beq.n	8002e98 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d144      	bne.n	8002e98 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 030d 	and.w	r3, r3, #13
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d10c      	bne.n	8002e36 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff f81f 	bl	8001e64 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e2e:	f7fe fe17 	bl	8001a60 <HAL_GetTick>
 8002e32:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e34:	e029      	b.n	8002e8a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3a:	f043 0210 	orr.w	r2, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e46:	f043 0201 	orr.w	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e023      	b.n	8002e9a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e52:	f7fe fe05 	bl	8001a60 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d914      	bls.n	8002e8a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00d      	beq.n	8002e8a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	f043 0210 	orr.w	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e007      	b.n	8002e9a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1dc      	bne.n	8002e52 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d14b      	bne.n	8002f54 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d021      	beq.n	8002f1a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe fec0 	bl	8001c60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d032      	beq.n	8002f4c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d12b      	bne.n	8002f4c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d11f      	bne.n	8002f4c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f18:	e018      	b.n	8002f4c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d111      	bne.n	8002f4c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7fd fef9 	bl	8000d44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f52:	e00e      	b.n	8002f72 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f7ff fa93 	bl	800248c <HAL_ADC_ErrorCallback>
}
 8002f66:	e004      	b.n	8002f72 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	4798      	blx	r3
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7ff fa75 	bl	8002478 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb4:	f043 0204 	orr.w	r2, r3, #4
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff fa65 	bl	800248c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fc2:	bf00      	nop
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <LL_ADC_IsEnabled>:
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <LL_ADC_IsEnabled+0x18>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <LL_ADC_IsEnabled+0x1a>
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_ADC_StartCalibration>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003002:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800300c:	4313      	orrs	r3, r2
 800300e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	609a      	str	r2, [r3, #8]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_ADC_IsCalibrationOnGoing>:
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003032:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003036:	d101      	bne.n	800303c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_ADC_REG_IsConversionOngoing>:
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b04      	cmp	r3, #4
 800305c:	d101      	bne.n	8003062 <LL_ADC_REG_IsConversionOngoing+0x18>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_ADCEx_Calibration_Start+0x1c>
 8003088:	2302      	movs	r3, #2
 800308a:	e04d      	b.n	8003128 <HAL_ADCEx_Calibration_Start+0xb8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff fea5 	bl	8002de4 <ADC_Disable>
 800309a:	4603      	mov	r3, r0
 800309c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d136      	bne.n	8003112 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030ac:	f023 0302 	bic.w	r3, r3, #2
 80030b0:	f043 0202 	orr.w	r2, r3, #2
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6839      	ldr	r1, [r7, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ff96 	bl	8002ff0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030c4:	e014      	b.n	80030f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3301      	adds	r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4a18      	ldr	r2, [pc, #96]	; (8003130 <HAL_ADCEx_Calibration_Start+0xc0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d90d      	bls.n	80030f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d8:	f023 0312 	bic.w	r3, r3, #18
 80030dc:	f043 0210 	orr.w	r2, r3, #16
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e01b      	b.n	8003128 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff94 	bl	8003022 <LL_ADC_IsCalibrationOnGoing>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e2      	bne.n	80030c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	f023 0303 	bic.w	r3, r3, #3
 8003108:	f043 0201 	orr.w	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003110:	e005      	b.n	800311e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003116:	f043 0210 	orr.w	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	0004de01 	.word	0x0004de01

08003134 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b0a1      	sub	sp, #132	; 0x84
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800314e:	2302      	movs	r3, #2
 8003150:	e0e7      	b.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800315a:	2300      	movs	r3, #0
 800315c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800315e:	2300      	movs	r3, #0
 8003160:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800316a:	d102      	bne.n	8003172 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800316c:	4b6f      	ldr	r3, [pc, #444]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	e009      	b.n	8003186 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a6e      	ldr	r2, [pc, #440]	; (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d102      	bne.n	8003182 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800317c:	4b6d      	ldr	r3, [pc, #436]	; (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	e001      	b.n	8003186 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	f043 0220 	orr.w	r2, r3, #32
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0be      	b.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff4f 	bl	800304a <LL_ADC_REG_IsConversionOngoing>
 80031ac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff49 	bl	800304a <LL_ADC_REG_IsConversionOngoing>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 80a0 	bne.w	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80031c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f040 809c 	bne.w	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d0:	d004      	beq.n	80031dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a55      	ldr	r2, [pc, #340]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80031dc:	4b56      	ldr	r3, [pc, #344]	; (8003338 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80031de:	e000      	b.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80031e0:	4b56      	ldr	r3, [pc, #344]	; (800333c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80031e2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d04b      	beq.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031fe:	035b      	lsls	r3, r3, #13
 8003200:	430b      	orrs	r3, r1
 8003202:	431a      	orrs	r2, r3
 8003204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003206:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003210:	d004      	beq.n	800321c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a45      	ldr	r2, [pc, #276]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d10f      	bne.n	800323c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800321c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003220:	f7ff fed3 	bl	8002fca <LL_ADC_IsEnabled>
 8003224:	4604      	mov	r4, r0
 8003226:	4841      	ldr	r0, [pc, #260]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003228:	f7ff fecf 	bl	8002fca <LL_ADC_IsEnabled>
 800322c:	4603      	mov	r3, r0
 800322e:	4323      	orrs	r3, r4
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e012      	b.n	8003262 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800323c:	483c      	ldr	r0, [pc, #240]	; (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800323e:	f7ff fec4 	bl	8002fca <LL_ADC_IsEnabled>
 8003242:	4604      	mov	r4, r0
 8003244:	483b      	ldr	r0, [pc, #236]	; (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003246:	f7ff fec0 	bl	8002fca <LL_ADC_IsEnabled>
 800324a:	4603      	mov	r3, r0
 800324c:	431c      	orrs	r4, r3
 800324e:	483c      	ldr	r0, [pc, #240]	; (8003340 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003250:	f7ff febb 	bl	8002fca <LL_ADC_IsEnabled>
 8003254:	4603      	mov	r3, r0
 8003256:	4323      	orrs	r3, r4
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d056      	beq.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800326e:	f023 030f 	bic.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	6811      	ldr	r1, [r2, #0]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	6892      	ldr	r2, [r2, #8]
 800327a:	430a      	orrs	r2, r1
 800327c:	431a      	orrs	r2, r3
 800327e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003280:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003282:	e047      	b.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800328c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800328e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003298:	d004      	beq.n	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a23      	ldr	r2, [pc, #140]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d10f      	bne.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80032a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032a8:	f7ff fe8f 	bl	8002fca <LL_ADC_IsEnabled>
 80032ac:	4604      	mov	r4, r0
 80032ae:	481f      	ldr	r0, [pc, #124]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032b0:	f7ff fe8b 	bl	8002fca <LL_ADC_IsEnabled>
 80032b4:	4603      	mov	r3, r0
 80032b6:	4323      	orrs	r3, r4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e012      	b.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80032c4:	481a      	ldr	r0, [pc, #104]	; (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032c6:	f7ff fe80 	bl	8002fca <LL_ADC_IsEnabled>
 80032ca:	4604      	mov	r4, r0
 80032cc:	4819      	ldr	r0, [pc, #100]	; (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032ce:	f7ff fe7c 	bl	8002fca <LL_ADC_IsEnabled>
 80032d2:	4603      	mov	r3, r0
 80032d4:	431c      	orrs	r4, r3
 80032d6:	481a      	ldr	r0, [pc, #104]	; (8003340 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80032d8:	f7ff fe77 	bl	8002fca <LL_ADC_IsEnabled>
 80032dc:	4603      	mov	r3, r0
 80032de:	4323      	orrs	r3, r4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d012      	beq.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032f6:	f023 030f 	bic.w	r3, r3, #15
 80032fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80032fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032fe:	e009      	b.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003312:	e000      	b.n	8003316 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003314:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800331e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003322:	4618      	mov	r0, r3
 8003324:	3784      	adds	r7, #132	; 0x84
 8003326:	46bd      	mov	sp, r7
 8003328:	bd90      	pop	{r4, r7, pc}
 800332a:	bf00      	nop
 800332c:	50000100 	.word	0x50000100
 8003330:	50000400 	.word	0x50000400
 8003334:	50000500 	.word	0x50000500
 8003338:	50000300 	.word	0x50000300
 800333c:	50000700 	.word	0x50000700
 8003340:	50000600 	.word	0x50000600

08003344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003360:	4013      	ands	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800336c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003376:	4a04      	ldr	r2, [pc, #16]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	60d3      	str	r3, [r2, #12]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	f003 0307 	and.w	r3, r3, #7
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	db0b      	blt.n	80033d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	4907      	ldr	r1, [pc, #28]	; (80033e0 <__NVIC_EnableIRQ+0x38>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2001      	movs	r0, #1
 80033ca:	fa00 f202 	lsl.w	r2, r0, r2
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000e100 	.word	0xe000e100

080033e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	db0a      	blt.n	800340e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	490c      	ldr	r1, [pc, #48]	; (8003430 <__NVIC_SetPriority+0x4c>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	440b      	add	r3, r1
 8003408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800340c:	e00a      	b.n	8003424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4908      	ldr	r1, [pc, #32]	; (8003434 <__NVIC_SetPriority+0x50>)
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	3b04      	subs	r3, #4
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	440b      	add	r3, r1
 8003422:	761a      	strb	r2, [r3, #24]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000e100 	.word	0xe000e100
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003438:	b480      	push	{r7}
 800343a:	b089      	sub	sp, #36	; 0x24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f1c3 0307 	rsb	r3, r3, #7
 8003452:	2b04      	cmp	r3, #4
 8003454:	bf28      	it	cs
 8003456:	2304      	movcs	r3, #4
 8003458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3304      	adds	r3, #4
 800345e:	2b06      	cmp	r3, #6
 8003460:	d902      	bls.n	8003468 <NVIC_EncodePriority+0x30>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3b03      	subs	r3, #3
 8003466:	e000      	b.n	800346a <NVIC_EncodePriority+0x32>
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	401a      	ands	r2, r3
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003480:	f04f 31ff 	mov.w	r1, #4294967295
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	43d9      	mvns	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	4313      	orrs	r3, r2
         );
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	; 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ff4c 	bl	8003344 <__NVIC_SetPriorityGrouping>
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034c2:	f7ff ff63 	bl	800338c <__NVIC_GetPriorityGrouping>
 80034c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	6978      	ldr	r0, [r7, #20]
 80034ce:	f7ff ffb3 	bl	8003438 <NVIC_EncodePriority>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff82 	bl	80033e4 <__NVIC_SetPriority>
}
 80034e0:	bf00      	nop
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ff56 	bl	80033a8 <__NVIC_EnableIRQ>
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e08d      	b.n	8003632 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	4b47      	ldr	r3, [pc, #284]	; (800363c <HAL_DMA_Init+0x138>)
 800351e:	429a      	cmp	r2, r3
 8003520:	d80f      	bhi.n	8003542 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	4b45      	ldr	r3, [pc, #276]	; (8003640 <HAL_DMA_Init+0x13c>)
 800352a:	4413      	add	r3, r2
 800352c:	4a45      	ldr	r2, [pc, #276]	; (8003644 <HAL_DMA_Init+0x140>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	009a      	lsls	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a42      	ldr	r2, [pc, #264]	; (8003648 <HAL_DMA_Init+0x144>)
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
 8003540:	e00e      	b.n	8003560 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	4b40      	ldr	r3, [pc, #256]	; (800364c <HAL_DMA_Init+0x148>)
 800354a:	4413      	add	r3, r2
 800354c:	4a3d      	ldr	r2, [pc, #244]	; (8003644 <HAL_DMA_Init+0x140>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	009a      	lsls	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a3c      	ldr	r2, [pc, #240]	; (8003650 <HAL_DMA_Init+0x14c>)
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003584:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003590:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fa76 	bl	8003aa4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035c0:	d102      	bne.n	80035c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d010      	beq.n	8003608 <HAL_DMA_Init+0x104>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d80c      	bhi.n	8003608 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fa96 	bl	8003b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	e008      	b.n	800361a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40020407 	.word	0x40020407
 8003640:	bffdfff8 	.word	0xbffdfff8
 8003644:	cccccccd 	.word	0xcccccccd
 8003648:	40020000 	.word	0x40020000
 800364c:	bffdfbf8 	.word	0xbffdfbf8
 8003650:	40020400 	.word	0x40020400

08003654 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_DMA_Start_IT+0x20>
 8003670:	2302      	movs	r3, #2
 8003672:	e066      	b.n	8003742 <HAL_DMA_Start_IT+0xee>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	d155      	bne.n	8003734 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f9bb 	bl	8003a28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 020e 	orr.w	r2, r2, #14
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e00f      	b.n	80036ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0204 	bic.w	r2, r2, #4
 80036da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 020a 	orr.w	r2, r2, #10
 80036ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003708:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003720:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0201 	orr.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e005      	b.n	8003740 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800373c:	2302      	movs	r3, #2
 800373e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003740:	7dfb      	ldrb	r3, [r7, #23]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d005      	beq.n	800376e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2204      	movs	r2, #4
 8003766:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
 800376c:	e037      	b.n	80037de <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 020e 	bic.w	r2, r2, #14
 800377c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800378c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f003 021f 	and.w	r2, r3, #31
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f202 	lsl.w	r2, r1, r2
 80037b0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037ba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00c      	beq.n	80037de <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037d2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037dc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d00d      	beq.n	8003830 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2204      	movs	r2, #4
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
 800382e:	e047      	b.n	80038c0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 020e 	bic.w	r2, r2, #14
 800383e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800385e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	2101      	movs	r1, #1
 800386e:	fa01 f202 	lsl.w	r2, r1, r2
 8003872:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800387c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003894:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800389e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
    }
  }
  return status;
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2204      	movs	r2, #4
 80038ec:	409a      	lsls	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d026      	beq.n	8003944 <HAL_DMA_IRQHandler+0x7a>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d021      	beq.n	8003944 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d107      	bne.n	800391e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0204 	bic.w	r2, r2, #4
 800391c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f003 021f 	and.w	r2, r3, #31
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2104      	movs	r1, #4
 800392c:	fa01 f202 	lsl.w	r2, r1, r2
 8003930:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	2b00      	cmp	r3, #0
 8003938:	d071      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003942:	e06c      	b.n	8003a1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	2202      	movs	r2, #2
 800394e:	409a      	lsls	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02e      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d029      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10b      	bne.n	8003988 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 020a 	bic.w	r2, r2, #10
 800397e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398c:	f003 021f 	and.w	r2, r3, #31
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	2102      	movs	r1, #2
 8003996:	fa01 f202 	lsl.w	r2, r1, r2
 800399a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d038      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039b4:	e033      	b.n	8003a1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	2208      	movs	r2, #8
 80039c0:	409a      	lsls	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d02a      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d025      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 020e 	bic.w	r2, r2, #14
 80039e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	f003 021f 	and.w	r2, r3, #31
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f202 	lsl.w	r2, r1, r2
 80039f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
}
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a3e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a50:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	f003 021f 	and.w	r2, r3, #31
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2101      	movs	r1, #1
 8003a60:	fa01 f202 	lsl.w	r2, r1, r2
 8003a64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d108      	bne.n	8003a88 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a86:	e007      	b.n	8003a98 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d802      	bhi.n	8003abe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ab8:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e001      	b.n	8003ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003abe:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ac0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	3b08      	subs	r3, #8
 8003ace:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	009a      	lsls	r2, r3, #2
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003aee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	2201      	movs	r2, #1
 8003af8:	409a      	lsls	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40020407 	.word	0x40020407
 8003b10:	40020800 	.word	0x40020800
 8003b14:	40020820 	.word	0x40020820
 8003b18:	cccccccd 	.word	0xcccccccd
 8003b1c:	40020880 	.word	0x40020880

08003b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	461a      	mov	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b42:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	1000823f 	.word	0x1000823f
 8003b64:	40020940 	.word	0x40020940

08003b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b76:	e15a      	b.n	8003e2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	fa01 f303 	lsl.w	r3, r1, r3
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 814c 	beq.w	8003e28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d005      	beq.n	8003ba8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d130      	bne.n	8003c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bde:	2201      	movs	r2, #1
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	f003 0201 	and.w	r2, r3, #1
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d017      	beq.n	8003c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	2203      	movs	r2, #3
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d123      	bne.n	8003c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	08da      	lsrs	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3208      	adds	r2, #8
 8003c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	220f      	movs	r2, #15
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	08da      	lsrs	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3208      	adds	r2, #8
 8003c94:	6939      	ldr	r1, [r7, #16]
 8003c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0203 	and.w	r2, r3, #3
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80a6 	beq.w	8003e28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cdc:	4b5b      	ldr	r3, [pc, #364]	; (8003e4c <HAL_GPIO_Init+0x2e4>)
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	4a5a      	ldr	r2, [pc, #360]	; (8003e4c <HAL_GPIO_Init+0x2e4>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6613      	str	r3, [r2, #96]	; 0x60
 8003ce8:	4b58      	ldr	r3, [pc, #352]	; (8003e4c <HAL_GPIO_Init+0x2e4>)
 8003cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cf4:	4a56      	ldr	r2, [pc, #344]	; (8003e50 <HAL_GPIO_Init+0x2e8>)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	089b      	lsrs	r3, r3, #2
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	220f      	movs	r2, #15
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d1e:	d01f      	beq.n	8003d60 <HAL_GPIO_Init+0x1f8>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a4c      	ldr	r2, [pc, #304]	; (8003e54 <HAL_GPIO_Init+0x2ec>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d019      	beq.n	8003d5c <HAL_GPIO_Init+0x1f4>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a4b      	ldr	r2, [pc, #300]	; (8003e58 <HAL_GPIO_Init+0x2f0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d013      	beq.n	8003d58 <HAL_GPIO_Init+0x1f0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a4a      	ldr	r2, [pc, #296]	; (8003e5c <HAL_GPIO_Init+0x2f4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00d      	beq.n	8003d54 <HAL_GPIO_Init+0x1ec>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a49      	ldr	r2, [pc, #292]	; (8003e60 <HAL_GPIO_Init+0x2f8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <HAL_GPIO_Init+0x1e8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a48      	ldr	r2, [pc, #288]	; (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d101      	bne.n	8003d4c <HAL_GPIO_Init+0x1e4>
 8003d48:	2305      	movs	r3, #5
 8003d4a:	e00a      	b.n	8003d62 <HAL_GPIO_Init+0x1fa>
 8003d4c:	2306      	movs	r3, #6
 8003d4e:	e008      	b.n	8003d62 <HAL_GPIO_Init+0x1fa>
 8003d50:	2304      	movs	r3, #4
 8003d52:	e006      	b.n	8003d62 <HAL_GPIO_Init+0x1fa>
 8003d54:	2303      	movs	r3, #3
 8003d56:	e004      	b.n	8003d62 <HAL_GPIO_Init+0x1fa>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e002      	b.n	8003d62 <HAL_GPIO_Init+0x1fa>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <HAL_GPIO_Init+0x1fa>
 8003d60:	2300      	movs	r3, #0
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	f002 0203 	and.w	r2, r2, #3
 8003d68:	0092      	lsls	r2, r2, #2
 8003d6a:	4093      	lsls	r3, r2
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d72:	4937      	ldr	r1, [pc, #220]	; (8003e50 <HAL_GPIO_Init+0x2e8>)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	089b      	lsrs	r3, r3, #2
 8003d78:	3302      	adds	r3, #2
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d80:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <HAL_GPIO_Init+0x300>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003da4:	4a30      	ldr	r2, [pc, #192]	; (8003e68 <HAL_GPIO_Init+0x300>)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003daa:	4b2f      	ldr	r3, [pc, #188]	; (8003e68 <HAL_GPIO_Init+0x300>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dce:	4a26      	ldr	r2, [pc, #152]	; (8003e68 <HAL_GPIO_Init+0x300>)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003dd4:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <HAL_GPIO_Init+0x300>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003df8:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <HAL_GPIO_Init+0x300>)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <HAL_GPIO_Init+0x300>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e22:	4a11      	ldr	r2, [pc, #68]	; (8003e68 <HAL_GPIO_Init+0x300>)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	fa22 f303 	lsr.w	r3, r2, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f47f ae9d 	bne.w	8003b78 <HAL_GPIO_Init+0x10>
  }
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40010000 	.word	0x40010000
 8003e54:	48000400 	.word	0x48000400
 8003e58:	48000800 	.word	0x48000800
 8003e5c:	48000c00 	.word	0x48000c00
 8003e60:	48001000 	.word	0x48001000
 8003e64:	48001400 	.word	0x48001400
 8003e68:	40010400 	.word	0x40010400

08003e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	807b      	strh	r3, [r7, #2]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e7c:	787b      	ldrb	r3, [r7, #1]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e82:	887a      	ldrh	r2, [r7, #2]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e88:	e002      	b.n	8003e90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e8a:	887a      	ldrh	r2, [r7, #2]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ea6:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d006      	beq.n	8003ec0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eb2:	4a05      	ldr	r2, [pc, #20]	; (8003ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f806 	bl	8003ecc <HAL_GPIO_EXTI_Callback>
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40010400 	.word	0x40010400

08003ecc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d141      	bne.n	8003f76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ef2:	4b4b      	ldr	r3, [pc, #300]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efe:	d131      	bne.n	8003f64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f00:	4b47      	ldr	r3, [pc, #284]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f06:	4a46      	ldr	r2, [pc, #280]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f10:	4b43      	ldr	r3, [pc, #268]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f18:	4a41      	ldr	r2, [pc, #260]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f20:	4b40      	ldr	r3, [pc, #256]	; (8004024 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2232      	movs	r2, #50	; 0x32
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	4a3f      	ldr	r2, [pc, #252]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	0c9b      	lsrs	r3, r3, #18
 8003f32:	3301      	adds	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f36:	e002      	b.n	8003f3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f3e:	4b38      	ldr	r3, [pc, #224]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4a:	d102      	bne.n	8003f52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f2      	bne.n	8003f38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f52:	4b33      	ldr	r3, [pc, #204]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5e:	d158      	bne.n	8004012 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e057      	b.n	8004014 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f64:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f6a:	4a2d      	ldr	r2, [pc, #180]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f74:	e04d      	b.n	8004012 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f7c:	d141      	bne.n	8004002 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f7e:	4b28      	ldr	r3, [pc, #160]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8a:	d131      	bne.n	8003ff0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f8c:	4b24      	ldr	r3, [pc, #144]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f92:	4a23      	ldr	r2, [pc, #140]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f9c:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fa4:	4a1e      	ldr	r2, [pc, #120]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003faa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fac:	4b1d      	ldr	r3, [pc, #116]	; (8004024 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2232      	movs	r2, #50	; 0x32
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	0c9b      	lsrs	r3, r3, #18
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fc2:	e002      	b.n	8003fca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fca:	4b15      	ldr	r3, [pc, #84]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd6:	d102      	bne.n	8003fde <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f2      	bne.n	8003fc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fea:	d112      	bne.n	8004012 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e011      	b.n	8004014 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004000:	e007      	b.n	8004012 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800400a:	4a05      	ldr	r2, [pc, #20]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004010:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40007000 	.word	0x40007000
 8004024:	20000000 	.word	0x20000000
 8004028:	431bde83 	.word	0x431bde83

0800402c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	4a04      	ldr	r2, [pc, #16]	; (8004048 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800403a:	6093      	str	r3, [r2, #8]
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40007000 	.word	0x40007000

0800404c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e306      	b.n	800466c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d075      	beq.n	8004156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800406a:	4b97      	ldr	r3, [pc, #604]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004074:	4b94      	ldr	r3, [pc, #592]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b0c      	cmp	r3, #12
 8004082:	d102      	bne.n	800408a <HAL_RCC_OscConfig+0x3e>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d002      	beq.n	8004090 <HAL_RCC_OscConfig+0x44>
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d10b      	bne.n	80040a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004090:	4b8d      	ldr	r3, [pc, #564]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d05b      	beq.n	8004154 <HAL_RCC_OscConfig+0x108>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d157      	bne.n	8004154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e2e1      	b.n	800466c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b0:	d106      	bne.n	80040c0 <HAL_RCC_OscConfig+0x74>
 80040b2:	4b85      	ldr	r3, [pc, #532]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a84      	ldr	r2, [pc, #528]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e01d      	b.n	80040fc <HAL_RCC_OscConfig+0xb0>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x98>
 80040ca:	4b7f      	ldr	r3, [pc, #508]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7e      	ldr	r2, [pc, #504]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4b7c      	ldr	r3, [pc, #496]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a7b      	ldr	r2, [pc, #492]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e00b      	b.n	80040fc <HAL_RCC_OscConfig+0xb0>
 80040e4:	4b78      	ldr	r3, [pc, #480]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a77      	ldr	r2, [pc, #476]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4b75      	ldr	r3, [pc, #468]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a74      	ldr	r2, [pc, #464]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d013      	beq.n	800412c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd fcac 	bl	8001a60 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410c:	f7fd fca8 	bl	8001a60 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e2a6      	b.n	800466c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800411e:	4b6a      	ldr	r3, [pc, #424]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0xc0>
 800412a:	e014      	b.n	8004156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fd fc98 	bl	8001a60 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004134:	f7fd fc94 	bl	8001a60 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	; 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e292      	b.n	800466c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004146:	4b60      	ldr	r3, [pc, #384]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0xe8>
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d075      	beq.n	800424e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004162:	4b59      	ldr	r3, [pc, #356]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800416c:	4b56      	ldr	r3, [pc, #344]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	d102      	bne.n	8004182 <HAL_RCC_OscConfig+0x136>
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d002      	beq.n	8004188 <HAL_RCC_OscConfig+0x13c>
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b04      	cmp	r3, #4
 8004186:	d11f      	bne.n	80041c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004188:	4b4f      	ldr	r3, [pc, #316]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_OscConfig+0x154>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e265      	b.n	800466c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a0:	4b49      	ldr	r3, [pc, #292]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	061b      	lsls	r3, r3, #24
 80041ae:	4946      	ldr	r1, [pc, #280]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041b4:	4b45      	ldr	r3, [pc, #276]	; (80042cc <HAL_RCC_OscConfig+0x280>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fc ffd9 	bl	8001170 <HAL_InitTick>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d043      	beq.n	800424c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e251      	b.n	800466c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d023      	beq.n	8004218 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d0:	4b3d      	ldr	r3, [pc, #244]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3c      	ldr	r2, [pc, #240]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80041d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd fc40 	bl	8001a60 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e4:	f7fd fc3c 	bl	8001a60 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e23a      	b.n	800466c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f6:	4b34      	ldr	r3, [pc, #208]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004202:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	061b      	lsls	r3, r3, #24
 8004210:	492d      	ldr	r1, [pc, #180]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004212:	4313      	orrs	r3, r2
 8004214:	604b      	str	r3, [r1, #4]
 8004216:	e01a      	b.n	800424e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004218:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a2a      	ldr	r2, [pc, #168]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800421e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd fc1c 	bl	8001a60 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800422c:	f7fd fc18 	bl	8001a60 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e216      	b.n	800466c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800423e:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x1e0>
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800424c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d041      	beq.n	80042de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01c      	beq.n	800429c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004262:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004268:	4a17      	ldr	r2, [pc, #92]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004272:	f7fd fbf5 	bl	8001a60 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427a:	f7fd fbf1 	bl	8001a60 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e1ef      	b.n	800466c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800428e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0ef      	beq.n	800427a <HAL_RCC_OscConfig+0x22e>
 800429a:	e020      	b.n	80042de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 800429e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a2:	4a09      	ldr	r2, [pc, #36]	; (80042c8 <HAL_RCC_OscConfig+0x27c>)
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fd fbd8 	bl	8001a60 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b2:	e00d      	b.n	80042d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b4:	f7fd fbd4 	bl	8001a60 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d906      	bls.n	80042d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e1d2      	b.n	800466c <HAL_RCC_OscConfig+0x620>
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d0:	4b8c      	ldr	r3, [pc, #560]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1ea      	bne.n	80042b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80a6 	beq.w	8004438 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ec:	2300      	movs	r3, #0
 80042ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042f0:	4b84      	ldr	r3, [pc, #528]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_OscConfig+0x2b4>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <HAL_RCC_OscConfig+0x2b6>
 8004300:	2300      	movs	r3, #0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004306:	4b7f      	ldr	r3, [pc, #508]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430a:	4a7e      	ldr	r2, [pc, #504]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800430c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004310:	6593      	str	r3, [r2, #88]	; 0x58
 8004312:	4b7c      	ldr	r3, [pc, #496]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800431e:	2301      	movs	r3, #1
 8004320:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004322:	4b79      	ldr	r3, [pc, #484]	; (8004508 <HAL_RCC_OscConfig+0x4bc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d118      	bne.n	8004360 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800432e:	4b76      	ldr	r3, [pc, #472]	; (8004508 <HAL_RCC_OscConfig+0x4bc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a75      	ldr	r2, [pc, #468]	; (8004508 <HAL_RCC_OscConfig+0x4bc>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433a:	f7fd fb91 	bl	8001a60 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004342:	f7fd fb8d 	bl	8001a60 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e18b      	b.n	800466c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004354:	4b6c      	ldr	r3, [pc, #432]	; (8004508 <HAL_RCC_OscConfig+0x4bc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d108      	bne.n	800437a <HAL_RCC_OscConfig+0x32e>
 8004368:	4b66      	ldr	r3, [pc, #408]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	4a65      	ldr	r2, [pc, #404]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004378:	e024      	b.n	80043c4 <HAL_RCC_OscConfig+0x378>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b05      	cmp	r3, #5
 8004380:	d110      	bne.n	80043a4 <HAL_RCC_OscConfig+0x358>
 8004382:	4b60      	ldr	r3, [pc, #384]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	4a5e      	ldr	r2, [pc, #376]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800438a:	f043 0304 	orr.w	r3, r3, #4
 800438e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004392:	4b5c      	ldr	r3, [pc, #368]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	4a5a      	ldr	r2, [pc, #360]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043a2:	e00f      	b.n	80043c4 <HAL_RCC_OscConfig+0x378>
 80043a4:	4b57      	ldr	r3, [pc, #348]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	4a56      	ldr	r2, [pc, #344]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043b4:	4b53      	ldr	r3, [pc, #332]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	4a52      	ldr	r2, [pc, #328]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80043bc:	f023 0304 	bic.w	r3, r3, #4
 80043c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d016      	beq.n	80043fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fd fb48 	bl	8001a60 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d2:	e00a      	b.n	80043ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d4:	f7fd fb44 	bl	8001a60 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e140      	b.n	800466c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ea:	4b46      	ldr	r3, [pc, #280]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ed      	beq.n	80043d4 <HAL_RCC_OscConfig+0x388>
 80043f8:	e015      	b.n	8004426 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fa:	f7fd fb31 	bl	8001a60 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7fd fb2d 	bl	8001a60 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e129      	b.n	800466c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004418:	4b3a      	ldr	r3, [pc, #232]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ed      	bne.n	8004402 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004426:	7ffb      	ldrb	r3, [r7, #31]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d105      	bne.n	8004438 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442c:	4b35      	ldr	r3, [pc, #212]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	4a34      	ldr	r2, [pc, #208]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004436:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d03c      	beq.n	80044be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01c      	beq.n	8004486 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800444c:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800444e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004452:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fd fb00 	bl	8001a60 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004464:	f7fd fafc 	bl	8001a60 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e0fa      	b.n	800466c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004476:	4b23      	ldr	r3, [pc, #140]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004478:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ef      	beq.n	8004464 <HAL_RCC_OscConfig+0x418>
 8004484:	e01b      	b.n	80044be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004486:	4b1f      	ldr	r3, [pc, #124]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 8004488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800448c:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004496:	f7fd fae3 	bl	8001a60 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800449e:	f7fd fadf 	bl	8001a60 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e0dd      	b.n	800466c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044b0:	4b14      	ldr	r3, [pc, #80]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80044b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1ef      	bne.n	800449e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80d1 	beq.w	800466a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044c8:	4b0e      	ldr	r3, [pc, #56]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 030c 	and.w	r3, r3, #12
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	f000 808b 	beq.w	80045ec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d15e      	bne.n	800459c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a08      	ldr	r2, [pc, #32]	; (8004504 <HAL_RCC_OscConfig+0x4b8>)
 80044e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ea:	f7fd fab9 	bl	8001a60 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f0:	e00c      	b.n	800450c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f2:	f7fd fab5 	bl	8001a60 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d905      	bls.n	800450c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e0b3      	b.n	800466c <HAL_RCC_OscConfig+0x620>
 8004504:	40021000 	.word	0x40021000
 8004508:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450c:	4b59      	ldr	r3, [pc, #356]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ec      	bne.n	80044f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004518:	4b56      	ldr	r3, [pc, #344]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	4b56      	ldr	r3, [pc, #344]	; (8004678 <HAL_RCC_OscConfig+0x62c>)
 800451e:	4013      	ands	r3, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6a11      	ldr	r1, [r2, #32]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004528:	3a01      	subs	r2, #1
 800452a:	0112      	lsls	r2, r2, #4
 800452c:	4311      	orrs	r1, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004532:	0212      	lsls	r2, r2, #8
 8004534:	4311      	orrs	r1, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800453a:	0852      	lsrs	r2, r2, #1
 800453c:	3a01      	subs	r2, #1
 800453e:	0552      	lsls	r2, r2, #21
 8004540:	4311      	orrs	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004546:	0852      	lsrs	r2, r2, #1
 8004548:	3a01      	subs	r2, #1
 800454a:	0652      	lsls	r2, r2, #25
 800454c:	4311      	orrs	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004552:	06d2      	lsls	r2, r2, #27
 8004554:	430a      	orrs	r2, r1
 8004556:	4947      	ldr	r1, [pc, #284]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 8004558:	4313      	orrs	r3, r2
 800455a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800455c:	4b45      	ldr	r3, [pc, #276]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a44      	ldr	r2, [pc, #272]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 8004562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004566:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004568:	4b42      	ldr	r3, [pc, #264]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4a41      	ldr	r2, [pc, #260]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 800456e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004572:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fd fa74 	bl	8001a60 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457c:	f7fd fa70 	bl	8001a60 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e06e      	b.n	800466c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458e:	4b39      	ldr	r3, [pc, #228]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x530>
 800459a:	e066      	b.n	800466a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459c:	4b35      	ldr	r3, [pc, #212]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a34      	ldr	r2, [pc, #208]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 80045a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80045a8:	4b32      	ldr	r3, [pc, #200]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4a31      	ldr	r2, [pc, #196]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 80045ae:	f023 0303 	bic.w	r3, r3, #3
 80045b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045b4:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a2e      	ldr	r2, [pc, #184]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 80045ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80045be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd fa4c 	bl	8001a60 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045cc:	f7fd fa48 	bl	8001a60 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e046      	b.n	800466c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045de:	4b25      	ldr	r3, [pc, #148]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x580>
 80045ea:	e03e      	b.n	800466a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e039      	b.n	800466c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80045f8:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <HAL_RCC_OscConfig+0x628>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f003 0203 	and.w	r2, r3, #3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	429a      	cmp	r2, r3
 800460a:	d12c      	bne.n	8004666 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	3b01      	subs	r3, #1
 8004618:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461a:	429a      	cmp	r2, r3
 800461c:	d123      	bne.n	8004666 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d11b      	bne.n	8004666 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d113      	bne.n	8004666 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	3b01      	subs	r3, #1
 800464c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800464e:	429a      	cmp	r2, r3
 8004650:	d109      	bne.n	8004666 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	3b01      	subs	r3, #1
 8004660:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d001      	beq.n	800466a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3720      	adds	r7, #32
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	019f800c 	.word	0x019f800c

0800467c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e11e      	b.n	80048d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004694:	4b91      	ldr	r3, [pc, #580]	; (80048dc <HAL_RCC_ClockConfig+0x260>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d910      	bls.n	80046c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a2:	4b8e      	ldr	r3, [pc, #568]	; (80048dc <HAL_RCC_ClockConfig+0x260>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 020f 	bic.w	r2, r3, #15
 80046aa:	498c      	ldr	r1, [pc, #560]	; (80048dc <HAL_RCC_ClockConfig+0x260>)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b8a      	ldr	r3, [pc, #552]	; (80048dc <HAL_RCC_ClockConfig+0x260>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e106      	b.n	80048d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d073      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d129      	bne.n	800472c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d8:	4b81      	ldr	r3, [pc, #516]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0f4      	b.n	80048d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80046e8:	f000 f9d0 	bl	8004a8c <RCC_GetSysClockFreqFromPLLSource>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4a7c      	ldr	r2, [pc, #496]	; (80048e4 <HAL_RCC_ClockConfig+0x268>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d93f      	bls.n	8004776 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046f6:	4b7a      	ldr	r3, [pc, #488]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800470a:	2b00      	cmp	r3, #0
 800470c:	d033      	beq.n	8004776 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004712:	2b00      	cmp	r3, #0
 8004714:	d12f      	bne.n	8004776 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004716:	4b72      	ldr	r3, [pc, #456]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800471e:	4a70      	ldr	r2, [pc, #448]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 8004720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004724:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004726:	2380      	movs	r3, #128	; 0x80
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	e024      	b.n	8004776 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d107      	bne.n	8004744 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004734:	4b6a      	ldr	r3, [pc, #424]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0c6      	b.n	80048d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004744:	4b66      	ldr	r3, [pc, #408]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0be      	b.n	80048d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004754:	f000 f8ce 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 8004758:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4a61      	ldr	r2, [pc, #388]	; (80048e4 <HAL_RCC_ClockConfig+0x268>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d909      	bls.n	8004776 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004762:	4b5f      	ldr	r3, [pc, #380]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800476a:	4a5d      	ldr	r2, [pc, #372]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 800476c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004770:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004776:	4b5a      	ldr	r3, [pc, #360]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f023 0203 	bic.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4957      	ldr	r1, [pc, #348]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 8004784:	4313      	orrs	r3, r2
 8004786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004788:	f7fd f96a 	bl	8001a60 <HAL_GetTick>
 800478c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004790:	f7fd f966 	bl	8001a60 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	; 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e095      	b.n	80048d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	4b4e      	ldr	r3, [pc, #312]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 020c 	and.w	r2, r3, #12
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d1eb      	bne.n	8004790 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d023      	beq.n	800480c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d0:	4b43      	ldr	r3, [pc, #268]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4a42      	ldr	r2, [pc, #264]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 80047d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80047e8:	4b3d      	ldr	r3, [pc, #244]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047f0:	4a3b      	ldr	r2, [pc, #236]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 80047f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f8:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4936      	ldr	r1, [pc, #216]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 8004806:	4313      	orrs	r3, r2
 8004808:	608b      	str	r3, [r1, #8]
 800480a:	e008      	b.n	800481e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b80      	cmp	r3, #128	; 0x80
 8004810:	d105      	bne.n	800481e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004812:	4b33      	ldr	r3, [pc, #204]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	4a32      	ldr	r2, [pc, #200]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 8004818:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800481c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800481e:	4b2f      	ldr	r3, [pc, #188]	; (80048dc <HAL_RCC_ClockConfig+0x260>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d21d      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482c:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <HAL_RCC_ClockConfig+0x260>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f023 020f 	bic.w	r2, r3, #15
 8004834:	4929      	ldr	r1, [pc, #164]	; (80048dc <HAL_RCC_ClockConfig+0x260>)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	4313      	orrs	r3, r2
 800483a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800483c:	f7fd f910 	bl	8001a60 <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	e00a      	b.n	800485a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004844:	f7fd f90c 	bl	8001a60 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e03b      	b.n	80048d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485a:	4b20      	ldr	r3, [pc, #128]	; (80048dc <HAL_RCC_ClockConfig+0x260>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d1ed      	bne.n	8004844 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004874:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4917      	ldr	r1, [pc, #92]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004892:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	490f      	ldr	r1, [pc, #60]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048a6:	f000 f825 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <HAL_RCC_ClockConfig+0x264>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	490c      	ldr	r1, [pc, #48]	; (80048e8 <HAL_RCC_ClockConfig+0x26c>)
 80048b8:	5ccb      	ldrb	r3, [r1, r3]
 80048ba:	f003 031f 	and.w	r3, r3, #31
 80048be:	fa22 f303 	lsr.w	r3, r2, r3
 80048c2:	4a0a      	ldr	r2, [pc, #40]	; (80048ec <HAL_RCC_ClockConfig+0x270>)
 80048c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048c6:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <HAL_RCC_ClockConfig+0x274>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fc fc50 	bl	8001170 <HAL_InitTick>
 80048d0:	4603      	mov	r3, r0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40022000 	.word	0x40022000
 80048e0:	40021000 	.word	0x40021000
 80048e4:	04c4b400 	.word	0x04c4b400
 80048e8:	08009820 	.word	0x08009820
 80048ec:	20000000 	.word	0x20000000
 80048f0:	20000004 	.word	0x20000004

080048f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048fa:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b04      	cmp	r3, #4
 8004904:	d102      	bne.n	800490c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004906:	4b2a      	ldr	r3, [pc, #168]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	e047      	b.n	800499c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800490c:	4b27      	ldr	r3, [pc, #156]	; (80049ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 030c 	and.w	r3, r3, #12
 8004914:	2b08      	cmp	r3, #8
 8004916:	d102      	bne.n	800491e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004918:	4b26      	ldr	r3, [pc, #152]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	e03e      	b.n	800499c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800491e:	4b23      	ldr	r3, [pc, #140]	; (80049ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b0c      	cmp	r3, #12
 8004928:	d136      	bne.n	8004998 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800492a:	4b20      	ldr	r3, [pc, #128]	; (80049ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	3301      	adds	r3, #1
 8004940:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b03      	cmp	r3, #3
 8004946:	d10c      	bne.n	8004962 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004948:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	4a16      	ldr	r2, [pc, #88]	; (80049ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004952:	68d2      	ldr	r2, [r2, #12]
 8004954:	0a12      	lsrs	r2, r2, #8
 8004956:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	617b      	str	r3, [r7, #20]
      break;
 8004960:	e00c      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004962:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	4a10      	ldr	r2, [pc, #64]	; (80049ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800496c:	68d2      	ldr	r2, [r2, #12]
 800496e:	0a12      	lsrs	r2, r2, #8
 8004970:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004974:	fb02 f303 	mul.w	r3, r2, r3
 8004978:	617b      	str	r3, [r7, #20]
      break;
 800497a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	0e5b      	lsrs	r3, r3, #25
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	3301      	adds	r3, #1
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	e001      	b.n	800499c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800499c:	693b      	ldr	r3, [r7, #16]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	00f42400 	.word	0x00f42400
 80049b4:	016e3600 	.word	0x016e3600

080049b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049bc:	4b03      	ldr	r3, [pc, #12]	; (80049cc <HAL_RCC_GetHCLKFreq+0x14>)
 80049be:	681b      	ldr	r3, [r3, #0]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	20000000 	.word	0x20000000

080049d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049d4:	f7ff fff0 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	0a1b      	lsrs	r3, r3, #8
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4904      	ldr	r1, [pc, #16]	; (80049f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40021000 	.word	0x40021000
 80049f8:	08009830 	.word	0x08009830

080049fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a00:	f7ff ffda 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 8004a04:	4602      	mov	r2, r0
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	0adb      	lsrs	r3, r3, #11
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	4904      	ldr	r1, [pc, #16]	; (8004a24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a12:	5ccb      	ldrb	r3, [r1, r3]
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000
 8004a24:	08009830 	.word	0x08009830

08004a28 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	220f      	movs	r2, #15
 8004a36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a38:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <HAL_RCC_GetClockConfig+0x5c>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 0203 	and.w	r2, r3, #3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a44:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <HAL_RCC_GetClockConfig+0x5c>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a50:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <HAL_RCC_GetClockConfig+0x5c>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a5c:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <HAL_RCC_GetClockConfig+0x5c>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	08db      	lsrs	r3, r3, #3
 8004a62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a6a:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <HAL_RCC_GetClockConfig+0x60>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 020f 	and.w	r2, r3, #15
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	601a      	str	r2, [r3, #0]
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40021000 	.word	0x40021000
 8004a88:	40022000 	.word	0x40022000

08004a8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d10c      	bne.n	8004aca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ab0:	4a17      	ldr	r2, [pc, #92]	; (8004b10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aba:	68d2      	ldr	r2, [r2, #12]
 8004abc:	0a12      	lsrs	r2, r2, #8
 8004abe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ac2:	fb02 f303 	mul.w	r3, r2, r3
 8004ac6:	617b      	str	r3, [r7, #20]
    break;
 8004ac8:	e00c      	b.n	8004ae4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aca:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad2:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ad4:	68d2      	ldr	r2, [r2, #12]
 8004ad6:	0a12      	lsrs	r2, r2, #8
 8004ad8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004adc:	fb02 f303 	mul.w	r3, r2, r3
 8004ae0:	617b      	str	r3, [r7, #20]
    break;
 8004ae2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ae4:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	0e5b      	lsrs	r3, r3, #25
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	3301      	adds	r3, #1
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004afe:	687b      	ldr	r3, [r7, #4]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	016e3600 	.word	0x016e3600
 8004b14:	00f42400 	.word	0x00f42400

08004b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b20:	2300      	movs	r3, #0
 8004b22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b24:	2300      	movs	r3, #0
 8004b26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 8098 	beq.w	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b36:	2300      	movs	r3, #0
 8004b38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b3a:	4b43      	ldr	r3, [pc, #268]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10d      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b46:	4b40      	ldr	r3, [pc, #256]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4a:	4a3f      	ldr	r2, [pc, #252]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b50:	6593      	str	r3, [r2, #88]	; 0x58
 8004b52:	4b3d      	ldr	r3, [pc, #244]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b62:	4b3a      	ldr	r3, [pc, #232]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a39      	ldr	r2, [pc, #228]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b6e:	f7fc ff77 	bl	8001a60 <HAL_GetTick>
 8004b72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b74:	e009      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b76:	f7fc ff73 	bl	8001a60 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d902      	bls.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	74fb      	strb	r3, [r7, #19]
        break;
 8004b88:	e005      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b8a:	4b30      	ldr	r3, [pc, #192]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0ef      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b96:	7cfb      	ldrb	r3, [r7, #19]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d159      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b9c:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01e      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d019      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bb8:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bc4:	4b20      	ldr	r3, [pc, #128]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	4a1f      	ldr	r2, [pc, #124]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bd4:	4b1c      	ldr	r3, [pc, #112]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004be4:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf6:	f7fc ff33 	bl	8001a60 <HAL_GetTick>
 8004bfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bfc:	e00b      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7fc ff2f 	bl	8001a60 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d902      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	74fb      	strb	r3, [r7, #19]
            break;
 8004c14:	e006      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0ec      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c24:	7cfb      	ldrb	r3, [r7, #19]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10b      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c2a:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c38:	4903      	ldr	r1, [pc, #12]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c40:	e008      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c42:	7cfb      	ldrb	r3, [r7, #19]
 8004c44:	74bb      	strb	r3, [r7, #18]
 8004c46:	e005      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c50:	7cfb      	ldrb	r3, [r7, #19]
 8004c52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c54:	7c7b      	ldrb	r3, [r7, #17]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d105      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5a:	4ba7      	ldr	r3, [pc, #668]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	4aa6      	ldr	r2, [pc, #664]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c72:	4ba1      	ldr	r3, [pc, #644]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c78:	f023 0203 	bic.w	r2, r3, #3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	499d      	ldr	r1, [pc, #628]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c94:	4b98      	ldr	r3, [pc, #608]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9a:	f023 020c 	bic.w	r2, r3, #12
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	4995      	ldr	r1, [pc, #596]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cb6:	4b90      	ldr	r3, [pc, #576]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	498c      	ldr	r1, [pc, #560]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cd8:	4b87      	ldr	r3, [pc, #540]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	4984      	ldr	r1, [pc, #528]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cfa:	4b7f      	ldr	r3, [pc, #508]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	497b      	ldr	r1, [pc, #492]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d1c:	4b76      	ldr	r3, [pc, #472]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	4973      	ldr	r1, [pc, #460]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d3e:	4b6e      	ldr	r3, [pc, #440]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	496a      	ldr	r1, [pc, #424]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d60:	4b65      	ldr	r3, [pc, #404]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	4962      	ldr	r1, [pc, #392]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d82:	4b5d      	ldr	r3, [pc, #372]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	4959      	ldr	r1, [pc, #356]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004da4:	4b54      	ldr	r3, [pc, #336]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004daa:	f023 0203 	bic.w	r2, r3, #3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	4951      	ldr	r1, [pc, #324]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dc6:	4b4c      	ldr	r3, [pc, #304]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	4948      	ldr	r1, [pc, #288]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d015      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004de8:	4b43      	ldr	r3, [pc, #268]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	4940      	ldr	r1, [pc, #256]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e06:	d105      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e08:	4b3b      	ldr	r3, [pc, #236]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4a3a      	ldr	r2, [pc, #232]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d015      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e20:	4b35      	ldr	r3, [pc, #212]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2e:	4932      	ldr	r1, [pc, #200]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3e:	d105      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e40:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a2c      	ldr	r2, [pc, #176]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e4a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d015      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e58:	4b27      	ldr	r3, [pc, #156]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	4924      	ldr	r1, [pc, #144]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e76:	d105      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e78:	4b1f      	ldr	r3, [pc, #124]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4a1e      	ldr	r2, [pc, #120]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e82:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d015      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e90:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9e:	4916      	ldr	r1, [pc, #88]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eae:	d105      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb0:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4a10      	ldr	r2, [pc, #64]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d019      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ece:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	4908      	ldr	r1, [pc, #32]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee6:	d109      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee8:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a02      	ldr	r2, [pc, #8]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef2:	60d3      	str	r3, [r2, #12]
 8004ef4:	e002      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d015      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f08:	4b29      	ldr	r3, [pc, #164]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	4926      	ldr	r1, [pc, #152]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f26:	d105      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f28:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a20      	ldr	r2, [pc, #128]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f32:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d015      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004f40:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f4e:	4918      	ldr	r1, [pc, #96]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5e:	d105      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f60:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4a12      	ldr	r2, [pc, #72]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f6a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d015      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f78:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f86:	490a      	ldr	r1, [pc, #40]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f96:	d105      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fa2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40021000 	.word	0x40021000

08004fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e049      	b.n	800505a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f841 	bl	8005062 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f000 fdea 	bl	8005bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d001      	beq.n	8005090 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e04c      	b.n	800512a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a26      	ldr	r2, [pc, #152]	; (8005138 <HAL_TIM_Base_Start+0xc0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d022      	beq.n	80050e8 <HAL_TIM_Base_Start+0x70>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050aa:	d01d      	beq.n	80050e8 <HAL_TIM_Base_Start+0x70>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a22      	ldr	r2, [pc, #136]	; (800513c <HAL_TIM_Base_Start+0xc4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d018      	beq.n	80050e8 <HAL_TIM_Base_Start+0x70>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a21      	ldr	r2, [pc, #132]	; (8005140 <HAL_TIM_Base_Start+0xc8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d013      	beq.n	80050e8 <HAL_TIM_Base_Start+0x70>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <HAL_TIM_Base_Start+0xcc>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00e      	beq.n	80050e8 <HAL_TIM_Base_Start+0x70>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1e      	ldr	r2, [pc, #120]	; (8005148 <HAL_TIM_Base_Start+0xd0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d009      	beq.n	80050e8 <HAL_TIM_Base_Start+0x70>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1c      	ldr	r2, [pc, #112]	; (800514c <HAL_TIM_Base_Start+0xd4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_TIM_Base_Start+0x70>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1b      	ldr	r2, [pc, #108]	; (8005150 <HAL_TIM_Base_Start+0xd8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d115      	bne.n	8005114 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	4b19      	ldr	r3, [pc, #100]	; (8005154 <HAL_TIM_Base_Start+0xdc>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	d015      	beq.n	8005126 <HAL_TIM_Base_Start+0xae>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005100:	d011      	beq.n	8005126 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0201 	orr.w	r2, r2, #1
 8005110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005112:	e008      	b.n	8005126 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	e000      	b.n	8005128 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005126:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40013400 	.word	0x40013400
 800514c:	40014000 	.word	0x40014000
 8005150:	40015000 	.word	0x40015000
 8005154:	00010007 	.word	0x00010007

08005158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	d001      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e054      	b.n	800521a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a26      	ldr	r2, [pc, #152]	; (8005228 <HAL_TIM_Base_Start_IT+0xd0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d022      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519a:	d01d      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a22      	ldr	r2, [pc, #136]	; (800522c <HAL_TIM_Base_Start_IT+0xd4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d018      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a21      	ldr	r2, [pc, #132]	; (8005230 <HAL_TIM_Base_Start_IT+0xd8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d013      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1f      	ldr	r2, [pc, #124]	; (8005234 <HAL_TIM_Base_Start_IT+0xdc>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00e      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1e      	ldr	r2, [pc, #120]	; (8005238 <HAL_TIM_Base_Start_IT+0xe0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d009      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1c      	ldr	r2, [pc, #112]	; (800523c <HAL_TIM_Base_Start_IT+0xe4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x80>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <HAL_TIM_Base_Start_IT+0xe8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d115      	bne.n	8005204 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	4b19      	ldr	r3, [pc, #100]	; (8005244 <HAL_TIM_Base_Start_IT+0xec>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b06      	cmp	r3, #6
 80051e8:	d015      	beq.n	8005216 <HAL_TIM_Base_Start_IT+0xbe>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f0:	d011      	beq.n	8005216 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0201 	orr.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005202:	e008      	b.n	8005216 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	e000      	b.n	8005218 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005216:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40012c00 	.word	0x40012c00
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40000c00 	.word	0x40000c00
 8005238:	40013400 	.word	0x40013400
 800523c:	40014000 	.word	0x40014000
 8005240:	40015000 	.word	0x40015000
 8005244:	00010007 	.word	0x00010007

08005248 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e049      	b.n	80052ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fc f980 	bl	8001574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f000 fca0 	bl	8005bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d109      	bne.n	800531c <HAL_TIM_PWM_Start+0x24>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e03c      	b.n	8005396 <HAL_TIM_PWM_Start+0x9e>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b04      	cmp	r3, #4
 8005320:	d109      	bne.n	8005336 <HAL_TIM_PWM_Start+0x3e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b01      	cmp	r3, #1
 800532c:	bf14      	ite	ne
 800532e:	2301      	movne	r3, #1
 8005330:	2300      	moveq	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	e02f      	b.n	8005396 <HAL_TIM_PWM_Start+0x9e>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d109      	bne.n	8005350 <HAL_TIM_PWM_Start+0x58>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	e022      	b.n	8005396 <HAL_TIM_PWM_Start+0x9e>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b0c      	cmp	r3, #12
 8005354:	d109      	bne.n	800536a <HAL_TIM_PWM_Start+0x72>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	bf14      	ite	ne
 8005362:	2301      	movne	r3, #1
 8005364:	2300      	moveq	r3, #0
 8005366:	b2db      	uxtb	r3, r3
 8005368:	e015      	b.n	8005396 <HAL_TIM_PWM_Start+0x9e>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b10      	cmp	r3, #16
 800536e:	d109      	bne.n	8005384 <HAL_TIM_PWM_Start+0x8c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e008      	b.n	8005396 <HAL_TIM_PWM_Start+0x9e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	bf14      	ite	ne
 8005390:	2301      	movne	r3, #1
 8005392:	2300      	moveq	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e0a6      	b.n	80054ec <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_PWM_Start+0xb6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ac:	e023      	b.n	80053f6 <HAL_TIM_PWM_Start+0xfe>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d104      	bne.n	80053be <HAL_TIM_PWM_Start+0xc6>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053bc:	e01b      	b.n	80053f6 <HAL_TIM_PWM_Start+0xfe>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_PWM_Start+0xd6>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053cc:	e013      	b.n	80053f6 <HAL_TIM_PWM_Start+0xfe>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b0c      	cmp	r3, #12
 80053d2:	d104      	bne.n	80053de <HAL_TIM_PWM_Start+0xe6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053dc:	e00b      	b.n	80053f6 <HAL_TIM_PWM_Start+0xfe>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_PWM_Start+0xf6>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ec:	e003      	b.n	80053f6 <HAL_TIM_PWM_Start+0xfe>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2201      	movs	r2, #1
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 f82a 	bl	8006458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a3a      	ldr	r2, [pc, #232]	; (80054f4 <HAL_TIM_PWM_Start+0x1fc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d018      	beq.n	8005440 <HAL_TIM_PWM_Start+0x148>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a39      	ldr	r2, [pc, #228]	; (80054f8 <HAL_TIM_PWM_Start+0x200>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <HAL_TIM_PWM_Start+0x148>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a37      	ldr	r2, [pc, #220]	; (80054fc <HAL_TIM_PWM_Start+0x204>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00e      	beq.n	8005440 <HAL_TIM_PWM_Start+0x148>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a36      	ldr	r2, [pc, #216]	; (8005500 <HAL_TIM_PWM_Start+0x208>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d009      	beq.n	8005440 <HAL_TIM_PWM_Start+0x148>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a34      	ldr	r2, [pc, #208]	; (8005504 <HAL_TIM_PWM_Start+0x20c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <HAL_TIM_PWM_Start+0x148>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a33      	ldr	r2, [pc, #204]	; (8005508 <HAL_TIM_PWM_Start+0x210>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d101      	bne.n	8005444 <HAL_TIM_PWM_Start+0x14c>
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <HAL_TIM_PWM_Start+0x14e>
 8005444:	2300      	movs	r3, #0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005458:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a25      	ldr	r2, [pc, #148]	; (80054f4 <HAL_TIM_PWM_Start+0x1fc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d022      	beq.n	80054aa <HAL_TIM_PWM_Start+0x1b2>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546c:	d01d      	beq.n	80054aa <HAL_TIM_PWM_Start+0x1b2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a26      	ldr	r2, [pc, #152]	; (800550c <HAL_TIM_PWM_Start+0x214>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d018      	beq.n	80054aa <HAL_TIM_PWM_Start+0x1b2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a24      	ldr	r2, [pc, #144]	; (8005510 <HAL_TIM_PWM_Start+0x218>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <HAL_TIM_PWM_Start+0x1b2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a23      	ldr	r2, [pc, #140]	; (8005514 <HAL_TIM_PWM_Start+0x21c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00e      	beq.n	80054aa <HAL_TIM_PWM_Start+0x1b2>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a19      	ldr	r2, [pc, #100]	; (80054f8 <HAL_TIM_PWM_Start+0x200>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d009      	beq.n	80054aa <HAL_TIM_PWM_Start+0x1b2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a18      	ldr	r2, [pc, #96]	; (80054fc <HAL_TIM_PWM_Start+0x204>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d004      	beq.n	80054aa <HAL_TIM_PWM_Start+0x1b2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a18      	ldr	r2, [pc, #96]	; (8005508 <HAL_TIM_PWM_Start+0x210>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d115      	bne.n	80054d6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_TIM_PWM_Start+0x220>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b06      	cmp	r3, #6
 80054ba:	d015      	beq.n	80054e8 <HAL_TIM_PWM_Start+0x1f0>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c2:	d011      	beq.n	80054e8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d4:	e008      	b.n	80054e8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e000      	b.n	80054ea <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40013400 	.word	0x40013400
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800
 8005508:	40015000 	.word	0x40015000
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800
 8005514:	40000c00 	.word	0x40000c00
 8005518:	00010007 	.word	0x00010007

0800551c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 ff92 	bl	8006458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a40      	ldr	r2, [pc, #256]	; (800563c <HAL_TIM_PWM_Stop+0x120>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d018      	beq.n	8005570 <HAL_TIM_PWM_Stop+0x54>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a3f      	ldr	r2, [pc, #252]	; (8005640 <HAL_TIM_PWM_Stop+0x124>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d013      	beq.n	8005570 <HAL_TIM_PWM_Stop+0x54>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a3d      	ldr	r2, [pc, #244]	; (8005644 <HAL_TIM_PWM_Stop+0x128>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00e      	beq.n	8005570 <HAL_TIM_PWM_Stop+0x54>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a3c      	ldr	r2, [pc, #240]	; (8005648 <HAL_TIM_PWM_Stop+0x12c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d009      	beq.n	8005570 <HAL_TIM_PWM_Stop+0x54>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a3a      	ldr	r2, [pc, #232]	; (800564c <HAL_TIM_PWM_Stop+0x130>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_TIM_PWM_Stop+0x54>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a39      	ldr	r2, [pc, #228]	; (8005650 <HAL_TIM_PWM_Stop+0x134>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d101      	bne.n	8005574 <HAL_TIM_PWM_Stop+0x58>
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <HAL_TIM_PWM_Stop+0x5a>
 8005574:	2300      	movs	r3, #0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d017      	beq.n	80055aa <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	f241 1311 	movw	r3, #4369	; 0x1111
 8005584:	4013      	ands	r3, r2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10f      	bne.n	80055aa <HAL_TIM_PWM_Stop+0x8e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6a1a      	ldr	r2, [r3, #32]
 8005590:	f244 4344 	movw	r3, #17476	; 0x4444
 8005594:	4013      	ands	r3, r2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d107      	bne.n	80055aa <HAL_TIM_PWM_Stop+0x8e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a1a      	ldr	r2, [r3, #32]
 80055b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80055b4:	4013      	ands	r3, r2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10f      	bne.n	80055da <HAL_TIM_PWM_Stop+0xbe>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6a1a      	ldr	r2, [r3, #32]
 80055c0:	f244 4344 	movw	r3, #17476	; 0x4444
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d107      	bne.n	80055da <HAL_TIM_PWM_Stop+0xbe>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d104      	bne.n	80055ea <HAL_TIM_PWM_Stop+0xce>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e8:	e023      	b.n	8005632 <HAL_TIM_PWM_Stop+0x116>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d104      	bne.n	80055fa <HAL_TIM_PWM_Stop+0xde>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f8:	e01b      	b.n	8005632 <HAL_TIM_PWM_Stop+0x116>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d104      	bne.n	800560a <HAL_TIM_PWM_Stop+0xee>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005608:	e013      	b.n	8005632 <HAL_TIM_PWM_Stop+0x116>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b0c      	cmp	r3, #12
 800560e:	d104      	bne.n	800561a <HAL_TIM_PWM_Stop+0xfe>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005618:	e00b      	b.n	8005632 <HAL_TIM_PWM_Stop+0x116>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b10      	cmp	r3, #16
 800561e:	d104      	bne.n	800562a <HAL_TIM_PWM_Stop+0x10e>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005628:	e003      	b.n	8005632 <HAL_TIM_PWM_Stop+0x116>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40013400 	.word	0x40013400
 8005644:	40014000 	.word	0x40014000
 8005648:	40014400 	.word	0x40014400
 800564c:	40014800 	.word	0x40014800
 8005650:	40015000 	.word	0x40015000

08005654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b02      	cmp	r3, #2
 8005668:	d122      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b02      	cmp	r3, #2
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0202 	mvn.w	r2, #2
 8005680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fa7a 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fa6c 	bl	8005b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fa7d 	bl	8005ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0204 	mvn.w	r2, #4
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa50 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa42 	bl	8005b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fa53 	bl	8005ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b08      	cmp	r3, #8
 8005710:	d122      	bne.n	8005758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b08      	cmp	r3, #8
 800571e:	d11b      	bne.n	8005758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0208 	mvn.w	r2, #8
 8005728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2204      	movs	r2, #4
 800572e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa26 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 8005744:	e005      	b.n	8005752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa18 	bl	8005b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fa29 	bl	8005ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b10      	cmp	r3, #16
 8005764:	d122      	bne.n	80057ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b10      	cmp	r3, #16
 8005772:	d11b      	bne.n	80057ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0210 	mvn.w	r2, #16
 800577c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2208      	movs	r2, #8
 8005782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f9fc 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 8005798:	e005      	b.n	80057a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9ee 	bl	8005b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f9ff 	bl	8005ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d10e      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d107      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0201 	mvn.w	r2, #1
 80057d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fb fac0 	bl	8000d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b80      	cmp	r3, #128	; 0x80
 80057e4:	d10e      	bne.n	8005804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f0:	2b80      	cmp	r3, #128	; 0x80
 80057f2:	d107      	bne.n	8005804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 f970 	bl	8006ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005812:	d10e      	bne.n	8005832 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581e:	2b80      	cmp	r3, #128	; 0x80
 8005820:	d107      	bne.n	8005832 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800582a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f001 f963 	bl	8006af8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d10e      	bne.n	800585e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584a:	2b40      	cmp	r3, #64	; 0x40
 800584c:	d107      	bne.n	800585e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f9ad 	bl	8005bb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b20      	cmp	r3, #32
 800586a:	d10e      	bne.n	800588a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b20      	cmp	r3, #32
 8005878:	d107      	bne.n	800588a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f06f 0220 	mvn.w	r2, #32
 8005882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 f923 	bl	8006ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005898:	d10f      	bne.n	80058ba <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a8:	d107      	bne.n	80058ba <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80058b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 f929 	bl	8006b0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058c8:	d10f      	bne.n	80058ea <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058d8:	d107      	bne.n	80058ea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80058e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 f91b 	bl	8006b20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f8:	d10f      	bne.n	800591a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005908:	d107      	bne.n	800591a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 f90d 	bl	8006b34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005928:	d10f      	bne.n	800594a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005934:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005938:	d107      	bne.n	800594a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f001 f8ff 	bl	8006b48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800596e:	2302      	movs	r3, #2
 8005970:	e0ff      	b.n	8005b72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b14      	cmp	r3, #20
 800597e:	f200 80f0 	bhi.w	8005b62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005982:	a201      	add	r2, pc, #4	; (adr r2, 8005988 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005988:	080059dd 	.word	0x080059dd
 800598c:	08005b63 	.word	0x08005b63
 8005990:	08005b63 	.word	0x08005b63
 8005994:	08005b63 	.word	0x08005b63
 8005998:	08005a1d 	.word	0x08005a1d
 800599c:	08005b63 	.word	0x08005b63
 80059a0:	08005b63 	.word	0x08005b63
 80059a4:	08005b63 	.word	0x08005b63
 80059a8:	08005a5f 	.word	0x08005a5f
 80059ac:	08005b63 	.word	0x08005b63
 80059b0:	08005b63 	.word	0x08005b63
 80059b4:	08005b63 	.word	0x08005b63
 80059b8:	08005a9f 	.word	0x08005a9f
 80059bc:	08005b63 	.word	0x08005b63
 80059c0:	08005b63 	.word	0x08005b63
 80059c4:	08005b63 	.word	0x08005b63
 80059c8:	08005ae1 	.word	0x08005ae1
 80059cc:	08005b63 	.word	0x08005b63
 80059d0:	08005b63 	.word	0x08005b63
 80059d4:	08005b63 	.word	0x08005b63
 80059d8:	08005b21 	.word	0x08005b21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 f99a 	bl	8005d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0208 	orr.w	r2, r2, #8
 80059f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0204 	bic.w	r2, r2, #4
 8005a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6999      	ldr	r1, [r3, #24]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	691a      	ldr	r2, [r3, #16]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	619a      	str	r2, [r3, #24]
      break;
 8005a1a:	e0a5      	b.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fa14 	bl	8005e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6999      	ldr	r1, [r3, #24]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	021a      	lsls	r2, r3, #8
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	619a      	str	r2, [r3, #24]
      break;
 8005a5c:	e084      	b.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68b9      	ldr	r1, [r7, #8]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 fa87 	bl	8005f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f042 0208 	orr.w	r2, r2, #8
 8005a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0204 	bic.w	r2, r2, #4
 8005a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69d9      	ldr	r1, [r3, #28]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	61da      	str	r2, [r3, #28]
      break;
 8005a9c:	e064      	b.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 faf9 	bl	800609c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69d9      	ldr	r1, [r3, #28]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	021a      	lsls	r2, r3, #8
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	61da      	str	r2, [r3, #28]
      break;
 8005ade:	e043      	b.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fb6c 	bl	80061c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0208 	orr.w	r2, r2, #8
 8005afa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0204 	bic.w	r2, r2, #4
 8005b0a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005b1e:	e023      	b.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fbb6 	bl	8006298 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b4a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	021a      	lsls	r2, r3, #8
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005b60:	e002      	b.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	75fb      	strb	r3, [r7, #23]
      break;
 8005b66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop

08005b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a46      	ldr	r2, [pc, #280]	; (8005cf8 <TIM_Base_SetConfig+0x12c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d017      	beq.n	8005c14 <TIM_Base_SetConfig+0x48>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bea:	d013      	beq.n	8005c14 <TIM_Base_SetConfig+0x48>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a43      	ldr	r2, [pc, #268]	; (8005cfc <TIM_Base_SetConfig+0x130>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00f      	beq.n	8005c14 <TIM_Base_SetConfig+0x48>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a42      	ldr	r2, [pc, #264]	; (8005d00 <TIM_Base_SetConfig+0x134>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00b      	beq.n	8005c14 <TIM_Base_SetConfig+0x48>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a41      	ldr	r2, [pc, #260]	; (8005d04 <TIM_Base_SetConfig+0x138>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d007      	beq.n	8005c14 <TIM_Base_SetConfig+0x48>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a40      	ldr	r2, [pc, #256]	; (8005d08 <TIM_Base_SetConfig+0x13c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d003      	beq.n	8005c14 <TIM_Base_SetConfig+0x48>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a3f      	ldr	r2, [pc, #252]	; (8005d0c <TIM_Base_SetConfig+0x140>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d108      	bne.n	8005c26 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a33      	ldr	r2, [pc, #204]	; (8005cf8 <TIM_Base_SetConfig+0x12c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d023      	beq.n	8005c76 <TIM_Base_SetConfig+0xaa>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c34:	d01f      	beq.n	8005c76 <TIM_Base_SetConfig+0xaa>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a30      	ldr	r2, [pc, #192]	; (8005cfc <TIM_Base_SetConfig+0x130>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01b      	beq.n	8005c76 <TIM_Base_SetConfig+0xaa>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a2f      	ldr	r2, [pc, #188]	; (8005d00 <TIM_Base_SetConfig+0x134>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d017      	beq.n	8005c76 <TIM_Base_SetConfig+0xaa>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2e      	ldr	r2, [pc, #184]	; (8005d04 <TIM_Base_SetConfig+0x138>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <TIM_Base_SetConfig+0xaa>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a2d      	ldr	r2, [pc, #180]	; (8005d08 <TIM_Base_SetConfig+0x13c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00f      	beq.n	8005c76 <TIM_Base_SetConfig+0xaa>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a2d      	ldr	r2, [pc, #180]	; (8005d10 <TIM_Base_SetConfig+0x144>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00b      	beq.n	8005c76 <TIM_Base_SetConfig+0xaa>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a2c      	ldr	r2, [pc, #176]	; (8005d14 <TIM_Base_SetConfig+0x148>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d007      	beq.n	8005c76 <TIM_Base_SetConfig+0xaa>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a2b      	ldr	r2, [pc, #172]	; (8005d18 <TIM_Base_SetConfig+0x14c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d003      	beq.n	8005c76 <TIM_Base_SetConfig+0xaa>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a26      	ldr	r2, [pc, #152]	; (8005d0c <TIM_Base_SetConfig+0x140>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d108      	bne.n	8005c88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a12      	ldr	r2, [pc, #72]	; (8005cf8 <TIM_Base_SetConfig+0x12c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <TIM_Base_SetConfig+0x110>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a14      	ldr	r2, [pc, #80]	; (8005d08 <TIM_Base_SetConfig+0x13c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00f      	beq.n	8005cdc <TIM_Base_SetConfig+0x110>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a14      	ldr	r2, [pc, #80]	; (8005d10 <TIM_Base_SetConfig+0x144>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <TIM_Base_SetConfig+0x110>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <TIM_Base_SetConfig+0x148>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d007      	beq.n	8005cdc <TIM_Base_SetConfig+0x110>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a12      	ldr	r2, [pc, #72]	; (8005d18 <TIM_Base_SetConfig+0x14c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_Base_SetConfig+0x110>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a0d      	ldr	r2, [pc, #52]	; (8005d0c <TIM_Base_SetConfig+0x140>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d103      	bne.n	8005ce4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	615a      	str	r2, [r3, #20]
}
 8005cea:	bf00      	nop
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40012c00 	.word	0x40012c00
 8005cfc:	40000400 	.word	0x40000400
 8005d00:	40000800 	.word	0x40000800
 8005d04:	40000c00 	.word	0x40000c00
 8005d08:	40013400 	.word	0x40013400
 8005d0c:	40015000 	.word	0x40015000
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40014400 	.word	0x40014400
 8005d18:	40014800 	.word	0x40014800

08005d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	f023 0201 	bic.w	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0303 	bic.w	r3, r3, #3
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f023 0302 	bic.w	r3, r3, #2
 8005d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a30      	ldr	r2, [pc, #192]	; (8005e38 <TIM_OC1_SetConfig+0x11c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d013      	beq.n	8005da4 <TIM_OC1_SetConfig+0x88>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a2f      	ldr	r2, [pc, #188]	; (8005e3c <TIM_OC1_SetConfig+0x120>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00f      	beq.n	8005da4 <TIM_OC1_SetConfig+0x88>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a2e      	ldr	r2, [pc, #184]	; (8005e40 <TIM_OC1_SetConfig+0x124>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00b      	beq.n	8005da4 <TIM_OC1_SetConfig+0x88>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a2d      	ldr	r2, [pc, #180]	; (8005e44 <TIM_OC1_SetConfig+0x128>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <TIM_OC1_SetConfig+0x88>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a2c      	ldr	r2, [pc, #176]	; (8005e48 <TIM_OC1_SetConfig+0x12c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_OC1_SetConfig+0x88>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a2b      	ldr	r2, [pc, #172]	; (8005e4c <TIM_OC1_SetConfig+0x130>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d10c      	bne.n	8005dbe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f023 0308 	bic.w	r3, r3, #8
 8005daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f023 0304 	bic.w	r3, r3, #4
 8005dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1d      	ldr	r2, [pc, #116]	; (8005e38 <TIM_OC1_SetConfig+0x11c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <TIM_OC1_SetConfig+0xd2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1c      	ldr	r2, [pc, #112]	; (8005e3c <TIM_OC1_SetConfig+0x120>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00f      	beq.n	8005dee <TIM_OC1_SetConfig+0xd2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1b      	ldr	r2, [pc, #108]	; (8005e40 <TIM_OC1_SetConfig+0x124>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <TIM_OC1_SetConfig+0xd2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1a      	ldr	r2, [pc, #104]	; (8005e44 <TIM_OC1_SetConfig+0x128>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <TIM_OC1_SetConfig+0xd2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a19      	ldr	r2, [pc, #100]	; (8005e48 <TIM_OC1_SetConfig+0x12c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d003      	beq.n	8005dee <TIM_OC1_SetConfig+0xd2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <TIM_OC1_SetConfig+0x130>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d111      	bne.n	8005e12 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	621a      	str	r2, [r3, #32]
}
 8005e2c:	bf00      	nop
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	40012c00 	.word	0x40012c00
 8005e3c:	40013400 	.word	0x40013400
 8005e40:	40014000 	.word	0x40014000
 8005e44:	40014400 	.word	0x40014400
 8005e48:	40014800 	.word	0x40014800
 8005e4c:	40015000 	.word	0x40015000

08005e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f023 0210 	bic.w	r2, r3, #16
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f023 0320 	bic.w	r3, r3, #32
 8005e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a2c      	ldr	r2, [pc, #176]	; (8005f60 <TIM_OC2_SetConfig+0x110>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d007      	beq.n	8005ec4 <TIM_OC2_SetConfig+0x74>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a2b      	ldr	r2, [pc, #172]	; (8005f64 <TIM_OC2_SetConfig+0x114>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_OC2_SetConfig+0x74>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a2a      	ldr	r2, [pc, #168]	; (8005f68 <TIM_OC2_SetConfig+0x118>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d10d      	bne.n	8005ee0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ede:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a1f      	ldr	r2, [pc, #124]	; (8005f60 <TIM_OC2_SetConfig+0x110>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d013      	beq.n	8005f10 <TIM_OC2_SetConfig+0xc0>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a1e      	ldr	r2, [pc, #120]	; (8005f64 <TIM_OC2_SetConfig+0x114>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00f      	beq.n	8005f10 <TIM_OC2_SetConfig+0xc0>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	; (8005f6c <TIM_OC2_SetConfig+0x11c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00b      	beq.n	8005f10 <TIM_OC2_SetConfig+0xc0>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a1d      	ldr	r2, [pc, #116]	; (8005f70 <TIM_OC2_SetConfig+0x120>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d007      	beq.n	8005f10 <TIM_OC2_SetConfig+0xc0>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a1c      	ldr	r2, [pc, #112]	; (8005f74 <TIM_OC2_SetConfig+0x124>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_OC2_SetConfig+0xc0>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a17      	ldr	r2, [pc, #92]	; (8005f68 <TIM_OC2_SetConfig+0x118>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d113      	bne.n	8005f38 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	40012c00 	.word	0x40012c00
 8005f64:	40013400 	.word	0x40013400
 8005f68:	40015000 	.word	0x40015000
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800

08005f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0303 	bic.w	r3, r3, #3
 8005fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a2b      	ldr	r2, [pc, #172]	; (8006084 <TIM_OC3_SetConfig+0x10c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d007      	beq.n	8005fea <TIM_OC3_SetConfig+0x72>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a2a      	ldr	r2, [pc, #168]	; (8006088 <TIM_OC3_SetConfig+0x110>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_OC3_SetConfig+0x72>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a29      	ldr	r2, [pc, #164]	; (800608c <TIM_OC3_SetConfig+0x114>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d10d      	bne.n	8006006 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a1e      	ldr	r2, [pc, #120]	; (8006084 <TIM_OC3_SetConfig+0x10c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d013      	beq.n	8006036 <TIM_OC3_SetConfig+0xbe>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a1d      	ldr	r2, [pc, #116]	; (8006088 <TIM_OC3_SetConfig+0x110>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00f      	beq.n	8006036 <TIM_OC3_SetConfig+0xbe>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a1d      	ldr	r2, [pc, #116]	; (8006090 <TIM_OC3_SetConfig+0x118>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00b      	beq.n	8006036 <TIM_OC3_SetConfig+0xbe>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a1c      	ldr	r2, [pc, #112]	; (8006094 <TIM_OC3_SetConfig+0x11c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d007      	beq.n	8006036 <TIM_OC3_SetConfig+0xbe>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a1b      	ldr	r2, [pc, #108]	; (8006098 <TIM_OC3_SetConfig+0x120>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d003      	beq.n	8006036 <TIM_OC3_SetConfig+0xbe>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a16      	ldr	r2, [pc, #88]	; (800608c <TIM_OC3_SetConfig+0x114>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d113      	bne.n	800605e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800603c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	621a      	str	r2, [r3, #32]
}
 8006078:	bf00      	nop
 800607a:	371c      	adds	r7, #28
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40013400 	.word	0x40013400
 800608c:	40015000 	.word	0x40015000
 8006090:	40014000 	.word	0x40014000
 8006094:	40014400 	.word	0x40014400
 8006098:	40014800 	.word	0x40014800

0800609c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	031b      	lsls	r3, r3, #12
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a2c      	ldr	r2, [pc, #176]	; (80061ac <TIM_OC4_SetConfig+0x110>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d007      	beq.n	8006110 <TIM_OC4_SetConfig+0x74>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a2b      	ldr	r2, [pc, #172]	; (80061b0 <TIM_OC4_SetConfig+0x114>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_OC4_SetConfig+0x74>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a2a      	ldr	r2, [pc, #168]	; (80061b4 <TIM_OC4_SetConfig+0x118>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d10d      	bne.n	800612c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	031b      	lsls	r3, r3, #12
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800612a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a1f      	ldr	r2, [pc, #124]	; (80061ac <TIM_OC4_SetConfig+0x110>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d013      	beq.n	800615c <TIM_OC4_SetConfig+0xc0>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a1e      	ldr	r2, [pc, #120]	; (80061b0 <TIM_OC4_SetConfig+0x114>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00f      	beq.n	800615c <TIM_OC4_SetConfig+0xc0>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a1e      	ldr	r2, [pc, #120]	; (80061b8 <TIM_OC4_SetConfig+0x11c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00b      	beq.n	800615c <TIM_OC4_SetConfig+0xc0>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a1d      	ldr	r2, [pc, #116]	; (80061bc <TIM_OC4_SetConfig+0x120>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d007      	beq.n	800615c <TIM_OC4_SetConfig+0xc0>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a1c      	ldr	r2, [pc, #112]	; (80061c0 <TIM_OC4_SetConfig+0x124>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_OC4_SetConfig+0xc0>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a17      	ldr	r2, [pc, #92]	; (80061b4 <TIM_OC4_SetConfig+0x118>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d113      	bne.n	8006184 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006162:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800616a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	019b      	lsls	r3, r3, #6
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	019b      	lsls	r3, r3, #6
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	40013400 	.word	0x40013400
 80061b4:	40015000 	.word	0x40015000
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800

080061c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006208:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	041b      	lsls	r3, r3, #16
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4313      	orrs	r3, r2
 8006214:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a19      	ldr	r2, [pc, #100]	; (8006280 <TIM_OC5_SetConfig+0xbc>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <TIM_OC5_SetConfig+0x82>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a18      	ldr	r2, [pc, #96]	; (8006284 <TIM_OC5_SetConfig+0xc0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00f      	beq.n	8006246 <TIM_OC5_SetConfig+0x82>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a17      	ldr	r2, [pc, #92]	; (8006288 <TIM_OC5_SetConfig+0xc4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00b      	beq.n	8006246 <TIM_OC5_SetConfig+0x82>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a16      	ldr	r2, [pc, #88]	; (800628c <TIM_OC5_SetConfig+0xc8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d007      	beq.n	8006246 <TIM_OC5_SetConfig+0x82>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a15      	ldr	r2, [pc, #84]	; (8006290 <TIM_OC5_SetConfig+0xcc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d003      	beq.n	8006246 <TIM_OC5_SetConfig+0x82>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a14      	ldr	r2, [pc, #80]	; (8006294 <TIM_OC5_SetConfig+0xd0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d109      	bne.n	800625a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	621a      	str	r2, [r3, #32]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40012c00 	.word	0x40012c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	40014800 	.word	0x40014800
 8006294:	40015000 	.word	0x40015000

08006298 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	021b      	lsls	r3, r3, #8
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	051b      	lsls	r3, r3, #20
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a1a      	ldr	r2, [pc, #104]	; (8006358 <TIM_OC6_SetConfig+0xc0>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d013      	beq.n	800631c <TIM_OC6_SetConfig+0x84>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a19      	ldr	r2, [pc, #100]	; (800635c <TIM_OC6_SetConfig+0xc4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00f      	beq.n	800631c <TIM_OC6_SetConfig+0x84>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a18      	ldr	r2, [pc, #96]	; (8006360 <TIM_OC6_SetConfig+0xc8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00b      	beq.n	800631c <TIM_OC6_SetConfig+0x84>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a17      	ldr	r2, [pc, #92]	; (8006364 <TIM_OC6_SetConfig+0xcc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d007      	beq.n	800631c <TIM_OC6_SetConfig+0x84>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a16      	ldr	r2, [pc, #88]	; (8006368 <TIM_OC6_SetConfig+0xd0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_OC6_SetConfig+0x84>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a15      	ldr	r2, [pc, #84]	; (800636c <TIM_OC6_SetConfig+0xd4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d109      	bne.n	8006330 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006322:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	029b      	lsls	r3, r3, #10
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	621a      	str	r2, [r3, #32]
}
 800634a:	bf00      	nop
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40012c00 	.word	0x40012c00
 800635c:	40013400 	.word	0x40013400
 8006360:	40014000 	.word	0x40014000
 8006364:	40014400 	.word	0x40014400
 8006368:	40014800 	.word	0x40014800
 800636c:	40015000 	.word	0x40015000

08006370 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
 800637c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	f023 0201 	bic.w	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4a28      	ldr	r2, [pc, #160]	; (800643c <TIM_TI1_SetConfig+0xcc>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d01b      	beq.n	80063d6 <TIM_TI1_SetConfig+0x66>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a4:	d017      	beq.n	80063d6 <TIM_TI1_SetConfig+0x66>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4a25      	ldr	r2, [pc, #148]	; (8006440 <TIM_TI1_SetConfig+0xd0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d013      	beq.n	80063d6 <TIM_TI1_SetConfig+0x66>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4a24      	ldr	r2, [pc, #144]	; (8006444 <TIM_TI1_SetConfig+0xd4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00f      	beq.n	80063d6 <TIM_TI1_SetConfig+0x66>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4a23      	ldr	r2, [pc, #140]	; (8006448 <TIM_TI1_SetConfig+0xd8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00b      	beq.n	80063d6 <TIM_TI1_SetConfig+0x66>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4a22      	ldr	r2, [pc, #136]	; (800644c <TIM_TI1_SetConfig+0xdc>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d007      	beq.n	80063d6 <TIM_TI1_SetConfig+0x66>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4a21      	ldr	r2, [pc, #132]	; (8006450 <TIM_TI1_SetConfig+0xe0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d003      	beq.n	80063d6 <TIM_TI1_SetConfig+0x66>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4a20      	ldr	r2, [pc, #128]	; (8006454 <TIM_TI1_SetConfig+0xe4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d101      	bne.n	80063da <TIM_TI1_SetConfig+0x6a>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <TIM_TI1_SetConfig+0x6c>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f023 0303 	bic.w	r3, r3, #3
 80063e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	e003      	b.n	80063fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	011b      	lsls	r3, r3, #4
 8006406:	b2db      	uxtb	r3, r3
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	4313      	orrs	r3, r2
 800640c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f023 030a 	bic.w	r3, r3, #10
 8006414:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f003 030a 	and.w	r3, r3, #10
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40012c00 	.word	0x40012c00
 8006440:	40000400 	.word	0x40000400
 8006444:	40000800 	.word	0x40000800
 8006448:	40000c00 	.word	0x40000c00
 800644c:	40013400 	.word	0x40013400
 8006450:	40014000 	.word	0x40014000
 8006454:	40015000 	.word	0x40015000

08006458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	2201      	movs	r2, #1
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a1a      	ldr	r2, [r3, #32]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	43db      	mvns	r3, r3
 800647a:	401a      	ands	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a1a      	ldr	r2, [r3, #32]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f003 031f 	and.w	r3, r3, #31
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	fa01 f303 	lsl.w	r3, r1, r3
 8006490:	431a      	orrs	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	621a      	str	r2, [r3, #32]
}
 8006496:	bf00      	nop
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b08a      	sub	sp, #40	; 0x28
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e0a0      	b.n	80065f8 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fb f872 	bl	80015b4 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	4619      	mov	r1, r3
 80064e2:	4610      	mov	r0, r2
 80064e4:	f7ff fb72 	bl	8005bcc <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	6819      	ldr	r1, [r3, #0]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2203      	movs	r2, #3
 80064f6:	f7ff ff3b 	bl	8006370 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699a      	ldr	r2, [r3, #24]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 020c 	bic.w	r2, r2, #12
 8006508:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6999      	ldr	r1, [r3, #24]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800652a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800654e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6812      	ldr	r2, [r2, #0]
 800655a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800655e:	f023 0307 	bic.w	r3, r3, #7
 8006562:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0204 	orr.w	r2, r2, #4
 8006572:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006574:	2300      	movs	r3, #0
 8006576:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006578:	2300      	movs	r3, #0
 800657a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800657c:	2370      	movs	r3, #112	; 0x70
 800657e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006580:	2300      	movs	r3, #0
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006584:	2300      	movs	r3, #0
 8006586:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f107 020c 	add.w	r2, r7, #12
 800659a:	4611      	mov	r1, r2
 800659c:	4618      	mov	r0, r3
 800659e:	f7ff fc57 	bl	8005e50 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80065b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b4:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80065c4:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3728      	adds	r7, #40	; 0x28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <HAL_TIMEx_PWMN_Start+0x24>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	bf14      	ite	ne
 800661c:	2301      	movne	r3, #1
 800661e:	2300      	moveq	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	e022      	b.n	800666a <HAL_TIMEx_PWMN_Start+0x6a>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2b04      	cmp	r3, #4
 8006628:	d109      	bne.n	800663e <HAL_TIMEx_PWMN_Start+0x3e>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b01      	cmp	r3, #1
 8006634:	bf14      	ite	ne
 8006636:	2301      	movne	r3, #1
 8006638:	2300      	moveq	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	e015      	b.n	800666a <HAL_TIMEx_PWMN_Start+0x6a>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b08      	cmp	r3, #8
 8006642:	d109      	bne.n	8006658 <HAL_TIMEx_PWMN_Start+0x58>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b01      	cmp	r3, #1
 800664e:	bf14      	ite	ne
 8006650:	2301      	movne	r3, #1
 8006652:	2300      	moveq	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	e008      	b.n	800666a <HAL_TIMEx_PWMN_Start+0x6a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b01      	cmp	r3, #1
 8006662:	bf14      	ite	ne
 8006664:	2301      	movne	r3, #1
 8006666:	2300      	moveq	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e073      	b.n	800675a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <HAL_TIMEx_PWMN_Start+0x82>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006680:	e013      	b.n	80066aa <HAL_TIMEx_PWMN_Start+0xaa>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b04      	cmp	r3, #4
 8006686:	d104      	bne.n	8006692 <HAL_TIMEx_PWMN_Start+0x92>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006690:	e00b      	b.n	80066aa <HAL_TIMEx_PWMN_Start+0xaa>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b08      	cmp	r3, #8
 8006696:	d104      	bne.n	80066a2 <HAL_TIMEx_PWMN_Start+0xa2>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066a0:	e003      	b.n	80066aa <HAL_TIMEx_PWMN_Start+0xaa>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2204      	movs	r2, #4
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fa52 	bl	8006b5c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a25      	ldr	r2, [pc, #148]	; (8006764 <HAL_TIMEx_PWMN_Start+0x164>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d022      	beq.n	8006718 <HAL_TIMEx_PWMN_Start+0x118>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066da:	d01d      	beq.n	8006718 <HAL_TIMEx_PWMN_Start+0x118>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a21      	ldr	r2, [pc, #132]	; (8006768 <HAL_TIMEx_PWMN_Start+0x168>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d018      	beq.n	8006718 <HAL_TIMEx_PWMN_Start+0x118>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a20      	ldr	r2, [pc, #128]	; (800676c <HAL_TIMEx_PWMN_Start+0x16c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d013      	beq.n	8006718 <HAL_TIMEx_PWMN_Start+0x118>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1e      	ldr	r2, [pc, #120]	; (8006770 <HAL_TIMEx_PWMN_Start+0x170>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00e      	beq.n	8006718 <HAL_TIMEx_PWMN_Start+0x118>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1d      	ldr	r2, [pc, #116]	; (8006774 <HAL_TIMEx_PWMN_Start+0x174>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d009      	beq.n	8006718 <HAL_TIMEx_PWMN_Start+0x118>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1b      	ldr	r2, [pc, #108]	; (8006778 <HAL_TIMEx_PWMN_Start+0x178>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_TIMEx_PWMN_Start+0x118>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1a      	ldr	r2, [pc, #104]	; (800677c <HAL_TIMEx_PWMN_Start+0x17c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d115      	bne.n	8006744 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	4b18      	ldr	r3, [pc, #96]	; (8006780 <HAL_TIMEx_PWMN_Start+0x180>)
 8006720:	4013      	ands	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b06      	cmp	r3, #6
 8006728:	d015      	beq.n	8006756 <HAL_TIMEx_PWMN_Start+0x156>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006730:	d011      	beq.n	8006756 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0201 	orr.w	r2, r2, #1
 8006740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006742:	e008      	b.n	8006756 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e000      	b.n	8006758 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006756:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40012c00 	.word	0x40012c00
 8006768:	40000400 	.word	0x40000400
 800676c:	40000800 	.word	0x40000800
 8006770:	40000c00 	.word	0x40000c00
 8006774:	40013400 	.word	0x40013400
 8006778:	40014000 	.word	0x40014000
 800677c:	40015000 	.word	0x40015000
 8006780:	00010007 	.word	0x00010007

08006784 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2200      	movs	r2, #0
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f000 f9e0 	bl	8006b5c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6a1a      	ldr	r2, [r3, #32]
 80067a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10f      	bne.n	80067cc <HAL_TIMEx_PWMN_Stop+0x48>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6a1a      	ldr	r2, [r3, #32]
 80067b2:	f244 4344 	movw	r3, #17476	; 0x4444
 80067b6:	4013      	ands	r3, r2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d107      	bne.n	80067cc <HAL_TIMEx_PWMN_Stop+0x48>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6a1a      	ldr	r2, [r3, #32]
 80067d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80067d6:	4013      	ands	r3, r2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10f      	bne.n	80067fc <HAL_TIMEx_PWMN_Stop+0x78>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a1a      	ldr	r2, [r3, #32]
 80067e2:	f244 4344 	movw	r3, #17476	; 0x4444
 80067e6:	4013      	ands	r3, r2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d107      	bne.n	80067fc <HAL_TIMEx_PWMN_Stop+0x78>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0201 	bic.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d104      	bne.n	800680c <HAL_TIMEx_PWMN_Stop+0x88>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800680a:	e013      	b.n	8006834 <HAL_TIMEx_PWMN_Stop+0xb0>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b04      	cmp	r3, #4
 8006810:	d104      	bne.n	800681c <HAL_TIMEx_PWMN_Stop+0x98>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800681a:	e00b      	b.n	8006834 <HAL_TIMEx_PWMN_Stop+0xb0>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b08      	cmp	r3, #8
 8006820:	d104      	bne.n	800682c <HAL_TIMEx_PWMN_Stop+0xa8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800682a:	e003      	b.n	8006834 <HAL_TIMEx_PWMN_Stop+0xb0>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006854:	2302      	movs	r3, #2
 8006856:	e074      	b.n	8006942 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a34      	ldr	r2, [pc, #208]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d009      	beq.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a33      	ldr	r2, [pc, #204]	; (8006954 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d004      	beq.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a31      	ldr	r2, [pc, #196]	; (8006958 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d108      	bne.n	80068a8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800689c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80068ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a21      	ldr	r2, [pc, #132]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d022      	beq.n	8006916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d8:	d01d      	beq.n	8006916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1f      	ldr	r2, [pc, #124]	; (800695c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d018      	beq.n	8006916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1d      	ldr	r2, [pc, #116]	; (8006960 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d013      	beq.n	8006916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1c      	ldr	r2, [pc, #112]	; (8006964 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00e      	beq.n	8006916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a15      	ldr	r2, [pc, #84]	; (8006954 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d009      	beq.n	8006916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a18      	ldr	r2, [pc, #96]	; (8006968 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d004      	beq.n	8006916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a11      	ldr	r2, [pc, #68]	; (8006958 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d10c      	bne.n	8006930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800691c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	4313      	orrs	r3, r2
 8006926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40012c00 	.word	0x40012c00
 8006954:	40013400 	.word	0x40013400
 8006958:	40015000 	.word	0x40015000
 800695c:	40000400 	.word	0x40000400
 8006960:	40000800 	.word	0x40000800
 8006964:	40000c00 	.word	0x40000c00
 8006968:	40014000 	.word	0x40014000

0800696c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006984:	2302      	movs	r3, #2
 8006986:	e096      	b.n	8006ab6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	041b      	lsls	r3, r3, #16
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a2f      	ldr	r2, [pc, #188]	; (8006ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d009      	beq.n	8006a20 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a2d      	ldr	r2, [pc, #180]	; (8006ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d004      	beq.n	8006a20 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a2c      	ldr	r2, [pc, #176]	; (8006acc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d106      	bne.n	8006a2e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a24      	ldr	r2, [pc, #144]	; (8006ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d009      	beq.n	8006a4c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a22      	ldr	r2, [pc, #136]	; (8006ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a21      	ldr	r2, [pc, #132]	; (8006acc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d12b      	bne.n	8006aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	051b      	lsls	r3, r3, #20
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a11      	ldr	r2, [pc, #68]	; (8006ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d009      	beq.n	8006a96 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a10      	ldr	r2, [pc, #64]	; (8006ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d004      	beq.n	8006a96 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a0e      	ldr	r2, [pc, #56]	; (8006acc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d106      	bne.n	8006aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40013400 	.word	0x40013400
 8006acc:	40015000 	.word	0x40015000

08006ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 031f 	and.w	r3, r3, #31
 8006b6e:	2204      	movs	r2, #4
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1a      	ldr	r2, [r3, #32]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	401a      	ands	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1a      	ldr	r2, [r3, #32]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	fa01 f303 	lsl.w	r3, r1, r3
 8006b94:	431a      	orrs	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e042      	b.n	8006c3e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fa fe54 	bl	8001878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2224      	movs	r2, #36	; 0x24
 8006bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0201 	bic.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fc51 	bl	8007490 <UART_SetConfig>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e022      	b.n	8006c3e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 ff41 	bl	8007a88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f042 0201 	orr.w	r2, r2, #1
 8006c34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 ffc8 	bl	8007bcc <UART_CheckIdleState>
 8006c3c:	4603      	mov	r3, r0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b08a      	sub	sp, #40	; 0x28
 8006c4a:	af02      	add	r7, sp, #8
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	603b      	str	r3, [r7, #0]
 8006c52:	4613      	mov	r3, r2
 8006c54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	f040 8083 	bne.w	8006d68 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <HAL_UART_Transmit+0x28>
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e07b      	b.n	8006d6a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_UART_Transmit+0x3a>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e074      	b.n	8006d6a <HAL_UART_Transmit+0x124>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2221      	movs	r2, #33	; 0x21
 8006c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c98:	f7fa fee2 	bl	8001a60 <HAL_GetTick>
 8006c9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	88fa      	ldrh	r2, [r7, #6]
 8006ca2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	88fa      	ldrh	r2, [r7, #6]
 8006caa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb6:	d108      	bne.n	8006cca <HAL_UART_Transmit+0x84>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d104      	bne.n	8006cca <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	61bb      	str	r3, [r7, #24]
 8006cc8:	e003      	b.n	8006cd2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006cda:	e02c      	b.n	8006d36 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2180      	movs	r1, #128	; 0x80
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 ffbb 	bl	8007c62 <UART_WaitOnFlagUntilTimeout>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e039      	b.n	8006d6a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10b      	bne.n	8006d14 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	3302      	adds	r3, #2
 8006d10:	61bb      	str	r3, [r7, #24]
 8006d12:	e007      	b.n	8006d24 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	781a      	ldrb	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	3301      	adds	r3, #1
 8006d22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1cc      	bne.n	8006cdc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2140      	movs	r1, #64	; 0x40
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 ff88 	bl	8007c62 <UART_WaitOnFlagUntilTimeout>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e006      	b.n	8006d6a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	e000      	b.n	8006d6a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006d68:	2302      	movs	r3, #2
  }
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08a      	sub	sp, #40	; 0x28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d142      	bne.n	8006e12 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <HAL_UART_Receive_IT+0x24>
 8006d92:	88fb      	ldrh	r3, [r7, #6]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e03b      	b.n	8006e14 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_UART_Receive_IT+0x36>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e034      	b.n	8006e14 <HAL_UART_Receive_IT+0xa0>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a17      	ldr	r2, [pc, #92]	; (8006e1c <HAL_UART_Receive_IT+0xa8>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d01f      	beq.n	8006e02 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d018      	beq.n	8006e02 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	623b      	str	r3, [r7, #32]
 8006df0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	69f9      	ldr	r1, [r7, #28]
 8006df4:	6a3a      	ldr	r2, [r7, #32]
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e6      	bne.n	8006dd0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e02:	88fb      	ldrh	r3, [r7, #6]
 8006e04:	461a      	mov	r2, r3
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 fff3 	bl	8007df4 <UART_Start_Receive_IT>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	e000      	b.n	8006e14 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006e12:	2302      	movs	r3, #2
  }
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3728      	adds	r7, #40	; 0x28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40008000 	.word	0x40008000

08006e20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b0ba      	sub	sp, #232	; 0xe8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e4e:	4013      	ands	r3, r2
 8006e50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d11b      	bne.n	8006e94 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d015      	beq.n	8006e94 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d105      	bne.n	8006e80 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d009      	beq.n	8006e94 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 82d6 	beq.w	8007436 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
      }
      return;
 8006e92:	e2d0      	b.n	8007436 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 811f 	beq.w	80070dc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006e9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006ea2:	4b8b      	ldr	r3, [pc, #556]	; (80070d0 <HAL_UART_IRQHandler+0x2b0>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006eaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006eae:	4b89      	ldr	r3, [pc, #548]	; (80070d4 <HAL_UART_IRQHandler+0x2b4>)
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 8112 	beq.w	80070dc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d011      	beq.n	8006ee8 <HAL_UART_IRQHandler+0xc8>
 8006ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ede:	f043 0201 	orr.w	r2, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d011      	beq.n	8006f18 <HAL_UART_IRQHandler+0xf8>
 8006ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00b      	beq.n	8006f18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2202      	movs	r2, #2
 8006f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f0e:	f043 0204 	orr.w	r2, r3, #4
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d011      	beq.n	8006f48 <HAL_UART_IRQHandler+0x128>
 8006f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00b      	beq.n	8006f48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2204      	movs	r2, #4
 8006f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f3e:	f043 0202 	orr.w	r2, r3, #2
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d017      	beq.n	8006f84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d105      	bne.n	8006f6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006f64:	4b5a      	ldr	r3, [pc, #360]	; (80070d0 <HAL_UART_IRQHandler+0x2b0>)
 8006f66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2208      	movs	r2, #8
 8006f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f7a:	f043 0208 	orr.w	r2, r3, #8
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d012      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x196>
 8006f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00c      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fac:	f043 0220 	orr.w	r2, r3, #32
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 823c 	beq.w	800743a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d013      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d105      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700a:	2b40      	cmp	r3, #64	; 0x40
 800700c:	d005      	beq.n	800701a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800700e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007012:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007016:	2b00      	cmp	r3, #0
 8007018:	d04f      	beq.n	80070ba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 f814 	bl	8008048 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702a:	2b40      	cmp	r3, #64	; 0x40
 800702c:	d141      	bne.n	80070b2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3308      	adds	r3, #8
 8007034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800704c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3308      	adds	r3, #8
 8007056:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800705a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800705e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007066:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800706a:	e841 2300 	strex	r3, r2, [r1]
 800706e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1d9      	bne.n	800702e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d013      	beq.n	80070aa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007086:	4a14      	ldr	r2, [pc, #80]	; (80070d8 <HAL_UART_IRQHandler+0x2b8>)
 8007088:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800708e:	4618      	mov	r0, r3
 8007090:	f7fc fbb4 	bl	80037fc <HAL_DMA_Abort_IT>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d017      	beq.n	80070ca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80070a4:	4610      	mov	r0, r2
 80070a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a8:	e00f      	b.n	80070ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f9da 	bl	8007464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b0:	e00b      	b.n	80070ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f9d6 	bl	8007464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b8:	e007      	b.n	80070ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f9d2 	bl	8007464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80070c8:	e1b7      	b.n	800743a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ca:	bf00      	nop
    return;
 80070cc:	e1b5      	b.n	800743a <HAL_UART_IRQHandler+0x61a>
 80070ce:	bf00      	nop
 80070d0:	10000001 	.word	0x10000001
 80070d4:	04000120 	.word	0x04000120
 80070d8:	08008115 	.word	0x08008115

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	f040 814a 	bne.w	800737a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 8143 	beq.w	800737a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f8:	f003 0310 	and.w	r3, r3, #16
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 813c 	beq.w	800737a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2210      	movs	r2, #16
 8007108:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007114:	2b40      	cmp	r3, #64	; 0x40
 8007116:	f040 80b5 	bne.w	8007284 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007126:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 8187 	beq.w	800743e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800713a:	429a      	cmp	r2, r3
 800713c:	f080 817f 	bcs.w	800743e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007146:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	f040 8086 	bne.w	8007268 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	461a      	mov	r2, r3
 8007182:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007186:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800718a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007192:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800719e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1da      	bne.n	800715c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071b8:	f023 0301 	bic.w	r3, r3, #1
 80071bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3308      	adds	r3, #8
 80071c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80071ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e1      	bne.n	80071a6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3308      	adds	r3, #8
 8007202:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007206:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007208:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800720c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e3      	bne.n	80071e2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007238:	f023 0310 	bic.w	r3, r3, #16
 800723c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800724a:	65bb      	str	r3, [r7, #88]	; 0x58
 800724c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007252:	e841 2300 	strex	r3, r2, [r1]
 8007256:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1e4      	bne.n	8007228 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007262:	4618      	mov	r0, r3
 8007264:	f7fc fa71 	bl	800374a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007274:	b29b      	uxth	r3, r3
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	b29b      	uxth	r3, r3
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f8fb 	bl	8007478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007282:	e0dc      	b.n	800743e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007290:	b29b      	uxth	r3, r3
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 80ce 	beq.w	8007442 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80072a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 80c9 	beq.w	8007442 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072d2:	647b      	str	r3, [r7, #68]	; 0x44
 80072d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e4      	bne.n	80072b0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3308      	adds	r3, #8
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	623b      	str	r3, [r7, #32]
   return(result);
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072fc:	f023 0301 	bic.w	r3, r3, #1
 8007300:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3308      	adds	r3, #8
 800730a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800730e:	633a      	str	r2, [r7, #48]	; 0x30
 8007310:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e1      	bne.n	80072e6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	60fb      	str	r3, [r7, #12]
   return(result);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0310 	bic.w	r3, r3, #16
 800734a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007358:	61fb      	str	r3, [r7, #28]
 800735a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	69b9      	ldr	r1, [r7, #24]
 800735e:	69fa      	ldr	r2, [r7, #28]
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	617b      	str	r3, [r7, #20]
   return(result);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e4      	bne.n	8007336 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800736c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f880 	bl	8007478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007378:	e063      	b.n	8007442 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800737a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00e      	beq.n	80073a4 <HAL_UART_IRQHandler+0x584>
 8007386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800738a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d008      	beq.n	80073a4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800739a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f001 fb57 	bl	8008a50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073a2:	e051      	b.n	8007448 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80073a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d014      	beq.n	80073da <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80073b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d105      	bne.n	80073c8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80073bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d03a      	beq.n	8007446 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	4798      	blx	r3
    }
    return;
 80073d8:	e035      	b.n	8007446 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d009      	beq.n	80073fa <HAL_UART_IRQHandler+0x5da>
 80073e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fea4 	bl	8008140 <UART_EndTransmit_IT>
    return;
 80073f8:	e026      	b.n	8007448 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d009      	beq.n	800741a <HAL_UART_IRQHandler+0x5fa>
 8007406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800740a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 fb30 	bl	8008a78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007418:	e016      	b.n	8007448 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800741a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800741e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d010      	beq.n	8007448 <HAL_UART_IRQHandler+0x628>
 8007426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800742a:	2b00      	cmp	r3, #0
 800742c:	da0c      	bge.n	8007448 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f001 fb18 	bl	8008a64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007434:	e008      	b.n	8007448 <HAL_UART_IRQHandler+0x628>
      return;
 8007436:	bf00      	nop
 8007438:	e006      	b.n	8007448 <HAL_UART_IRQHandler+0x628>
    return;
 800743a:	bf00      	nop
 800743c:	e004      	b.n	8007448 <HAL_UART_IRQHandler+0x628>
      return;
 800743e:	bf00      	nop
 8007440:	e002      	b.n	8007448 <HAL_UART_IRQHandler+0x628>
      return;
 8007442:	bf00      	nop
 8007444:	e000      	b.n	8007448 <HAL_UART_IRQHandler+0x628>
    return;
 8007446:	bf00      	nop
  }
}
 8007448:	37e8      	adds	r7, #232	; 0xe8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop

08007450 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007494:	b08c      	sub	sp, #48	; 0x30
 8007496:	af00      	add	r7, sp, #0
 8007498:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	431a      	orrs	r2, r3
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	431a      	orrs	r2, r3
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	4baa      	ldr	r3, [pc, #680]	; (8007768 <UART_SetConfig+0x2d8>)
 80074c0:	4013      	ands	r3, r2
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	6812      	ldr	r2, [r2, #0]
 80074c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074c8:	430b      	orrs	r3, r1
 80074ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a9f      	ldr	r2, [pc, #636]	; (800776c <UART_SetConfig+0x2dc>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d004      	beq.n	80074fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074f8:	4313      	orrs	r3, r2
 80074fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007506:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	6812      	ldr	r2, [r2, #0]
 800750e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007510:	430b      	orrs	r3, r1
 8007512:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751a:	f023 010f 	bic.w	r1, r3, #15
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a90      	ldr	r2, [pc, #576]	; (8007770 <UART_SetConfig+0x2e0>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d125      	bne.n	8007580 <UART_SetConfig+0xf0>
 8007534:	4b8f      	ldr	r3, [pc, #572]	; (8007774 <UART_SetConfig+0x2e4>)
 8007536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	2b03      	cmp	r3, #3
 8007540:	d81a      	bhi.n	8007578 <UART_SetConfig+0xe8>
 8007542:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <UART_SetConfig+0xb8>)
 8007544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007548:	08007559 	.word	0x08007559
 800754c:	08007569 	.word	0x08007569
 8007550:	08007561 	.word	0x08007561
 8007554:	08007571 	.word	0x08007571
 8007558:	2301      	movs	r3, #1
 800755a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800755e:	e116      	b.n	800778e <UART_SetConfig+0x2fe>
 8007560:	2302      	movs	r3, #2
 8007562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007566:	e112      	b.n	800778e <UART_SetConfig+0x2fe>
 8007568:	2304      	movs	r3, #4
 800756a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800756e:	e10e      	b.n	800778e <UART_SetConfig+0x2fe>
 8007570:	2308      	movs	r3, #8
 8007572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007576:	e10a      	b.n	800778e <UART_SetConfig+0x2fe>
 8007578:	2310      	movs	r3, #16
 800757a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800757e:	e106      	b.n	800778e <UART_SetConfig+0x2fe>
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a7c      	ldr	r2, [pc, #496]	; (8007778 <UART_SetConfig+0x2e8>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d138      	bne.n	80075fc <UART_SetConfig+0x16c>
 800758a:	4b7a      	ldr	r3, [pc, #488]	; (8007774 <UART_SetConfig+0x2e4>)
 800758c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007590:	f003 030c 	and.w	r3, r3, #12
 8007594:	2b0c      	cmp	r3, #12
 8007596:	d82d      	bhi.n	80075f4 <UART_SetConfig+0x164>
 8007598:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <UART_SetConfig+0x110>)
 800759a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759e:	bf00      	nop
 80075a0:	080075d5 	.word	0x080075d5
 80075a4:	080075f5 	.word	0x080075f5
 80075a8:	080075f5 	.word	0x080075f5
 80075ac:	080075f5 	.word	0x080075f5
 80075b0:	080075e5 	.word	0x080075e5
 80075b4:	080075f5 	.word	0x080075f5
 80075b8:	080075f5 	.word	0x080075f5
 80075bc:	080075f5 	.word	0x080075f5
 80075c0:	080075dd 	.word	0x080075dd
 80075c4:	080075f5 	.word	0x080075f5
 80075c8:	080075f5 	.word	0x080075f5
 80075cc:	080075f5 	.word	0x080075f5
 80075d0:	080075ed 	.word	0x080075ed
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075da:	e0d8      	b.n	800778e <UART_SetConfig+0x2fe>
 80075dc:	2302      	movs	r3, #2
 80075de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075e2:	e0d4      	b.n	800778e <UART_SetConfig+0x2fe>
 80075e4:	2304      	movs	r3, #4
 80075e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ea:	e0d0      	b.n	800778e <UART_SetConfig+0x2fe>
 80075ec:	2308      	movs	r3, #8
 80075ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075f2:	e0cc      	b.n	800778e <UART_SetConfig+0x2fe>
 80075f4:	2310      	movs	r3, #16
 80075f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075fa:	e0c8      	b.n	800778e <UART_SetConfig+0x2fe>
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a5e      	ldr	r2, [pc, #376]	; (800777c <UART_SetConfig+0x2ec>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d125      	bne.n	8007652 <UART_SetConfig+0x1c2>
 8007606:	4b5b      	ldr	r3, [pc, #364]	; (8007774 <UART_SetConfig+0x2e4>)
 8007608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007610:	2b30      	cmp	r3, #48	; 0x30
 8007612:	d016      	beq.n	8007642 <UART_SetConfig+0x1b2>
 8007614:	2b30      	cmp	r3, #48	; 0x30
 8007616:	d818      	bhi.n	800764a <UART_SetConfig+0x1ba>
 8007618:	2b20      	cmp	r3, #32
 800761a:	d00a      	beq.n	8007632 <UART_SetConfig+0x1a2>
 800761c:	2b20      	cmp	r3, #32
 800761e:	d814      	bhi.n	800764a <UART_SetConfig+0x1ba>
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <UART_SetConfig+0x19a>
 8007624:	2b10      	cmp	r3, #16
 8007626:	d008      	beq.n	800763a <UART_SetConfig+0x1aa>
 8007628:	e00f      	b.n	800764a <UART_SetConfig+0x1ba>
 800762a:	2300      	movs	r3, #0
 800762c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007630:	e0ad      	b.n	800778e <UART_SetConfig+0x2fe>
 8007632:	2302      	movs	r3, #2
 8007634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007638:	e0a9      	b.n	800778e <UART_SetConfig+0x2fe>
 800763a:	2304      	movs	r3, #4
 800763c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007640:	e0a5      	b.n	800778e <UART_SetConfig+0x2fe>
 8007642:	2308      	movs	r3, #8
 8007644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007648:	e0a1      	b.n	800778e <UART_SetConfig+0x2fe>
 800764a:	2310      	movs	r3, #16
 800764c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007650:	e09d      	b.n	800778e <UART_SetConfig+0x2fe>
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a4a      	ldr	r2, [pc, #296]	; (8007780 <UART_SetConfig+0x2f0>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d125      	bne.n	80076a8 <UART_SetConfig+0x218>
 800765c:	4b45      	ldr	r3, [pc, #276]	; (8007774 <UART_SetConfig+0x2e4>)
 800765e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007662:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007666:	2bc0      	cmp	r3, #192	; 0xc0
 8007668:	d016      	beq.n	8007698 <UART_SetConfig+0x208>
 800766a:	2bc0      	cmp	r3, #192	; 0xc0
 800766c:	d818      	bhi.n	80076a0 <UART_SetConfig+0x210>
 800766e:	2b80      	cmp	r3, #128	; 0x80
 8007670:	d00a      	beq.n	8007688 <UART_SetConfig+0x1f8>
 8007672:	2b80      	cmp	r3, #128	; 0x80
 8007674:	d814      	bhi.n	80076a0 <UART_SetConfig+0x210>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <UART_SetConfig+0x1f0>
 800767a:	2b40      	cmp	r3, #64	; 0x40
 800767c:	d008      	beq.n	8007690 <UART_SetConfig+0x200>
 800767e:	e00f      	b.n	80076a0 <UART_SetConfig+0x210>
 8007680:	2300      	movs	r3, #0
 8007682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007686:	e082      	b.n	800778e <UART_SetConfig+0x2fe>
 8007688:	2302      	movs	r3, #2
 800768a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800768e:	e07e      	b.n	800778e <UART_SetConfig+0x2fe>
 8007690:	2304      	movs	r3, #4
 8007692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007696:	e07a      	b.n	800778e <UART_SetConfig+0x2fe>
 8007698:	2308      	movs	r3, #8
 800769a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800769e:	e076      	b.n	800778e <UART_SetConfig+0x2fe>
 80076a0:	2310      	movs	r3, #16
 80076a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076a6:	e072      	b.n	800778e <UART_SetConfig+0x2fe>
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a35      	ldr	r2, [pc, #212]	; (8007784 <UART_SetConfig+0x2f4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d12a      	bne.n	8007708 <UART_SetConfig+0x278>
 80076b2:	4b30      	ldr	r3, [pc, #192]	; (8007774 <UART_SetConfig+0x2e4>)
 80076b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076c0:	d01a      	beq.n	80076f8 <UART_SetConfig+0x268>
 80076c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076c6:	d81b      	bhi.n	8007700 <UART_SetConfig+0x270>
 80076c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076cc:	d00c      	beq.n	80076e8 <UART_SetConfig+0x258>
 80076ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d2:	d815      	bhi.n	8007700 <UART_SetConfig+0x270>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <UART_SetConfig+0x250>
 80076d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076dc:	d008      	beq.n	80076f0 <UART_SetConfig+0x260>
 80076de:	e00f      	b.n	8007700 <UART_SetConfig+0x270>
 80076e0:	2300      	movs	r3, #0
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076e6:	e052      	b.n	800778e <UART_SetConfig+0x2fe>
 80076e8:	2302      	movs	r3, #2
 80076ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ee:	e04e      	b.n	800778e <UART_SetConfig+0x2fe>
 80076f0:	2304      	movs	r3, #4
 80076f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076f6:	e04a      	b.n	800778e <UART_SetConfig+0x2fe>
 80076f8:	2308      	movs	r3, #8
 80076fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076fe:	e046      	b.n	800778e <UART_SetConfig+0x2fe>
 8007700:	2310      	movs	r3, #16
 8007702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007706:	e042      	b.n	800778e <UART_SetConfig+0x2fe>
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a17      	ldr	r2, [pc, #92]	; (800776c <UART_SetConfig+0x2dc>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d13a      	bne.n	8007788 <UART_SetConfig+0x2f8>
 8007712:	4b18      	ldr	r3, [pc, #96]	; (8007774 <UART_SetConfig+0x2e4>)
 8007714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007718:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800771c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007720:	d01a      	beq.n	8007758 <UART_SetConfig+0x2c8>
 8007722:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007726:	d81b      	bhi.n	8007760 <UART_SetConfig+0x2d0>
 8007728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800772c:	d00c      	beq.n	8007748 <UART_SetConfig+0x2b8>
 800772e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007732:	d815      	bhi.n	8007760 <UART_SetConfig+0x2d0>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <UART_SetConfig+0x2b0>
 8007738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800773c:	d008      	beq.n	8007750 <UART_SetConfig+0x2c0>
 800773e:	e00f      	b.n	8007760 <UART_SetConfig+0x2d0>
 8007740:	2300      	movs	r3, #0
 8007742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007746:	e022      	b.n	800778e <UART_SetConfig+0x2fe>
 8007748:	2302      	movs	r3, #2
 800774a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800774e:	e01e      	b.n	800778e <UART_SetConfig+0x2fe>
 8007750:	2304      	movs	r3, #4
 8007752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007756:	e01a      	b.n	800778e <UART_SetConfig+0x2fe>
 8007758:	2308      	movs	r3, #8
 800775a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800775e:	e016      	b.n	800778e <UART_SetConfig+0x2fe>
 8007760:	2310      	movs	r3, #16
 8007762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007766:	e012      	b.n	800778e <UART_SetConfig+0x2fe>
 8007768:	cfff69f3 	.word	0xcfff69f3
 800776c:	40008000 	.word	0x40008000
 8007770:	40013800 	.word	0x40013800
 8007774:	40021000 	.word	0x40021000
 8007778:	40004400 	.word	0x40004400
 800777c:	40004800 	.word	0x40004800
 8007780:	40004c00 	.word	0x40004c00
 8007784:	40005000 	.word	0x40005000
 8007788:	2310      	movs	r3, #16
 800778a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4aae      	ldr	r2, [pc, #696]	; (8007a4c <UART_SetConfig+0x5bc>)
 8007794:	4293      	cmp	r3, r2
 8007796:	f040 8097 	bne.w	80078c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800779a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800779e:	2b08      	cmp	r3, #8
 80077a0:	d823      	bhi.n	80077ea <UART_SetConfig+0x35a>
 80077a2:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <UART_SetConfig+0x318>)
 80077a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a8:	080077cd 	.word	0x080077cd
 80077ac:	080077eb 	.word	0x080077eb
 80077b0:	080077d5 	.word	0x080077d5
 80077b4:	080077eb 	.word	0x080077eb
 80077b8:	080077db 	.word	0x080077db
 80077bc:	080077eb 	.word	0x080077eb
 80077c0:	080077eb 	.word	0x080077eb
 80077c4:	080077eb 	.word	0x080077eb
 80077c8:	080077e3 	.word	0x080077e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077cc:	f7fd f900 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 80077d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077d2:	e010      	b.n	80077f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d4:	4b9e      	ldr	r3, [pc, #632]	; (8007a50 <UART_SetConfig+0x5c0>)
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077d8:	e00d      	b.n	80077f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077da:	f7fd f88b 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 80077de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077e0:	e009      	b.n	80077f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077e8:	e005      	b.n	80077f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80077f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 8130 	beq.w	8007a5e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	4a94      	ldr	r2, [pc, #592]	; (8007a54 <UART_SetConfig+0x5c4>)
 8007804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007808:	461a      	mov	r2, r3
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007810:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	4613      	mov	r3, r2
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	4413      	add	r3, r2
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	429a      	cmp	r2, r3
 8007820:	d305      	bcc.n	800782e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	429a      	cmp	r2, r3
 800782c:	d903      	bls.n	8007836 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007834:	e113      	b.n	8007a5e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	2200      	movs	r2, #0
 800783a:	60bb      	str	r3, [r7, #8]
 800783c:	60fa      	str	r2, [r7, #12]
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	4a84      	ldr	r2, [pc, #528]	; (8007a54 <UART_SetConfig+0x5c4>)
 8007844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007848:	b29b      	uxth	r3, r3
 800784a:	2200      	movs	r2, #0
 800784c:	603b      	str	r3, [r7, #0]
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007854:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007858:	f7f8 fd32 	bl	80002c0 <__aeabi_uldivmod>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4610      	mov	r0, r2
 8007862:	4619      	mov	r1, r3
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	020b      	lsls	r3, r1, #8
 800786e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007872:	0202      	lsls	r2, r0, #8
 8007874:	6979      	ldr	r1, [r7, #20]
 8007876:	6849      	ldr	r1, [r1, #4]
 8007878:	0849      	lsrs	r1, r1, #1
 800787a:	2000      	movs	r0, #0
 800787c:	460c      	mov	r4, r1
 800787e:	4605      	mov	r5, r0
 8007880:	eb12 0804 	adds.w	r8, r2, r4
 8007884:	eb43 0905 	adc.w	r9, r3, r5
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	469a      	mov	sl, r3
 8007890:	4693      	mov	fp, r2
 8007892:	4652      	mov	r2, sl
 8007894:	465b      	mov	r3, fp
 8007896:	4640      	mov	r0, r8
 8007898:	4649      	mov	r1, r9
 800789a:	f7f8 fd11 	bl	80002c0 <__aeabi_uldivmod>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4613      	mov	r3, r2
 80078a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ac:	d308      	bcc.n	80078c0 <UART_SetConfig+0x430>
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b4:	d204      	bcs.n	80078c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6a3a      	ldr	r2, [r7, #32]
 80078bc:	60da      	str	r2, [r3, #12]
 80078be:	e0ce      	b.n	8007a5e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80078c6:	e0ca      	b.n	8007a5e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d0:	d166      	bne.n	80079a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80078d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078d6:	2b08      	cmp	r3, #8
 80078d8:	d827      	bhi.n	800792a <UART_SetConfig+0x49a>
 80078da:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <UART_SetConfig+0x450>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	08007905 	.word	0x08007905
 80078e4:	0800790d 	.word	0x0800790d
 80078e8:	08007915 	.word	0x08007915
 80078ec:	0800792b 	.word	0x0800792b
 80078f0:	0800791b 	.word	0x0800791b
 80078f4:	0800792b 	.word	0x0800792b
 80078f8:	0800792b 	.word	0x0800792b
 80078fc:	0800792b 	.word	0x0800792b
 8007900:	08007923 	.word	0x08007923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007904:	f7fd f864 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 8007908:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800790a:	e014      	b.n	8007936 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800790c:	f7fd f876 	bl	80049fc <HAL_RCC_GetPCLK2Freq>
 8007910:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007912:	e010      	b.n	8007936 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007914:	4b4e      	ldr	r3, [pc, #312]	; (8007a50 <UART_SetConfig+0x5c0>)
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007918:	e00d      	b.n	8007936 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800791a:	f7fc ffeb 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 800791e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007920:	e009      	b.n	8007936 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007928:	e005      	b.n	8007936 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 8090 	beq.w	8007a5e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	4a44      	ldr	r2, [pc, #272]	; (8007a54 <UART_SetConfig+0x5c4>)
 8007944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007948:	461a      	mov	r2, r3
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007950:	005a      	lsls	r2, r3, #1
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	085b      	lsrs	r3, r3, #1
 8007958:	441a      	add	r2, r3
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007962:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	2b0f      	cmp	r3, #15
 8007968:	d916      	bls.n	8007998 <UART_SetConfig+0x508>
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007970:	d212      	bcs.n	8007998 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	b29b      	uxth	r3, r3
 8007976:	f023 030f 	bic.w	r3, r3, #15
 800797a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	085b      	lsrs	r3, r3, #1
 8007980:	b29b      	uxth	r3, r3
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	b29a      	uxth	r2, r3
 8007988:	8bfb      	ldrh	r3, [r7, #30]
 800798a:	4313      	orrs	r3, r2
 800798c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	8bfa      	ldrh	r2, [r7, #30]
 8007994:	60da      	str	r2, [r3, #12]
 8007996:	e062      	b.n	8007a5e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800799e:	e05e      	b.n	8007a5e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d828      	bhi.n	80079fa <UART_SetConfig+0x56a>
 80079a8:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <UART_SetConfig+0x520>)
 80079aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ae:	bf00      	nop
 80079b0:	080079d5 	.word	0x080079d5
 80079b4:	080079dd 	.word	0x080079dd
 80079b8:	080079e5 	.word	0x080079e5
 80079bc:	080079fb 	.word	0x080079fb
 80079c0:	080079eb 	.word	0x080079eb
 80079c4:	080079fb 	.word	0x080079fb
 80079c8:	080079fb 	.word	0x080079fb
 80079cc:	080079fb 	.word	0x080079fb
 80079d0:	080079f3 	.word	0x080079f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d4:	f7fc fffc 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 80079d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079da:	e014      	b.n	8007a06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079dc:	f7fd f80e 	bl	80049fc <HAL_RCC_GetPCLK2Freq>
 80079e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079e2:	e010      	b.n	8007a06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079e4:	4b1a      	ldr	r3, [pc, #104]	; (8007a50 <UART_SetConfig+0x5c0>)
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079e8:	e00d      	b.n	8007a06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ea:	f7fc ff83 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 80079ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079f0:	e009      	b.n	8007a06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079f8:	e005      	b.n	8007a06 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a04:	bf00      	nop
    }

    if (pclk != 0U)
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d028      	beq.n	8007a5e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	4a10      	ldr	r2, [pc, #64]	; (8007a54 <UART_SetConfig+0x5c4>)
 8007a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a16:	461a      	mov	r2, r3
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	085b      	lsrs	r3, r3, #1
 8007a24:	441a      	add	r2, r3
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	2b0f      	cmp	r3, #15
 8007a34:	d910      	bls.n	8007a58 <UART_SetConfig+0x5c8>
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3c:	d20c      	bcs.n	8007a58 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60da      	str	r2, [r3, #12]
 8007a48:	e009      	b.n	8007a5e <UART_SetConfig+0x5ce>
 8007a4a:	bf00      	nop
 8007a4c:	40008000 	.word	0x40008000
 8007a50:	00f42400 	.word	0x00f42400
 8007a54:	08009838 	.word	0x08009838
      }
      else
      {
        ret = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2200      	movs	r2, #0
 8007a72:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2200      	movs	r2, #0
 8007a78:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007a7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3730      	adds	r7, #48	; 0x30
 8007a82:	46bd      	mov	sp, r7
 8007a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00a      	beq.n	8007ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad8:	f003 0304 	and.w	r3, r3, #4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	f003 0308 	and.w	r3, r3, #8
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	f003 0310 	and.w	r3, r3, #16
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d01a      	beq.n	8007b9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b86:	d10a      	bne.n	8007b9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	605a      	str	r2, [r3, #4]
  }
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bdc:	f7f9 ff40 	bl	8001a60 <HAL_GetTick>
 8007be0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0308 	and.w	r3, r3, #8
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d10e      	bne.n	8007c0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f82f 	bl	8007c62 <UART_WaitOnFlagUntilTimeout>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e025      	b.n	8007c5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d10e      	bne.n	8007c3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f819 	bl	8007c62 <UART_WaitOnFlagUntilTimeout>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e00f      	b.n	8007c5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b09c      	sub	sp, #112	; 0x70
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	603b      	str	r3, [r7, #0]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c72:	e0a9      	b.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7a:	f000 80a5 	beq.w	8007dc8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c7e:	f7f9 feef 	bl	8001a60 <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d302      	bcc.n	8007c94 <UART_WaitOnFlagUntilTimeout+0x32>
 8007c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d140      	bne.n	8007d16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ca8:	667b      	str	r3, [r7, #100]	; 0x64
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cb4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e6      	bne.n	8007c94 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ce6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ce8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e5      	bne.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e069      	b.n	8007dea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d051      	beq.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d32:	d149      	bne.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e6      	bne.n	8007d3e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3308      	adds	r3, #8
 8007d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f023 0301 	bic.w	r3, r3, #1
 8007d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d90:	623a      	str	r2, [r7, #32]
 8007d92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	69f9      	ldr	r1, [r7, #28]
 8007d96:	6a3a      	ldr	r2, [r7, #32]
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e5      	bne.n	8007d70 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e010      	b.n	8007dea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	69da      	ldr	r2, [r3, #28]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	bf0c      	ite	eq
 8007dd8:	2301      	moveq	r3, #1
 8007dda:	2300      	movne	r3, #0
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	461a      	mov	r2, r3
 8007de0:	79fb      	ldrb	r3, [r7, #7]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	f43f af46 	beq.w	8007c74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3770      	adds	r7, #112	; 0x70
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b0a3      	sub	sp, #140	; 0x8c
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	88fa      	ldrh	r2, [r7, #6]
 8007e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	88fa      	ldrh	r2, [r7, #6]
 8007e14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e26:	d10e      	bne.n	8007e46 <UART_Start_Receive_IT+0x52>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d105      	bne.n	8007e3c <UART_Start_Receive_IT+0x48>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e3a:	e02d      	b.n	8007e98 <UART_Start_Receive_IT+0xa4>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	22ff      	movs	r2, #255	; 0xff
 8007e40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e44:	e028      	b.n	8007e98 <UART_Start_Receive_IT+0xa4>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10d      	bne.n	8007e6a <UART_Start_Receive_IT+0x76>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d104      	bne.n	8007e60 <UART_Start_Receive_IT+0x6c>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	22ff      	movs	r2, #255	; 0xff
 8007e5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e5e:	e01b      	b.n	8007e98 <UART_Start_Receive_IT+0xa4>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	227f      	movs	r2, #127	; 0x7f
 8007e64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e68:	e016      	b.n	8007e98 <UART_Start_Receive_IT+0xa4>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e72:	d10d      	bne.n	8007e90 <UART_Start_Receive_IT+0x9c>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d104      	bne.n	8007e86 <UART_Start_Receive_IT+0x92>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	227f      	movs	r2, #127	; 0x7f
 8007e80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e84:	e008      	b.n	8007e98 <UART_Start_Receive_IT+0xa4>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	223f      	movs	r2, #63	; 0x3f
 8007e8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e8e:	e003      	b.n	8007e98 <UART_Start_Receive_IT+0xa4>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2222      	movs	r2, #34	; 0x22
 8007ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3308      	adds	r3, #8
 8007eae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eb2:	e853 3f00 	ldrex	r3, [r3]
 8007eb6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007eba:	f043 0301 	orr.w	r3, r3, #1
 8007ebe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007ecc:	673a      	str	r2, [r7, #112]	; 0x70
 8007ece:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007ed2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ed4:	e841 2300 	strex	r3, r2, [r1]
 8007ed8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e3      	bne.n	8007ea8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ee8:	d153      	bne.n	8007f92 <UART_Start_Receive_IT+0x19e>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ef0:	88fa      	ldrh	r2, [r7, #6]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d34d      	bcc.n	8007f92 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efe:	d107      	bne.n	8007f10 <UART_Start_Receive_IT+0x11c>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d103      	bne.n	8007f10 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4a4b      	ldr	r2, [pc, #300]	; (8008038 <UART_Start_Receive_IT+0x244>)
 8007f0c:	671a      	str	r2, [r3, #112]	; 0x70
 8007f0e:	e002      	b.n	8007f16 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4a4a      	ldr	r2, [pc, #296]	; (800803c <UART_Start_Receive_IT+0x248>)
 8007f14:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d01a      	beq.n	8007f5c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f2e:	e853 3f00 	ldrex	r3, [r3]
 8007f32:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f4a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e4      	bne.n	8007f26 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3308      	adds	r3, #8
 8007f62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3308      	adds	r3, #8
 8007f7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007f7c:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f7e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e5      	bne.n	8007f5c <UART_Start_Receive_IT+0x168>
 8007f90:	e04a      	b.n	8008028 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f9a:	d107      	bne.n	8007fac <UART_Start_Receive_IT+0x1b8>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d103      	bne.n	8007fac <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4a26      	ldr	r2, [pc, #152]	; (8008040 <UART_Start_Receive_IT+0x24c>)
 8007fa8:	671a      	str	r2, [r3, #112]	; 0x70
 8007faa:	e002      	b.n	8007fb2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4a25      	ldr	r2, [pc, #148]	; (8008044 <UART_Start_Receive_IT+0x250>)
 8007fb0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d019      	beq.n	8007ff6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007fd6:	677b      	str	r3, [r7, #116]	; 0x74
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e6      	bne.n	8007fc2 <UART_Start_Receive_IT+0x1ce>
 8007ff4:	e018      	b.n	8008028 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	613b      	str	r3, [r7, #16]
   return(result);
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f043 0320 	orr.w	r3, r3, #32
 800800a:	67bb      	str	r3, [r7, #120]	; 0x78
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	461a      	mov	r2, r3
 8008012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008014:	623b      	str	r3, [r7, #32]
 8008016:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	69f9      	ldr	r1, [r7, #28]
 800801a:	6a3a      	ldr	r2, [r7, #32]
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	61bb      	str	r3, [r7, #24]
   return(result);
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e6      	bne.n	8007ff6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	378c      	adds	r7, #140	; 0x8c
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	08008751 	.word	0x08008751
 800803c:	08008459 	.word	0x08008459
 8008040:	080082f7 	.word	0x080082f7
 8008044:	08008197 	.word	0x08008197

08008048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b095      	sub	sp, #84	; 0x54
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008064:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800806e:	643b      	str	r3, [r7, #64]	; 0x40
 8008070:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008074:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e6      	bne.n	8008050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3308      	adds	r3, #8
 8008088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	61fb      	str	r3, [r7, #28]
   return(result);
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008098:	f023 0301 	bic.w	r3, r3, #1
 800809c:	64bb      	str	r3, [r7, #72]	; 0x48
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3308      	adds	r3, #8
 80080a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e3      	bne.n	8008082 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d118      	bne.n	80080f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f023 0310 	bic.w	r3, r3, #16
 80080d6:	647b      	str	r3, [r7, #68]	; 0x44
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080e0:	61bb      	str	r3, [r7, #24]
 80080e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6979      	ldr	r1, [r7, #20]
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	613b      	str	r3, [r7, #16]
   return(result);
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e6      	bne.n	80080c2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008108:	bf00      	nop
 800810a:	3754      	adds	r7, #84	; 0x54
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008120:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7ff f996 	bl	8007464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008138:	bf00      	nop
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	60bb      	str	r3, [r7, #8]
   return(result);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800815c:	61fb      	str	r3, [r7, #28]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	61bb      	str	r3, [r7, #24]
 8008168:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6979      	ldr	r1, [r7, #20]
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	613b      	str	r3, [r7, #16]
   return(result);
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e6      	bne.n	8008148 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff f961 	bl	8007450 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800818e:	bf00      	nop
 8008190:	3720      	adds	r7, #32
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b096      	sub	sp, #88	; 0x58
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ae:	2b22      	cmp	r3, #34	; 0x22
 80081b0:	f040 8095 	bne.w	80082de <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081be:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80081c2:	b2d9      	uxtb	r1, r3
 80081c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ce:	400a      	ands	r2, r1
 80081d0:	b2d2      	uxtb	r2, r2
 80081d2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d178      	bne.n	80082ee <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008210:	653b      	str	r3, [r7, #80]	; 0x50
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800821a:	647b      	str	r3, [r7, #68]	; 0x44
 800821c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e6      	bne.n	80081fc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3308      	adds	r3, #8
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	623b      	str	r3, [r7, #32]
   return(result);
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	f023 0301 	bic.w	r3, r3, #1
 8008244:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800824e:	633a      	str	r2, [r7, #48]	; 0x30
 8008250:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e5      	bne.n	800822e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2220      	movs	r2, #32
 8008266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008274:	2b01      	cmp	r3, #1
 8008276:	d12e      	bne.n	80082d6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	e853 3f00 	ldrex	r3, [r3]
 800828a:	60fb      	str	r3, [r7, #12]
   return(result);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0310 	bic.w	r3, r3, #16
 8008292:	64bb      	str	r3, [r7, #72]	; 0x48
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	461a      	mov	r2, r3
 800829a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800829c:	61fb      	str	r3, [r7, #28]
 800829e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	69b9      	ldr	r1, [r7, #24]
 80082a2:	69fa      	ldr	r2, [r7, #28]
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	617b      	str	r3, [r7, #20]
   return(result);
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e6      	bne.n	800827e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	f003 0310 	and.w	r3, r3, #16
 80082ba:	2b10      	cmp	r3, #16
 80082bc:	d103      	bne.n	80082c6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2210      	movs	r2, #16
 80082c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7ff f8d2 	bl	8007478 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082d4:	e00b      	b.n	80082ee <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7f8 fd1e 	bl	8000d18 <HAL_UART_RxCpltCallback>
}
 80082dc:	e007      	b.n	80082ee <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	699a      	ldr	r2, [r3, #24]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f042 0208 	orr.w	r2, r2, #8
 80082ec:	619a      	str	r2, [r3, #24]
}
 80082ee:	bf00      	nop
 80082f0:	3758      	adds	r7, #88	; 0x58
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b096      	sub	sp, #88	; 0x58
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008304:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800830e:	2b22      	cmp	r3, #34	; 0x22
 8008310:	f040 8095 	bne.w	800843e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008322:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008324:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008328:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800832c:	4013      	ands	r3, r2
 800832e:	b29a      	uxth	r2, r3
 8008330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008332:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008338:	1c9a      	adds	r2, r3, #2
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008344:	b29b      	uxth	r3, r3
 8008346:	3b01      	subs	r3, #1
 8008348:	b29a      	uxth	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008356:	b29b      	uxth	r3, r3
 8008358:	2b00      	cmp	r3, #0
 800835a:	d178      	bne.n	800844e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008370:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800837a:	643b      	str	r3, [r7, #64]	; 0x40
 800837c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008380:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e6      	bne.n	800835c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3308      	adds	r3, #8
 8008394:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	61fb      	str	r3, [r7, #28]
   return(result);
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	f023 0301 	bic.w	r3, r3, #1
 80083a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3308      	adds	r3, #8
 80083ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e5      	bne.n	800838e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d12e      	bne.n	8008436 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f023 0310 	bic.w	r3, r3, #16
 80083f2:	647b      	str	r3, [r7, #68]	; 0x44
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083fc:	61bb      	str	r3, [r7, #24]
 80083fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	6979      	ldr	r1, [r7, #20]
 8008402:	69ba      	ldr	r2, [r7, #24]
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	613b      	str	r3, [r7, #16]
   return(result);
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e6      	bne.n	80083de <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	f003 0310 	and.w	r3, r3, #16
 800841a:	2b10      	cmp	r3, #16
 800841c:	d103      	bne.n	8008426 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2210      	movs	r2, #16
 8008424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7ff f822 	bl	8007478 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008434:	e00b      	b.n	800844e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7f8 fc6e 	bl	8000d18 <HAL_UART_RxCpltCallback>
}
 800843c:	e007      	b.n	800844e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	699a      	ldr	r2, [r3, #24]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f042 0208 	orr.w	r2, r2, #8
 800844c:	619a      	str	r2, [r3, #24]
}
 800844e:	bf00      	nop
 8008450:	3758      	adds	r7, #88	; 0x58
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b0a6      	sub	sp, #152	; 0x98
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008466:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848e:	2b22      	cmp	r3, #34	; 0x22
 8008490:	f040 814f 	bne.w	8008732 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800849a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800849e:	e0f6      	b.n	800868e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084aa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80084ae:	b2d9      	uxtb	r1, r3
 80084b0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ba:	400a      	ands	r2, r1
 80084bc:	b2d2      	uxtb	r2, r2
 80084be:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	3b01      	subs	r3, #1
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80084e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084ea:	f003 0307 	and.w	r3, r3, #7
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d053      	beq.n	800859a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d011      	beq.n	8008522 <UART_RxISR_8BIT_FIFOEN+0xca>
 80084fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00b      	beq.n	8008522 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2201      	movs	r2, #1
 8008510:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008518:	f043 0201 	orr.w	r2, r3, #1
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008522:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d011      	beq.n	8008552 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800852e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00b      	beq.n	8008552 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2202      	movs	r2, #2
 8008540:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008548:	f043 0204 	orr.w	r2, r3, #4
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008552:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b00      	cmp	r3, #0
 800855c:	d011      	beq.n	8008582 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800855e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00b      	beq.n	8008582 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2204      	movs	r2, #4
 8008570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008578:	f043 0202 	orr.w	r2, r3, #2
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008588:	2b00      	cmp	r3, #0
 800858a:	d006      	beq.n	800859a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7fe ff69 	bl	8007464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d173      	bne.n	800868e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ae:	e853 3f00 	ldrex	r3, [r3]
 80085b2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80085b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80085ca:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80085ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80085d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e4      	bne.n	80085a6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3308      	adds	r3, #8
 80085e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80085ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085f2:	f023 0301 	bic.w	r3, r3, #1
 80085f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3308      	adds	r3, #8
 80085fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008600:	657a      	str	r2, [r7, #84]	; 0x54
 8008602:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008606:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008608:	e841 2300 	strex	r3, r2, [r1]
 800860c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800860e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1e3      	bne.n	80085dc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2220      	movs	r2, #32
 8008618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008626:	2b01      	cmp	r3, #1
 8008628:	d12e      	bne.n	8008688 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	f023 0310 	bic.w	r3, r3, #16
 8008644:	67bb      	str	r3, [r7, #120]	; 0x78
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800864e:	643b      	str	r3, [r7, #64]	; 0x40
 8008650:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008652:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008654:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008656:	e841 2300 	strex	r3, r2, [r1]
 800865a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1e6      	bne.n	8008630 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	f003 0310 	and.w	r3, r3, #16
 800866c:	2b10      	cmp	r3, #16
 800866e:	d103      	bne.n	8008678 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2210      	movs	r2, #16
 8008676:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f7fe fef9 	bl	8007478 <HAL_UARTEx_RxEventCallback>
 8008686:	e002      	b.n	800868e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7f8 fb45 	bl	8000d18 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800868e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008692:	2b00      	cmp	r3, #0
 8008694:	d006      	beq.n	80086a4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008696:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800869a:	f003 0320 	and.w	r3, r3, #32
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f47f aefe 	bne.w	80084a0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086ae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d045      	beq.n	8008742 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d23e      	bcs.n	8008742 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3308      	adds	r3, #8
 80086ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	e853 3f00 	ldrex	r3, [r3]
 80086d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086da:	673b      	str	r3, [r7, #112]	; 0x70
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3308      	adds	r3, #8
 80086e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80086e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ec:	e841 2300 	strex	r3, r2, [r1]
 80086f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e5      	bne.n	80086c4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a14      	ldr	r2, [pc, #80]	; (800874c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80086fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	60bb      	str	r3, [r7, #8]
   return(result);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f043 0320 	orr.w	r3, r3, #32
 8008712:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800871c:	61bb      	str	r3, [r7, #24]
 800871e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6979      	ldr	r1, [r7, #20]
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	613b      	str	r3, [r7, #16]
   return(result);
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e6      	bne.n	80086fe <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008730:	e007      	b.n	8008742 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	699a      	ldr	r2, [r3, #24]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f042 0208 	orr.w	r2, r2, #8
 8008740:	619a      	str	r2, [r3, #24]
}
 8008742:	bf00      	nop
 8008744:	3798      	adds	r7, #152	; 0x98
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	08008197 	.word	0x08008197

08008750 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b0a8      	sub	sp, #160	; 0xa0
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800875e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008786:	2b22      	cmp	r3, #34	; 0x22
 8008788:	f040 8153 	bne.w	8008a32 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008792:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008796:	e0fa      	b.n	800898e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80087aa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80087ae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80087b2:	4013      	ands	r3, r2
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c0:	1c9a      	adds	r2, r3, #2
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	3b01      	subs	r3, #1
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80087e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d053      	beq.n	8008896 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d011      	beq.n	800881e <UART_RxISR_16BIT_FIFOEN+0xce>
 80087fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00b      	beq.n	800881e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2201      	movs	r2, #1
 800880c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008814:	f043 0201 	orr.w	r2, r3, #1
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800881e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d011      	beq.n	800884e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800882a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00b      	beq.n	800884e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2202      	movs	r2, #2
 800883c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008844:	f043 0204 	orr.w	r2, r3, #4
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800884e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008852:	f003 0304 	and.w	r3, r3, #4
 8008856:	2b00      	cmp	r3, #0
 8008858:	d011      	beq.n	800887e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800885a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00b      	beq.n	800887e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2204      	movs	r2, #4
 800886c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008874:	f043 0202 	orr.w	r2, r3, #2
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008884:	2b00      	cmp	r3, #0
 8008886:	d006      	beq.n	8008896 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7fe fdeb 	bl	8007464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800889c:	b29b      	uxth	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d175      	bne.n	800898e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088c6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80088ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088cc:	e841 2300 	strex	r3, r2, [r1]
 80088d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80088d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e4      	bne.n	80088a2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3308      	adds	r3, #8
 80088de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e2:	e853 3f00 	ldrex	r3, [r3]
 80088e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088ee:	f023 0301 	bic.w	r3, r3, #1
 80088f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3308      	adds	r3, #8
 80088fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008900:	65ba      	str	r2, [r7, #88]	; 0x58
 8008902:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008904:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008906:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008908:	e841 2300 	strex	r3, r2, [r1]
 800890c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800890e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e1      	bne.n	80088d8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2220      	movs	r2, #32
 8008918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008926:	2b01      	cmp	r3, #1
 8008928:	d12e      	bne.n	8008988 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	f023 0310 	bic.w	r3, r3, #16
 8008944:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	461a      	mov	r2, r3
 800894c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800894e:	647b      	str	r3, [r7, #68]	; 0x44
 8008950:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008952:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008956:	e841 2300 	strex	r3, r2, [r1]
 800895a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800895c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1e6      	bne.n	8008930 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	69db      	ldr	r3, [r3, #28]
 8008968:	f003 0310 	and.w	r3, r3, #16
 800896c:	2b10      	cmp	r3, #16
 800896e:	d103      	bne.n	8008978 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2210      	movs	r2, #16
 8008976:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7fe fd79 	bl	8007478 <HAL_UARTEx_RxEventCallback>
 8008986:	e002      	b.n	800898e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7f8 f9c5 	bl	8000d18 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800898e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008992:	2b00      	cmp	r3, #0
 8008994:	d006      	beq.n	80089a4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008996:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800899a:	f003 0320 	and.w	r3, r3, #32
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f47f aefa 	bne.w	8008798 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80089ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d045      	beq.n	8008a42 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089bc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d23e      	bcs.n	8008a42 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	3308      	adds	r3, #8
 80089ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	e853 3f00 	ldrex	r3, [r3]
 80089d2:	623b      	str	r3, [r7, #32]
   return(result);
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089da:	677b      	str	r3, [r7, #116]	; 0x74
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3308      	adds	r3, #8
 80089e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80089e4:	633a      	str	r2, [r7, #48]	; 0x30
 80089e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ec:	e841 2300 	strex	r3, r2, [r1]
 80089f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1e5      	bne.n	80089c4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a14      	ldr	r2, [pc, #80]	; (8008a4c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80089fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f043 0320 	orr.w	r3, r3, #32
 8008a12:	673b      	str	r3, [r7, #112]	; 0x70
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a1c:	61fb      	str	r3, [r7, #28]
 8008a1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	69b9      	ldr	r1, [r7, #24]
 8008a22:	69fa      	ldr	r2, [r7, #28]
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	617b      	str	r3, [r7, #20]
   return(result);
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e6      	bne.n	80089fe <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a30:	e007      	b.n	8008a42 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	699a      	ldr	r2, [r3, #24]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f042 0208 	orr.w	r2, r2, #8
 8008a40:	619a      	str	r2, [r3, #24]
}
 8008a42:	bf00      	nop
 8008a44:	37a0      	adds	r7, #160	; 0xa0
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	080082f7 	.word	0x080082f7

08008a50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d101      	bne.n	8008aa2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	e027      	b.n	8008af2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2224      	movs	r2, #36	; 0x24
 8008aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f022 0201 	bic.w	r2, r2, #1
 8008ac8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ad0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3714      	adds	r7, #20
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d101      	bne.n	8008b16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b12:	2302      	movs	r3, #2
 8008b14:	e02d      	b.n	8008b72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2224      	movs	r2, #36	; 0x24
 8008b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0201 	bic.w	r2, r2, #1
 8008b3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f850 	bl	8008bf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2220      	movs	r2, #32
 8008b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d101      	bne.n	8008b92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e02d      	b.n	8008bee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2224      	movs	r2, #36	; 0x24
 8008b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 0201 	bic.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f812 	bl	8008bf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
	...

08008bf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d108      	bne.n	8008c1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c18:	e031      	b.n	8008c7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c1a:	2308      	movs	r3, #8
 8008c1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c1e:	2308      	movs	r3, #8
 8008c20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	0e5b      	lsrs	r3, r3, #25
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	f003 0307 	and.w	r3, r3, #7
 8008c30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	0f5b      	lsrs	r3, r3, #29
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	f003 0307 	and.w	r3, r3, #7
 8008c40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	7b3a      	ldrb	r2, [r7, #12]
 8008c46:	4911      	ldr	r1, [pc, #68]	; (8008c8c <UARTEx_SetNbDataToProcess+0x94>)
 8008c48:	5c8a      	ldrb	r2, [r1, r2]
 8008c4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c4e:	7b3a      	ldrb	r2, [r7, #12]
 8008c50:	490f      	ldr	r1, [pc, #60]	; (8008c90 <UARTEx_SetNbDataToProcess+0x98>)
 8008c52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c54:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
 8008c62:	7b7a      	ldrb	r2, [r7, #13]
 8008c64:	4909      	ldr	r1, [pc, #36]	; (8008c8c <UARTEx_SetNbDataToProcess+0x94>)
 8008c66:	5c8a      	ldrb	r2, [r1, r2]
 8008c68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c6c:	7b7a      	ldrb	r2, [r7, #13]
 8008c6e:	4908      	ldr	r1, [pc, #32]	; (8008c90 <UARTEx_SetNbDataToProcess+0x98>)
 8008c70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c72:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c7e:	bf00      	nop
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	08009850 	.word	0x08009850
 8008c90:	08009858 	.word	0x08009858

08008c94 <siprintf>:
 8008c94:	b40e      	push	{r1, r2, r3}
 8008c96:	b500      	push	{lr}
 8008c98:	b09c      	sub	sp, #112	; 0x70
 8008c9a:	ab1d      	add	r3, sp, #116	; 0x74
 8008c9c:	9002      	str	r0, [sp, #8]
 8008c9e:	9006      	str	r0, [sp, #24]
 8008ca0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ca4:	4809      	ldr	r0, [pc, #36]	; (8008ccc <siprintf+0x38>)
 8008ca6:	9107      	str	r1, [sp, #28]
 8008ca8:	9104      	str	r1, [sp, #16]
 8008caa:	4909      	ldr	r1, [pc, #36]	; (8008cd0 <siprintf+0x3c>)
 8008cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb0:	9105      	str	r1, [sp, #20]
 8008cb2:	6800      	ldr	r0, [r0, #0]
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	a902      	add	r1, sp, #8
 8008cb8:	f000 f9a4 	bl	8009004 <_svfiprintf_r>
 8008cbc:	9b02      	ldr	r3, [sp, #8]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	701a      	strb	r2, [r3, #0]
 8008cc2:	b01c      	add	sp, #112	; 0x70
 8008cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc8:	b003      	add	sp, #12
 8008cca:	4770      	bx	lr
 8008ccc:	20000058 	.word	0x20000058
 8008cd0:	ffff0208 	.word	0xffff0208

08008cd4 <memset>:
 8008cd4:	4402      	add	r2, r0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d100      	bne.n	8008cde <memset+0xa>
 8008cdc:	4770      	bx	lr
 8008cde:	f803 1b01 	strb.w	r1, [r3], #1
 8008ce2:	e7f9      	b.n	8008cd8 <memset+0x4>

08008ce4 <strncmp>:
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	b16a      	cbz	r2, 8008d04 <strncmp+0x20>
 8008ce8:	3901      	subs	r1, #1
 8008cea:	1884      	adds	r4, r0, r2
 8008cec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cf0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d103      	bne.n	8008d00 <strncmp+0x1c>
 8008cf8:	42a0      	cmp	r0, r4
 8008cfa:	d001      	beq.n	8008d00 <strncmp+0x1c>
 8008cfc:	2a00      	cmp	r2, #0
 8008cfe:	d1f5      	bne.n	8008cec <strncmp+0x8>
 8008d00:	1ad0      	subs	r0, r2, r3
 8008d02:	bd10      	pop	{r4, pc}
 8008d04:	4610      	mov	r0, r2
 8008d06:	e7fc      	b.n	8008d02 <strncmp+0x1e>

08008d08 <__errno>:
 8008d08:	4b01      	ldr	r3, [pc, #4]	; (8008d10 <__errno+0x8>)
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	20000058 	.word	0x20000058

08008d14 <__libc_init_array>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	4d0d      	ldr	r5, [pc, #52]	; (8008d4c <__libc_init_array+0x38>)
 8008d18:	4c0d      	ldr	r4, [pc, #52]	; (8008d50 <__libc_init_array+0x3c>)
 8008d1a:	1b64      	subs	r4, r4, r5
 8008d1c:	10a4      	asrs	r4, r4, #2
 8008d1e:	2600      	movs	r6, #0
 8008d20:	42a6      	cmp	r6, r4
 8008d22:	d109      	bne.n	8008d38 <__libc_init_array+0x24>
 8008d24:	4d0b      	ldr	r5, [pc, #44]	; (8008d54 <__libc_init_array+0x40>)
 8008d26:	4c0c      	ldr	r4, [pc, #48]	; (8008d58 <__libc_init_array+0x44>)
 8008d28:	f000 fc6a 	bl	8009600 <_init>
 8008d2c:	1b64      	subs	r4, r4, r5
 8008d2e:	10a4      	asrs	r4, r4, #2
 8008d30:	2600      	movs	r6, #0
 8008d32:	42a6      	cmp	r6, r4
 8008d34:	d105      	bne.n	8008d42 <__libc_init_array+0x2e>
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d3c:	4798      	blx	r3
 8008d3e:	3601      	adds	r6, #1
 8008d40:	e7ee      	b.n	8008d20 <__libc_init_array+0xc>
 8008d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d46:	4798      	blx	r3
 8008d48:	3601      	adds	r6, #1
 8008d4a:	e7f2      	b.n	8008d32 <__libc_init_array+0x1e>
 8008d4c:	0800989c 	.word	0x0800989c
 8008d50:	0800989c 	.word	0x0800989c
 8008d54:	0800989c 	.word	0x0800989c
 8008d58:	080098a0 	.word	0x080098a0

08008d5c <__retarget_lock_acquire_recursive>:
 8008d5c:	4770      	bx	lr

08008d5e <__retarget_lock_release_recursive>:
 8008d5e:	4770      	bx	lr

08008d60 <_free_r>:
 8008d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d62:	2900      	cmp	r1, #0
 8008d64:	d044      	beq.n	8008df0 <_free_r+0x90>
 8008d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d6a:	9001      	str	r0, [sp, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d72:	bfb8      	it	lt
 8008d74:	18e4      	addlt	r4, r4, r3
 8008d76:	f000 f8df 	bl	8008f38 <__malloc_lock>
 8008d7a:	4a1e      	ldr	r2, [pc, #120]	; (8008df4 <_free_r+0x94>)
 8008d7c:	9801      	ldr	r0, [sp, #4]
 8008d7e:	6813      	ldr	r3, [r2, #0]
 8008d80:	b933      	cbnz	r3, 8008d90 <_free_r+0x30>
 8008d82:	6063      	str	r3, [r4, #4]
 8008d84:	6014      	str	r4, [r2, #0]
 8008d86:	b003      	add	sp, #12
 8008d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d8c:	f000 b8da 	b.w	8008f44 <__malloc_unlock>
 8008d90:	42a3      	cmp	r3, r4
 8008d92:	d908      	bls.n	8008da6 <_free_r+0x46>
 8008d94:	6825      	ldr	r5, [r4, #0]
 8008d96:	1961      	adds	r1, r4, r5
 8008d98:	428b      	cmp	r3, r1
 8008d9a:	bf01      	itttt	eq
 8008d9c:	6819      	ldreq	r1, [r3, #0]
 8008d9e:	685b      	ldreq	r3, [r3, #4]
 8008da0:	1949      	addeq	r1, r1, r5
 8008da2:	6021      	streq	r1, [r4, #0]
 8008da4:	e7ed      	b.n	8008d82 <_free_r+0x22>
 8008da6:	461a      	mov	r2, r3
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	b10b      	cbz	r3, 8008db0 <_free_r+0x50>
 8008dac:	42a3      	cmp	r3, r4
 8008dae:	d9fa      	bls.n	8008da6 <_free_r+0x46>
 8008db0:	6811      	ldr	r1, [r2, #0]
 8008db2:	1855      	adds	r5, r2, r1
 8008db4:	42a5      	cmp	r5, r4
 8008db6:	d10b      	bne.n	8008dd0 <_free_r+0x70>
 8008db8:	6824      	ldr	r4, [r4, #0]
 8008dba:	4421      	add	r1, r4
 8008dbc:	1854      	adds	r4, r2, r1
 8008dbe:	42a3      	cmp	r3, r4
 8008dc0:	6011      	str	r1, [r2, #0]
 8008dc2:	d1e0      	bne.n	8008d86 <_free_r+0x26>
 8008dc4:	681c      	ldr	r4, [r3, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	6053      	str	r3, [r2, #4]
 8008dca:	440c      	add	r4, r1
 8008dcc:	6014      	str	r4, [r2, #0]
 8008dce:	e7da      	b.n	8008d86 <_free_r+0x26>
 8008dd0:	d902      	bls.n	8008dd8 <_free_r+0x78>
 8008dd2:	230c      	movs	r3, #12
 8008dd4:	6003      	str	r3, [r0, #0]
 8008dd6:	e7d6      	b.n	8008d86 <_free_r+0x26>
 8008dd8:	6825      	ldr	r5, [r4, #0]
 8008dda:	1961      	adds	r1, r4, r5
 8008ddc:	428b      	cmp	r3, r1
 8008dde:	bf04      	itt	eq
 8008de0:	6819      	ldreq	r1, [r3, #0]
 8008de2:	685b      	ldreq	r3, [r3, #4]
 8008de4:	6063      	str	r3, [r4, #4]
 8008de6:	bf04      	itt	eq
 8008de8:	1949      	addeq	r1, r1, r5
 8008dea:	6021      	streq	r1, [r4, #0]
 8008dec:	6054      	str	r4, [r2, #4]
 8008dee:	e7ca      	b.n	8008d86 <_free_r+0x26>
 8008df0:	b003      	add	sp, #12
 8008df2:	bd30      	pop	{r4, r5, pc}
 8008df4:	20000548 	.word	0x20000548

08008df8 <sbrk_aligned>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	4e0e      	ldr	r6, [pc, #56]	; (8008e34 <sbrk_aligned+0x3c>)
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	6831      	ldr	r1, [r6, #0]
 8008e00:	4605      	mov	r5, r0
 8008e02:	b911      	cbnz	r1, 8008e0a <sbrk_aligned+0x12>
 8008e04:	f000 fba6 	bl	8009554 <_sbrk_r>
 8008e08:	6030      	str	r0, [r6, #0]
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	f000 fba1 	bl	8009554 <_sbrk_r>
 8008e12:	1c43      	adds	r3, r0, #1
 8008e14:	d00a      	beq.n	8008e2c <sbrk_aligned+0x34>
 8008e16:	1cc4      	adds	r4, r0, #3
 8008e18:	f024 0403 	bic.w	r4, r4, #3
 8008e1c:	42a0      	cmp	r0, r4
 8008e1e:	d007      	beq.n	8008e30 <sbrk_aligned+0x38>
 8008e20:	1a21      	subs	r1, r4, r0
 8008e22:	4628      	mov	r0, r5
 8008e24:	f000 fb96 	bl	8009554 <_sbrk_r>
 8008e28:	3001      	adds	r0, #1
 8008e2a:	d101      	bne.n	8008e30 <sbrk_aligned+0x38>
 8008e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8008e30:	4620      	mov	r0, r4
 8008e32:	bd70      	pop	{r4, r5, r6, pc}
 8008e34:	2000054c 	.word	0x2000054c

08008e38 <_malloc_r>:
 8008e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e3c:	1ccd      	adds	r5, r1, #3
 8008e3e:	f025 0503 	bic.w	r5, r5, #3
 8008e42:	3508      	adds	r5, #8
 8008e44:	2d0c      	cmp	r5, #12
 8008e46:	bf38      	it	cc
 8008e48:	250c      	movcc	r5, #12
 8008e4a:	2d00      	cmp	r5, #0
 8008e4c:	4607      	mov	r7, r0
 8008e4e:	db01      	blt.n	8008e54 <_malloc_r+0x1c>
 8008e50:	42a9      	cmp	r1, r5
 8008e52:	d905      	bls.n	8008e60 <_malloc_r+0x28>
 8008e54:	230c      	movs	r3, #12
 8008e56:	603b      	str	r3, [r7, #0]
 8008e58:	2600      	movs	r6, #0
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f34 <_malloc_r+0xfc>
 8008e64:	f000 f868 	bl	8008f38 <__malloc_lock>
 8008e68:	f8d8 3000 	ldr.w	r3, [r8]
 8008e6c:	461c      	mov	r4, r3
 8008e6e:	bb5c      	cbnz	r4, 8008ec8 <_malloc_r+0x90>
 8008e70:	4629      	mov	r1, r5
 8008e72:	4638      	mov	r0, r7
 8008e74:	f7ff ffc0 	bl	8008df8 <sbrk_aligned>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	d155      	bne.n	8008f2a <_malloc_r+0xf2>
 8008e7e:	f8d8 4000 	ldr.w	r4, [r8]
 8008e82:	4626      	mov	r6, r4
 8008e84:	2e00      	cmp	r6, #0
 8008e86:	d145      	bne.n	8008f14 <_malloc_r+0xdc>
 8008e88:	2c00      	cmp	r4, #0
 8008e8a:	d048      	beq.n	8008f1e <_malloc_r+0xe6>
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	4631      	mov	r1, r6
 8008e90:	4638      	mov	r0, r7
 8008e92:	eb04 0903 	add.w	r9, r4, r3
 8008e96:	f000 fb5d 	bl	8009554 <_sbrk_r>
 8008e9a:	4581      	cmp	r9, r0
 8008e9c:	d13f      	bne.n	8008f1e <_malloc_r+0xe6>
 8008e9e:	6821      	ldr	r1, [r4, #0]
 8008ea0:	1a6d      	subs	r5, r5, r1
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	4638      	mov	r0, r7
 8008ea6:	f7ff ffa7 	bl	8008df8 <sbrk_aligned>
 8008eaa:	3001      	adds	r0, #1
 8008eac:	d037      	beq.n	8008f1e <_malloc_r+0xe6>
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	442b      	add	r3, r5
 8008eb2:	6023      	str	r3, [r4, #0]
 8008eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d038      	beq.n	8008f2e <_malloc_r+0xf6>
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	42a2      	cmp	r2, r4
 8008ec0:	d12b      	bne.n	8008f1a <_malloc_r+0xe2>
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	605a      	str	r2, [r3, #4]
 8008ec6:	e00f      	b.n	8008ee8 <_malloc_r+0xb0>
 8008ec8:	6822      	ldr	r2, [r4, #0]
 8008eca:	1b52      	subs	r2, r2, r5
 8008ecc:	d41f      	bmi.n	8008f0e <_malloc_r+0xd6>
 8008ece:	2a0b      	cmp	r2, #11
 8008ed0:	d917      	bls.n	8008f02 <_malloc_r+0xca>
 8008ed2:	1961      	adds	r1, r4, r5
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	6025      	str	r5, [r4, #0]
 8008ed8:	bf18      	it	ne
 8008eda:	6059      	strne	r1, [r3, #4]
 8008edc:	6863      	ldr	r3, [r4, #4]
 8008ede:	bf08      	it	eq
 8008ee0:	f8c8 1000 	streq.w	r1, [r8]
 8008ee4:	5162      	str	r2, [r4, r5]
 8008ee6:	604b      	str	r3, [r1, #4]
 8008ee8:	4638      	mov	r0, r7
 8008eea:	f104 060b 	add.w	r6, r4, #11
 8008eee:	f000 f829 	bl	8008f44 <__malloc_unlock>
 8008ef2:	f026 0607 	bic.w	r6, r6, #7
 8008ef6:	1d23      	adds	r3, r4, #4
 8008ef8:	1af2      	subs	r2, r6, r3
 8008efa:	d0ae      	beq.n	8008e5a <_malloc_r+0x22>
 8008efc:	1b9b      	subs	r3, r3, r6
 8008efe:	50a3      	str	r3, [r4, r2]
 8008f00:	e7ab      	b.n	8008e5a <_malloc_r+0x22>
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	6862      	ldr	r2, [r4, #4]
 8008f06:	d1dd      	bne.n	8008ec4 <_malloc_r+0x8c>
 8008f08:	f8c8 2000 	str.w	r2, [r8]
 8008f0c:	e7ec      	b.n	8008ee8 <_malloc_r+0xb0>
 8008f0e:	4623      	mov	r3, r4
 8008f10:	6864      	ldr	r4, [r4, #4]
 8008f12:	e7ac      	b.n	8008e6e <_malloc_r+0x36>
 8008f14:	4634      	mov	r4, r6
 8008f16:	6876      	ldr	r6, [r6, #4]
 8008f18:	e7b4      	b.n	8008e84 <_malloc_r+0x4c>
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	e7cc      	b.n	8008eb8 <_malloc_r+0x80>
 8008f1e:	230c      	movs	r3, #12
 8008f20:	603b      	str	r3, [r7, #0]
 8008f22:	4638      	mov	r0, r7
 8008f24:	f000 f80e 	bl	8008f44 <__malloc_unlock>
 8008f28:	e797      	b.n	8008e5a <_malloc_r+0x22>
 8008f2a:	6025      	str	r5, [r4, #0]
 8008f2c:	e7dc      	b.n	8008ee8 <_malloc_r+0xb0>
 8008f2e:	605b      	str	r3, [r3, #4]
 8008f30:	deff      	udf	#255	; 0xff
 8008f32:	bf00      	nop
 8008f34:	20000548 	.word	0x20000548

08008f38 <__malloc_lock>:
 8008f38:	4801      	ldr	r0, [pc, #4]	; (8008f40 <__malloc_lock+0x8>)
 8008f3a:	f7ff bf0f 	b.w	8008d5c <__retarget_lock_acquire_recursive>
 8008f3e:	bf00      	nop
 8008f40:	20000544 	.word	0x20000544

08008f44 <__malloc_unlock>:
 8008f44:	4801      	ldr	r0, [pc, #4]	; (8008f4c <__malloc_unlock+0x8>)
 8008f46:	f7ff bf0a 	b.w	8008d5e <__retarget_lock_release_recursive>
 8008f4a:	bf00      	nop
 8008f4c:	20000544 	.word	0x20000544

08008f50 <__ssputs_r>:
 8008f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f54:	688e      	ldr	r6, [r1, #8]
 8008f56:	461f      	mov	r7, r3
 8008f58:	42be      	cmp	r6, r7
 8008f5a:	680b      	ldr	r3, [r1, #0]
 8008f5c:	4682      	mov	sl, r0
 8008f5e:	460c      	mov	r4, r1
 8008f60:	4690      	mov	r8, r2
 8008f62:	d82c      	bhi.n	8008fbe <__ssputs_r+0x6e>
 8008f64:	898a      	ldrh	r2, [r1, #12]
 8008f66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f6a:	d026      	beq.n	8008fba <__ssputs_r+0x6a>
 8008f6c:	6965      	ldr	r5, [r4, #20]
 8008f6e:	6909      	ldr	r1, [r1, #16]
 8008f70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f74:	eba3 0901 	sub.w	r9, r3, r1
 8008f78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f7c:	1c7b      	adds	r3, r7, #1
 8008f7e:	444b      	add	r3, r9
 8008f80:	106d      	asrs	r5, r5, #1
 8008f82:	429d      	cmp	r5, r3
 8008f84:	bf38      	it	cc
 8008f86:	461d      	movcc	r5, r3
 8008f88:	0553      	lsls	r3, r2, #21
 8008f8a:	d527      	bpl.n	8008fdc <__ssputs_r+0x8c>
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	f7ff ff53 	bl	8008e38 <_malloc_r>
 8008f92:	4606      	mov	r6, r0
 8008f94:	b360      	cbz	r0, 8008ff0 <__ssputs_r+0xa0>
 8008f96:	6921      	ldr	r1, [r4, #16]
 8008f98:	464a      	mov	r2, r9
 8008f9a:	f000 faeb 	bl	8009574 <memcpy>
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa8:	81a3      	strh	r3, [r4, #12]
 8008faa:	6126      	str	r6, [r4, #16]
 8008fac:	6165      	str	r5, [r4, #20]
 8008fae:	444e      	add	r6, r9
 8008fb0:	eba5 0509 	sub.w	r5, r5, r9
 8008fb4:	6026      	str	r6, [r4, #0]
 8008fb6:	60a5      	str	r5, [r4, #8]
 8008fb8:	463e      	mov	r6, r7
 8008fba:	42be      	cmp	r6, r7
 8008fbc:	d900      	bls.n	8008fc0 <__ssputs_r+0x70>
 8008fbe:	463e      	mov	r6, r7
 8008fc0:	6820      	ldr	r0, [r4, #0]
 8008fc2:	4632      	mov	r2, r6
 8008fc4:	4641      	mov	r1, r8
 8008fc6:	f000 faab 	bl	8009520 <memmove>
 8008fca:	68a3      	ldr	r3, [r4, #8]
 8008fcc:	1b9b      	subs	r3, r3, r6
 8008fce:	60a3      	str	r3, [r4, #8]
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	4433      	add	r3, r6
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fdc:	462a      	mov	r2, r5
 8008fde:	f000 fad7 	bl	8009590 <_realloc_r>
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d1e0      	bne.n	8008faa <__ssputs_r+0x5a>
 8008fe8:	6921      	ldr	r1, [r4, #16]
 8008fea:	4650      	mov	r0, sl
 8008fec:	f7ff feb8 	bl	8008d60 <_free_r>
 8008ff0:	230c      	movs	r3, #12
 8008ff2:	f8ca 3000 	str.w	r3, [sl]
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8009002:	e7e9      	b.n	8008fd8 <__ssputs_r+0x88>

08009004 <_svfiprintf_r>:
 8009004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009008:	4698      	mov	r8, r3
 800900a:	898b      	ldrh	r3, [r1, #12]
 800900c:	061b      	lsls	r3, r3, #24
 800900e:	b09d      	sub	sp, #116	; 0x74
 8009010:	4607      	mov	r7, r0
 8009012:	460d      	mov	r5, r1
 8009014:	4614      	mov	r4, r2
 8009016:	d50e      	bpl.n	8009036 <_svfiprintf_r+0x32>
 8009018:	690b      	ldr	r3, [r1, #16]
 800901a:	b963      	cbnz	r3, 8009036 <_svfiprintf_r+0x32>
 800901c:	2140      	movs	r1, #64	; 0x40
 800901e:	f7ff ff0b 	bl	8008e38 <_malloc_r>
 8009022:	6028      	str	r0, [r5, #0]
 8009024:	6128      	str	r0, [r5, #16]
 8009026:	b920      	cbnz	r0, 8009032 <_svfiprintf_r+0x2e>
 8009028:	230c      	movs	r3, #12
 800902a:	603b      	str	r3, [r7, #0]
 800902c:	f04f 30ff 	mov.w	r0, #4294967295
 8009030:	e0d0      	b.n	80091d4 <_svfiprintf_r+0x1d0>
 8009032:	2340      	movs	r3, #64	; 0x40
 8009034:	616b      	str	r3, [r5, #20]
 8009036:	2300      	movs	r3, #0
 8009038:	9309      	str	r3, [sp, #36]	; 0x24
 800903a:	2320      	movs	r3, #32
 800903c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009040:	f8cd 800c 	str.w	r8, [sp, #12]
 8009044:	2330      	movs	r3, #48	; 0x30
 8009046:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80091ec <_svfiprintf_r+0x1e8>
 800904a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800904e:	f04f 0901 	mov.w	r9, #1
 8009052:	4623      	mov	r3, r4
 8009054:	469a      	mov	sl, r3
 8009056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800905a:	b10a      	cbz	r2, 8009060 <_svfiprintf_r+0x5c>
 800905c:	2a25      	cmp	r2, #37	; 0x25
 800905e:	d1f9      	bne.n	8009054 <_svfiprintf_r+0x50>
 8009060:	ebba 0b04 	subs.w	fp, sl, r4
 8009064:	d00b      	beq.n	800907e <_svfiprintf_r+0x7a>
 8009066:	465b      	mov	r3, fp
 8009068:	4622      	mov	r2, r4
 800906a:	4629      	mov	r1, r5
 800906c:	4638      	mov	r0, r7
 800906e:	f7ff ff6f 	bl	8008f50 <__ssputs_r>
 8009072:	3001      	adds	r0, #1
 8009074:	f000 80a9 	beq.w	80091ca <_svfiprintf_r+0x1c6>
 8009078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800907a:	445a      	add	r2, fp
 800907c:	9209      	str	r2, [sp, #36]	; 0x24
 800907e:	f89a 3000 	ldrb.w	r3, [sl]
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 80a1 	beq.w	80091ca <_svfiprintf_r+0x1c6>
 8009088:	2300      	movs	r3, #0
 800908a:	f04f 32ff 	mov.w	r2, #4294967295
 800908e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009092:	f10a 0a01 	add.w	sl, sl, #1
 8009096:	9304      	str	r3, [sp, #16]
 8009098:	9307      	str	r3, [sp, #28]
 800909a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800909e:	931a      	str	r3, [sp, #104]	; 0x68
 80090a0:	4654      	mov	r4, sl
 80090a2:	2205      	movs	r2, #5
 80090a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a8:	4850      	ldr	r0, [pc, #320]	; (80091ec <_svfiprintf_r+0x1e8>)
 80090aa:	f7f7 f8b9 	bl	8000220 <memchr>
 80090ae:	9a04      	ldr	r2, [sp, #16]
 80090b0:	b9d8      	cbnz	r0, 80090ea <_svfiprintf_r+0xe6>
 80090b2:	06d0      	lsls	r0, r2, #27
 80090b4:	bf44      	itt	mi
 80090b6:	2320      	movmi	r3, #32
 80090b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090bc:	0711      	lsls	r1, r2, #28
 80090be:	bf44      	itt	mi
 80090c0:	232b      	movmi	r3, #43	; 0x2b
 80090c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090c6:	f89a 3000 	ldrb.w	r3, [sl]
 80090ca:	2b2a      	cmp	r3, #42	; 0x2a
 80090cc:	d015      	beq.n	80090fa <_svfiprintf_r+0xf6>
 80090ce:	9a07      	ldr	r2, [sp, #28]
 80090d0:	4654      	mov	r4, sl
 80090d2:	2000      	movs	r0, #0
 80090d4:	f04f 0c0a 	mov.w	ip, #10
 80090d8:	4621      	mov	r1, r4
 80090da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090de:	3b30      	subs	r3, #48	; 0x30
 80090e0:	2b09      	cmp	r3, #9
 80090e2:	d94d      	bls.n	8009180 <_svfiprintf_r+0x17c>
 80090e4:	b1b0      	cbz	r0, 8009114 <_svfiprintf_r+0x110>
 80090e6:	9207      	str	r2, [sp, #28]
 80090e8:	e014      	b.n	8009114 <_svfiprintf_r+0x110>
 80090ea:	eba0 0308 	sub.w	r3, r0, r8
 80090ee:	fa09 f303 	lsl.w	r3, r9, r3
 80090f2:	4313      	orrs	r3, r2
 80090f4:	9304      	str	r3, [sp, #16]
 80090f6:	46a2      	mov	sl, r4
 80090f8:	e7d2      	b.n	80090a0 <_svfiprintf_r+0x9c>
 80090fa:	9b03      	ldr	r3, [sp, #12]
 80090fc:	1d19      	adds	r1, r3, #4
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	9103      	str	r1, [sp, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	bfbb      	ittet	lt
 8009106:	425b      	neglt	r3, r3
 8009108:	f042 0202 	orrlt.w	r2, r2, #2
 800910c:	9307      	strge	r3, [sp, #28]
 800910e:	9307      	strlt	r3, [sp, #28]
 8009110:	bfb8      	it	lt
 8009112:	9204      	strlt	r2, [sp, #16]
 8009114:	7823      	ldrb	r3, [r4, #0]
 8009116:	2b2e      	cmp	r3, #46	; 0x2e
 8009118:	d10c      	bne.n	8009134 <_svfiprintf_r+0x130>
 800911a:	7863      	ldrb	r3, [r4, #1]
 800911c:	2b2a      	cmp	r3, #42	; 0x2a
 800911e:	d134      	bne.n	800918a <_svfiprintf_r+0x186>
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	1d1a      	adds	r2, r3, #4
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	9203      	str	r2, [sp, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	bfb8      	it	lt
 800912c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009130:	3402      	adds	r4, #2
 8009132:	9305      	str	r3, [sp, #20]
 8009134:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80091fc <_svfiprintf_r+0x1f8>
 8009138:	7821      	ldrb	r1, [r4, #0]
 800913a:	2203      	movs	r2, #3
 800913c:	4650      	mov	r0, sl
 800913e:	f7f7 f86f 	bl	8000220 <memchr>
 8009142:	b138      	cbz	r0, 8009154 <_svfiprintf_r+0x150>
 8009144:	9b04      	ldr	r3, [sp, #16]
 8009146:	eba0 000a 	sub.w	r0, r0, sl
 800914a:	2240      	movs	r2, #64	; 0x40
 800914c:	4082      	lsls	r2, r0
 800914e:	4313      	orrs	r3, r2
 8009150:	3401      	adds	r4, #1
 8009152:	9304      	str	r3, [sp, #16]
 8009154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009158:	4825      	ldr	r0, [pc, #148]	; (80091f0 <_svfiprintf_r+0x1ec>)
 800915a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800915e:	2206      	movs	r2, #6
 8009160:	f7f7 f85e 	bl	8000220 <memchr>
 8009164:	2800      	cmp	r0, #0
 8009166:	d038      	beq.n	80091da <_svfiprintf_r+0x1d6>
 8009168:	4b22      	ldr	r3, [pc, #136]	; (80091f4 <_svfiprintf_r+0x1f0>)
 800916a:	bb1b      	cbnz	r3, 80091b4 <_svfiprintf_r+0x1b0>
 800916c:	9b03      	ldr	r3, [sp, #12]
 800916e:	3307      	adds	r3, #7
 8009170:	f023 0307 	bic.w	r3, r3, #7
 8009174:	3308      	adds	r3, #8
 8009176:	9303      	str	r3, [sp, #12]
 8009178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800917a:	4433      	add	r3, r6
 800917c:	9309      	str	r3, [sp, #36]	; 0x24
 800917e:	e768      	b.n	8009052 <_svfiprintf_r+0x4e>
 8009180:	fb0c 3202 	mla	r2, ip, r2, r3
 8009184:	460c      	mov	r4, r1
 8009186:	2001      	movs	r0, #1
 8009188:	e7a6      	b.n	80090d8 <_svfiprintf_r+0xd4>
 800918a:	2300      	movs	r3, #0
 800918c:	3401      	adds	r4, #1
 800918e:	9305      	str	r3, [sp, #20]
 8009190:	4619      	mov	r1, r3
 8009192:	f04f 0c0a 	mov.w	ip, #10
 8009196:	4620      	mov	r0, r4
 8009198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800919c:	3a30      	subs	r2, #48	; 0x30
 800919e:	2a09      	cmp	r2, #9
 80091a0:	d903      	bls.n	80091aa <_svfiprintf_r+0x1a6>
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0c6      	beq.n	8009134 <_svfiprintf_r+0x130>
 80091a6:	9105      	str	r1, [sp, #20]
 80091a8:	e7c4      	b.n	8009134 <_svfiprintf_r+0x130>
 80091aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80091ae:	4604      	mov	r4, r0
 80091b0:	2301      	movs	r3, #1
 80091b2:	e7f0      	b.n	8009196 <_svfiprintf_r+0x192>
 80091b4:	ab03      	add	r3, sp, #12
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	462a      	mov	r2, r5
 80091ba:	4b0f      	ldr	r3, [pc, #60]	; (80091f8 <_svfiprintf_r+0x1f4>)
 80091bc:	a904      	add	r1, sp, #16
 80091be:	4638      	mov	r0, r7
 80091c0:	f3af 8000 	nop.w
 80091c4:	1c42      	adds	r2, r0, #1
 80091c6:	4606      	mov	r6, r0
 80091c8:	d1d6      	bne.n	8009178 <_svfiprintf_r+0x174>
 80091ca:	89ab      	ldrh	r3, [r5, #12]
 80091cc:	065b      	lsls	r3, r3, #25
 80091ce:	f53f af2d 	bmi.w	800902c <_svfiprintf_r+0x28>
 80091d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091d4:	b01d      	add	sp, #116	; 0x74
 80091d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091da:	ab03      	add	r3, sp, #12
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	462a      	mov	r2, r5
 80091e0:	4b05      	ldr	r3, [pc, #20]	; (80091f8 <_svfiprintf_r+0x1f4>)
 80091e2:	a904      	add	r1, sp, #16
 80091e4:	4638      	mov	r0, r7
 80091e6:	f000 f879 	bl	80092dc <_printf_i>
 80091ea:	e7eb      	b.n	80091c4 <_svfiprintf_r+0x1c0>
 80091ec:	08009860 	.word	0x08009860
 80091f0:	0800986a 	.word	0x0800986a
 80091f4:	00000000 	.word	0x00000000
 80091f8:	08008f51 	.word	0x08008f51
 80091fc:	08009866 	.word	0x08009866

08009200 <_printf_common>:
 8009200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009204:	4616      	mov	r6, r2
 8009206:	4699      	mov	r9, r3
 8009208:	688a      	ldr	r2, [r1, #8]
 800920a:	690b      	ldr	r3, [r1, #16]
 800920c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009210:	4293      	cmp	r3, r2
 8009212:	bfb8      	it	lt
 8009214:	4613      	movlt	r3, r2
 8009216:	6033      	str	r3, [r6, #0]
 8009218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800921c:	4607      	mov	r7, r0
 800921e:	460c      	mov	r4, r1
 8009220:	b10a      	cbz	r2, 8009226 <_printf_common+0x26>
 8009222:	3301      	adds	r3, #1
 8009224:	6033      	str	r3, [r6, #0]
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	0699      	lsls	r1, r3, #26
 800922a:	bf42      	ittt	mi
 800922c:	6833      	ldrmi	r3, [r6, #0]
 800922e:	3302      	addmi	r3, #2
 8009230:	6033      	strmi	r3, [r6, #0]
 8009232:	6825      	ldr	r5, [r4, #0]
 8009234:	f015 0506 	ands.w	r5, r5, #6
 8009238:	d106      	bne.n	8009248 <_printf_common+0x48>
 800923a:	f104 0a19 	add.w	sl, r4, #25
 800923e:	68e3      	ldr	r3, [r4, #12]
 8009240:	6832      	ldr	r2, [r6, #0]
 8009242:	1a9b      	subs	r3, r3, r2
 8009244:	42ab      	cmp	r3, r5
 8009246:	dc26      	bgt.n	8009296 <_printf_common+0x96>
 8009248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800924c:	1e13      	subs	r3, r2, #0
 800924e:	6822      	ldr	r2, [r4, #0]
 8009250:	bf18      	it	ne
 8009252:	2301      	movne	r3, #1
 8009254:	0692      	lsls	r2, r2, #26
 8009256:	d42b      	bmi.n	80092b0 <_printf_common+0xb0>
 8009258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800925c:	4649      	mov	r1, r9
 800925e:	4638      	mov	r0, r7
 8009260:	47c0      	blx	r8
 8009262:	3001      	adds	r0, #1
 8009264:	d01e      	beq.n	80092a4 <_printf_common+0xa4>
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	6922      	ldr	r2, [r4, #16]
 800926a:	f003 0306 	and.w	r3, r3, #6
 800926e:	2b04      	cmp	r3, #4
 8009270:	bf02      	ittt	eq
 8009272:	68e5      	ldreq	r5, [r4, #12]
 8009274:	6833      	ldreq	r3, [r6, #0]
 8009276:	1aed      	subeq	r5, r5, r3
 8009278:	68a3      	ldr	r3, [r4, #8]
 800927a:	bf0c      	ite	eq
 800927c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009280:	2500      	movne	r5, #0
 8009282:	4293      	cmp	r3, r2
 8009284:	bfc4      	itt	gt
 8009286:	1a9b      	subgt	r3, r3, r2
 8009288:	18ed      	addgt	r5, r5, r3
 800928a:	2600      	movs	r6, #0
 800928c:	341a      	adds	r4, #26
 800928e:	42b5      	cmp	r5, r6
 8009290:	d11a      	bne.n	80092c8 <_printf_common+0xc8>
 8009292:	2000      	movs	r0, #0
 8009294:	e008      	b.n	80092a8 <_printf_common+0xa8>
 8009296:	2301      	movs	r3, #1
 8009298:	4652      	mov	r2, sl
 800929a:	4649      	mov	r1, r9
 800929c:	4638      	mov	r0, r7
 800929e:	47c0      	blx	r8
 80092a0:	3001      	adds	r0, #1
 80092a2:	d103      	bne.n	80092ac <_printf_common+0xac>
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ac:	3501      	adds	r5, #1
 80092ae:	e7c6      	b.n	800923e <_printf_common+0x3e>
 80092b0:	18e1      	adds	r1, r4, r3
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	2030      	movs	r0, #48	; 0x30
 80092b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092ba:	4422      	add	r2, r4
 80092bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092c4:	3302      	adds	r3, #2
 80092c6:	e7c7      	b.n	8009258 <_printf_common+0x58>
 80092c8:	2301      	movs	r3, #1
 80092ca:	4622      	mov	r2, r4
 80092cc:	4649      	mov	r1, r9
 80092ce:	4638      	mov	r0, r7
 80092d0:	47c0      	blx	r8
 80092d2:	3001      	adds	r0, #1
 80092d4:	d0e6      	beq.n	80092a4 <_printf_common+0xa4>
 80092d6:	3601      	adds	r6, #1
 80092d8:	e7d9      	b.n	800928e <_printf_common+0x8e>
	...

080092dc <_printf_i>:
 80092dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092e0:	7e0f      	ldrb	r7, [r1, #24]
 80092e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092e4:	2f78      	cmp	r7, #120	; 0x78
 80092e6:	4691      	mov	r9, r2
 80092e8:	4680      	mov	r8, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	469a      	mov	sl, r3
 80092ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092f2:	d807      	bhi.n	8009304 <_printf_i+0x28>
 80092f4:	2f62      	cmp	r7, #98	; 0x62
 80092f6:	d80a      	bhi.n	800930e <_printf_i+0x32>
 80092f8:	2f00      	cmp	r7, #0
 80092fa:	f000 80d4 	beq.w	80094a6 <_printf_i+0x1ca>
 80092fe:	2f58      	cmp	r7, #88	; 0x58
 8009300:	f000 80c0 	beq.w	8009484 <_printf_i+0x1a8>
 8009304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800930c:	e03a      	b.n	8009384 <_printf_i+0xa8>
 800930e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009312:	2b15      	cmp	r3, #21
 8009314:	d8f6      	bhi.n	8009304 <_printf_i+0x28>
 8009316:	a101      	add	r1, pc, #4	; (adr r1, 800931c <_printf_i+0x40>)
 8009318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800931c:	08009375 	.word	0x08009375
 8009320:	08009389 	.word	0x08009389
 8009324:	08009305 	.word	0x08009305
 8009328:	08009305 	.word	0x08009305
 800932c:	08009305 	.word	0x08009305
 8009330:	08009305 	.word	0x08009305
 8009334:	08009389 	.word	0x08009389
 8009338:	08009305 	.word	0x08009305
 800933c:	08009305 	.word	0x08009305
 8009340:	08009305 	.word	0x08009305
 8009344:	08009305 	.word	0x08009305
 8009348:	0800948d 	.word	0x0800948d
 800934c:	080093b5 	.word	0x080093b5
 8009350:	08009447 	.word	0x08009447
 8009354:	08009305 	.word	0x08009305
 8009358:	08009305 	.word	0x08009305
 800935c:	080094af 	.word	0x080094af
 8009360:	08009305 	.word	0x08009305
 8009364:	080093b5 	.word	0x080093b5
 8009368:	08009305 	.word	0x08009305
 800936c:	08009305 	.word	0x08009305
 8009370:	0800944f 	.word	0x0800944f
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	1d1a      	adds	r2, r3, #4
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	602a      	str	r2, [r5, #0]
 800937c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009384:	2301      	movs	r3, #1
 8009386:	e09f      	b.n	80094c8 <_printf_i+0x1ec>
 8009388:	6820      	ldr	r0, [r4, #0]
 800938a:	682b      	ldr	r3, [r5, #0]
 800938c:	0607      	lsls	r7, r0, #24
 800938e:	f103 0104 	add.w	r1, r3, #4
 8009392:	6029      	str	r1, [r5, #0]
 8009394:	d501      	bpl.n	800939a <_printf_i+0xbe>
 8009396:	681e      	ldr	r6, [r3, #0]
 8009398:	e003      	b.n	80093a2 <_printf_i+0xc6>
 800939a:	0646      	lsls	r6, r0, #25
 800939c:	d5fb      	bpl.n	8009396 <_printf_i+0xba>
 800939e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80093a2:	2e00      	cmp	r6, #0
 80093a4:	da03      	bge.n	80093ae <_printf_i+0xd2>
 80093a6:	232d      	movs	r3, #45	; 0x2d
 80093a8:	4276      	negs	r6, r6
 80093aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ae:	485a      	ldr	r0, [pc, #360]	; (8009518 <_printf_i+0x23c>)
 80093b0:	230a      	movs	r3, #10
 80093b2:	e012      	b.n	80093da <_printf_i+0xfe>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	6820      	ldr	r0, [r4, #0]
 80093b8:	1d19      	adds	r1, r3, #4
 80093ba:	6029      	str	r1, [r5, #0]
 80093bc:	0605      	lsls	r5, r0, #24
 80093be:	d501      	bpl.n	80093c4 <_printf_i+0xe8>
 80093c0:	681e      	ldr	r6, [r3, #0]
 80093c2:	e002      	b.n	80093ca <_printf_i+0xee>
 80093c4:	0641      	lsls	r1, r0, #25
 80093c6:	d5fb      	bpl.n	80093c0 <_printf_i+0xe4>
 80093c8:	881e      	ldrh	r6, [r3, #0]
 80093ca:	4853      	ldr	r0, [pc, #332]	; (8009518 <_printf_i+0x23c>)
 80093cc:	2f6f      	cmp	r7, #111	; 0x6f
 80093ce:	bf0c      	ite	eq
 80093d0:	2308      	moveq	r3, #8
 80093d2:	230a      	movne	r3, #10
 80093d4:	2100      	movs	r1, #0
 80093d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093da:	6865      	ldr	r5, [r4, #4]
 80093dc:	60a5      	str	r5, [r4, #8]
 80093de:	2d00      	cmp	r5, #0
 80093e0:	bfa2      	ittt	ge
 80093e2:	6821      	ldrge	r1, [r4, #0]
 80093e4:	f021 0104 	bicge.w	r1, r1, #4
 80093e8:	6021      	strge	r1, [r4, #0]
 80093ea:	b90e      	cbnz	r6, 80093f0 <_printf_i+0x114>
 80093ec:	2d00      	cmp	r5, #0
 80093ee:	d04b      	beq.n	8009488 <_printf_i+0x1ac>
 80093f0:	4615      	mov	r5, r2
 80093f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80093f6:	fb03 6711 	mls	r7, r3, r1, r6
 80093fa:	5dc7      	ldrb	r7, [r0, r7]
 80093fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009400:	4637      	mov	r7, r6
 8009402:	42bb      	cmp	r3, r7
 8009404:	460e      	mov	r6, r1
 8009406:	d9f4      	bls.n	80093f2 <_printf_i+0x116>
 8009408:	2b08      	cmp	r3, #8
 800940a:	d10b      	bne.n	8009424 <_printf_i+0x148>
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	07de      	lsls	r6, r3, #31
 8009410:	d508      	bpl.n	8009424 <_printf_i+0x148>
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	6861      	ldr	r1, [r4, #4]
 8009416:	4299      	cmp	r1, r3
 8009418:	bfde      	ittt	le
 800941a:	2330      	movle	r3, #48	; 0x30
 800941c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009420:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009424:	1b52      	subs	r2, r2, r5
 8009426:	6122      	str	r2, [r4, #16]
 8009428:	f8cd a000 	str.w	sl, [sp]
 800942c:	464b      	mov	r3, r9
 800942e:	aa03      	add	r2, sp, #12
 8009430:	4621      	mov	r1, r4
 8009432:	4640      	mov	r0, r8
 8009434:	f7ff fee4 	bl	8009200 <_printf_common>
 8009438:	3001      	adds	r0, #1
 800943a:	d14a      	bne.n	80094d2 <_printf_i+0x1f6>
 800943c:	f04f 30ff 	mov.w	r0, #4294967295
 8009440:	b004      	add	sp, #16
 8009442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	f043 0320 	orr.w	r3, r3, #32
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	4833      	ldr	r0, [pc, #204]	; (800951c <_printf_i+0x240>)
 8009450:	2778      	movs	r7, #120	; 0x78
 8009452:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	6829      	ldr	r1, [r5, #0]
 800945a:	061f      	lsls	r7, r3, #24
 800945c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009460:	d402      	bmi.n	8009468 <_printf_i+0x18c>
 8009462:	065f      	lsls	r7, r3, #25
 8009464:	bf48      	it	mi
 8009466:	b2b6      	uxthmi	r6, r6
 8009468:	07df      	lsls	r7, r3, #31
 800946a:	bf48      	it	mi
 800946c:	f043 0320 	orrmi.w	r3, r3, #32
 8009470:	6029      	str	r1, [r5, #0]
 8009472:	bf48      	it	mi
 8009474:	6023      	strmi	r3, [r4, #0]
 8009476:	b91e      	cbnz	r6, 8009480 <_printf_i+0x1a4>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	f023 0320 	bic.w	r3, r3, #32
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	2310      	movs	r3, #16
 8009482:	e7a7      	b.n	80093d4 <_printf_i+0xf8>
 8009484:	4824      	ldr	r0, [pc, #144]	; (8009518 <_printf_i+0x23c>)
 8009486:	e7e4      	b.n	8009452 <_printf_i+0x176>
 8009488:	4615      	mov	r5, r2
 800948a:	e7bd      	b.n	8009408 <_printf_i+0x12c>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	6826      	ldr	r6, [r4, #0]
 8009490:	6961      	ldr	r1, [r4, #20]
 8009492:	1d18      	adds	r0, r3, #4
 8009494:	6028      	str	r0, [r5, #0]
 8009496:	0635      	lsls	r5, r6, #24
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	d501      	bpl.n	80094a0 <_printf_i+0x1c4>
 800949c:	6019      	str	r1, [r3, #0]
 800949e:	e002      	b.n	80094a6 <_printf_i+0x1ca>
 80094a0:	0670      	lsls	r0, r6, #25
 80094a2:	d5fb      	bpl.n	800949c <_printf_i+0x1c0>
 80094a4:	8019      	strh	r1, [r3, #0]
 80094a6:	2300      	movs	r3, #0
 80094a8:	6123      	str	r3, [r4, #16]
 80094aa:	4615      	mov	r5, r2
 80094ac:	e7bc      	b.n	8009428 <_printf_i+0x14c>
 80094ae:	682b      	ldr	r3, [r5, #0]
 80094b0:	1d1a      	adds	r2, r3, #4
 80094b2:	602a      	str	r2, [r5, #0]
 80094b4:	681d      	ldr	r5, [r3, #0]
 80094b6:	6862      	ldr	r2, [r4, #4]
 80094b8:	2100      	movs	r1, #0
 80094ba:	4628      	mov	r0, r5
 80094bc:	f7f6 feb0 	bl	8000220 <memchr>
 80094c0:	b108      	cbz	r0, 80094c6 <_printf_i+0x1ea>
 80094c2:	1b40      	subs	r0, r0, r5
 80094c4:	6060      	str	r0, [r4, #4]
 80094c6:	6863      	ldr	r3, [r4, #4]
 80094c8:	6123      	str	r3, [r4, #16]
 80094ca:	2300      	movs	r3, #0
 80094cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094d0:	e7aa      	b.n	8009428 <_printf_i+0x14c>
 80094d2:	6923      	ldr	r3, [r4, #16]
 80094d4:	462a      	mov	r2, r5
 80094d6:	4649      	mov	r1, r9
 80094d8:	4640      	mov	r0, r8
 80094da:	47d0      	blx	sl
 80094dc:	3001      	adds	r0, #1
 80094de:	d0ad      	beq.n	800943c <_printf_i+0x160>
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	079b      	lsls	r3, r3, #30
 80094e4:	d413      	bmi.n	800950e <_printf_i+0x232>
 80094e6:	68e0      	ldr	r0, [r4, #12]
 80094e8:	9b03      	ldr	r3, [sp, #12]
 80094ea:	4298      	cmp	r0, r3
 80094ec:	bfb8      	it	lt
 80094ee:	4618      	movlt	r0, r3
 80094f0:	e7a6      	b.n	8009440 <_printf_i+0x164>
 80094f2:	2301      	movs	r3, #1
 80094f4:	4632      	mov	r2, r6
 80094f6:	4649      	mov	r1, r9
 80094f8:	4640      	mov	r0, r8
 80094fa:	47d0      	blx	sl
 80094fc:	3001      	adds	r0, #1
 80094fe:	d09d      	beq.n	800943c <_printf_i+0x160>
 8009500:	3501      	adds	r5, #1
 8009502:	68e3      	ldr	r3, [r4, #12]
 8009504:	9903      	ldr	r1, [sp, #12]
 8009506:	1a5b      	subs	r3, r3, r1
 8009508:	42ab      	cmp	r3, r5
 800950a:	dcf2      	bgt.n	80094f2 <_printf_i+0x216>
 800950c:	e7eb      	b.n	80094e6 <_printf_i+0x20a>
 800950e:	2500      	movs	r5, #0
 8009510:	f104 0619 	add.w	r6, r4, #25
 8009514:	e7f5      	b.n	8009502 <_printf_i+0x226>
 8009516:	bf00      	nop
 8009518:	08009871 	.word	0x08009871
 800951c:	08009882 	.word	0x08009882

08009520 <memmove>:
 8009520:	4288      	cmp	r0, r1
 8009522:	b510      	push	{r4, lr}
 8009524:	eb01 0402 	add.w	r4, r1, r2
 8009528:	d902      	bls.n	8009530 <memmove+0x10>
 800952a:	4284      	cmp	r4, r0
 800952c:	4623      	mov	r3, r4
 800952e:	d807      	bhi.n	8009540 <memmove+0x20>
 8009530:	1e43      	subs	r3, r0, #1
 8009532:	42a1      	cmp	r1, r4
 8009534:	d008      	beq.n	8009548 <memmove+0x28>
 8009536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800953a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800953e:	e7f8      	b.n	8009532 <memmove+0x12>
 8009540:	4402      	add	r2, r0
 8009542:	4601      	mov	r1, r0
 8009544:	428a      	cmp	r2, r1
 8009546:	d100      	bne.n	800954a <memmove+0x2a>
 8009548:	bd10      	pop	{r4, pc}
 800954a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800954e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009552:	e7f7      	b.n	8009544 <memmove+0x24>

08009554 <_sbrk_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4d06      	ldr	r5, [pc, #24]	; (8009570 <_sbrk_r+0x1c>)
 8009558:	2300      	movs	r3, #0
 800955a:	4604      	mov	r4, r0
 800955c:	4608      	mov	r0, r1
 800955e:	602b      	str	r3, [r5, #0]
 8009560:	f7f7 fec4 	bl	80012ec <_sbrk>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_sbrk_r+0x1a>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b103      	cbz	r3, 800956e <_sbrk_r+0x1a>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	20000540 	.word	0x20000540

08009574 <memcpy>:
 8009574:	440a      	add	r2, r1
 8009576:	4291      	cmp	r1, r2
 8009578:	f100 33ff 	add.w	r3, r0, #4294967295
 800957c:	d100      	bne.n	8009580 <memcpy+0xc>
 800957e:	4770      	bx	lr
 8009580:	b510      	push	{r4, lr}
 8009582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800958a:	4291      	cmp	r1, r2
 800958c:	d1f9      	bne.n	8009582 <memcpy+0xe>
 800958e:	bd10      	pop	{r4, pc}

08009590 <_realloc_r>:
 8009590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009594:	4680      	mov	r8, r0
 8009596:	4614      	mov	r4, r2
 8009598:	460e      	mov	r6, r1
 800959a:	b921      	cbnz	r1, 80095a6 <_realloc_r+0x16>
 800959c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095a0:	4611      	mov	r1, r2
 80095a2:	f7ff bc49 	b.w	8008e38 <_malloc_r>
 80095a6:	b92a      	cbnz	r2, 80095b4 <_realloc_r+0x24>
 80095a8:	f7ff fbda 	bl	8008d60 <_free_r>
 80095ac:	4625      	mov	r5, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b4:	f000 f81b 	bl	80095ee <_malloc_usable_size_r>
 80095b8:	4284      	cmp	r4, r0
 80095ba:	4607      	mov	r7, r0
 80095bc:	d802      	bhi.n	80095c4 <_realloc_r+0x34>
 80095be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095c2:	d812      	bhi.n	80095ea <_realloc_r+0x5a>
 80095c4:	4621      	mov	r1, r4
 80095c6:	4640      	mov	r0, r8
 80095c8:	f7ff fc36 	bl	8008e38 <_malloc_r>
 80095cc:	4605      	mov	r5, r0
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d0ed      	beq.n	80095ae <_realloc_r+0x1e>
 80095d2:	42bc      	cmp	r4, r7
 80095d4:	4622      	mov	r2, r4
 80095d6:	4631      	mov	r1, r6
 80095d8:	bf28      	it	cs
 80095da:	463a      	movcs	r2, r7
 80095dc:	f7ff ffca 	bl	8009574 <memcpy>
 80095e0:	4631      	mov	r1, r6
 80095e2:	4640      	mov	r0, r8
 80095e4:	f7ff fbbc 	bl	8008d60 <_free_r>
 80095e8:	e7e1      	b.n	80095ae <_realloc_r+0x1e>
 80095ea:	4635      	mov	r5, r6
 80095ec:	e7df      	b.n	80095ae <_realloc_r+0x1e>

080095ee <_malloc_usable_size_r>:
 80095ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095f2:	1f18      	subs	r0, r3, #4
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	bfbc      	itt	lt
 80095f8:	580b      	ldrlt	r3, [r1, r0]
 80095fa:	18c0      	addlt	r0, r0, r3
 80095fc:	4770      	bx	lr
	...

08009600 <_init>:
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	bf00      	nop
 8009604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009606:	bc08      	pop	{r3}
 8009608:	469e      	mov	lr, r3
 800960a:	4770      	bx	lr

0800960c <_fini>:
 800960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960e:	bf00      	nop
 8009610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009612:	bc08      	pop	{r3}
 8009614:	469e      	mov	lr, r3
 8009616:	4770      	bx	lr
