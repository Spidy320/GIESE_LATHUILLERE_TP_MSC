
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009644  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08009824  08009824  00019824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b20  08009b20  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009b20  08009b20  00019b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b28  08009b28  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b28  08009b28  00019b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b2c  08009b2c  00019b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000060  08009b90  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08009b90  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c82a  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a06  00000000  00000000  0003c8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  00040308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ef  00000000  00000000  000418e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029e37  00000000  00000000  000429d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c6ba  00000000  00000000  0006c80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112b3f  00000000  00000000  00088ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060d4  00000000  00000000  0019ba08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  001a1adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800980c 	.word	0x0800980c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800980c 	.word	0x0800980c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	; 0x30
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2220      	movs	r2, #32
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f008 fc7b 	bl	8008ee0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ea:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <MX_ADC1_Init+0xec>)
 80005ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f2:	4b31      	ldr	r3, [pc, #196]	; (80006b8 <MX_ADC1_Init+0xec>)
 80005f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fa:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <MX_ADC1_Init+0xec>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000600:	4b2d      	ldr	r3, [pc, #180]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000606:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <MX_ADC1_Init+0xec>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000614:	2204      	movs	r2, #4
 8000616:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <MX_ADC1_Init+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061e:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000626:	2201      	movs	r2, #1
 8000628:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <MX_ADC1_Init+0xec>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000634:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8000638:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_ADC1_Init+0xec>)
 800063c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000640:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000644:	2201      	movs	r2, #1
 8000646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_ADC1_Init+0xec>)
 800064c:	2200      	movs	r2, #0
 800064e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000658:	4817      	ldr	r0, [pc, #92]	; (80006b8 <MX_ADC1_Init+0xec>)
 800065a:	f001 fd6b 	bl	8002134 <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000664:	f000 fc50 	bl	8000f08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	4811      	ldr	r0, [pc, #68]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000674:	f002 fe52 	bl	800331c <HAL_ADCEx_MultiModeConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800067e:	f000 fc43 	bl	8000f08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_ADC1_Init+0xf0>)
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2306      	movs	r3, #6
 8000688:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800068a:	2304      	movs	r3, #4
 800068c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068e:	237f      	movs	r3, #127	; 0x7f
 8000690:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000692:	2304      	movs	r3, #4
 8000694:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <MX_ADC1_Init+0xec>)
 80006a0:	f001 fff2 	bl	8002688 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006aa:	f000 fc2d 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	3730      	adds	r7, #48	; 0x30
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000007c 	.word	0x2000007c
 80006bc:	21800100 	.word	0x21800100

080006c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2220      	movs	r2, #32
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f008 fc07 	bl	8008ee0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006d4:	4a2b      	ldr	r2, [pc, #172]	; (8000784 <MX_ADC2_Init+0xc4>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006ec:	4b24      	ldr	r3, [pc, #144]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000700:	2200      	movs	r2, #0
 8000702:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000706:	2200      	movs	r2, #0
 8000708:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_ADC2_Init+0xc0>)
 800070c:	2201      	movs	r2, #1
 800070e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800073a:	4811      	ldr	r0, [pc, #68]	; (8000780 <MX_ADC2_Init+0xc0>)
 800073c:	f001 fcfa 	bl	8002134 <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000746:	f000 fbdf 	bl	8000f08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_ADC2_Init+0xc8>)
 800074c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074e:	2306      	movs	r3, #6
 8000750:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000756:	237f      	movs	r3, #127	; 0x7f
 8000758:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075a:	2304      	movs	r3, #4
 800075c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000768:	f001 ff8e 	bl	8002688 <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000772:	f000 fbc9 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000e8 	.word	0x200000e8
 8000784:	50000100 	.word	0x50000100
 8000788:	19200040 	.word	0x19200040

0800078c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0a4      	sub	sp, #144	; 0x90
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a8:	2254      	movs	r2, #84	; 0x54
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f008 fb97 	bl	8008ee0 <memset>
  if(adcHandle->Instance==ADC1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007ba:	f040 80a0 	bne.w	80008fe <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007c4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ce:	4618      	mov	r0, r3
 80007d0:	f004 fa96 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80007da:	f000 fb95 	bl	8000f08 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007de:	4b79      	ldr	r3, [pc, #484]	; (80009c4 <HAL_ADC_MspInit+0x238>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a77      	ldr	r2, [pc, #476]	; (80009c4 <HAL_ADC_MspInit+0x238>)
 80007e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007e8:	4b76      	ldr	r3, [pc, #472]	; (80009c4 <HAL_ADC_MspInit+0x238>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d10b      	bne.n	8000808 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007f0:	4b75      	ldr	r3, [pc, #468]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 80007f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f4:	4a74      	ldr	r2, [pc, #464]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 80007f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fc:	4b72      	ldr	r3, [pc, #456]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 80007fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000808:	4b6f      	ldr	r3, [pc, #444]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080c:	4a6e      	ldr	r2, [pc, #440]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000814:	4b6c      	ldr	r3, [pc, #432]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	623b      	str	r3, [r7, #32]
 800081e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b69      	ldr	r3, [pc, #420]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000824:	4a68      	ldr	r2, [pc, #416]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082c:	4b66      	ldr	r3, [pc, #408]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000838:	4b63      	ldr	r3, [pc, #396]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800083a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083c:	4a62      	ldr	r2, [pc, #392]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800083e:	f043 0302 	orr.w	r3, r3, #2
 8000842:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000844:	4b60      	ldr	r3, [pc, #384]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	f003 0302 	and.w	r3, r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000850:	2304      	movs	r3, #4
 8000852:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000854:	2303      	movs	r3, #3
 8000856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000864:	4619      	mov	r1, r3
 8000866:	4859      	ldr	r0, [pc, #356]	; (80009cc <HAL_ADC_MspInit+0x240>)
 8000868:	f003 fa72 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800086c:	2302      	movs	r3, #2
 800086e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000870:	2303      	movs	r3, #3
 8000872:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000880:	4619      	mov	r1, r3
 8000882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000886:	f003 fa63 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_Imes_Pin|V_Imes_Pin;
 800088a:	2303      	movs	r3, #3
 800088c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088e:	2303      	movs	r3, #3
 8000890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800089e:	4619      	mov	r1, r3
 80008a0:	484b      	ldr	r0, [pc, #300]	; (80009d0 <HAL_ADC_MspInit+0x244>)
 80008a2:	f003 fa55 	bl	8003d50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008a6:	4b4b      	ldr	r3, [pc, #300]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008a8:	4a4b      	ldr	r2, [pc, #300]	; (80009d8 <HAL_ADC_MspInit+0x24c>)
 80008aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008ac:	4b49      	ldr	r3, [pc, #292]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008ae:	2205      	movs	r2, #5
 80008b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b2:	4b48      	ldr	r3, [pc, #288]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b8:	4b46      	ldr	r3, [pc, #280]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008be:	4b45      	ldr	r3, [pc, #276]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008c4:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008cc:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008d4:	4b3f      	ldr	r3, [pc, #252]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008d6:	2220      	movs	r2, #32
 80008d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008da:	4b3e      	ldr	r3, [pc, #248]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008e0:	483c      	ldr	r0, [pc, #240]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008e2:	f002 ff03 	bl	80036ec <HAL_DMA_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 80008ec:	f000 fb0c 	bl	8000f08 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a38      	ldr	r2, [pc, #224]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008f4:	655a      	str	r2, [r3, #84]	; 0x54
 80008f6:	4a37      	ldr	r2, [pc, #220]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008fc:	e05e      	b.n	80009bc <HAL_ADC_MspInit+0x230>
  else if(adcHandle->Instance==ADC2)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a36      	ldr	r2, [pc, #216]	; (80009dc <HAL_ADC_MspInit+0x250>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d159      	bne.n	80009bc <HAL_ADC_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800090e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000912:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000918:	4618      	mov	r0, r3
 800091a:	f004 f9f1 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 8000924:	f000 faf0 	bl	8000f08 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000928:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <HAL_ADC_MspInit+0x238>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <HAL_ADC_MspInit+0x238>)
 8000930:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000932:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <HAL_ADC_MspInit+0x238>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d10b      	bne.n	8000952 <HAL_ADC_MspInit+0x1c6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800093a:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a22      	ldr	r2, [pc, #136]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000940:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000982:	230b      	movs	r3, #11
 8000984:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000986:	2303      	movs	r3, #3
 8000988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000992:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <HAL_ADC_MspInit+0x240>)
 800099a:	f003 f9d9 	bl	8003d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800099e:	2301      	movs	r3, #1
 80009a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a2:	2303      	movs	r3, #3
 80009a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009b2:	4619      	mov	r1, r3
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f003 f9ca 	bl	8003d50 <HAL_GPIO_Init>
}
 80009bc:	bf00      	nop
 80009be:	3790      	adds	r7, #144	; 0x90
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200001b4 	.word	0x200001b4
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000800 	.word	0x48000800
 80009d0:	48000400 	.word	0x48000400
 80009d4:	20000154 	.word	0x20000154
 80009d8:	40020008 	.word	0x40020008
 80009dc:	50000100 	.word	0x50000100

080009e0 <Adc_init>:
char vitesse_str[5];
uint32_t val_vitesse_t0;
uint32_t val_vitesse_t1;
int32_t val_vitesse;

void Adc_init(void){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	if (HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)){
 80009e4:	217f      	movs	r1, #127	; 0x7f
 80009e6:	4810      	ldr	r0, [pc, #64]	; (8000a28 <Adc_init+0x48>)
 80009e8:	f002 fc36 	bl	8003258 <HAL_ADCEx_Calibration_Start>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d006      	beq.n	8000a00 <Adc_init+0x20>
		HAL_UART_Transmit(&huart2, error_calib, 21, HAL_MAX_DELAY);
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	2215      	movs	r2, #21
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <Adc_init+0x4c>)
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <Adc_init+0x50>)
 80009fc:	f006 fa29 	bl	8006e52 <HAL_UART_Transmit>
	}
	if (HAL_OK != HAL_ADC_Start_DMA(&hadc1, &courant_mes, ADC_BUFFER)){
 8000a00:	2201      	movs	r2, #1
 8000a02:	490c      	ldr	r1, [pc, #48]	; (8000a34 <Adc_init+0x54>)
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <Adc_init+0x48>)
 8000a06:	f001 fd57 	bl	80024b8 <HAL_ADC_Start_DMA>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d006      	beq.n	8000a1e <Adc_init+0x3e>
		HAL_UART_Transmit(&huart2, error_start, 17, HAL_MAX_DELAY);
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	2211      	movs	r2, #17
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <Adc_init+0x58>)
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <Adc_init+0x50>)
 8000a1a:	f006 fa1a 	bl	8006e52 <HAL_UART_Transmit>
	}
	HAL_TIM_Base_Start(&htim1);
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <Adc_init+0x5c>)
 8000a20:	f004 fc1e 	bl	8005260 <HAL_TIM_Base_Start>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000007c 	.word	0x2000007c
 8000a2c:	08009870 	.word	0x08009870
 8000a30:	20000300 	.word	0x20000300
 8000a34:	200001b8 	.word	0x200001b8
 8000a38:	08009888 	.word	0x08009888
 8000a3c:	20000268 	.word	0x20000268

08000a40 <Mes_Courant>:

void Mes_Courant(void){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	courant_mA = (1000/50)*((courant_mes)*(3300000/4095) - 1650000);
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <Mes_Courant+0x6c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f643 62e4 	movw	r2, #16100	; 0x3ee4
 8000a4c:	fb03 f202 	mul.w	r2, r3, r2
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <Mes_Courant+0x70>)
 8000a52:	4413      	add	r3, r2
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <Mes_Courant+0x74>)
 8000a58:	601a      	str	r2, [r3, #0]
	courant_mA = courant_mA / 1000;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <Mes_Courant+0x74>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a16      	ldr	r2, [pc, #88]	; (8000ab8 <Mes_Courant+0x78>)
 8000a60:	fb82 1203 	smull	r1, r2, r2, r3
 8000a64:	1192      	asrs	r2, r2, #6
 8000a66:	17db      	asrs	r3, r3, #31
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <Mes_Courant+0x74>)
 8000a6c:	6013      	str	r3, [r2, #0]
	sprintf(courant_str, "%ld", courant_mA);
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <Mes_Courant+0x74>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	4911      	ldr	r1, [pc, #68]	; (8000abc <Mes_Courant+0x7c>)
 8000a76:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <Mes_Courant+0x80>)
 8000a78:	f008 fa12 	bl	8008ea0 <siprintf>
	HAL_UART_Transmit(&huart2, courant, 10, HAL_MAX_DELAY);
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	220a      	movs	r2, #10
 8000a82:	4910      	ldr	r1, [pc, #64]	; (8000ac4 <Mes_Courant+0x84>)
 8000a84:	4810      	ldr	r0, [pc, #64]	; (8000ac8 <Mes_Courant+0x88>)
 8000a86:	f006 f9e4 	bl	8006e52 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, courant_str, 5, HAL_MAX_DELAY);
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	2205      	movs	r2, #5
 8000a90:	490b      	ldr	r1, [pc, #44]	; (8000ac0 <Mes_Courant+0x80>)
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <Mes_Courant+0x88>)
 8000a94:	f006 f9dd 	bl	8006e52 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, courant_txt_ma, 3, HAL_MAX_DELAY);
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	490b      	ldr	r1, [pc, #44]	; (8000acc <Mes_Courant+0x8c>)
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <Mes_Courant+0x88>)
 8000aa2:	f006 f9d6 	bl	8006e52 <HAL_UART_Transmit>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200001b8 	.word	0x200001b8
 8000ab0:	fe0875c0 	.word	0xfe0875c0
 8000ab4:	200001bc 	.word	0x200001bc
 8000ab8:	10624dd3 	.word	0x10624dd3
 8000abc:	08009824 	.word	0x08009824
 8000ac0:	200001c0 	.word	0x200001c0
 8000ac4:	08009864 	.word	0x08009864
 8000ac8:	20000300 	.word	0x20000300
 8000acc:	0800989c 	.word	0x0800989c

08000ad0 <Mesure_Vitesse>:
		if (HAL_OK != HAL_ADC_Start_DMA(&hadc2, &courant_mes, ADC_BUFFER)){
			HAL_UART_Transmit(&huart2, error_start, 17, HAL_MAX_DELAY);
		}
}

void Mesure_Vitesse(void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	val_vitesse_t0 = __HAL_TIM_GET_COUNTER(&htim3);
 8000ad4:	4b43      	ldr	r3, [pc, #268]	; (8000be4 <Mesure_Vitesse+0x114>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ada:	4a43      	ldr	r2, [pc, #268]	; (8000be8 <Mesure_Vitesse+0x118>)
 8000adc:	6013      	str	r3, [r2, #0]
	sprintf(vitesse_str, "%ld", val_vitesse_t0);
 8000ade:	4b42      	ldr	r3, [pc, #264]	; (8000be8 <Mesure_Vitesse+0x118>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4941      	ldr	r1, [pc, #260]	; (8000bec <Mesure_Vitesse+0x11c>)
 8000ae6:	4842      	ldr	r0, [pc, #264]	; (8000bf0 <Mesure_Vitesse+0x120>)
 8000ae8:	f008 f9da 	bl	8008ea0 <siprintf>
	HAL_UART_Transmit(&huart2, vitesse_str, strlen(vitesse_str), HAL_MAX_DELAY);
 8000aec:	4840      	ldr	r0, [pc, #256]	; (8000bf0 <Mesure_Vitesse+0x120>)
 8000aee:	f7ff fb97 	bl	8000220 <strlen>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	493d      	ldr	r1, [pc, #244]	; (8000bf0 <Mesure_Vitesse+0x120>)
 8000afc:	483d      	ldr	r0, [pc, #244]	; (8000bf4 <Mesure_Vitesse+0x124>)
 8000afe:	f006 f9a8 	bl	8006e52 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, vitesse_txt, 9, HAL_MAX_DELAY);
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	2209      	movs	r2, #9
 8000b08:	493b      	ldr	r1, [pc, #236]	; (8000bf8 <Mesure_Vitesse+0x128>)
 8000b0a:	483a      	ldr	r0, [pc, #232]	; (8000bf4 <Mesure_Vitesse+0x124>)
 8000b0c:	f006 f9a1 	bl	8006e52 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000b10:	2064      	movs	r0, #100	; 0x64
 8000b12:	f001 f8a5 	bl	8001c60 <HAL_Delay>
	val_vitesse_t1 = __HAL_TIM_GET_COUNTER(&htim3);
 8000b16:	4b33      	ldr	r3, [pc, #204]	; (8000be4 <Mesure_Vitesse+0x114>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1c:	4a37      	ldr	r2, [pc, #220]	; (8000bfc <Mesure_Vitesse+0x12c>)
 8000b1e:	6013      	str	r3, [r2, #0]
	sprintf(vitesse_str, "%ld", val_vitesse_t1);
 8000b20:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <Mesure_Vitesse+0x12c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4931      	ldr	r1, [pc, #196]	; (8000bec <Mesure_Vitesse+0x11c>)
 8000b28:	4831      	ldr	r0, [pc, #196]	; (8000bf0 <Mesure_Vitesse+0x120>)
 8000b2a:	f008 f9b9 	bl	8008ea0 <siprintf>
	HAL_UART_Transmit(&huart2, vitesse_str, strlen(vitesse_str), HAL_MAX_DELAY);
 8000b2e:	4830      	ldr	r0, [pc, #192]	; (8000bf0 <Mesure_Vitesse+0x120>)
 8000b30:	f7ff fb76 	bl	8000220 <strlen>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	492c      	ldr	r1, [pc, #176]	; (8000bf0 <Mesure_Vitesse+0x120>)
 8000b3e:	482d      	ldr	r0, [pc, #180]	; (8000bf4 <Mesure_Vitesse+0x124>)
 8000b40:	f006 f987 	bl	8006e52 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, vitesse_txt, 9, HAL_MAX_DELAY);
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	2209      	movs	r2, #9
 8000b4a:	492b      	ldr	r1, [pc, #172]	; (8000bf8 <Mesure_Vitesse+0x128>)
 8000b4c:	4829      	ldr	r0, [pc, #164]	; (8000bf4 <Mesure_Vitesse+0x124>)
 8000b4e:	f006 f980 	bl	8006e52 <HAL_UART_Transmit>
	if (sens_rotation == 1){
 8000b52:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <Mesure_Vitesse+0x130>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d108      	bne.n	8000b6c <Mesure_Vitesse+0x9c>
		val_vitesse = (val_vitesse_t1 - val_vitesse_t0); // nombre de tick en 0.1 sec
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <Mesure_Vitesse+0x12c>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <Mesure_Vitesse+0x118>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <Mesure_Vitesse+0x134>)
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e007      	b.n	8000b7c <Mesure_Vitesse+0xac>
	}else{
		val_vitesse = (val_vitesse_t0 - val_vitesse_t1); // nombre de tick en 0.1 sec
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <Mesure_Vitesse+0x118>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <Mesure_Vitesse+0x12c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <Mesure_Vitesse+0x134>)
 8000b7a:	601a      	str	r2, [r3, #0]
	}
	if (val_vitesse < 0){
 8000b7c:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <Mesure_Vitesse+0x134>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	da06      	bge.n	8000b92 <Mesure_Vitesse+0xc2>
		val_vitesse += 65535; // On a dépassé la valeur max du compteur
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <Mesure_Vitesse+0x134>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000b8c:	33ff      	adds	r3, #255	; 0xff
 8000b8e:	4a1d      	ldr	r2, [pc, #116]	; (8000c04 <Mesure_Vitesse+0x134>)
 8000b90:	6013      	str	r3, [r2, #0]
	}
	// on mesure 102960 tick/s pour alpha = 0.75
	// donc 1 tr/s =~ 4118 tick/s
	val_vitesse = (val_vitesse * 10 * 60) / 4118;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <Mesure_Vitesse+0x134>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000b9a:	fb02 f303 	mul.w	r3, r2, r3
 8000b9e:	4a1a      	ldr	r2, [pc, #104]	; (8000c08 <Mesure_Vitesse+0x138>)
 8000ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba4:	1292      	asrs	r2, r2, #10
 8000ba6:	17db      	asrs	r3, r3, #31
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	4a16      	ldr	r2, [pc, #88]	; (8000c04 <Mesure_Vitesse+0x134>)
 8000bac:	6013      	str	r3, [r2, #0]
	sprintf(vitesse_str, "%ld", val_vitesse);
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <Mesure_Vitesse+0x134>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	490d      	ldr	r1, [pc, #52]	; (8000bec <Mesure_Vitesse+0x11c>)
 8000bb6:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <Mesure_Vitesse+0x120>)
 8000bb8:	f008 f972 	bl	8008ea0 <siprintf>
	HAL_UART_Transmit(&huart2, vitesse_str, strlen(vitesse_str), HAL_MAX_DELAY);
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <Mesure_Vitesse+0x120>)
 8000bbe:	f7ff fb2f 	bl	8000220 <strlen>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	4909      	ldr	r1, [pc, #36]	; (8000bf0 <Mesure_Vitesse+0x120>)
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <Mesure_Vitesse+0x124>)
 8000bce:	f006 f940 	bl	8006e52 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, vitesse_txt, 9, HAL_MAX_DELAY);
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	2209      	movs	r2, #9
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <Mesure_Vitesse+0x128>)
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <Mesure_Vitesse+0x124>)
 8000bdc:	f006 f939 	bl	8006e52 <HAL_UART_Transmit>
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200002b4 	.word	0x200002b4
 8000be8:	200001d0 	.word	0x200001d0
 8000bec:	08009824 	.word	0x08009824
 8000bf0:	200001c8 	.word	0x200001c8
 8000bf4:	20000300 	.word	0x20000300
 8000bf8:	080098a0 	.word	0x080098a0
 8000bfc:	200001d4 	.word	0x200001d4
 8000c00:	20000000 	.word	0x20000000
 8000c04:	200001d8 	.word	0x200001d8
 8000c08:	3fa8785b 	.word	0x3fa8785b

08000c0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_DMA_Init+0x50>)
 8000c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c16:	4a11      	ldr	r2, [pc, #68]	; (8000c5c <MX_DMA_Init+0x50>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6493      	str	r3, [r2, #72]	; 0x48
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_DMA_Init+0x50>)
 8000c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_DMA_Init+0x50>)
 8000c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <MX_DMA_Init+0x50>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6493      	str	r3, [r2, #72]	; 0x48
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_DMA_Init+0x50>)
 8000c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	200b      	movs	r0, #11
 8000c48:	f002 fd28 	bl	800369c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c4c:	200b      	movs	r0, #11
 8000c4e:	f002 fd3f 	bl	80036d0 <HAL_NVIC_EnableIRQ>

}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000

08000c60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	4b3f      	ldr	r3, [pc, #252]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a3e      	ldr	r2, [pc, #248]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b3c      	ldr	r3, [pc, #240]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0304 	and.w	r3, r3, #4
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c8e:	4b39      	ldr	r3, [pc, #228]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a38      	ldr	r2, [pc, #224]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000c94:	f043 0320 	orr.w	r3, r3, #32
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0320 	and.w	r3, r3, #32
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a32      	ldr	r2, [pc, #200]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b30      	ldr	r3, [pc, #192]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a2c      	ldr	r2, [pc, #176]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a26      	ldr	r2, [pc, #152]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f003 f9ad 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	481e      	ldr	r0, [pc, #120]	; (8000d78 <MX_GPIO_Init+0x118>)
 8000d00:	f003 f9a8 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4818      	ldr	r0, [pc, #96]	; (8000d7c <MX_GPIO_Init+0x11c>)
 8000d1c:	f003 f818 	bl	8003d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000d20:	2320      	movs	r3, #32
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3a:	f003 f809 	bl	8003d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <MX_GPIO_Init+0x118>)
 8000d56:	f002 fffb 	bl	8003d50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2028      	movs	r0, #40	; 0x28
 8000d60:	f002 fc9c 	bl	800369c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d64:	2028      	movs	r0, #40	; 0x28
 8000d66:	f002 fcb3 	bl	80036d0 <HAL_NVIC_EnableIRQ>

}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000
 8000d78:	48000c00 	.word	0x48000c00
 8000d7c:	48000800 	.word	0x48000800

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d84:	f000 ff35 	bl	8001bf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d88:	f000 f842 	bl	8000e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8c:	f7ff ff68 	bl	8000c60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d90:	f7ff ff3c 	bl	8000c0c <MX_DMA_Init>
  MX_ADC2_Init();
 8000d94:	f7ff fc94 	bl	80006c0 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000d98:	f7ff fc18 	bl	80005cc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d9c:	f000 fbd8 	bl	8001550 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000da0:	f000 fc86 	bl	80016b0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000da4:	f000 fdc4 	bl	8001930 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000da8:	f000 fe0e 	bl	80019c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, started, 31, HAL_MAX_DELAY);
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
 8000db0:	221f      	movs	r2, #31
 8000db2:	4911      	ldr	r1, [pc, #68]	; (8000df8 <main+0x78>)
 8000db4:	4811      	ldr	r0, [pc, #68]	; (8000dfc <main+0x7c>)
 8000db6:	f006 f84c 	bl	8006e52 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	490f      	ldr	r1, [pc, #60]	; (8000e00 <main+0x80>)
 8000dc2:	480e      	ldr	r0, [pc, #56]	; (8000dfc <main+0x7c>)
 8000dc4:	f006 f845 	bl	8006e52 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	490e      	ldr	r1, [pc, #56]	; (8000e04 <main+0x84>)
 8000dcc:	480b      	ldr	r0, [pc, #44]	; (8000dfc <main+0x7c>)
 8000dce:	f006 f8d7 	bl	8006f80 <HAL_UART_Receive_IT>
  Adc_init();
 8000dd2:	f7ff fe05 	bl	80009e0 <Adc_init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000dd6:	213c      	movs	r1, #60	; 0x3c
 8000dd8:	480b      	ldr	r0, [pc, #44]	; (8000e08 <main+0x88>)
 8000dda:	f004 fdd5 	bl	8005988 <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (it_uart == 1){
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <main+0x8c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d1fb      	bne.n	8000dde <main+0x5e>
		  UART_Echo();
 8000de6:	f000 fa67 	bl	80012b8 <UART_Echo>
		  UART_Create_Cmd();
 8000dea:	f000 f973 	bl	80010d4 <UART_Create_Cmd>
		  it_uart = 0;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <main+0x8c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
	  if (it_uart == 1){
 8000df4:	e7f3      	b.n	8000dde <main+0x5e>
 8000df6:	bf00      	nop
 8000df8:	08009a84 	.word	0x08009a84
 8000dfc:	20000300 	.word	0x20000300
 8000e00:	08009aa4 	.word	0x08009aa4
 8000e04:	20000214 	.word	0x20000214
 8000e08:	200002b4 	.word	0x200002b4
 8000e0c:	200001dc 	.word	0x200001dc

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b094      	sub	sp, #80	; 0x50
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	f107 0318 	add.w	r3, r7, #24
 8000e1a:	2238      	movs	r2, #56	; 0x38
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f008 f85e 	bl	8008ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f003 f94a 	bl	80040cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e40:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e42:	2302      	movs	r3, #2
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e46:	2303      	movs	r3, #3
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e4e:	2355      	movs	r3, #85	; 0x55
 8000e50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e56:	2302      	movs	r3, #2
 8000e58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5e:	f107 0318 	add.w	r3, r7, #24
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 f9e6 	bl	8004234 <HAL_RCC_OscConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e6e:	f000 f84b 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e72:	230f      	movs	r3, #15
 8000e74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e76:	2303      	movs	r3, #3
 8000e78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2104      	movs	r1, #4
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fcea 	bl	8004864 <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e96:	f000 f837 	bl	8000f08 <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3750      	adds	r7, #80	; 0x50
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* __________________________________________________________________________________________________________________________________________________________________________________________________*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	it_uart = 1;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_UART_RxCpltCallback+0x20>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4904      	ldr	r1, [pc, #16]	; (8000ec8 <HAL_UART_RxCpltCallback+0x24>)
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_UART_RxCpltCallback+0x28>)
 8000eb8:	f006 f862 	bl	8006f80 <HAL_UART_Receive_IT>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200001dc 	.word	0x200001dc
 8000ec8:	20000214 	.word	0x20000214
 8000ecc:	20000300 	.word	0x20000300

08000ed0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	// Fonction d'asservissement
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ef6:	f000 fe95 	bl	8001c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40001000 	.word	0x40001000

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <Error_Handler+0x8>
	...

08000f14 <Change_Speed>:
int speed_buffer[4];
const uint8_t maxSpeed[] = "Too fast my friend, too fast";
const uint8_t speedChangedFin[] = "Speed changed";
int sens_rotation = 1;

void Change_Speed(char cmd[CMD_BUFFER_SIZE]){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	/* Debug

	HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, cmd, 10, HAL_MAX_DELAY);
*/
	speed_buffer[0] = cmd[6] - '0';
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3306      	adds	r3, #6
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	3b30      	subs	r3, #48	; 0x30
 8000f24:	4a40      	ldr	r2, [pc, #256]	; (8001028 <Change_Speed+0x114>)
 8000f26:	6013      	str	r3, [r2, #0]
	speed_buffer[1] = cmd[7] - '0';
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3307      	adds	r3, #7
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	3b30      	subs	r3, #48	; 0x30
 8000f30:	4a3d      	ldr	r2, [pc, #244]	; (8001028 <Change_Speed+0x114>)
 8000f32:	6053      	str	r3, [r2, #4]
	speed_buffer[2] = cmd[8] - '0';
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3308      	adds	r3, #8
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	3b30      	subs	r3, #48	; 0x30
 8000f3c:	4a3a      	ldr	r2, [pc, #232]	; (8001028 <Change_Speed+0x114>)
 8000f3e:	6093      	str	r3, [r2, #8]
	speed_buffer[3] = cmd[9] - '0';
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3309      	adds	r3, #9
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	3b30      	subs	r3, #48	; 0x30
 8000f48:	4a37      	ldr	r2, [pc, #220]	; (8001028 <Change_Speed+0x114>)
 8000f4a:	60d3      	str	r3, [r2, #12]
	int speed = speed_buffer[0]*1000 + speed_buffer[1]*100 + speed_buffer[2]*10 + speed_buffer[3];
 8000f4c:	4b36      	ldr	r3, [pc, #216]	; (8001028 <Change_Speed+0x114>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f54:	fb03 f202 	mul.w	r2, r3, r2
 8000f58:	4b33      	ldr	r3, [pc, #204]	; (8001028 <Change_Speed+0x114>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2164      	movs	r1, #100	; 0x64
 8000f5e:	fb01 f303 	mul.w	r3, r1, r3
 8000f62:	18d1      	adds	r1, r2, r3
 8000f64:	4b30      	ldr	r3, [pc, #192]	; (8001028 <Change_Speed+0x114>)
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	18ca      	adds	r2, r1, r3
 8000f72:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <Change_Speed+0x114>)
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60bb      	str	r3, [r7, #8]
	if (speed < 500){
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f80:	da03      	bge.n	8000f8a <Change_Speed+0x76>
		sens_rotation = 0;
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <Change_Speed+0x118>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e002      	b.n	8000f90 <Change_Speed+0x7c>
	}else{
		sens_rotation = 1;
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <Change_Speed+0x118>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
	}
	if (speed > MAX_SPEED || speed < 0){
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f96:	da02      	bge.n	8000f9e <Change_Speed+0x8a>
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	da0e      	bge.n	8000fbc <Change_Speed+0xa8>
		HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	4922      	ldr	r1, [pc, #136]	; (8001030 <Change_Speed+0x11c>)
 8000fa6:	4823      	ldr	r0, [pc, #140]	; (8001034 <Change_Speed+0x120>)
 8000fa8:	f005 ff53 	bl	8006e52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, maxSpeed, 28, HAL_MAX_DELAY);
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	221c      	movs	r2, #28
 8000fb2:	4921      	ldr	r1, [pc, #132]	; (8001038 <Change_Speed+0x124>)
 8000fb4:	481f      	ldr	r0, [pc, #124]	; (8001034 <Change_Speed+0x120>)
 8000fb6:	f005 ff4c 	bl	8006e52 <HAL_UART_Transmit>
		}
		/*HAL_UART_Transmit(&huart2, speedChangedFin, 13, HAL_MAX_DELAY);*/

	}

}
 8000fba:	e031      	b.n	8001020 <Change_Speed+0x10c>
		int speed_actl = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1);
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <Change_Speed+0x128>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc2:	60fb      	str	r3, [r7, #12]
		if (speed > speed_actl){
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dd25      	ble.n	8001018 <Change_Speed+0x104>
			while (speed_actl < speed){
 8000fcc:	e00f      	b.n	8000fee <Change_Speed+0xda>
				speed_actl++;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed_actl);
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <Change_Speed+0x128>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,MAX_SPEED + 1 - speed_actl);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <Change_Speed+0x128>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(25);
 8000fe8:	2019      	movs	r0, #25
 8000fea:	f000 fe39 	bl	8001c60 <HAL_Delay>
			while (speed_actl < speed){
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dbeb      	blt.n	8000fce <Change_Speed+0xba>
}
 8000ff6:	e013      	b.n	8001020 <Change_Speed+0x10c>
				speed_actl--;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed_actl);
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <Change_Speed+0x128>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,MAX_SPEED + 1 - speed_actl);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <Change_Speed+0x128>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(25);
 8001012:	2019      	movs	r0, #25
 8001014:	f000 fe24 	bl	8001c60 <HAL_Delay>
			while (speed_actl > speed){
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	429a      	cmp	r2, r3
 800101e:	dceb      	bgt.n	8000ff8 <Change_Speed+0xe4>
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200001e0 	.word	0x200001e0
 800102c:	20000000 	.word	0x20000000
 8001030:	08009828 	.word	0x08009828
 8001034:	20000300 	.word	0x20000300
 8001038:	080098ac 	.word	0x080098ac
 800103c:	20000268 	.word	0x20000268

08001040 <Start_Motor>:

void Start_Motor(char cmd[CMD_BUFFER_SIZE]){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,500);
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <Start_Motor+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001050:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,500);
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <Start_Motor+0x64>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800105a:	639a      	str	r2, [r3, #56]	; 0x38
	cmd[6] = '0'; // Pour éviter speed 6 en première instruction
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3306      	adds	r3, #6
 8001060:	2230      	movs	r2, #48	; 0x30
 8001062:	701a      	strb	r2, [r3, #0]
	cmd[7] = '5'; // Qui n'est pas compris comme 'trop rapide'
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3307      	adds	r3, #7
 8001068:	2235      	movs	r2, #53	; 0x35
 800106a:	701a      	strb	r2, [r3, #0]
	cmd[8] = '0';
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3308      	adds	r3, #8
 8001070:	2230      	movs	r2, #48	; 0x30
 8001072:	701a      	strb	r2, [r3, #0]
	cmd[9] = '0';
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3309      	adds	r3, #9
 8001078:	2230      	movs	r2, #48	; 0x30
 800107a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800107c:	2100      	movs	r1, #0
 800107e:	4809      	ldr	r0, [pc, #36]	; (80010a4 <Start_Motor+0x64>)
 8001080:	f004 fa2e 	bl	80054e0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001084:	2100      	movs	r1, #0
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <Start_Motor+0x64>)
 8001088:	f005 fbc0 	bl	800680c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800108c:	2104      	movs	r1, #4
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <Start_Motor+0x64>)
 8001090:	f004 fa26 	bl	80054e0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001094:	2104      	movs	r1, #4
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <Start_Motor+0x64>)
 8001098:	f005 fbb8 	bl	800680c <HAL_TIMEx_PWMN_Start>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000268 	.word	0x20000268

080010a8 <Stop_Motor>:

void Stop_Motor(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80010ac:	2100      	movs	r1, #0
 80010ae:	4808      	ldr	r0, [pc, #32]	; (80010d0 <Stop_Motor+0x28>)
 80010b0:	f004 fb28 	bl	8005704 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80010b4:	2100      	movs	r1, #0
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <Stop_Motor+0x28>)
 80010b8:	f005 fc6a 	bl	8006990 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80010bc:	2104      	movs	r1, #4
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <Stop_Motor+0x28>)
 80010c0:	f004 fb20 	bl	8005704 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80010c4:	2104      	movs	r1, #4
 80010c6:	4802      	ldr	r0, [pc, #8]	; (80010d0 <Stop_Motor+0x28>)
 80010c8:	f005 fc62 	bl	8006990 <HAL_TIMEx_PWMN_Stop>
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000268 	.word	0x20000268

080010d4 <UART_Create_Cmd>:
const uint8_t newLine[] = "\r\n>>>";
int idxCmd = 0;
char cmd[CMD_BUFFER_SIZE];
char buffer_cmd[1];

char* UART_Create_Cmd(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	if (buffer_cmd[0] == '\r'){
 80010d8:	4b65      	ldr	r3, [pc, #404]	; (8001270 <UART_Create_Cmd+0x19c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b0d      	cmp	r3, #13
 80010de:	f040 80b2 	bne.w	8001246 <UART_Create_Cmd+0x172>
		if (!(strncmp(cmd,"help",4))){
 80010e2:	2204      	movs	r2, #4
 80010e4:	4963      	ldr	r1, [pc, #396]	; (8001274 <UART_Create_Cmd+0x1a0>)
 80010e6:	4864      	ldr	r0, [pc, #400]	; (8001278 <UART_Create_Cmd+0x1a4>)
 80010e8:	f007 ff02 	bl	8008ef0 <strncmp>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10f      	bne.n	8001112 <UART_Create_Cmd+0x3e>
			HAL_UART_Transmit(&huart2, help, 264, HAL_MAX_DELAY);
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	f44f 7284 	mov.w	r2, #264	; 0x108
 80010fa:	4960      	ldr	r1, [pc, #384]	; (800127c <UART_Create_Cmd+0x1a8>)
 80010fc:	4860      	ldr	r0, [pc, #384]	; (8001280 <UART_Create_Cmd+0x1ac>)
 80010fe:	f005 fea8 	bl	8006e52 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	2205      	movs	r2, #5
 8001108:	495e      	ldr	r1, [pc, #376]	; (8001284 <UART_Create_Cmd+0x1b0>)
 800110a:	485d      	ldr	r0, [pc, #372]	; (8001280 <UART_Create_Cmd+0x1ac>)
 800110c:	f005 fea1 	bl	8006e52 <HAL_UART_Transmit>
 8001110:	e095      	b.n	800123e <UART_Create_Cmd+0x16a>
		}else if(!(strncmp(cmd,"pinout",6))){
 8001112:	2206      	movs	r2, #6
 8001114:	495c      	ldr	r1, [pc, #368]	; (8001288 <UART_Create_Cmd+0x1b4>)
 8001116:	4858      	ldr	r0, [pc, #352]	; (8001278 <UART_Create_Cmd+0x1a4>)
 8001118:	f007 feea 	bl	8008ef0 <strncmp>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10e      	bne.n	8001140 <UART_Create_Cmd+0x6c>
			HAL_UART_Transmit(&huart2, pinout, 88, HAL_MAX_DELAY);
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	2258      	movs	r2, #88	; 0x58
 8001128:	4958      	ldr	r1, [pc, #352]	; (800128c <UART_Create_Cmd+0x1b8>)
 800112a:	4855      	ldr	r0, [pc, #340]	; (8001280 <UART_Create_Cmd+0x1ac>)
 800112c:	f005 fe91 	bl	8006e52 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2205      	movs	r2, #5
 8001136:	4953      	ldr	r1, [pc, #332]	; (8001284 <UART_Create_Cmd+0x1b0>)
 8001138:	4851      	ldr	r0, [pc, #324]	; (8001280 <UART_Create_Cmd+0x1ac>)
 800113a:	f005 fe8a 	bl	8006e52 <HAL_UART_Transmit>
 800113e:	e07e      	b.n	800123e <UART_Create_Cmd+0x16a>
		}else if(!(strncmp(cmd,"start",5))){
 8001140:	2205      	movs	r2, #5
 8001142:	4953      	ldr	r1, [pc, #332]	; (8001290 <UART_Create_Cmd+0x1bc>)
 8001144:	484c      	ldr	r0, [pc, #304]	; (8001278 <UART_Create_Cmd+0x1a4>)
 8001146:	f007 fed3 	bl	8008ef0 <strncmp>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d111      	bne.n	8001174 <UART_Create_Cmd+0xa0>
			Start_Motor(cmd);
 8001150:	4849      	ldr	r0, [pc, #292]	; (8001278 <UART_Create_Cmd+0x1a4>)
 8001152:	f7ff ff75 	bl	8001040 <Start_Motor>
			HAL_UART_Transmit(&huart2, powerOn, 23, HAL_MAX_DELAY);
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	2217      	movs	r2, #23
 800115c:	494d      	ldr	r1, [pc, #308]	; (8001294 <UART_Create_Cmd+0x1c0>)
 800115e:	4848      	ldr	r0, [pc, #288]	; (8001280 <UART_Create_Cmd+0x1ac>)
 8001160:	f005 fe77 	bl	8006e52 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	2205      	movs	r2, #5
 800116a:	4946      	ldr	r1, [pc, #280]	; (8001284 <UART_Create_Cmd+0x1b0>)
 800116c:	4844      	ldr	r0, [pc, #272]	; (8001280 <UART_Create_Cmd+0x1ac>)
 800116e:	f005 fe70 	bl	8006e52 <HAL_UART_Transmit>
 8001172:	e064      	b.n	800123e <UART_Create_Cmd+0x16a>
		}else if(!(strncmp(cmd,"stop",4))){
 8001174:	2204      	movs	r2, #4
 8001176:	4948      	ldr	r1, [pc, #288]	; (8001298 <UART_Create_Cmd+0x1c4>)
 8001178:	483f      	ldr	r0, [pc, #252]	; (8001278 <UART_Create_Cmd+0x1a4>)
 800117a:	f007 feb9 	bl	8008ef0 <strncmp>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d110      	bne.n	80011a6 <UART_Create_Cmd+0xd2>
			Stop_Motor();
 8001184:	f7ff ff90 	bl	80010a8 <Stop_Motor>
			HAL_UART_Transmit(&huart2, powerOff, 23, HAL_MAX_DELAY);
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	2217      	movs	r2, #23
 800118e:	4943      	ldr	r1, [pc, #268]	; (800129c <UART_Create_Cmd+0x1c8>)
 8001190:	483b      	ldr	r0, [pc, #236]	; (8001280 <UART_Create_Cmd+0x1ac>)
 8001192:	f005 fe5e 	bl	8006e52 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	2205      	movs	r2, #5
 800119c:	4939      	ldr	r1, [pc, #228]	; (8001284 <UART_Create_Cmd+0x1b0>)
 800119e:	4838      	ldr	r0, [pc, #224]	; (8001280 <UART_Create_Cmd+0x1ac>)
 80011a0:	f005 fe57 	bl	8006e52 <HAL_UART_Transmit>
 80011a4:	e04b      	b.n	800123e <UART_Create_Cmd+0x16a>
		}else if(!(strncmp(cmd,"speed",5))){
 80011a6:	2205      	movs	r2, #5
 80011a8:	493d      	ldr	r1, [pc, #244]	; (80012a0 <UART_Create_Cmd+0x1cc>)
 80011aa:	4833      	ldr	r0, [pc, #204]	; (8001278 <UART_Create_Cmd+0x1a4>)
 80011ac:	f007 fea0 	bl	8008ef0 <strncmp>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d111      	bne.n	80011da <UART_Create_Cmd+0x106>
			HAL_UART_Transmit(&huart2, speedChanged, 14, HAL_MAX_DELAY);
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	220e      	movs	r2, #14
 80011bc:	4939      	ldr	r1, [pc, #228]	; (80012a4 <UART_Create_Cmd+0x1d0>)
 80011be:	4830      	ldr	r0, [pc, #192]	; (8001280 <UART_Create_Cmd+0x1ac>)
 80011c0:	f005 fe47 	bl	8006e52 <HAL_UART_Transmit>
			Change_Speed(cmd);
 80011c4:	482c      	ldr	r0, [pc, #176]	; (8001278 <UART_Create_Cmd+0x1a4>)
 80011c6:	f7ff fea5 	bl	8000f14 <Change_Speed>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	2205      	movs	r2, #5
 80011d0:	492c      	ldr	r1, [pc, #176]	; (8001284 <UART_Create_Cmd+0x1b0>)
 80011d2:	482b      	ldr	r0, [pc, #172]	; (8001280 <UART_Create_Cmd+0x1ac>)
 80011d4:	f005 fe3d 	bl	8006e52 <HAL_UART_Transmit>
 80011d8:	e031      	b.n	800123e <UART_Create_Cmd+0x16a>
		}else if(!(strncmp(cmd,"courant",7))){
 80011da:	2207      	movs	r2, #7
 80011dc:	4932      	ldr	r1, [pc, #200]	; (80012a8 <UART_Create_Cmd+0x1d4>)
 80011de:	4826      	ldr	r0, [pc, #152]	; (8001278 <UART_Create_Cmd+0x1a4>)
 80011e0:	f007 fe86 	bl	8008ef0 <strncmp>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <UART_Create_Cmd+0x12a>
			Mes_Courant();
 80011ea:	f7ff fc29 	bl	8000a40 <Mes_Courant>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	2205      	movs	r2, #5
 80011f4:	4923      	ldr	r1, [pc, #140]	; (8001284 <UART_Create_Cmd+0x1b0>)
 80011f6:	4822      	ldr	r0, [pc, #136]	; (8001280 <UART_Create_Cmd+0x1ac>)
 80011f8:	f005 fe2b 	bl	8006e52 <HAL_UART_Transmit>
 80011fc:	e01f      	b.n	800123e <UART_Create_Cmd+0x16a>
		}else if(!(strncmp(cmd,"vitesse",7))){
 80011fe:	2207      	movs	r2, #7
 8001200:	492a      	ldr	r1, [pc, #168]	; (80012ac <UART_Create_Cmd+0x1d8>)
 8001202:	481d      	ldr	r0, [pc, #116]	; (8001278 <UART_Create_Cmd+0x1a4>)
 8001204:	f007 fe74 	bl	8008ef0 <strncmp>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d109      	bne.n	8001222 <UART_Create_Cmd+0x14e>
			Mesure_Vitesse();
 800120e:	f7ff fc5f 	bl	8000ad0 <Mesure_Vitesse>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	2205      	movs	r2, #5
 8001218:	491a      	ldr	r1, [pc, #104]	; (8001284 <UART_Create_Cmd+0x1b0>)
 800121a:	4819      	ldr	r0, [pc, #100]	; (8001280 <UART_Create_Cmd+0x1ac>)
 800121c:	f005 fe19 	bl	8006e52 <HAL_UART_Transmit>
 8001220:	e00d      	b.n	800123e <UART_Create_Cmd+0x16a>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, 17, HAL_MAX_DELAY);
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	2211      	movs	r2, #17
 8001228:	4921      	ldr	r1, [pc, #132]	; (80012b0 <UART_Create_Cmd+0x1dc>)
 800122a:	4815      	ldr	r0, [pc, #84]	; (8001280 <UART_Create_Cmd+0x1ac>)
 800122c:	f005 fe11 	bl	8006e52 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	2205      	movs	r2, #5
 8001236:	4913      	ldr	r1, [pc, #76]	; (8001284 <UART_Create_Cmd+0x1b0>)
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <UART_Create_Cmd+0x1ac>)
 800123a:	f005 fe0a 	bl	8006e52 <HAL_UART_Transmit>
		}
		idxCmd = 0;
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <UART_Create_Cmd+0x1e0>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	e011      	b.n	800126a <UART_Create_Cmd+0x196>
	}else{
		cmd[idxCmd] = buffer_cmd[0];
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <UART_Create_Cmd+0x1e0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <UART_Create_Cmd+0x19c>)
 800124c:	7811      	ldrb	r1, [r2, #0]
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <UART_Create_Cmd+0x1a4>)
 8001250:	54d1      	strb	r1, [r2, r3]
		idxCmd += 1;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <UART_Create_Cmd+0x1e0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <UART_Create_Cmd+0x1e0>)
 800125a:	6013      	str	r3, [r2, #0]
		if (idxCmd > CMD_BUFFER_SIZE){
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <UART_Create_Cmd+0x1e0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b20      	cmp	r3, #32
 8001262:	dd02      	ble.n	800126a <UART_Create_Cmd+0x196>
			idxCmd = 0;
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <UART_Create_Cmd+0x1e0>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
		}
	}
	return cmd;
 800126a:	4b03      	ldr	r3, [pc, #12]	; (8001278 <UART_Create_Cmd+0x1a4>)
}
 800126c:	4618      	mov	r0, r3
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000214 	.word	0x20000214
 8001274:	0800982c 	.word	0x0800982c
 8001278:	200001f4 	.word	0x200001f4
 800127c:	080098cc 	.word	0x080098cc
 8001280:	20000300 	.word	0x20000300
 8001284:	08009aa4 	.word	0x08009aa4
 8001288:	08009834 	.word	0x08009834
 800128c:	080099d4 	.word	0x080099d4
 8001290:	0800983c 	.word	0x0800983c
 8001294:	08009a30 	.word	0x08009a30
 8001298:	08009844 	.word	0x08009844
 800129c:	08009a48 	.word	0x08009a48
 80012a0:	0800984c 	.word	0x0800984c
 80012a4:	08009a60 	.word	0x08009a60
 80012a8:	08009854 	.word	0x08009854
 80012ac:	0800985c 	.word	0x0800985c
 80012b0:	08009a70 	.word	0x08009a70
 80012b4:	200001f0 	.word	0x200001f0

080012b8 <UART_Echo>:

void UART_Echo(void){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	if (buffer_cmd[0] == '\r'){
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <UART_Echo+0x38>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b0d      	cmp	r3, #13
 80012c2:	d107      	bne.n	80012d4 <UART_Echo+0x1c>
	  HAL_UART_Transmit(&huart2, newLine, 2, HAL_MAX_DELAY);
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	2202      	movs	r2, #2
 80012ca:	490a      	ldr	r1, [pc, #40]	; (80012f4 <UART_Echo+0x3c>)
 80012cc:	480a      	ldr	r0, [pc, #40]	; (80012f8 <UART_Echo+0x40>)
 80012ce:	f005 fdc0 	bl	8006e52 <HAL_UART_Transmit>
 80012d2:	e006      	b.n	80012e2 <UART_Echo+0x2a>
	}else{
	  HAL_UART_Transmit(&huart2, buffer_cmd, 1, HAL_MAX_DELAY);
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	2201      	movs	r2, #1
 80012da:	4905      	ldr	r1, [pc, #20]	; (80012f0 <UART_Echo+0x38>)
 80012dc:	4806      	ldr	r0, [pc, #24]	; (80012f8 <UART_Echo+0x40>)
 80012de:	f005 fdb8 	bl	8006e52 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 80012e2:	2201      	movs	r2, #1
 80012e4:	4902      	ldr	r1, [pc, #8]	; (80012f0 <UART_Echo+0x38>)
 80012e6:	4804      	ldr	r0, [pc, #16]	; (80012f8 <UART_Echo+0x40>)
 80012e8:	f005 fe4a 	bl	8006f80 <HAL_UART_Receive_IT>
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000214 	.word	0x20000214
 80012f4:	08009aa4 	.word	0x08009aa4
 80012f8:	20000300 	.word	0x20000300

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_MspInit+0x44>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <HAL_MspInit+0x44>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6613      	str	r3, [r2, #96]	; 0x60
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_MspInit+0x44>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_MspInit+0x44>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_MspInit+0x44>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6593      	str	r3, [r2, #88]	; 0x58
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_MspInit+0x44>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001332:	f002 ff6f 	bl	8004214 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001354:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <HAL_InitTick+0xc4>)
 8001356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001358:	4a2b      	ldr	r2, [pc, #172]	; (8001408 <HAL_InitTick+0xc4>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6593      	str	r3, [r2, #88]	; 0x58
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <HAL_InitTick+0xc4>)
 8001362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001364:	f003 0310 	and.w	r3, r3, #16
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800136c:	f107 020c 	add.w	r2, r7, #12
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fc4a 	bl	8004c10 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800137c:	f003 fc1c 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8001380:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001384:	4a21      	ldr	r2, [pc, #132]	; (800140c <HAL_InitTick+0xc8>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0c9b      	lsrs	r3, r3, #18
 800138c:	3b01      	subs	r3, #1
 800138e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <HAL_InitTick+0xcc>)
 8001392:	4a20      	ldr	r2, [pc, #128]	; (8001414 <HAL_InitTick+0xd0>)
 8001394:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <HAL_InitTick+0xcc>)
 8001398:	f240 32e7 	movw	r2, #999	; 0x3e7
 800139c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800139e:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <HAL_InitTick+0xcc>)
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_InitTick+0xcc>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_InitTick+0xcc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80013b0:	4817      	ldr	r0, [pc, #92]	; (8001410 <HAL_InitTick+0xcc>)
 80013b2:	f003 fef3 	bl	800519c <HAL_TIM_Base_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80013bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d11b      	bne.n	80013fc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013c4:	4812      	ldr	r0, [pc, #72]	; (8001410 <HAL_InitTick+0xcc>)
 80013c6:	f003 ffbb 	bl	8005340 <HAL_TIM_Base_Start_IT>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80013d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d111      	bne.n	80013fc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013d8:	2036      	movs	r0, #54	; 0x36
 80013da:	f002 f979 	bl	80036d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	d808      	bhi.n	80013f6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	2036      	movs	r0, #54	; 0x36
 80013ea:	f002 f957 	bl	800369c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_InitTick+0xd4>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e002      	b.n	80013fc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001400:	4618      	mov	r0, r3
 8001402:	3730      	adds	r7, #48	; 0x30
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000
 800140c:	431bde83 	.word	0x431bde83
 8001410:	20000218 	.word	0x20000218
 8001414:	40001000 	.word	0x40001000
 8001418:	20000008 	.word	0x20000008

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <DMA1_Channel1_IRQHandler+0x10>)
 800147a:	f002 fb1a 	bl	8003ab2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000154 	.word	0x20000154

08001488 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <USART2_IRQHandler+0x10>)
 800148e:	f005 fdcd 	bl	800702c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000300 	.word	0x20000300

0800149c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80014a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014a4:	f002 fdee 	bl	8004084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <TIM6_DAC_IRQHandler+0x10>)
 80014b2:	f004 faf7 	bl	8005aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000218 	.word	0x20000218

080014c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <_sbrk+0x5c>)
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <_sbrk+0x60>)
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <_sbrk+0x64>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <_sbrk+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d207      	bcs.n	8001500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f0:	f007 fd10 	bl	8008f14 <__errno>
 80014f4:	4603      	mov	r3, r0
 80014f6:	220c      	movs	r2, #12
 80014f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	e009      	b.n	8001514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <_sbrk+0x64>)
 8001510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20020000 	.word	0x20020000
 8001520:	00000400 	.word	0x00000400
 8001524:	20000264 	.word	0x20000264
 8001528:	20000570 	.word	0x20000570

0800152c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <SystemInit+0x20>)
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <SystemInit+0x20>)
 8001538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b098      	sub	sp, #96	; 0x60
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001556:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001562:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2234      	movs	r2, #52	; 0x34
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f007 fcaf 	bl	8008ee0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <MX_TIM1_Init+0x158>)
 8001584:	4a49      	ldr	r2, [pc, #292]	; (80016ac <MX_TIM1_Init+0x15c>)
 8001586:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001588:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <MX_TIM1_Init+0x158>)
 800158a:	2207      	movs	r2, #7
 800158c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800158e:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <MX_TIM1_Init+0x158>)
 8001590:	2220      	movs	r2, #32
 8001592:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001594:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <MX_TIM1_Init+0x158>)
 8001596:	f240 32e7 	movw	r2, #999	; 0x3e7
 800159a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <MX_TIM1_Init+0x158>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <MX_TIM1_Init+0x158>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <MX_TIM1_Init+0x158>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015ae:	483e      	ldr	r0, [pc, #248]	; (80016a8 <MX_TIM1_Init+0x158>)
 80015b0:	f003 ff3e 	bl	8005430 <HAL_TIM_PWM_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80015ba:	f7ff fca5 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80015c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015c6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015d0:	4619      	mov	r1, r3
 80015d2:	4835      	ldr	r0, [pc, #212]	; (80016a8 <MX_TIM1_Init+0x158>)
 80015d4:	f005 fa3a 	bl	8006a4c <HAL_TIMEx_MasterConfigSynchronization>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80015de:	f7ff fc93 	bl	8000f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e2:	2360      	movs	r3, #96	; 0x60
 80015e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 400;
 80015e6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80015ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ec:	2300      	movs	r3, #0
 80015ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015f0:	2300      	movs	r3, #0
 80015f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001600:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001604:	2200      	movs	r2, #0
 8001606:	4619      	mov	r1, r3
 8001608:	4827      	ldr	r0, [pc, #156]	; (80016a8 <MX_TIM1_Init+0x158>)
 800160a:	f004 fbcb 	bl	8005da4 <HAL_TIM_PWM_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001614:	f7ff fc78 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001618:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800161c:	2204      	movs	r2, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4821      	ldr	r0, [pc, #132]	; (80016a8 <MX_TIM1_Init+0x158>)
 8001622:	f004 fbbf 	bl	8005da4 <HAL_TIM_PWM_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 800162c:	f7ff fc6c 	bl	8000f08 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001634:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001638:	2208      	movs	r2, #8
 800163a:	4619      	mov	r1, r3
 800163c:	481a      	ldr	r0, [pc, #104]	; (80016a8 <MX_TIM1_Init+0x158>)
 800163e:	f004 fbb1 	bl	8005da4 <HAL_TIM_PWM_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001648:	f7ff fc5e 	bl	8000f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 44;
 8001658:	232c      	movs	r3, #44	; 0x2c
 800165a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001664:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4619      	mov	r1, r3
 8001688:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM1_Init+0x158>)
 800168a:	f005 fa75 	bl	8006b78 <HAL_TIMEx_ConfigBreakDeadTime>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001694:	f7ff fc38 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM1_Init+0x158>)
 800169a:	f000 f8e1 	bl	8001860 <HAL_TIM_MspPostInit>

}
 800169e:	bf00      	nop
 80016a0:	3760      	adds	r7, #96	; 0x60
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000268 	.word	0x20000268
 80016ac:	40012c00 	.word	0x40012c00

080016b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08c      	sub	sp, #48	; 0x30
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	2224      	movs	r2, #36	; 0x24
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f007 fc0e 	bl	8008ee0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <MX_TIM3_Init+0xa4>)
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <MX_TIM3_Init+0xa8>)
 80016d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <MX_TIM3_Init+0xa4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <MX_TIM3_Init+0xa4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <MX_TIM3_Init+0xa4>)
 80016e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <MX_TIM3_Init+0xa4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <MX_TIM3_Init+0xa4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016f4:	2303      	movs	r3, #3
 80016f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016fc:	2301      	movs	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800170c:	2301      	movs	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	4619      	mov	r1, r3
 800171e:	480d      	ldr	r0, [pc, #52]	; (8001754 <MX_TIM3_Init+0xa4>)
 8001720:	f004 f88c 	bl	800583c <HAL_TIM_Encoder_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800172a:	f7ff fbed 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	4619      	mov	r1, r3
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <MX_TIM3_Init+0xa4>)
 800173c:	f005 f986 	bl	8006a4c <HAL_TIMEx_MasterConfigSynchronization>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001746:	f7ff fbdf 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	3730      	adds	r7, #48	; 0x30
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200002b4 	.word	0x200002b4
 8001758:	40000400 	.word	0x40000400

0800175c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_TIM_PWM_MspInit+0x38>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d10b      	bne.n	8001786 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_TIM_PWM_MspInit+0x3c>)
 8001770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001772:	4a09      	ldr	r2, [pc, #36]	; (8001798 <HAL_TIM_PWM_MspInit+0x3c>)
 8001774:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001778:	6613      	str	r3, [r2, #96]	; 0x60
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <HAL_TIM_PWM_MspInit+0x3c>)
 800177c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40012c00 	.word	0x40012c00
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a26      	ldr	r2, [pc, #152]	; (8001854 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d145      	bne.n	800184a <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_TIM_Encoder_MspInit+0xbc>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	4a25      	ldr	r2, [pc, #148]	; (8001858 <HAL_TIM_Encoder_MspInit+0xbc>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_TIM_Encoder_MspInit+0xbc>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_TIM_Encoder_MspInit+0xbc>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <HAL_TIM_Encoder_MspInit+0xbc>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_TIM_Encoder_MspInit+0xbc>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <HAL_TIM_Encoder_MspInit+0xbc>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_TIM_Encoder_MspInit+0xbc>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_TIM_Encoder_MspInit+0xbc>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001806:	2350      	movs	r3, #80	; 0x50
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001816:	2302      	movs	r3, #2
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001824:	f002 fa94 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800183a:	2302      	movs	r3, #2
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <HAL_TIM_Encoder_MspInit+0xc0>)
 8001846:	f002 fa83 	bl	8003d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40000400 	.word	0x40000400
 8001858:	40021000 	.word	0x40021000
 800185c:	48000800 	.word	0x48000800

08001860 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a29      	ldr	r2, [pc, #164]	; (8001924 <HAL_TIM_MspPostInit+0xc4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d14b      	bne.n	800191a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_TIM_MspPostInit+0xc8>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	4a28      	ldr	r2, [pc, #160]	; (8001928 <HAL_TIM_MspPostInit+0xc8>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <HAL_TIM_MspPostInit+0xc8>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b23      	ldr	r3, [pc, #140]	; (8001928 <HAL_TIM_MspPostInit+0xc8>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a22      	ldr	r2, [pc, #136]	; (8001928 <HAL_TIM_MspPostInit+0xc8>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_TIM_MspPostInit+0xc8>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80018b2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80018c4:	2306      	movs	r3, #6
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4817      	ldr	r0, [pc, #92]	; (800192c <HAL_TIM_MspPostInit+0xcc>)
 80018d0:	f002 fa3e 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80018d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80018e6:	2304      	movs	r3, #4
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	480e      	ldr	r0, [pc, #56]	; (800192c <HAL_TIM_MspPostInit+0xcc>)
 80018f2:	f002 fa2d 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80018f6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001908:	2306      	movs	r3, #6
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f002 fa1b 	bl	8003d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	; 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40012c00 	.word	0x40012c00
 8001928:	40021000 	.word	0x40021000
 800192c:	48000400 	.word	0x48000400

08001930 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 8001936:	4a23      	ldr	r2, [pc, #140]	; (80019c4 <MX_USART2_UART_Init+0x94>)
 8001938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 800193c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001942:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001948:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 8001956:	220c      	movs	r2, #12
 8001958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 8001974:	2200      	movs	r2, #0
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001978:	4811      	ldr	r0, [pc, #68]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 800197a:	f005 fa1a 	bl	8006db2 <HAL_UART_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001984:	f7ff fac0 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001988:	2100      	movs	r1, #0
 800198a:	480d      	ldr	r0, [pc, #52]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 800198c:	f007 f9bd 	bl	8008d0a <HAL_UARTEx_SetTxFifoThreshold>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001996:	f7ff fab7 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800199a:	2100      	movs	r1, #0
 800199c:	4808      	ldr	r0, [pc, #32]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 800199e:	f007 f9f2 	bl	8008d86 <HAL_UARTEx_SetRxFifoThreshold>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80019a8:	f7ff faae 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <MX_USART2_UART_Init+0x90>)
 80019ae:	f007 f973 	bl	8008c98 <HAL_UARTEx_DisableFifoMode>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80019b8:	f7ff faa6 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000300 	.word	0x20000300
 80019c4:	40004400 	.word	0x40004400

080019c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 80019ce:	4a23      	ldr	r2, [pc, #140]	; (8001a5c <MX_USART3_UART_Init+0x94>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a10:	4811      	ldr	r0, [pc, #68]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 8001a12:	f005 f9ce 	bl	8006db2 <HAL_UART_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a1c:	f7ff fa74 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a20:	2100      	movs	r1, #0
 8001a22:	480d      	ldr	r0, [pc, #52]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 8001a24:	f007 f971 	bl	8008d0a <HAL_UARTEx_SetTxFifoThreshold>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a2e:	f7ff fa6b 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4808      	ldr	r0, [pc, #32]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 8001a36:	f007 f9a6 	bl	8008d86 <HAL_UARTEx_SetRxFifoThreshold>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a40:	f7ff fa62 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <MX_USART3_UART_Init+0x90>)
 8001a46:	f007 f927 	bl	8008c98 <HAL_UARTEx_DisableFifoMode>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a50:	f7ff fa5a 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000390 	.word	0x20000390
 8001a5c:	40004800 	.word	0x40004800

08001a60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b0a0      	sub	sp, #128	; 0x80
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	2254      	movs	r2, #84	; 0x54
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f007 fa2d 	bl	8008ee0 <memset>
  if(uartHandle->Instance==USART2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a41      	ldr	r2, [pc, #260]	; (8001b90 <HAL_UART_MspInit+0x130>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d13f      	bne.n	8001b10 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a90:	2302      	movs	r3, #2
 8001a92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a98:	f107 0318 	add.w	r3, r7, #24
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 f92f 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001aa8:	f7ff fa2e 	bl	8000f08 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aac:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	4a38      	ldr	r2, [pc, #224]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab8:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b33      	ldr	r3, [pc, #204]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac8:	4a32      	ldr	r2, [pc, #200]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001adc:	230c      	movs	r3, #12
 8001ade:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aec:	2307      	movs	r3, #7
 8001aee:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afa:	f002 f929 	bl	8003d50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	2026      	movs	r0, #38	; 0x26
 8001b04:	f001 fdca 	bl	800369c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b08:	2026      	movs	r0, #38	; 0x26
 8001b0a:	f001 fde1 	bl	80036d0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b0e:	e03b      	b.n	8001b88 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a20      	ldr	r2, [pc, #128]	; (8001b98 <HAL_UART_MspInit+0x138>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d136      	bne.n	8001b88 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 f8ea 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001b32:	f7ff f9e9 	bl	8000f08 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	4a16      	ldr	r2, [pc, #88]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b40:	6593      	str	r3, [r2, #88]	; 0x58
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <HAL_UART_MspInit+0x13c>)
 8001b84:	f002 f8e4 	bl	8003d50 <HAL_GPIO_Init>
}
 8001b88:	bf00      	nop
 8001b8a:	3780      	adds	r7, #128	; 0x80
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40004400 	.word	0x40004400
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40004800 	.word	0x40004800
 8001b9c:	48000800 	.word	0x48000800

08001ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ba2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba4:	480d      	ldr	r0, [pc, #52]	; (8001bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001ba6:	490e      	ldr	r1, [pc, #56]	; (8001be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba8:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <LoopForever+0xe>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bbc:	4c0b      	ldr	r4, [pc, #44]	; (8001bec <LoopForever+0x16>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bca:	f7ff fcaf 	bl	800152c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bce:	f007 f9a7 	bl	8008f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bd2:	f7ff f8d5 	bl	8000d80 <main>

08001bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd6:	e7fe      	b.n	8001bd6 <LoopForever>
  ldr   r0, =_estack
 8001bd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001be4:	08009b30 	.word	0x08009b30
  ldr r2, =_sbss
 8001be8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001bec:	2000056c 	.word	0x2000056c

08001bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_2_IRQHandler>

08001bf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f001 fd42 	bl	8003686 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c02:	200f      	movs	r0, #15
 8001c04:	f7ff fb9e 	bl	8001344 <HAL_InitTick>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	71fb      	strb	r3, [r7, #7]
 8001c12:	e001      	b.n	8001c18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c14:	f7ff fb72 	bl	80012fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c18:	79fb      	ldrb	r3, [r7, #7]

}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_IncTick+0x1c>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_IncTick+0x20>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a03      	ldr	r2, [pc, #12]	; (8001c40 <HAL_IncTick+0x1c>)
 8001c34:	6013      	str	r3, [r2, #0]
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	20000420 	.word	0x20000420
 8001c44:	2000000c 	.word	0x2000000c

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000420 	.word	0x20000420

08001c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff ffee 	bl	8001c48 <HAL_GetTick>
 8001c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d004      	beq.n	8001c84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_Delay+0x40>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4413      	add	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c84:	bf00      	nop
 8001c86:	f7ff ffdf 	bl	8001c48 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d8f7      	bhi.n	8001c86 <HAL_Delay+0x26>
  {
  }
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2000000c 	.word	0x2000000c

08001ca4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3360      	adds	r3, #96	; 0x60
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <LL_ADC_SetOffset+0x44>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d44:	bf00      	nop
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	03fff000 	.word	0x03fff000

08001d54 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3360      	adds	r3, #96	; 0x60
 8001d62:	461a      	mov	r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3360      	adds	r3, #96	; 0x60
 8001d90:	461a      	mov	r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001daa:	bf00      	nop
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b087      	sub	sp, #28
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3360      	adds	r3, #96	; 0x60
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001de0:	bf00      	nop
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3360      	adds	r3, #96	; 0x60
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e16:	bf00      	nop
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	615a      	str	r2, [r3, #20]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b087      	sub	sp, #28
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3330      	adds	r3, #48	; 0x30
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	4413      	add	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	211f      	movs	r1, #31
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	0e9b      	lsrs	r3, r3, #26
 8001ea6:	f003 011f 	and.w	r1, r3, #31
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001eba:	bf00      	nop
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b087      	sub	sp, #28
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3314      	adds	r3, #20
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	0e5b      	lsrs	r3, r3, #25
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	4413      	add	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	0d1b      	lsrs	r3, r3, #20
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	2107      	movs	r1, #7
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	401a      	ands	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	0d1b      	lsrs	r3, r3, #20
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f10:	bf00      	nop
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d10a      	bne.n	8001f46 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001f44:	e00a      	b.n	8001f5c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f52:	43db      	mvns	r3, r3
 8001f54:	401a      	ands	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	407f0000 	.word	0x407f0000

08001f6c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 031f 	and.w	r3, r3, #31
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6093      	str	r3, [r2, #8]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fc0:	d101      	bne.n	8001fc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fe4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fe8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002010:	d101      	bne.n	8002016 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002034:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002038:	f043 0201 	orr.w	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800205c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <LL_ADC_IsEnabled+0x18>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <LL_ADC_IsEnabled+0x1a>
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d101      	bne.n	80020b2 <LL_ADC_IsDisableOngoing+0x18>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <LL_ADC_IsDisableOngoing+0x1a>
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020d4:	f043 0204 	orr.w	r2, r3, #4
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d101      	bne.n	8002100 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b08      	cmp	r3, #8
 8002120:	d101      	bne.n	8002126 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e1af      	b.n	80024ae <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7fe fb15 	bl	800078c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff19 	bl	8001fac <LL_ADC_IsDeepPowerDownEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff feff 	bl	8001f88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff34 	bl	8001ffc <LL_ADC_IsInternalRegulatorEnabled>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d115      	bne.n	80021c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff18 	bl	8001fd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021a4:	4b9f      	ldr	r3, [pc, #636]	; (8002424 <HAL_ADC_Init+0x2f0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	099b      	lsrs	r3, r3, #6
 80021aa:	4a9f      	ldr	r2, [pc, #636]	; (8002428 <HAL_ADC_Init+0x2f4>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021b8:	e002      	b.n	80021c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	3b01      	subs	r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f9      	bne.n	80021ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff16 	bl	8001ffc <LL_ADC_IsInternalRegulatorEnabled>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10d      	bne.n	80021f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	f043 0210 	orr.w	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ff76 	bl	80020e8 <LL_ADC_REG_IsConversionOngoing>
 80021fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 8148 	bne.w	800249c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f040 8144 	bne.w	800249c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800221c:	f043 0202 	orr.w	r2, r3, #2
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff23 	bl	8002074 <LL_ADC_IsEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d141      	bne.n	80022b8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800223c:	d004      	beq.n	8002248 <HAL_ADC_Init+0x114>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7a      	ldr	r2, [pc, #488]	; (800242c <HAL_ADC_Init+0x2f8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d10f      	bne.n	8002268 <HAL_ADC_Init+0x134>
 8002248:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800224c:	f7ff ff12 	bl	8002074 <LL_ADC_IsEnabled>
 8002250:	4604      	mov	r4, r0
 8002252:	4876      	ldr	r0, [pc, #472]	; (800242c <HAL_ADC_Init+0x2f8>)
 8002254:	f7ff ff0e 	bl	8002074 <LL_ADC_IsEnabled>
 8002258:	4603      	mov	r3, r0
 800225a:	4323      	orrs	r3, r4
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	e012      	b.n	800228e <HAL_ADC_Init+0x15a>
 8002268:	4871      	ldr	r0, [pc, #452]	; (8002430 <HAL_ADC_Init+0x2fc>)
 800226a:	f7ff ff03 	bl	8002074 <LL_ADC_IsEnabled>
 800226e:	4604      	mov	r4, r0
 8002270:	4870      	ldr	r0, [pc, #448]	; (8002434 <HAL_ADC_Init+0x300>)
 8002272:	f7ff feff 	bl	8002074 <LL_ADC_IsEnabled>
 8002276:	4603      	mov	r3, r0
 8002278:	431c      	orrs	r4, r3
 800227a:	486f      	ldr	r0, [pc, #444]	; (8002438 <HAL_ADC_Init+0x304>)
 800227c:	f7ff fefa 	bl	8002074 <LL_ADC_IsEnabled>
 8002280:	4603      	mov	r3, r0
 8002282:	4323      	orrs	r3, r4
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d012      	beq.n	80022b8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800229a:	d004      	beq.n	80022a6 <HAL_ADC_Init+0x172>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a62      	ldr	r2, [pc, #392]	; (800242c <HAL_ADC_Init+0x2f8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_Init+0x176>
 80022a6:	4a65      	ldr	r2, [pc, #404]	; (800243c <HAL_ADC_Init+0x308>)
 80022a8:	e000      	b.n	80022ac <HAL_ADC_Init+0x178>
 80022aa:	4a65      	ldr	r2, [pc, #404]	; (8002440 <HAL_ADC_Init+0x30c>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f7ff fcf6 	bl	8001ca4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7f5b      	ldrb	r3, [r3, #29]
 80022bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d106      	bne.n	80022f4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	3b01      	subs	r3, #1
 80022ec:	045b      	lsls	r3, r3, #17
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d009      	beq.n	8002310 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	4b4b      	ldr	r3, [pc, #300]	; (8002444 <HAL_ADC_Init+0x310>)
 8002318:	4013      	ands	r3, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	69b9      	ldr	r1, [r7, #24]
 8002320:	430b      	orrs	r3, r1
 8002322:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fed2 	bl	80020e8 <LL_ADC_REG_IsConversionOngoing>
 8002344:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fedf 	bl	800210e <LL_ADC_INJ_IsConversionOngoing>
 8002350:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d17f      	bne.n	8002458 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d17c      	bne.n	8002458 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002362:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800236a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800237a:	f023 0302 	bic.w	r3, r3, #2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	69b9      	ldr	r1, [r7, #24]
 8002384:	430b      	orrs	r3, r1
 8002386:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d017      	beq.n	80023c0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800239e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6911      	ldr	r1, [r2, #16]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	430b      	orrs	r3, r1
 80023ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80023be:	e013      	b.n	80023e8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d12a      	bne.n	8002448 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800240e:	4311      	orrs	r1, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002414:	430a      	orrs	r2, r1
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0201 	orr.w	r2, r2, #1
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	e019      	b.n	8002458 <HAL_ADC_Init+0x324>
 8002424:	20000004 	.word	0x20000004
 8002428:	053e2d63 	.word	0x053e2d63
 800242c:	50000100 	.word	0x50000100
 8002430:	50000400 	.word	0x50000400
 8002434:	50000500 	.word	0x50000500
 8002438:	50000600 	.word	0x50000600
 800243c:	50000300 	.word	0x50000300
 8002440:	50000700 	.word	0x50000700
 8002444:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10c      	bne.n	800247a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f023 010f 	bic.w	r1, r3, #15
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	1e5a      	subs	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
 8002478:	e007      	b.n	800248a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 020f 	bic.w	r2, r2, #15
 8002488:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	f023 0303 	bic.w	r3, r3, #3
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	65da      	str	r2, [r3, #92]	; 0x5c
 800249a:	e007      	b.n	80024ac <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	f043 0210 	orr.w	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd90      	pop	{r4, r7, pc}
 80024b6:	bf00      	nop

080024b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024cc:	d004      	beq.n	80024d8 <HAL_ADC_Start_DMA+0x20>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a5a      	ldr	r2, [pc, #360]	; (800263c <HAL_ADC_Start_DMA+0x184>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_Start_DMA+0x24>
 80024d8:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_ADC_Start_DMA+0x188>)
 80024da:	e000      	b.n	80024de <HAL_ADC_Start_DMA+0x26>
 80024dc:	4b59      	ldr	r3, [pc, #356]	; (8002644 <HAL_ADC_Start_DMA+0x18c>)
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fd44 	bl	8001f6c <LL_ADC_GetMultimode>
 80024e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fdfc 	bl	80020e8 <LL_ADC_REG_IsConversionOngoing>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 809b 	bne.w	800262e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_ADC_Start_DMA+0x4e>
 8002502:	2302      	movs	r3, #2
 8002504:	e096      	b.n	8002634 <HAL_ADC_Start_DMA+0x17c>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a4d      	ldr	r2, [pc, #308]	; (8002648 <HAL_ADC_Start_DMA+0x190>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d008      	beq.n	800252a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d002      	beq.n	800252a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b09      	cmp	r3, #9
 8002528:	d17a      	bne.n	8002620 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fcec 	bl	8002f08 <ADC_Enable>
 8002530:	4603      	mov	r3, r0
 8002532:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d16d      	bne.n	8002616 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a3a      	ldr	r2, [pc, #232]	; (800263c <HAL_ADC_Start_DMA+0x184>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_ADC_Start_DMA+0xb4>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a3b      	ldr	r2, [pc, #236]	; (800264c <HAL_ADC_Start_DMA+0x194>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d002      	beq.n	8002568 <HAL_ADC_Start_DMA+0xb0>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	e003      	b.n	8002570 <HAL_ADC_Start_DMA+0xb8>
 8002568:	4b39      	ldr	r3, [pc, #228]	; (8002650 <HAL_ADC_Start_DMA+0x198>)
 800256a:	e001      	b.n	8002570 <HAL_ADC_Start_DMA+0xb8>
 800256c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	4293      	cmp	r3, r2
 8002576:	d002      	beq.n	800257e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d006      	beq.n	80025a4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259a:	f023 0206 	bic.w	r2, r3, #6
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	661a      	str	r2, [r3, #96]	; 0x60
 80025a2:	e002      	b.n	80025aa <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	4a29      	ldr	r2, [pc, #164]	; (8002654 <HAL_ADC_Start_DMA+0x19c>)
 80025b0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	4a28      	ldr	r2, [pc, #160]	; (8002658 <HAL_ADC_Start_DMA+0x1a0>)
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	4a27      	ldr	r2, [pc, #156]	; (800265c <HAL_ADC_Start_DMA+0x1a4>)
 80025c0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	221c      	movs	r2, #28
 80025c8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0210 	orr.w	r2, r2, #16
 80025e0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3340      	adds	r3, #64	; 0x40
 80025fc:	4619      	mov	r1, r3
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f001 f91b 	bl	800383c <HAL_DMA_Start_IT>
 8002606:	4603      	mov	r3, r0
 8002608:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fd56 	bl	80020c0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002614:	e00d      	b.n	8002632 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800261e:	e008      	b.n	8002632 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800262c:	e001      	b.n	8002632 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800262e:	2302      	movs	r3, #2
 8002630:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002632:	7dfb      	ldrb	r3, [r7, #23]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	50000100 	.word	0x50000100
 8002640:	50000300 	.word	0x50000300
 8002644:	50000700 	.word	0x50000700
 8002648:	50000600 	.word	0x50000600
 800264c:	50000500 	.word	0x50000500
 8002650:	50000400 	.word	0x50000400
 8002654:	0800308b 	.word	0x0800308b
 8002658:	08003163 	.word	0x08003163
 800265c:	0800317f 	.word	0x0800317f

08002660 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b0b6      	sub	sp, #216	; 0xd8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d102      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x24>
 80026a6:	2302      	movs	r3, #2
 80026a8:	f000 bc13 	b.w	8002ed2 <HAL_ADC_ConfigChannel+0x84a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fd15 	bl	80020e8 <LL_ADC_REG_IsConversionOngoing>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f040 83f3 	bne.w	8002eac <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6859      	ldr	r1, [r3, #4]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f7ff fbcb 	bl	8001e6e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fd03 	bl	80020e8 <LL_ADC_REG_IsConversionOngoing>
 80026e2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fd0f 	bl	800210e <LL_ADC_INJ_IsConversionOngoing>
 80026f0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f040 81d9 	bne.w	8002ab0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 81d4 	bne.w	8002ab0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002710:	d10f      	bne.n	8002732 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2200      	movs	r2, #0
 800271c:	4619      	mov	r1, r3
 800271e:	f7ff fbd2 	bl	8001ec6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fb79 	bl	8001e22 <LL_ADC_SetSamplingTimeCommonConfig>
 8002730:	e00e      	b.n	8002750 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	461a      	mov	r2, r3
 8002740:	f7ff fbc1 	bl	8001ec6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fb69 	bl	8001e22 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	08db      	lsrs	r3, r3, #3
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b04      	cmp	r3, #4
 8002770:	d022      	beq.n	80027b8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6919      	ldr	r1, [r3, #16]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002782:	f7ff fac3 	bl	8001d0c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6919      	ldr	r1, [r3, #16]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	461a      	mov	r2, r3
 8002794:	f7ff fb0f 	bl	8001db6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6919      	ldr	r1, [r3, #16]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	7f1b      	ldrb	r3, [r3, #28]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d102      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x126>
 80027a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ac:	e000      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x128>
 80027ae:	2300      	movs	r3, #0
 80027b0:	461a      	mov	r2, r3
 80027b2:	f7ff fb1b 	bl	8001dec <LL_ADC_SetOffsetSaturation>
 80027b6:	e17b      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fac8 	bl	8001d54 <LL_ADC_GetOffsetChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x15c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fabd 	bl	8001d54 <LL_ADC_GetOffsetChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	f003 021f 	and.w	r2, r3, #31
 80027e2:	e01e      	b.n	8002822 <HAL_ADC_ConfigChannel+0x19a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fab2 	bl	8001d54 <LL_ADC_GetOffsetChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002802:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002806:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800280a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e004      	b.n	8002820 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <HAL_ADC_ConfigChannel+0x1b2>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	0e9b      	lsrs	r3, r3, #26
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	e018      	b.n	800286c <HAL_ADC_ConfigChannel+0x1e4>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800284e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002852:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002856:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e004      	b.n	800286c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800286c:	429a      	cmp	r2, r3
 800286e:	d106      	bne.n	800287e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2200      	movs	r2, #0
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fa81 	bl	8001d80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2101      	movs	r1, #1
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fa65 	bl	8001d54 <LL_ADC_GetOffsetChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x222>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fa5a 	bl	8001d54 <LL_ADC_GetOffsetChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	0e9b      	lsrs	r3, r3, #26
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	e01e      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x260>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2101      	movs	r1, #1
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fa4f 	bl	8001d54 <LL_ADC_GetOffsetChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80028c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80028d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e004      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80028dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x278>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	e018      	b.n	8002932 <HAL_ADC_ConfigChannel+0x2aa>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002914:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002918:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800291c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002924:	2320      	movs	r3, #32
 8002926:	e004      	b.n	8002932 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002928:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002932:	429a      	cmp	r2, r3
 8002934:	d106      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2200      	movs	r2, #0
 800293c:	2101      	movs	r1, #1
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fa1e 	bl	8001d80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2102      	movs	r1, #2
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fa02 	bl	8001d54 <LL_ADC_GetOffsetChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x2e8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2102      	movs	r1, #2
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff f9f7 	bl	8001d54 <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	f003 021f 	and.w	r2, r3, #31
 800296e:	e01e      	b.n	80029ae <HAL_ADC_ConfigChannel+0x326>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2102      	movs	r1, #2
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff f9ec 	bl	8001d54 <LL_ADC_GetOffsetChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800298e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002992:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002996:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e004      	b.n	80029ac <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80029a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x33e>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	0e9b      	lsrs	r3, r3, #26
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	e016      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x36c>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80029d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80029de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80029e6:	2320      	movs	r3, #32
 80029e8:	e004      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80029ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d106      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2200      	movs	r2, #0
 80029fe:	2102      	movs	r1, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff f9bd 	bl	8001d80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2103      	movs	r1, #3
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f9a1 	bl	8001d54 <LL_ADC_GetOffsetChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x3aa>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2103      	movs	r1, #3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff f996 	bl	8001d54 <LL_ADC_GetOffsetChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	0e9b      	lsrs	r3, r3, #26
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	e017      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x3da>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2103      	movs	r1, #3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f98b 	bl	8001d54 <LL_ADC_GetOffsetChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a4c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002a54:	2320      	movs	r3, #32
 8002a56:	e003      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d105      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x3f2>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	e011      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x416>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002a92:	2320      	movs	r3, #32
 8002a94:	e003      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d106      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2103      	movs	r1, #3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff f968 	bl	8001d80 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fadd 	bl	8002074 <LL_ADC_IsEnabled>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 813d 	bne.w	8002d3c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f7ff fa24 	bl	8001f1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4aa2      	ldr	r2, [pc, #648]	; (8002d64 <HAL_ADC_ConfigChannel+0x6dc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	f040 812e 	bne.w	8002d3c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10b      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x480>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0e9b      	lsrs	r3, r3, #26
 8002af6:	3301      	adds	r3, #1
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	2b09      	cmp	r3, #9
 8002afe:	bf94      	ite	ls
 8002b00:	2301      	movls	r3, #1
 8002b02:	2300      	movhi	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e019      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x4b4>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b18:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002b20:	2320      	movs	r3, #32
 8002b22:	e003      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	2b09      	cmp	r3, #9
 8002b34:	bf94      	ite	ls
 8002b36:	2301      	movls	r3, #1
 8002b38:	2300      	movhi	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d079      	beq.n	8002c34 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d107      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x4d4>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0e9b      	lsrs	r3, r3, #26
 8002b52:	3301      	adds	r3, #1
 8002b54:	069b      	lsls	r3, r3, #26
 8002b56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b5a:	e015      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x500>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002b74:	2320      	movs	r3, #32
 8002b76:	e003      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	069b      	lsls	r3, r3, #26
 8002b84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x520>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0e9b      	lsrs	r3, r3, #26
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba6:	e017      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x550>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	e003      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	ea42 0103 	orr.w	r1, r2, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x576>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	0e9b      	lsrs	r3, r3, #26
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	051b      	lsls	r3, r3, #20
 8002bfc:	e018      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x5a8>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002c16:	2320      	movs	r3, #32
 8002c18:	e003      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1c:	fab3 f383 	clz	r3, r3
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	f003 021f 	and.w	r2, r3, #31
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c30:	430b      	orrs	r3, r1
 8002c32:	e07e      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x5c8>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	3301      	adds	r3, #1
 8002c48:	069b      	lsls	r3, r3, #26
 8002c4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c4e:	e015      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x5f4>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002c68:	2320      	movs	r3, #32
 8002c6a:	e003      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	3301      	adds	r3, #1
 8002c76:	069b      	lsls	r3, r3, #26
 8002c78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x614>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2101      	movs	r1, #1
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	e017      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x644>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	61fb      	str	r3, [r7, #28]
  return result;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	e003      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	ea42 0103 	orr.w	r1, r2, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10d      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x670>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	0e9b      	lsrs	r3, r3, #26
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	3b1e      	subs	r3, #30
 8002cf0:	051b      	lsls	r3, r3, #20
 8002cf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	e01b      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x6a8>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	613b      	str	r3, [r7, #16]
  return result;
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002d10:	2320      	movs	r3, #32
 8002d12:	e003      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f003 021f 	and.w	r2, r3, #31
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	3b1e      	subs	r3, #30
 8002d2a:	051b      	lsls	r3, r3, #20
 8002d2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d30:	430b      	orrs	r3, r1
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	6892      	ldr	r2, [r2, #8]
 8002d36:	4619      	mov	r1, r3
 8002d38:	f7ff f8c5 	bl	8001ec6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_ADC_ConfigChannel+0x6e0>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80be 	beq.w	8002ec6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d52:	d004      	beq.n	8002d5e <HAL_ADC_ConfigChannel+0x6d6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <HAL_ADC_ConfigChannel+0x6e4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10a      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x6ec>
 8002d5e:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <HAL_ADC_ConfigChannel+0x6e8>)
 8002d60:	e009      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x6ee>
 8002d62:	bf00      	nop
 8002d64:	407f0000 	.word	0x407f0000
 8002d68:	80080000 	.word	0x80080000
 8002d6c:	50000100 	.word	0x50000100
 8002d70:	50000300 	.word	0x50000300
 8002d74:	4b59      	ldr	r3, [pc, #356]	; (8002edc <HAL_ADC_ConfigChannel+0x854>)
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe ffba 	bl	8001cf0 <LL_ADC_GetCommonPathInternalCh>
 8002d7c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a56      	ldr	r2, [pc, #344]	; (8002ee0 <HAL_ADC_ConfigChannel+0x858>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_ADC_ConfigChannel+0x70c>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a55      	ldr	r2, [pc, #340]	; (8002ee4 <HAL_ADC_ConfigChannel+0x85c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d13a      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d134      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da8:	d005      	beq.n	8002db6 <HAL_ADC_ConfigChannel+0x72e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a4e      	ldr	r2, [pc, #312]	; (8002ee8 <HAL_ADC_ConfigChannel+0x860>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	f040 8085 	bne.w	8002ec0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dbe:	d004      	beq.n	8002dca <HAL_ADC_ConfigChannel+0x742>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a49      	ldr	r2, [pc, #292]	; (8002eec <HAL_ADC_ConfigChannel+0x864>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x746>
 8002dca:	4a49      	ldr	r2, [pc, #292]	; (8002ef0 <HAL_ADC_ConfigChannel+0x868>)
 8002dcc:	e000      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x748>
 8002dce:	4a43      	ldr	r2, [pc, #268]	; (8002edc <HAL_ADC_ConfigChannel+0x854>)
 8002dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	f7fe ff75 	bl	8001cca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de0:	4b44      	ldr	r3, [pc, #272]	; (8002ef4 <HAL_ADC_ConfigChannel+0x86c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	4a44      	ldr	r2, [pc, #272]	; (8002ef8 <HAL_ADC_ConfigChannel+0x870>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dfa:	e002      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f9      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e08:	e05a      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a3b      	ldr	r2, [pc, #236]	; (8002efc <HAL_ADC_ConfigChannel+0x874>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d125      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x7d8>
 8002e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d11f      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a31      	ldr	r2, [pc, #196]	; (8002eec <HAL_ADC_ConfigChannel+0x864>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d104      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x7ac>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a34      	ldr	r2, [pc, #208]	; (8002f00 <HAL_ADC_ConfigChannel+0x878>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d047      	beq.n	8002ec4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e3c:	d004      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0x7c0>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a2a      	ldr	r2, [pc, #168]	; (8002eec <HAL_ADC_ConfigChannel+0x864>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x7c4>
 8002e48:	4a29      	ldr	r2, [pc, #164]	; (8002ef0 <HAL_ADC_ConfigChannel+0x868>)
 8002e4a:	e000      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x7c6>
 8002e4c:	4a23      	ldr	r2, [pc, #140]	; (8002edc <HAL_ADC_ConfigChannel+0x854>)
 8002e4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f7fe ff36 	bl	8001cca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e5e:	e031      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a27      	ldr	r2, [pc, #156]	; (8002f04 <HAL_ADC_ConfigChannel+0x87c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d12d      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d127      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <HAL_ADC_ConfigChannel+0x864>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d022      	beq.n	8002ec6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e88:	d004      	beq.n	8002e94 <HAL_ADC_ConfigChannel+0x80c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a17      	ldr	r2, [pc, #92]	; (8002eec <HAL_ADC_ConfigChannel+0x864>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d101      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x810>
 8002e94:	4a16      	ldr	r2, [pc, #88]	; (8002ef0 <HAL_ADC_ConfigChannel+0x868>)
 8002e96:	e000      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x812>
 8002e98:	4a10      	ldr	r2, [pc, #64]	; (8002edc <HAL_ADC_ConfigChannel+0x854>)
 8002e9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f7fe ff10 	bl	8001cca <LL_ADC_SetCommonPathInternalCh>
 8002eaa:	e00c      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	f043 0220 	orr.w	r2, r3, #32
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ebe:	e002      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec0:	bf00      	nop
 8002ec2:	e000      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ec4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ece:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	37d8      	adds	r7, #216	; 0xd8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	50000700 	.word	0x50000700
 8002ee0:	c3210000 	.word	0xc3210000
 8002ee4:	90c00010 	.word	0x90c00010
 8002ee8:	50000600 	.word	0x50000600
 8002eec:	50000100 	.word	0x50000100
 8002ef0:	50000300 	.word	0x50000300
 8002ef4:	20000004 	.word	0x20000004
 8002ef8:	053e2d63 	.word	0x053e2d63
 8002efc:	c7520000 	.word	0xc7520000
 8002f00:	50000500 	.word	0x50000500
 8002f04:	cb840000 	.word	0xcb840000

08002f08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff f8ad 	bl	8002074 <LL_ADC_IsEnabled>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d14d      	bne.n	8002fbc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <ADC_Enable+0xc0>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e039      	b.n	8002fbe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f868 	bl	8002024 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f54:	f7fe fe78 	bl	8001c48 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f5a:	e028      	b.n	8002fae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff f887 	bl	8002074 <LL_ADC_IsEnabled>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d104      	bne.n	8002f76 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff f857 	bl	8002024 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f76:	f7fe fe67 	bl	8001c48 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d914      	bls.n	8002fae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d00d      	beq.n	8002fae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	f043 0210 	orr.w	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e007      	b.n	8002fbe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d1cf      	bne.n	8002f5c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	8000003f 	.word	0x8000003f

08002fcc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff f85e 	bl	800209a <LL_ADC_IsDisableOngoing>
 8002fde:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff f845 	bl	8002074 <LL_ADC_IsEnabled>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d047      	beq.n	8003080 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d144      	bne.n	8003080 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 030d 	and.w	r3, r3, #13
 8003000:	2b01      	cmp	r3, #1
 8003002:	d10c      	bne.n	800301e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff f81f 	bl	800204c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2203      	movs	r2, #3
 8003014:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003016:	f7fe fe17 	bl	8001c48 <HAL_GetTick>
 800301a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800301c:	e029      	b.n	8003072 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003022:	f043 0210 	orr.w	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e023      	b.n	8003082 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800303a:	f7fe fe05 	bl	8001c48 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d914      	bls.n	8003072 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00d      	beq.n	8003072 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	f043 0210 	orr.w	r2, r3, #16
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	f043 0201 	orr.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e007      	b.n	8003082 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1dc      	bne.n	800303a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d14b      	bne.n	800313c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d021      	beq.n	8003102 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fec0 	bl	8001e48 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d032      	beq.n	8003134 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d12b      	bne.n	8003134 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11f      	bne.n	8003134 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f8:	f043 0201 	orr.w	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003100:	e018      	b.n	8003134 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d111      	bne.n	8003134 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7fd fecb 	bl	8000ed0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800313a:	e00e      	b.n	800315a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7ff fa93 	bl	8002674 <HAL_ADC_ErrorCallback>
}
 800314e:	e004      	b.n	800315a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
}
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff fa75 	bl	8002660 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319c:	f043 0204 	orr.w	r2, r3, #4
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7ff fa65 	bl	8002674 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <LL_ADC_IsEnabled>:
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <LL_ADC_IsEnabled+0x18>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <LL_ADC_IsEnabled+0x1a>
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_ADC_StartCalibration>:
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80031ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	609a      	str	r2, [r3, #8]
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_ADC_IsCalibrationOnGoing>:
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800321a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800321e:	d101      	bne.n	8003224 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <LL_ADC_REG_IsConversionOngoing>:
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b04      	cmp	r3, #4
 8003244:	d101      	bne.n	800324a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_ADCEx_Calibration_Start+0x1c>
 8003270:	2302      	movs	r3, #2
 8003272:	e04d      	b.n	8003310 <HAL_ADCEx_Calibration_Start+0xb8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff fea5 	bl	8002fcc <ADC_Disable>
 8003282:	4603      	mov	r3, r0
 8003284:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d136      	bne.n	80032fa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003290:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003294:	f023 0302 	bic.w	r3, r3, #2
 8003298:	f043 0202 	orr.w	r2, r3, #2
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6839      	ldr	r1, [r7, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff96 	bl	80031d8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032ac:	e014      	b.n	80032d8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	3301      	adds	r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4a18      	ldr	r2, [pc, #96]	; (8003318 <HAL_ADCEx_Calibration_Start+0xc0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d90d      	bls.n	80032d8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	f023 0312 	bic.w	r3, r3, #18
 80032c4:	f043 0210 	orr.w	r2, r3, #16
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e01b      	b.n	8003310 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff94 	bl	800320a <LL_ADC_IsCalibrationOnGoing>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e2      	bne.n	80032ae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ec:	f023 0303 	bic.w	r3, r3, #3
 80032f0:	f043 0201 	orr.w	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80032f8:	e005      	b.n	8003306 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	f043 0210 	orr.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	0004de01 	.word	0x0004de01

0800331c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b0a1      	sub	sp, #132	; 0x84
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003336:	2302      	movs	r3, #2
 8003338:	e0e7      	b.n	800350a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003342:	2300      	movs	r3, #0
 8003344:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003346:	2300      	movs	r3, #0
 8003348:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003352:	d102      	bne.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003354:	4b6f      	ldr	r3, [pc, #444]	; (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	e009      	b.n	800336e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6e      	ldr	r2, [pc, #440]	; (8003518 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d102      	bne.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003364:	4b6d      	ldr	r3, [pc, #436]	; (800351c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	e001      	b.n	800336e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10b      	bne.n	800338c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	f043 0220 	orr.w	r2, r3, #32
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0be      	b.n	800350a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ff4f 	bl	8003232 <LL_ADC_REG_IsConversionOngoing>
 8003394:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ff49 	bl	8003232 <LL_ADC_REG_IsConversionOngoing>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f040 80a0 	bne.w	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 809c 	bne.w	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033b8:	d004      	beq.n	80033c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a55      	ldr	r2, [pc, #340]	; (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d101      	bne.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80033c4:	4b56      	ldr	r3, [pc, #344]	; (8003520 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80033c6:	e000      	b.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80033c8:	4b56      	ldr	r3, [pc, #344]	; (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80033ca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d04b      	beq.n	800346c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033e6:	035b      	lsls	r3, r3, #13
 80033e8:	430b      	orrs	r3, r1
 80033ea:	431a      	orrs	r2, r3
 80033ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f8:	d004      	beq.n	8003404 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a45      	ldr	r2, [pc, #276]	; (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10f      	bne.n	8003424 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003404:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003408:	f7ff fed3 	bl	80031b2 <LL_ADC_IsEnabled>
 800340c:	4604      	mov	r4, r0
 800340e:	4841      	ldr	r0, [pc, #260]	; (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003410:	f7ff fecf 	bl	80031b2 <LL_ADC_IsEnabled>
 8003414:	4603      	mov	r3, r0
 8003416:	4323      	orrs	r3, r4
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e012      	b.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003424:	483c      	ldr	r0, [pc, #240]	; (8003518 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003426:	f7ff fec4 	bl	80031b2 <LL_ADC_IsEnabled>
 800342a:	4604      	mov	r4, r0
 800342c:	483b      	ldr	r0, [pc, #236]	; (800351c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800342e:	f7ff fec0 	bl	80031b2 <LL_ADC_IsEnabled>
 8003432:	4603      	mov	r3, r0
 8003434:	431c      	orrs	r4, r3
 8003436:	483c      	ldr	r0, [pc, #240]	; (8003528 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003438:	f7ff febb 	bl	80031b2 <LL_ADC_IsEnabled>
 800343c:	4603      	mov	r3, r0
 800343e:	4323      	orrs	r3, r4
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d056      	beq.n	80034fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800344e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003456:	f023 030f 	bic.w	r3, r3, #15
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	6811      	ldr	r1, [r2, #0]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	6892      	ldr	r2, [r2, #8]
 8003462:	430a      	orrs	r2, r1
 8003464:	431a      	orrs	r2, r3
 8003466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003468:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800346a:	e047      	b.n	80034fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800346c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003476:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003480:	d004      	beq.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a23      	ldr	r2, [pc, #140]	; (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d10f      	bne.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800348c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003490:	f7ff fe8f 	bl	80031b2 <LL_ADC_IsEnabled>
 8003494:	4604      	mov	r4, r0
 8003496:	481f      	ldr	r0, [pc, #124]	; (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003498:	f7ff fe8b 	bl	80031b2 <LL_ADC_IsEnabled>
 800349c:	4603      	mov	r3, r0
 800349e:	4323      	orrs	r3, r4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e012      	b.n	80034d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80034ac:	481a      	ldr	r0, [pc, #104]	; (8003518 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034ae:	f7ff fe80 	bl	80031b2 <LL_ADC_IsEnabled>
 80034b2:	4604      	mov	r4, r0
 80034b4:	4819      	ldr	r0, [pc, #100]	; (800351c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034b6:	f7ff fe7c 	bl	80031b2 <LL_ADC_IsEnabled>
 80034ba:	4603      	mov	r3, r0
 80034bc:	431c      	orrs	r4, r3
 80034be:	481a      	ldr	r0, [pc, #104]	; (8003528 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80034c0:	f7ff fe77 	bl	80031b2 <LL_ADC_IsEnabled>
 80034c4:	4603      	mov	r3, r0
 80034c6:	4323      	orrs	r3, r4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d012      	beq.n	80034fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034de:	f023 030f 	bic.w	r3, r3, #15
 80034e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80034e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034e6:	e009      	b.n	80034fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	f043 0220 	orr.w	r2, r3, #32
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80034fa:	e000      	b.n	80034fe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003506:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800350a:	4618      	mov	r0, r3
 800350c:	3784      	adds	r7, #132	; 0x84
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}
 8003512:	bf00      	nop
 8003514:	50000100 	.word	0x50000100
 8003518:	50000400 	.word	0x50000400
 800351c:	50000500 	.word	0x50000500
 8003520:	50000300 	.word	0x50000300
 8003524:	50000700 	.word	0x50000700
 8003528:	50000600 	.word	0x50000600

0800352c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <__NVIC_SetPriorityGrouping+0x44>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003548:	4013      	ands	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355e:	4a04      	ldr	r2, [pc, #16]	; (8003570 <__NVIC_SetPriorityGrouping+0x44>)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	60d3      	str	r3, [r2, #12]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003578:	4b04      	ldr	r3, [pc, #16]	; (800358c <__NVIC_GetPriorityGrouping+0x18>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	0a1b      	lsrs	r3, r3, #8
 800357e:	f003 0307 	and.w	r3, r3, #7
}
 8003582:	4618      	mov	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	db0b      	blt.n	80035ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	f003 021f 	and.w	r2, r3, #31
 80035a8:	4907      	ldr	r1, [pc, #28]	; (80035c8 <__NVIC_EnableIRQ+0x38>)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	2001      	movs	r0, #1
 80035b2:	fa00 f202 	lsl.w	r2, r0, r2
 80035b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	e000e100 	.word	0xe000e100

080035cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	6039      	str	r1, [r7, #0]
 80035d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	db0a      	blt.n	80035f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	490c      	ldr	r1, [pc, #48]	; (8003618 <__NVIC_SetPriority+0x4c>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	0112      	lsls	r2, r2, #4
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	440b      	add	r3, r1
 80035f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f4:	e00a      	b.n	800360c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	4908      	ldr	r1, [pc, #32]	; (800361c <__NVIC_SetPriority+0x50>)
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	3b04      	subs	r3, #4
 8003604:	0112      	lsls	r2, r2, #4
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	440b      	add	r3, r1
 800360a:	761a      	strb	r2, [r3, #24]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	e000e100 	.word	0xe000e100
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f1c3 0307 	rsb	r3, r3, #7
 800363a:	2b04      	cmp	r3, #4
 800363c:	bf28      	it	cs
 800363e:	2304      	movcs	r3, #4
 8003640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3304      	adds	r3, #4
 8003646:	2b06      	cmp	r3, #6
 8003648:	d902      	bls.n	8003650 <NVIC_EncodePriority+0x30>
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3b03      	subs	r3, #3
 800364e:	e000      	b.n	8003652 <NVIC_EncodePriority+0x32>
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003654:	f04f 32ff 	mov.w	r2, #4294967295
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43da      	mvns	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	401a      	ands	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003668:	f04f 31ff 	mov.w	r1, #4294967295
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	43d9      	mvns	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	4313      	orrs	r3, r2
         );
}
 800367a:	4618      	mov	r0, r3
 800367c:	3724      	adds	r7, #36	; 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff ff4c 	bl	800352c <__NVIC_SetPriorityGrouping>
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036aa:	f7ff ff63 	bl	8003574 <__NVIC_GetPriorityGrouping>
 80036ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	6978      	ldr	r0, [r7, #20]
 80036b6:	f7ff ffb3 	bl	8003620 <NVIC_EncodePriority>
 80036ba:	4602      	mov	r2, r0
 80036bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ff82 	bl	80035cc <__NVIC_SetPriority>
}
 80036c8:	bf00      	nop
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff ff56 	bl	8003590 <__NVIC_EnableIRQ>
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e08d      	b.n	800381a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	4b47      	ldr	r3, [pc, #284]	; (8003824 <HAL_DMA_Init+0x138>)
 8003706:	429a      	cmp	r2, r3
 8003708:	d80f      	bhi.n	800372a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	4b45      	ldr	r3, [pc, #276]	; (8003828 <HAL_DMA_Init+0x13c>)
 8003712:	4413      	add	r3, r2
 8003714:	4a45      	ldr	r2, [pc, #276]	; (800382c <HAL_DMA_Init+0x140>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	009a      	lsls	r2, r3, #2
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a42      	ldr	r2, [pc, #264]	; (8003830 <HAL_DMA_Init+0x144>)
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
 8003728:	e00e      	b.n	8003748 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	4b40      	ldr	r3, [pc, #256]	; (8003834 <HAL_DMA_Init+0x148>)
 8003732:	4413      	add	r3, r2
 8003734:	4a3d      	ldr	r2, [pc, #244]	; (800382c <HAL_DMA_Init+0x140>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	009a      	lsls	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a3c      	ldr	r2, [pc, #240]	; (8003838 <HAL_DMA_Init+0x14c>)
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800375e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003762:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800376c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003778:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003784:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa76 	bl	8003c8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037a8:	d102      	bne.n	80037b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d010      	beq.n	80037f0 <HAL_DMA_Init+0x104>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d80c      	bhi.n	80037f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fa96 	bl	8003d08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	e008      	b.n	8003802 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40020407 	.word	0x40020407
 8003828:	bffdfff8 	.word	0xbffdfff8
 800382c:	cccccccd 	.word	0xcccccccd
 8003830:	40020000 	.word	0x40020000
 8003834:	bffdfbf8 	.word	0xbffdfbf8
 8003838:	40020400 	.word	0x40020400

0800383c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_DMA_Start_IT+0x20>
 8003858:	2302      	movs	r3, #2
 800385a:	e066      	b.n	800392a <HAL_DMA_Start_IT+0xee>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d155      	bne.n	800391c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f9bb 	bl	8003c10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 020e 	orr.w	r2, r2, #14
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	e00f      	b.n	80038d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0204 	bic.w	r2, r2, #4
 80038c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 020a 	orr.w	r2, r2, #10
 80038d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003908:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0201 	orr.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e005      	b.n	8003928 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003924:	2302      	movs	r3, #2
 8003926:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003928:	7dfb      	ldrb	r3, [r7, #23]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d005      	beq.n	8003956 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2204      	movs	r2, #4
 800394e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
 8003954:	e037      	b.n	80039c6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 020e 	bic.w	r2, r2, #14
 8003964:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003974:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f003 021f 	and.w	r2, r3, #31
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	2101      	movs	r1, #1
 8003994:	fa01 f202 	lsl.w	r2, r1, r2
 8003998:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039a2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00c      	beq.n	80039c6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ba:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039c4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d00d      	beq.n	8003a18 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2204      	movs	r2, #4
 8003a00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e047      	b.n	8003aa8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 020e 	bic.w	r2, r2, #14
 8003a26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4c:	f003 021f 	and.w	r2, r3, #31
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	2101      	movs	r1, #1
 8003a56:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a64:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00c      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a86:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
    }
  }
  return status;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d026      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x7a>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d021      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d107      	bne.n	8003b06 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0204 	bic.w	r2, r2, #4
 8003b04:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	f003 021f 	and.w	r2, r3, #31
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2104      	movs	r1, #4
 8003b14:	fa01 f202 	lsl.w	r2, r1, r2
 8003b18:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d071      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b2a:	e06c      	b.n	8003c06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2202      	movs	r2, #2
 8003b36:	409a      	lsls	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d02e      	beq.n	8003b9e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d029      	beq.n	8003b9e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10b      	bne.n	8003b70 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 020a 	bic.w	r2, r2, #10
 8003b66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	f003 021f 	and.w	r2, r3, #31
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d038      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b9c:	e033      	b.n	8003c06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d02a      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d025      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 020e 	bic.w	r2, r2, #14
 8003bca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	f003 021f 	and.w	r2, r3, #31
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	2101      	movs	r1, #1
 8003bda:	fa01 f202 	lsl.w	r2, r1, r2
 8003bde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c06:	bf00      	nop
 8003c08:	bf00      	nop
}
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c38:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f003 021f 	and.w	r2, r3, #31
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d108      	bne.n	8003c70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c6e:	e007      	b.n	8003c80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	60da      	str	r2, [r3, #12]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d802      	bhi.n	8003ca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ca0:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e001      	b.n	8003caa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ca8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	3b08      	subs	r3, #8
 8003cb6:	4a12      	ldr	r2, [pc, #72]	; (8003d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	089b      	lsrs	r3, r3, #2
 8003cc6:	009a      	lsls	r2, r3, #2
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4413      	add	r3, r2
 8003ccc:	461a      	mov	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a0b      	ldr	r2, [pc, #44]	; (8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003cd6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	2201      	movs	r2, #1
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40020407 	.word	0x40020407
 8003cf8:	40020800 	.word	0x40020800
 8003cfc:	40020820 	.word	0x40020820
 8003d00:	cccccccd 	.word	0xcccccccd
 8003d04:	40020880 	.word	0x40020880

08003d08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	461a      	mov	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d2a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	2201      	movs	r2, #1
 8003d36:	409a      	lsls	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	1000823f 	.word	0x1000823f
 8003d4c:	40020940 	.word	0x40020940

08003d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d5e:	e15a      	b.n	8004016 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2101      	movs	r1, #1
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 814c 	beq.w	8004010 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d005      	beq.n	8003d90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d130      	bne.n	8003df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	f003 0201 	and.w	r2, r3, #1
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d017      	beq.n	8003e2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	2203      	movs	r2, #3
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4013      	ands	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d123      	bne.n	8003e82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	08da      	lsrs	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3208      	adds	r2, #8
 8003e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	220f      	movs	r2, #15
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	08da      	lsrs	r2, r3, #3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3208      	adds	r2, #8
 8003e7c:	6939      	ldr	r1, [r7, #16]
 8003e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	2203      	movs	r2, #3
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f003 0203 	and.w	r2, r3, #3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80a6 	beq.w	8004010 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec4:	4b5b      	ldr	r3, [pc, #364]	; (8004034 <HAL_GPIO_Init+0x2e4>)
 8003ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec8:	4a5a      	ldr	r2, [pc, #360]	; (8004034 <HAL_GPIO_Init+0x2e4>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6613      	str	r3, [r2, #96]	; 0x60
 8003ed0:	4b58      	ldr	r3, [pc, #352]	; (8004034 <HAL_GPIO_Init+0x2e4>)
 8003ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003edc:	4a56      	ldr	r2, [pc, #344]	; (8004038 <HAL_GPIO_Init+0x2e8>)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	089b      	lsrs	r3, r3, #2
 8003ee2:	3302      	adds	r3, #2
 8003ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	220f      	movs	r2, #15
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f06:	d01f      	beq.n	8003f48 <HAL_GPIO_Init+0x1f8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a4c      	ldr	r2, [pc, #304]	; (800403c <HAL_GPIO_Init+0x2ec>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d019      	beq.n	8003f44 <HAL_GPIO_Init+0x1f4>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a4b      	ldr	r2, [pc, #300]	; (8004040 <HAL_GPIO_Init+0x2f0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d013      	beq.n	8003f40 <HAL_GPIO_Init+0x1f0>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a4a      	ldr	r2, [pc, #296]	; (8004044 <HAL_GPIO_Init+0x2f4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00d      	beq.n	8003f3c <HAL_GPIO_Init+0x1ec>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a49      	ldr	r2, [pc, #292]	; (8004048 <HAL_GPIO_Init+0x2f8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d007      	beq.n	8003f38 <HAL_GPIO_Init+0x1e8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a48      	ldr	r2, [pc, #288]	; (800404c <HAL_GPIO_Init+0x2fc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <HAL_GPIO_Init+0x1e4>
 8003f30:	2305      	movs	r3, #5
 8003f32:	e00a      	b.n	8003f4a <HAL_GPIO_Init+0x1fa>
 8003f34:	2306      	movs	r3, #6
 8003f36:	e008      	b.n	8003f4a <HAL_GPIO_Init+0x1fa>
 8003f38:	2304      	movs	r3, #4
 8003f3a:	e006      	b.n	8003f4a <HAL_GPIO_Init+0x1fa>
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e004      	b.n	8003f4a <HAL_GPIO_Init+0x1fa>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e002      	b.n	8003f4a <HAL_GPIO_Init+0x1fa>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_GPIO_Init+0x1fa>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	f002 0203 	and.w	r2, r2, #3
 8003f50:	0092      	lsls	r2, r2, #2
 8003f52:	4093      	lsls	r3, r2
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f5a:	4937      	ldr	r1, [pc, #220]	; (8004038 <HAL_GPIO_Init+0x2e8>)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	3302      	adds	r3, #2
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f68:	4b39      	ldr	r3, [pc, #228]	; (8004050 <HAL_GPIO_Init+0x300>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4013      	ands	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f8c:	4a30      	ldr	r2, [pc, #192]	; (8004050 <HAL_GPIO_Init+0x300>)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f92:	4b2f      	ldr	r3, [pc, #188]	; (8004050 <HAL_GPIO_Init+0x300>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fb6:	4a26      	ldr	r2, [pc, #152]	; (8004050 <HAL_GPIO_Init+0x300>)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003fbc:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_GPIO_Init+0x300>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fe0:	4a1b      	ldr	r2, [pc, #108]	; (8004050 <HAL_GPIO_Init+0x300>)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fe6:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <HAL_GPIO_Init+0x300>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800400a:	4a11      	ldr	r2, [pc, #68]	; (8004050 <HAL_GPIO_Init+0x300>)
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	3301      	adds	r3, #1
 8004014:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	f47f ae9d 	bne.w	8003d60 <HAL_GPIO_Init+0x10>
  }
}
 8004026:	bf00      	nop
 8004028:	bf00      	nop
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	40021000 	.word	0x40021000
 8004038:	40010000 	.word	0x40010000
 800403c:	48000400 	.word	0x48000400
 8004040:	48000800 	.word	0x48000800
 8004044:	48000c00 	.word	0x48000c00
 8004048:	48001000 	.word	0x48001000
 800404c:	48001400 	.word	0x48001400
 8004050:	40010400 	.word	0x40010400

08004054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	807b      	strh	r3, [r7, #2]
 8004060:	4613      	mov	r3, r2
 8004062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004064:	787b      	ldrb	r3, [r7, #1]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800406a:	887a      	ldrh	r2, [r7, #2]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004070:	e002      	b.n	8004078 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004072:	887a      	ldrh	r2, [r7, #2]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800408e:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	4013      	ands	r3, r2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d006      	beq.n	80040a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800409a:	4a05      	ldr	r2, [pc, #20]	; (80040b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800409c:	88fb      	ldrh	r3, [r7, #6]
 800409e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f806 	bl	80040b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40010400 	.word	0x40010400

080040b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d141      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040da:	4b4b      	ldr	r3, [pc, #300]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e6:	d131      	bne.n	800414c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040e8:	4b47      	ldr	r3, [pc, #284]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ee:	4a46      	ldr	r2, [pc, #280]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040f8:	4b43      	ldr	r3, [pc, #268]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004100:	4a41      	ldr	r2, [pc, #260]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004106:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004108:	4b40      	ldr	r3, [pc, #256]	; (800420c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2232      	movs	r2, #50	; 0x32
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	4a3f      	ldr	r2, [pc, #252]	; (8004210 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	0c9b      	lsrs	r3, r3, #18
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800411e:	e002      	b.n	8004126 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3b01      	subs	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004126:	4b38      	ldr	r3, [pc, #224]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004132:	d102      	bne.n	800413a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f2      	bne.n	8004120 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800413a:	4b33      	ldr	r3, [pc, #204]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004146:	d158      	bne.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e057      	b.n	80041fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800414c:	4b2e      	ldr	r3, [pc, #184]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004152:	4a2d      	ldr	r2, [pc, #180]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004158:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800415c:	e04d      	b.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004164:	d141      	bne.n	80041ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004166:	4b28      	ldr	r3, [pc, #160]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004172:	d131      	bne.n	80041d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004174:	4b24      	ldr	r3, [pc, #144]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417a:	4a23      	ldr	r2, [pc, #140]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004180:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004184:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800418c:	4a1e      	ldr	r2, [pc, #120]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004192:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004194:	4b1d      	ldr	r3, [pc, #116]	; (800420c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2232      	movs	r2, #50	; 0x32
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	4a1c      	ldr	r2, [pc, #112]	; (8004210 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	0c9b      	lsrs	r3, r3, #18
 80041a6:	3301      	adds	r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041aa:	e002      	b.n	80041b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041b2:	4b15      	ldr	r3, [pc, #84]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041be:	d102      	bne.n	80041c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f2      	bne.n	80041ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041c6:	4b10      	ldr	r3, [pc, #64]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d112      	bne.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e011      	b.n	80041fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041de:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041e8:	e007      	b.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041ea:	4b07      	ldr	r3, [pc, #28]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041f2:	4a05      	ldr	r2, [pc, #20]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40007000 	.word	0x40007000
 800420c:	20000004 	.word	0x20000004
 8004210:	431bde83 	.word	0x431bde83

08004214 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800421e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004222:	6093      	str	r3, [r2, #8]
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40007000 	.word	0x40007000

08004234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e306      	b.n	8004854 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d075      	beq.n	800433e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004252:	4b97      	ldr	r3, [pc, #604]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800425c:	4b94      	ldr	r3, [pc, #592]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b0c      	cmp	r3, #12
 800426a:	d102      	bne.n	8004272 <HAL_RCC_OscConfig+0x3e>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2b03      	cmp	r3, #3
 8004270:	d002      	beq.n	8004278 <HAL_RCC_OscConfig+0x44>
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d10b      	bne.n	8004290 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004278:	4b8d      	ldr	r3, [pc, #564]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d05b      	beq.n	800433c <HAL_RCC_OscConfig+0x108>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d157      	bne.n	800433c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e2e1      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004298:	d106      	bne.n	80042a8 <HAL_RCC_OscConfig+0x74>
 800429a:	4b85      	ldr	r3, [pc, #532]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a84      	ldr	r2, [pc, #528]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e01d      	b.n	80042e4 <HAL_RCC_OscConfig+0xb0>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0x98>
 80042b2:	4b7f      	ldr	r3, [pc, #508]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a7e      	ldr	r2, [pc, #504]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	4b7c      	ldr	r3, [pc, #496]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a7b      	ldr	r2, [pc, #492]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e00b      	b.n	80042e4 <HAL_RCC_OscConfig+0xb0>
 80042cc:	4b78      	ldr	r3, [pc, #480]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a77      	ldr	r2, [pc, #476]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	4b75      	ldr	r3, [pc, #468]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a74      	ldr	r2, [pc, #464]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d013      	beq.n	8004314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd fcac 	bl	8001c48 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fd fca8 	bl	8001c48 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e2a6      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004306:	4b6a      	ldr	r3, [pc, #424]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0xc0>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd fc98 	bl	8001c48 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd fc94 	bl	8001c48 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e292      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800432e:	4b60      	ldr	r3, [pc, #384]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0xe8>
 800433a:	e000      	b.n	800433e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d075      	beq.n	8004436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800434a:	4b59      	ldr	r3, [pc, #356]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004354:	4b56      	ldr	r3, [pc, #344]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b0c      	cmp	r3, #12
 8004362:	d102      	bne.n	800436a <HAL_RCC_OscConfig+0x136>
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d002      	beq.n	8004370 <HAL_RCC_OscConfig+0x13c>
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b04      	cmp	r3, #4
 800436e:	d11f      	bne.n	80043b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004370:	4b4f      	ldr	r3, [pc, #316]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_RCC_OscConfig+0x154>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e265      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004388:	4b49      	ldr	r3, [pc, #292]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	061b      	lsls	r3, r3, #24
 8004396:	4946      	ldr	r1, [pc, #280]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004398:	4313      	orrs	r3, r2
 800439a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800439c:	4b45      	ldr	r3, [pc, #276]	; (80044b4 <HAL_RCC_OscConfig+0x280>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fc ffcf 	bl	8001344 <HAL_InitTick>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d043      	beq.n	8004434 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e251      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d023      	beq.n	8004400 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b8:	4b3d      	ldr	r3, [pc, #244]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a3c      	ldr	r2, [pc, #240]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd fc40 	bl	8001c48 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043cc:	f7fd fc3c 	bl	8001c48 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e23a      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043de:	4b34      	ldr	r3, [pc, #208]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ea:	4b31      	ldr	r3, [pc, #196]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	061b      	lsls	r3, r3, #24
 80043f8:	492d      	ldr	r1, [pc, #180]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]
 80043fe:	e01a      	b.n	8004436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004400:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2a      	ldr	r2, [pc, #168]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004406:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800440a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fd fc1c 	bl	8001c48 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004414:	f7fd fc18 	bl	8001c48 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e216      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004426:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x1e0>
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004434:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d041      	beq.n	80044c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01c      	beq.n	8004484 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800444a:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800444c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004450:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445a:	f7fd fbf5 	bl	8001c48 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004462:	f7fd fbf1 	bl	8001c48 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e1ef      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004474:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0ef      	beq.n	8004462 <HAL_RCC_OscConfig+0x22e>
 8004482:	e020      	b.n	80044c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004484:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800448a:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fd fbd8 	bl	8001c48 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800449a:	e00d      	b.n	80044b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800449c:	f7fd fbd4 	bl	8001c48 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d906      	bls.n	80044b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e1d2      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000
 80044b4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044b8:	4b8c      	ldr	r3, [pc, #560]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1ea      	bne.n	800449c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80a6 	beq.w	8004620 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d4:	2300      	movs	r3, #0
 80044d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044d8:	4b84      	ldr	r3, [pc, #528]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_OscConfig+0x2b4>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x2b6>
 80044e8:	2300      	movs	r3, #0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00d      	beq.n	800450a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ee:	4b7f      	ldr	r3, [pc, #508]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f2:	4a7e      	ldr	r2, [pc, #504]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f8:	6593      	str	r3, [r2, #88]	; 0x58
 80044fa:	4b7c      	ldr	r3, [pc, #496]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004506:	2301      	movs	r3, #1
 8004508:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800450a:	4b79      	ldr	r3, [pc, #484]	; (80046f0 <HAL_RCC_OscConfig+0x4bc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d118      	bne.n	8004548 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004516:	4b76      	ldr	r3, [pc, #472]	; (80046f0 <HAL_RCC_OscConfig+0x4bc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a75      	ldr	r2, [pc, #468]	; (80046f0 <HAL_RCC_OscConfig+0x4bc>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004522:	f7fd fb91 	bl	8001c48 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452a:	f7fd fb8d 	bl	8001c48 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e18b      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800453c:	4b6c      	ldr	r3, [pc, #432]	; (80046f0 <HAL_RCC_OscConfig+0x4bc>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d108      	bne.n	8004562 <HAL_RCC_OscConfig+0x32e>
 8004550:	4b66      	ldr	r3, [pc, #408]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	4a65      	ldr	r2, [pc, #404]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004560:	e024      	b.n	80045ac <HAL_RCC_OscConfig+0x378>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b05      	cmp	r3, #5
 8004568:	d110      	bne.n	800458c <HAL_RCC_OscConfig+0x358>
 800456a:	4b60      	ldr	r3, [pc, #384]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	4a5e      	ldr	r2, [pc, #376]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800457a:	4b5c      	ldr	r3, [pc, #368]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004580:	4a5a      	ldr	r2, [pc, #360]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800458a:	e00f      	b.n	80045ac <HAL_RCC_OscConfig+0x378>
 800458c:	4b57      	ldr	r3, [pc, #348]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	4a56      	ldr	r2, [pc, #344]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800459c:	4b53      	ldr	r3, [pc, #332]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	4a52      	ldr	r2, [pc, #328]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d016      	beq.n	80045e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b4:	f7fd fb48 	bl	8001c48 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fd fb44 	bl	8001c48 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e140      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d2:	4b46      	ldr	r3, [pc, #280]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ed      	beq.n	80045bc <HAL_RCC_OscConfig+0x388>
 80045e0:	e015      	b.n	800460e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e2:	f7fd fb31 	bl	8001c48 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045e8:	e00a      	b.n	8004600 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fd fb2d 	bl	8001c48 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e129      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004600:	4b3a      	ldr	r3, [pc, #232]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1ed      	bne.n	80045ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800460e:	7ffb      	ldrb	r3, [r7, #31]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004614:	4b35      	ldr	r3, [pc, #212]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	4a34      	ldr	r2, [pc, #208]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d03c      	beq.n	80046a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01c      	beq.n	800466e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004634:	4b2d      	ldr	r3, [pc, #180]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800463a:	4a2c      	ldr	r2, [pc, #176]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fd fb00 	bl	8001c48 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800464c:	f7fd fafc 	bl	8001c48 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0fa      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800465e:	4b23      	ldr	r3, [pc, #140]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0ef      	beq.n	800464c <HAL_RCC_OscConfig+0x418>
 800466c:	e01b      	b.n	80046a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800466e:	4b1f      	ldr	r3, [pc, #124]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004670:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004674:	4a1d      	ldr	r2, [pc, #116]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fd fae3 	bl	8001c48 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004686:	f7fd fadf 	bl	8001c48 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e0dd      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004698:	4b14      	ldr	r3, [pc, #80]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800469a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1ef      	bne.n	8004686 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80d1 	beq.w	8004852 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046b0:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 030c 	and.w	r3, r3, #12
 80046b8:	2b0c      	cmp	r3, #12
 80046ba:	f000 808b 	beq.w	80047d4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d15e      	bne.n	8004784 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a08      	ldr	r2, [pc, #32]	; (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80046cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7fd fab9 	bl	8001c48 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d8:	e00c      	b.n	80046f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046da:	f7fd fab5 	bl	8001c48 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d905      	bls.n	80046f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e0b3      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f4:	4b59      	ldr	r3, [pc, #356]	; (800485c <HAL_RCC_OscConfig+0x628>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1ec      	bne.n	80046da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004700:	4b56      	ldr	r3, [pc, #344]	; (800485c <HAL_RCC_OscConfig+0x628>)
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	4b56      	ldr	r3, [pc, #344]	; (8004860 <HAL_RCC_OscConfig+0x62c>)
 8004706:	4013      	ands	r3, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6a11      	ldr	r1, [r2, #32]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004710:	3a01      	subs	r2, #1
 8004712:	0112      	lsls	r2, r2, #4
 8004714:	4311      	orrs	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800471a:	0212      	lsls	r2, r2, #8
 800471c:	4311      	orrs	r1, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004722:	0852      	lsrs	r2, r2, #1
 8004724:	3a01      	subs	r2, #1
 8004726:	0552      	lsls	r2, r2, #21
 8004728:	4311      	orrs	r1, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800472e:	0852      	lsrs	r2, r2, #1
 8004730:	3a01      	subs	r2, #1
 8004732:	0652      	lsls	r2, r2, #25
 8004734:	4311      	orrs	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800473a:	06d2      	lsls	r2, r2, #27
 800473c:	430a      	orrs	r2, r1
 800473e:	4947      	ldr	r1, [pc, #284]	; (800485c <HAL_RCC_OscConfig+0x628>)
 8004740:	4313      	orrs	r3, r2
 8004742:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004744:	4b45      	ldr	r3, [pc, #276]	; (800485c <HAL_RCC_OscConfig+0x628>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a44      	ldr	r2, [pc, #272]	; (800485c <HAL_RCC_OscConfig+0x628>)
 800474a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800474e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004750:	4b42      	ldr	r3, [pc, #264]	; (800485c <HAL_RCC_OscConfig+0x628>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4a41      	ldr	r2, [pc, #260]	; (800485c <HAL_RCC_OscConfig+0x628>)
 8004756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800475a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fd fa74 	bl	8001c48 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fd fa70 	bl	8001c48 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e06e      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004776:	4b39      	ldr	r3, [pc, #228]	; (800485c <HAL_RCC_OscConfig+0x628>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x530>
 8004782:	e066      	b.n	8004852 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004784:	4b35      	ldr	r3, [pc, #212]	; (800485c <HAL_RCC_OscConfig+0x628>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a34      	ldr	r2, [pc, #208]	; (800485c <HAL_RCC_OscConfig+0x628>)
 800478a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800478e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004790:	4b32      	ldr	r3, [pc, #200]	; (800485c <HAL_RCC_OscConfig+0x628>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a31      	ldr	r2, [pc, #196]	; (800485c <HAL_RCC_OscConfig+0x628>)
 8004796:	f023 0303 	bic.w	r3, r3, #3
 800479a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800479c:	4b2f      	ldr	r3, [pc, #188]	; (800485c <HAL_RCC_OscConfig+0x628>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a2e      	ldr	r2, [pc, #184]	; (800485c <HAL_RCC_OscConfig+0x628>)
 80047a2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fd fa4c 	bl	8001c48 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fd fa48 	bl	8001c48 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e046      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c6:	4b25      	ldr	r3, [pc, #148]	; (800485c <HAL_RCC_OscConfig+0x628>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x580>
 80047d2:	e03e      	b.n	8004852 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e039      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80047e0:	4b1e      	ldr	r3, [pc, #120]	; (800485c <HAL_RCC_OscConfig+0x628>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f003 0203 	and.w	r2, r3, #3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d12c      	bne.n	800484e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	3b01      	subs	r3, #1
 8004800:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d123      	bne.n	800484e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d11b      	bne.n	800484e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004822:	429a      	cmp	r2, r3
 8004824:	d113      	bne.n	800484e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	3b01      	subs	r3, #1
 8004834:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d109      	bne.n	800484e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004844:	085b      	lsrs	r3, r3, #1
 8004846:	3b01      	subs	r3, #1
 8004848:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d001      	beq.n	8004852 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000
 8004860:	019f800c 	.word	0x019f800c

08004864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e11e      	b.n	8004aba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800487c:	4b91      	ldr	r3, [pc, #580]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d910      	bls.n	80048ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b8e      	ldr	r3, [pc, #568]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 020f 	bic.w	r2, r3, #15
 8004892:	498c      	ldr	r1, [pc, #560]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b8a      	ldr	r3, [pc, #552]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e106      	b.n	8004aba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d073      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d129      	bne.n	8004914 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c0:	4b81      	ldr	r3, [pc, #516]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0f4      	b.n	8004aba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80048d0:	f000 f9d0 	bl	8004c74 <RCC_GetSysClockFreqFromPLLSource>
 80048d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4a7c      	ldr	r2, [pc, #496]	; (8004acc <HAL_RCC_ClockConfig+0x268>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d93f      	bls.n	800495e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048de:	4b7a      	ldr	r3, [pc, #488]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d033      	beq.n	800495e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d12f      	bne.n	800495e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048fe:	4b72      	ldr	r3, [pc, #456]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004906:	4a70      	ldr	r2, [pc, #448]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 8004908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	e024      	b.n	800495e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d107      	bne.n	800492c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800491c:	4b6a      	ldr	r3, [pc, #424]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e0c6      	b.n	8004aba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800492c:	4b66      	ldr	r3, [pc, #408]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0be      	b.n	8004aba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800493c:	f000 f8ce 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8004940:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4a61      	ldr	r2, [pc, #388]	; (8004acc <HAL_RCC_ClockConfig+0x268>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d909      	bls.n	800495e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800494a:	4b5f      	ldr	r3, [pc, #380]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004952:	4a5d      	ldr	r2, [pc, #372]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 8004954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004958:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800495a:	2380      	movs	r3, #128	; 0x80
 800495c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800495e:	4b5a      	ldr	r3, [pc, #360]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f023 0203 	bic.w	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	4957      	ldr	r1, [pc, #348]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 800496c:	4313      	orrs	r3, r2
 800496e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004970:	f7fd f96a 	bl	8001c48 <HAL_GetTick>
 8004974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004976:	e00a      	b.n	800498e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004978:	f7fd f966 	bl	8001c48 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	; 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e095      	b.n	8004aba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	4b4e      	ldr	r3, [pc, #312]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 020c 	and.w	r2, r3, #12
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	429a      	cmp	r2, r3
 800499e:	d1eb      	bne.n	8004978 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d023      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b8:	4b43      	ldr	r3, [pc, #268]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4a42      	ldr	r2, [pc, #264]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 80049be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80049d0:	4b3d      	ldr	r3, [pc, #244]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049d8:	4a3b      	ldr	r2, [pc, #236]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 80049da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e0:	4b39      	ldr	r3, [pc, #228]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4936      	ldr	r1, [pc, #216]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b80      	cmp	r3, #128	; 0x80
 80049f8:	d105      	bne.n	8004a06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049fa:	4b33      	ldr	r3, [pc, #204]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	4a32      	ldr	r2, [pc, #200]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 8004a00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a06:	4b2f      	ldr	r3, [pc, #188]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d21d      	bcs.n	8004a50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a14:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f023 020f 	bic.w	r2, r3, #15
 8004a1c:	4929      	ldr	r1, [pc, #164]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a24:	f7fd f910 	bl	8001c48 <HAL_GetTick>
 8004a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2c:	f7fd f90c 	bl	8001c48 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e03b      	b.n	8004aba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d1ed      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4917      	ldr	r1, [pc, #92]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	490f      	ldr	r1, [pc, #60]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a8e:	f000 f825 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8004a92:	4602      	mov	r2, r0
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <HAL_RCC_ClockConfig+0x264>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	490c      	ldr	r1, [pc, #48]	; (8004ad0 <HAL_RCC_ClockConfig+0x26c>)
 8004aa0:	5ccb      	ldrb	r3, [r1, r3]
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <HAL_RCC_ClockConfig+0x270>)
 8004aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004aae:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <HAL_RCC_ClockConfig+0x274>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc fc46 	bl	8001344 <HAL_InitTick>
 8004ab8:	4603      	mov	r3, r0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40022000 	.word	0x40022000
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	04c4b400 	.word	0x04c4b400
 8004ad0:	08009aac 	.word	0x08009aac
 8004ad4:	20000004 	.word	0x20000004
 8004ad8:	20000008 	.word	0x20000008

08004adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ae2:	4b2c      	ldr	r3, [pc, #176]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 030c 	and.w	r3, r3, #12
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d102      	bne.n	8004af4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004aee:	4b2a      	ldr	r3, [pc, #168]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	e047      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004af4:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 030c 	and.w	r3, r3, #12
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d102      	bne.n	8004b06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b00:	4b26      	ldr	r3, [pc, #152]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	e03e      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b06:	4b23      	ldr	r3, [pc, #140]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d136      	bne.n	8004b80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b12:	4b20      	ldr	r3, [pc, #128]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b1c:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	3301      	adds	r3, #1
 8004b28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d10c      	bne.n	8004b4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b30:	4a1a      	ldr	r2, [pc, #104]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b3a:	68d2      	ldr	r2, [r2, #12]
 8004b3c:	0a12      	lsrs	r2, r2, #8
 8004b3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	617b      	str	r3, [r7, #20]
      break;
 8004b48:	e00c      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b4a:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	4a10      	ldr	r2, [pc, #64]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b54:	68d2      	ldr	r2, [r2, #12]
 8004b56:	0a12      	lsrs	r2, r2, #8
 8004b58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b5c:	fb02 f303 	mul.w	r3, r2, r3
 8004b60:	617b      	str	r3, [r7, #20]
      break;
 8004b62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	0e5b      	lsrs	r3, r3, #25
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	e001      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b84:	693b      	ldr	r3, [r7, #16]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000
 8004b98:	00f42400 	.word	0x00f42400
 8004b9c:	016e3600 	.word	0x016e3600

08004ba0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba4:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000004 	.word	0x20000004

08004bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bbc:	f7ff fff0 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4904      	ldr	r1, [pc, #16]	; (8004be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	08009abc 	.word	0x08009abc

08004be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004be8:	f7ff ffda 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 8004bec:	4602      	mov	r2, r0
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	0adb      	lsrs	r3, r3, #11
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	4904      	ldr	r1, [pc, #16]	; (8004c0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bfa:	5ccb      	ldrb	r3, [r1, r3]
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	08009abc 	.word	0x08009abc

08004c10 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	220f      	movs	r2, #15
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004c20:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <HAL_RCC_GetClockConfig+0x5c>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0203 	and.w	r2, r3, #3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004c2c:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <HAL_RCC_GetClockConfig+0x5c>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <HAL_RCC_GetClockConfig+0x5c>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004c44:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <HAL_RCC_GetClockConfig+0x5c>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	08db      	lsrs	r3, r3, #3
 8004c4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c52:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <HAL_RCC_GetClockConfig+0x60>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 020f 	and.w	r2, r3, #15
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	601a      	str	r2, [r3, #0]
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40022000 	.word	0x40022000

08004c74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c7a:	4b1e      	ldr	r3, [pc, #120]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	3301      	adds	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d10c      	bne.n	8004cb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c98:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca0:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ca2:	68d2      	ldr	r2, [r2, #12]
 8004ca4:	0a12      	lsrs	r2, r2, #8
 8004ca6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	617b      	str	r3, [r7, #20]
    break;
 8004cb0:	e00c      	b.n	8004ccc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cb2:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cba:	4a0e      	ldr	r2, [pc, #56]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cbc:	68d2      	ldr	r2, [r2, #12]
 8004cbe:	0a12      	lsrs	r2, r2, #8
 8004cc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cc4:	fb02 f303 	mul.w	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]
    break;
 8004cca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ccc:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	0e5b      	lsrs	r3, r3, #25
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ce6:	687b      	ldr	r3, [r7, #4]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	016e3600 	.word	0x016e3600
 8004cfc:	00f42400 	.word	0x00f42400

08004d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d08:	2300      	movs	r3, #0
 8004d0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8098 	beq.w	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d22:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10d      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	4b40      	ldr	r3, [pc, #256]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	4a3f      	ldr	r2, [pc, #252]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d38:	6593      	str	r3, [r2, #88]	; 0x58
 8004d3a:	4b3d      	ldr	r3, [pc, #244]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d46:	2301      	movs	r3, #1
 8004d48:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d4a:	4b3a      	ldr	r3, [pc, #232]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a39      	ldr	r2, [pc, #228]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d56:	f7fc ff77 	bl	8001c48 <HAL_GetTick>
 8004d5a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d5c:	e009      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5e:	f7fc ff73 	bl	8001c48 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d902      	bls.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	74fb      	strb	r3, [r7, #19]
        break;
 8004d70:	e005      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d72:	4b30      	ldr	r3, [pc, #192]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0ef      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d7e:	7cfb      	ldrb	r3, [r7, #19]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d159      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d84:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01e      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d019      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004da0:	4b23      	ldr	r3, [pc, #140]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004daa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dbc:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dcc:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7fc ff33 	bl	8001c48 <HAL_GetTick>
 8004de2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de4:	e00b      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fc ff2f 	bl	8001c48 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d902      	bls.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	74fb      	strb	r3, [r7, #19]
            break;
 8004dfc:	e006      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0ec      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004e0c:	7cfb      	ldrb	r3, [r7, #19]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10b      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e12:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e20:	4903      	ldr	r1, [pc, #12]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e28:	e008      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e2a:	7cfb      	ldrb	r3, [r7, #19]
 8004e2c:	74bb      	strb	r3, [r7, #18]
 8004e2e:	e005      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e3c:	7c7b      	ldrb	r3, [r7, #17]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d105      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e42:	4ba7      	ldr	r3, [pc, #668]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	4aa6      	ldr	r2, [pc, #664]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e5a:	4ba1      	ldr	r3, [pc, #644]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f023 0203 	bic.w	r2, r3, #3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	499d      	ldr	r1, [pc, #628]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e7c:	4b98      	ldr	r3, [pc, #608]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	f023 020c 	bic.w	r2, r3, #12
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	4995      	ldr	r1, [pc, #596]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e9e:	4b90      	ldr	r3, [pc, #576]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	498c      	ldr	r1, [pc, #560]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ec0:	4b87      	ldr	r3, [pc, #540]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	4984      	ldr	r1, [pc, #528]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ee2:	4b7f      	ldr	r3, [pc, #508]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	497b      	ldr	r1, [pc, #492]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f04:	4b76      	ldr	r3, [pc, #472]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	4973      	ldr	r1, [pc, #460]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f26:	4b6e      	ldr	r3, [pc, #440]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	496a      	ldr	r1, [pc, #424]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f48:	4b65      	ldr	r3, [pc, #404]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	4962      	ldr	r1, [pc, #392]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f6a:	4b5d      	ldr	r3, [pc, #372]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	4959      	ldr	r1, [pc, #356]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f8c:	4b54      	ldr	r3, [pc, #336]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f92:	f023 0203 	bic.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	4951      	ldr	r1, [pc, #324]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fae:	4b4c      	ldr	r3, [pc, #304]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	4948      	ldr	r1, [pc, #288]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d015      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fd0:	4b43      	ldr	r3, [pc, #268]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	4940      	ldr	r1, [pc, #256]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fee:	d105      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff0:	4b3b      	ldr	r3, [pc, #236]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4a3a      	ldr	r2, [pc, #232]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ffa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005004:	2b00      	cmp	r3, #0
 8005006:	d015      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005008:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005016:	4932      	ldr	r1, [pc, #200]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005026:	d105      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005028:	4b2d      	ldr	r3, [pc, #180]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4a2c      	ldr	r2, [pc, #176]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005032:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d015      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005046:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	4924      	ldr	r1, [pc, #144]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800505e:	d105      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005060:	4b1f      	ldr	r3, [pc, #124]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4a1e      	ldr	r2, [pc, #120]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800506a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d015      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005078:	4b19      	ldr	r3, [pc, #100]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	4916      	ldr	r1, [pc, #88]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005096:	d105      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005098:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a10      	ldr	r2, [pc, #64]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d019      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	4908      	ldr	r1, [pc, #32]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ce:	d109      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4a02      	ldr	r2, [pc, #8]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050da:	60d3      	str	r3, [r2, #12]
 80050dc:	e002      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80050de:	bf00      	nop
 80050e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d015      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80050f0:	4b29      	ldr	r3, [pc, #164]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	4926      	ldr	r1, [pc, #152]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800510e:	d105      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005110:	4b21      	ldr	r3, [pc, #132]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4a20      	ldr	r2, [pc, #128]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d015      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005128:	4b1b      	ldr	r3, [pc, #108]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005136:	4918      	ldr	r1, [pc, #96]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005146:	d105      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005148:	4b13      	ldr	r3, [pc, #76]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a12      	ldr	r2, [pc, #72]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800514e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005152:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d015      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005160:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005166:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516e:	490a      	ldr	r1, [pc, #40]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800517e:	d105      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005180:	4b05      	ldr	r3, [pc, #20]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4a04      	ldr	r2, [pc, #16]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800518a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800518c:	7cbb      	ldrb	r3, [r7, #18]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000

0800519c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e049      	b.n	8005242 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f841 	bl	800524a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3304      	adds	r3, #4
 80051d8:	4619      	mov	r1, r3
 80051da:	4610      	mov	r0, r2
 80051dc:	f000 ff1e 	bl	800601c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
	...

08005260 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	d001      	beq.n	8005278 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e04c      	b.n	8005312 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a26      	ldr	r2, [pc, #152]	; (8005320 <HAL_TIM_Base_Start+0xc0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d022      	beq.n	80052d0 <HAL_TIM_Base_Start+0x70>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005292:	d01d      	beq.n	80052d0 <HAL_TIM_Base_Start+0x70>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a22      	ldr	r2, [pc, #136]	; (8005324 <HAL_TIM_Base_Start+0xc4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d018      	beq.n	80052d0 <HAL_TIM_Base_Start+0x70>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a21      	ldr	r2, [pc, #132]	; (8005328 <HAL_TIM_Base_Start+0xc8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d013      	beq.n	80052d0 <HAL_TIM_Base_Start+0x70>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1f      	ldr	r2, [pc, #124]	; (800532c <HAL_TIM_Base_Start+0xcc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00e      	beq.n	80052d0 <HAL_TIM_Base_Start+0x70>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1e      	ldr	r2, [pc, #120]	; (8005330 <HAL_TIM_Base_Start+0xd0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_TIM_Base_Start+0x70>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <HAL_TIM_Base_Start+0xd4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_TIM_Base_Start+0x70>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1b      	ldr	r2, [pc, #108]	; (8005338 <HAL_TIM_Base_Start+0xd8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d115      	bne.n	80052fc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	4b19      	ldr	r3, [pc, #100]	; (800533c <HAL_TIM_Base_Start+0xdc>)
 80052d8:	4013      	ands	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b06      	cmp	r3, #6
 80052e0:	d015      	beq.n	800530e <HAL_TIM_Base_Start+0xae>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e8:	d011      	beq.n	800530e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0201 	orr.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fa:	e008      	b.n	800530e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	e000      	b.n	8005310 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40012c00 	.word	0x40012c00
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40013400 	.word	0x40013400
 8005334:	40014000 	.word	0x40014000
 8005338:	40015000 	.word	0x40015000
 800533c:	00010007 	.word	0x00010007

08005340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d001      	beq.n	8005358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e054      	b.n	8005402 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a26      	ldr	r2, [pc, #152]	; (8005410 <HAL_TIM_Base_Start_IT+0xd0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d022      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005382:	d01d      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a22      	ldr	r2, [pc, #136]	; (8005414 <HAL_TIM_Base_Start_IT+0xd4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d018      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a21      	ldr	r2, [pc, #132]	; (8005418 <HAL_TIM_Base_Start_IT+0xd8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d013      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1f      	ldr	r2, [pc, #124]	; (800541c <HAL_TIM_Base_Start_IT+0xdc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00e      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <HAL_TIM_Base_Start_IT+0xe0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d009      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <HAL_TIM_Base_Start_IT+0xe4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d004      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x80>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <HAL_TIM_Base_Start_IT+0xe8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d115      	bne.n	80053ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	4b19      	ldr	r3, [pc, #100]	; (800542c <HAL_TIM_Base_Start_IT+0xec>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b06      	cmp	r3, #6
 80053d0:	d015      	beq.n	80053fe <HAL_TIM_Base_Start_IT+0xbe>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d8:	d011      	beq.n	80053fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0201 	orr.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ea:	e008      	b.n	80053fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e000      	b.n	8005400 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40000c00 	.word	0x40000c00
 8005420:	40013400 	.word	0x40013400
 8005424:	40014000 	.word	0x40014000
 8005428:	40015000 	.word	0x40015000
 800542c:	00010007 	.word	0x00010007

08005430 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e049      	b.n	80054d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fc f980 	bl	800175c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f000 fdd4 	bl	800601c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d109      	bne.n	8005504 <HAL_TIM_PWM_Start+0x24>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	e03c      	b.n	800557e <HAL_TIM_PWM_Start+0x9e>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b04      	cmp	r3, #4
 8005508:	d109      	bne.n	800551e <HAL_TIM_PWM_Start+0x3e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b01      	cmp	r3, #1
 8005514:	bf14      	ite	ne
 8005516:	2301      	movne	r3, #1
 8005518:	2300      	moveq	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	e02f      	b.n	800557e <HAL_TIM_PWM_Start+0x9e>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b08      	cmp	r3, #8
 8005522:	d109      	bne.n	8005538 <HAL_TIM_PWM_Start+0x58>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	bf14      	ite	ne
 8005530:	2301      	movne	r3, #1
 8005532:	2300      	moveq	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	e022      	b.n	800557e <HAL_TIM_PWM_Start+0x9e>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b0c      	cmp	r3, #12
 800553c:	d109      	bne.n	8005552 <HAL_TIM_PWM_Start+0x72>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b01      	cmp	r3, #1
 8005548:	bf14      	ite	ne
 800554a:	2301      	movne	r3, #1
 800554c:	2300      	moveq	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	e015      	b.n	800557e <HAL_TIM_PWM_Start+0x9e>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b10      	cmp	r3, #16
 8005556:	d109      	bne.n	800556c <HAL_TIM_PWM_Start+0x8c>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e008      	b.n	800557e <HAL_TIM_PWM_Start+0x9e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	bf14      	ite	ne
 8005578:	2301      	movne	r3, #1
 800557a:	2300      	moveq	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e0a6      	b.n	80056d4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <HAL_TIM_PWM_Start+0xb6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005594:	e023      	b.n	80055de <HAL_TIM_PWM_Start+0xfe>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b04      	cmp	r3, #4
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_PWM_Start+0xc6>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a4:	e01b      	b.n	80055de <HAL_TIM_PWM_Start+0xfe>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_PWM_Start+0xd6>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055b4:	e013      	b.n	80055de <HAL_TIM_PWM_Start+0xfe>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b0c      	cmp	r3, #12
 80055ba:	d104      	bne.n	80055c6 <HAL_TIM_PWM_Start+0xe6>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055c4:	e00b      	b.n	80055de <HAL_TIM_PWM_Start+0xfe>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b10      	cmp	r3, #16
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_PWM_Start+0xf6>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055d4:	e003      	b.n	80055de <HAL_TIM_PWM_Start+0xfe>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2201      	movs	r2, #1
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 f8ea 	bl	80067c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a3a      	ldr	r2, [pc, #232]	; (80056dc <HAL_TIM_PWM_Start+0x1fc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d018      	beq.n	8005628 <HAL_TIM_PWM_Start+0x148>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a39      	ldr	r2, [pc, #228]	; (80056e0 <HAL_TIM_PWM_Start+0x200>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d013      	beq.n	8005628 <HAL_TIM_PWM_Start+0x148>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a37      	ldr	r2, [pc, #220]	; (80056e4 <HAL_TIM_PWM_Start+0x204>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00e      	beq.n	8005628 <HAL_TIM_PWM_Start+0x148>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a36      	ldr	r2, [pc, #216]	; (80056e8 <HAL_TIM_PWM_Start+0x208>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d009      	beq.n	8005628 <HAL_TIM_PWM_Start+0x148>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a34      	ldr	r2, [pc, #208]	; (80056ec <HAL_TIM_PWM_Start+0x20c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <HAL_TIM_PWM_Start+0x148>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a33      	ldr	r2, [pc, #204]	; (80056f0 <HAL_TIM_PWM_Start+0x210>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d101      	bne.n	800562c <HAL_TIM_PWM_Start+0x14c>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <HAL_TIM_PWM_Start+0x14e>
 800562c:	2300      	movs	r3, #0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a25      	ldr	r2, [pc, #148]	; (80056dc <HAL_TIM_PWM_Start+0x1fc>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d022      	beq.n	8005692 <HAL_TIM_PWM_Start+0x1b2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005654:	d01d      	beq.n	8005692 <HAL_TIM_PWM_Start+0x1b2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a26      	ldr	r2, [pc, #152]	; (80056f4 <HAL_TIM_PWM_Start+0x214>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d018      	beq.n	8005692 <HAL_TIM_PWM_Start+0x1b2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a24      	ldr	r2, [pc, #144]	; (80056f8 <HAL_TIM_PWM_Start+0x218>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_TIM_PWM_Start+0x1b2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a23      	ldr	r2, [pc, #140]	; (80056fc <HAL_TIM_PWM_Start+0x21c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00e      	beq.n	8005692 <HAL_TIM_PWM_Start+0x1b2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a19      	ldr	r2, [pc, #100]	; (80056e0 <HAL_TIM_PWM_Start+0x200>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d009      	beq.n	8005692 <HAL_TIM_PWM_Start+0x1b2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <HAL_TIM_PWM_Start+0x204>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d004      	beq.n	8005692 <HAL_TIM_PWM_Start+0x1b2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a18      	ldr	r2, [pc, #96]	; (80056f0 <HAL_TIM_PWM_Start+0x210>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d115      	bne.n	80056be <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	4b19      	ldr	r3, [pc, #100]	; (8005700 <HAL_TIM_PWM_Start+0x220>)
 800569a:	4013      	ands	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b06      	cmp	r3, #6
 80056a2:	d015      	beq.n	80056d0 <HAL_TIM_PWM_Start+0x1f0>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056aa:	d011      	beq.n	80056d0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056bc:	e008      	b.n	80056d0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0201 	orr.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	e000      	b.n	80056d2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40012c00 	.word	0x40012c00
 80056e0:	40013400 	.word	0x40013400
 80056e4:	40014000 	.word	0x40014000
 80056e8:	40014400 	.word	0x40014400
 80056ec:	40014800 	.word	0x40014800
 80056f0:	40015000 	.word	0x40015000
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40000c00 	.word	0x40000c00
 8005700:	00010007 	.word	0x00010007

08005704 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2200      	movs	r2, #0
 8005714:	6839      	ldr	r1, [r7, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f001 f852 	bl	80067c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a40      	ldr	r2, [pc, #256]	; (8005824 <HAL_TIM_PWM_Stop+0x120>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d018      	beq.n	8005758 <HAL_TIM_PWM_Stop+0x54>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a3f      	ldr	r2, [pc, #252]	; (8005828 <HAL_TIM_PWM_Stop+0x124>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d013      	beq.n	8005758 <HAL_TIM_PWM_Stop+0x54>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a3d      	ldr	r2, [pc, #244]	; (800582c <HAL_TIM_PWM_Stop+0x128>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00e      	beq.n	8005758 <HAL_TIM_PWM_Stop+0x54>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a3c      	ldr	r2, [pc, #240]	; (8005830 <HAL_TIM_PWM_Stop+0x12c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d009      	beq.n	8005758 <HAL_TIM_PWM_Stop+0x54>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a3a      	ldr	r2, [pc, #232]	; (8005834 <HAL_TIM_PWM_Stop+0x130>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_TIM_PWM_Stop+0x54>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a39      	ldr	r2, [pc, #228]	; (8005838 <HAL_TIM_PWM_Stop+0x134>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d101      	bne.n	800575c <HAL_TIM_PWM_Stop+0x58>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <HAL_TIM_PWM_Stop+0x5a>
 800575c:	2300      	movs	r3, #0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d017      	beq.n	8005792 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6a1a      	ldr	r2, [r3, #32]
 8005768:	f241 1311 	movw	r3, #4369	; 0x1111
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10f      	bne.n	8005792 <HAL_TIM_PWM_Stop+0x8e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6a1a      	ldr	r2, [r3, #32]
 8005778:	f244 4344 	movw	r3, #17476	; 0x4444
 800577c:	4013      	ands	r3, r2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d107      	bne.n	8005792 <HAL_TIM_PWM_Stop+0x8e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005790:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a1a      	ldr	r2, [r3, #32]
 8005798:	f241 1311 	movw	r3, #4369	; 0x1111
 800579c:	4013      	ands	r3, r2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10f      	bne.n	80057c2 <HAL_TIM_PWM_Stop+0xbe>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6a1a      	ldr	r2, [r3, #32]
 80057a8:	f244 4344 	movw	r3, #17476	; 0x4444
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d107      	bne.n	80057c2 <HAL_TIM_PWM_Stop+0xbe>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0201 	bic.w	r2, r2, #1
 80057c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d104      	bne.n	80057d2 <HAL_TIM_PWM_Stop+0xce>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d0:	e023      	b.n	800581a <HAL_TIM_PWM_Stop+0x116>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d104      	bne.n	80057e2 <HAL_TIM_PWM_Stop+0xde>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057e0:	e01b      	b.n	800581a <HAL_TIM_PWM_Stop+0x116>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d104      	bne.n	80057f2 <HAL_TIM_PWM_Stop+0xee>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057f0:	e013      	b.n	800581a <HAL_TIM_PWM_Stop+0x116>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b0c      	cmp	r3, #12
 80057f6:	d104      	bne.n	8005802 <HAL_TIM_PWM_Stop+0xfe>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005800:	e00b      	b.n	800581a <HAL_TIM_PWM_Stop+0x116>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b10      	cmp	r3, #16
 8005806:	d104      	bne.n	8005812 <HAL_TIM_PWM_Stop+0x10e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005810:	e003      	b.n	800581a <HAL_TIM_PWM_Stop+0x116>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40013400 	.word	0x40013400
 800582c:	40014000 	.word	0x40014000
 8005830:	40014400 	.word	0x40014400
 8005834:	40014800 	.word	0x40014800
 8005838:	40015000 	.word	0x40015000

0800583c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e097      	b.n	8005980 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d106      	bne.n	800586a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7fb ff99 	bl	800179c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2202      	movs	r2, #2
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005880:	f023 0307 	bic.w	r3, r3, #7
 8005884:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3304      	adds	r3, #4
 800588e:	4619      	mov	r1, r3
 8005890:	4610      	mov	r0, r2
 8005892:	f000 fbc3 	bl	800601c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	4313      	orrs	r3, r2
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80058dc:	f023 030c 	bic.w	r3, r3, #12
 80058e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	4313      	orrs	r3, r2
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	011a      	lsls	r2, r3, #4
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	031b      	lsls	r3, r3, #12
 800590c:	4313      	orrs	r3, r2
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800591a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005922:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	4313      	orrs	r3, r2
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005998:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d110      	bne.n	80059da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d102      	bne.n	80059c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80059be:	7b7b      	ldrb	r3, [r7, #13]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d001      	beq.n	80059c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e069      	b.n	8005a9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d8:	e031      	b.n	8005a3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d110      	bne.n	8005a02 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d102      	bne.n	80059ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059e6:	7b3b      	ldrb	r3, [r7, #12]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d001      	beq.n	80059f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e055      	b.n	8005a9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a00:	e01d      	b.n	8005a3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d108      	bne.n	8005a1a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d105      	bne.n	8005a1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a0e:	7b7b      	ldrb	r3, [r7, #13]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d102      	bne.n	8005a1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a14:	7b3b      	ldrb	r3, [r7, #12]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d001      	beq.n	8005a1e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e03e      	b.n	8005a9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2202      	movs	r2, #2
 8005a2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_TIM_Encoder_Start+0xc4>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d008      	beq.n	8005a5c <HAL_TIM_Encoder_Start+0xd4>
 8005a4a:	e00f      	b.n	8005a6c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2201      	movs	r2, #1
 8005a52:	2100      	movs	r1, #0
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 feb3 	bl	80067c0 <TIM_CCxChannelCmd>
      break;
 8005a5a:	e016      	b.n	8005a8a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2201      	movs	r2, #1
 8005a62:	2104      	movs	r1, #4
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 feab 	bl	80067c0 <TIM_CCxChannelCmd>
      break;
 8005a6a:	e00e      	b.n	8005a8a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2201      	movs	r2, #1
 8005a72:	2100      	movs	r1, #0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fea3 	bl	80067c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	2104      	movs	r1, #4
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fe9c 	bl	80067c0 <TIM_CCxChannelCmd>
      break;
 8005a88:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0201 	orr.w	r2, r2, #1
 8005a98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d122      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d11b      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0202 	mvn.w	r2, #2
 8005ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa7a 	bl	8005fe0 <HAL_TIM_IC_CaptureCallback>
 8005aec:	e005      	b.n	8005afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa6c 	bl	8005fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fa7d 	bl	8005ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d122      	bne.n	8005b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d11b      	bne.n	8005b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0204 	mvn.w	r2, #4
 8005b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fa50 	bl	8005fe0 <HAL_TIM_IC_CaptureCallback>
 8005b40:	e005      	b.n	8005b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa42 	bl	8005fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fa53 	bl	8005ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d122      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d11b      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0208 	mvn.w	r2, #8
 8005b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fa26 	bl	8005fe0 <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fa18 	bl	8005fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fa29 	bl	8005ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0310 	and.w	r3, r3, #16
 8005bb2:	2b10      	cmp	r3, #16
 8005bb4:	d122      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d11b      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0210 	mvn.w	r2, #16
 8005bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2208      	movs	r2, #8
 8005bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9fc 	bl	8005fe0 <HAL_TIM_IC_CaptureCallback>
 8005be8:	e005      	b.n	8005bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f9ee 	bl	8005fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f9ff 	bl	8005ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d10e      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d107      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f06f 0201 	mvn.w	r2, #1
 8005c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fb f95e 	bl	8000ee4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c32:	2b80      	cmp	r3, #128	; 0x80
 8005c34:	d10e      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c40:	2b80      	cmp	r3, #128	; 0x80
 8005c42:	d107      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 f84e 	bl	8006cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c62:	d10e      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b80      	cmp	r3, #128	; 0x80
 8005c70:	d107      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 f841 	bl	8006d04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d10e      	bne.n	8005cae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d107      	bne.n	8005cae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f9ad 	bl	8006008 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d10e      	bne.n	8005cda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d107      	bne.n	8005cda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0220 	mvn.w	r2, #32
 8005cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f001 f801 	bl	8006cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ce8:	d10f      	bne.n	8005d0a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cf8:	d107      	bne.n	8005d0a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f001 f807 	bl	8006d18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d18:	d10f      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d28:	d107      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fff9 	bl	8006d2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d48:	d10f      	bne.n	8005d6a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d58:	d107      	bne.n	8005d6a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 ffeb 	bl	8006d40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d78:	d10f      	bne.n	8005d9a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d88:	d107      	bne.n	8005d9a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 ffdd 	bl	8006d54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e0ff      	b.n	8005fc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b14      	cmp	r3, #20
 8005dce:	f200 80f0 	bhi.w	8005fb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005e2d 	.word	0x08005e2d
 8005ddc:	08005fb3 	.word	0x08005fb3
 8005de0:	08005fb3 	.word	0x08005fb3
 8005de4:	08005fb3 	.word	0x08005fb3
 8005de8:	08005e6d 	.word	0x08005e6d
 8005dec:	08005fb3 	.word	0x08005fb3
 8005df0:	08005fb3 	.word	0x08005fb3
 8005df4:	08005fb3 	.word	0x08005fb3
 8005df8:	08005eaf 	.word	0x08005eaf
 8005dfc:	08005fb3 	.word	0x08005fb3
 8005e00:	08005fb3 	.word	0x08005fb3
 8005e04:	08005fb3 	.word	0x08005fb3
 8005e08:	08005eef 	.word	0x08005eef
 8005e0c:	08005fb3 	.word	0x08005fb3
 8005e10:	08005fb3 	.word	0x08005fb3
 8005e14:	08005fb3 	.word	0x08005fb3
 8005e18:	08005f31 	.word	0x08005f31
 8005e1c:	08005fb3 	.word	0x08005fb3
 8005e20:	08005fb3 	.word	0x08005fb3
 8005e24:	08005fb3 	.word	0x08005fb3
 8005e28:	08005f71 	.word	0x08005f71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 f99a 	bl	800616c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0208 	orr.w	r2, r2, #8
 8005e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0204 	bic.w	r2, r2, #4
 8005e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6999      	ldr	r1, [r3, #24]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	619a      	str	r2, [r3, #24]
      break;
 8005e6a:	e0a5      	b.n	8005fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68b9      	ldr	r1, [r7, #8]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fa14 	bl	80062a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699a      	ldr	r2, [r3, #24]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6999      	ldr	r1, [r3, #24]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	021a      	lsls	r2, r3, #8
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	619a      	str	r2, [r3, #24]
      break;
 8005eac:	e084      	b.n	8005fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fa87 	bl	80063c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69da      	ldr	r2, [r3, #28]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0208 	orr.w	r2, r2, #8
 8005ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0204 	bic.w	r2, r2, #4
 8005ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69d9      	ldr	r1, [r3, #28]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	61da      	str	r2, [r3, #28]
      break;
 8005eec:	e064      	b.n	8005fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 faf9 	bl	80064ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69da      	ldr	r2, [r3, #28]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69d9      	ldr	r1, [r3, #28]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	021a      	lsls	r2, r3, #8
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	61da      	str	r2, [r3, #28]
      break;
 8005f2e:	e043      	b.n	8005fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fb6c 	bl	8006614 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0208 	orr.w	r2, r2, #8
 8005f4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0204 	bic.w	r2, r2, #4
 8005f5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005f6e:	e023      	b.n	8005fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68b9      	ldr	r1, [r7, #8]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fbb6 	bl	80066e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f9a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	021a      	lsls	r2, r3, #8
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005fb0:	e002      	b.n	8005fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8005fb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop

08005fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a46      	ldr	r2, [pc, #280]	; (8006148 <TIM_Base_SetConfig+0x12c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d017      	beq.n	8006064 <TIM_Base_SetConfig+0x48>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603a:	d013      	beq.n	8006064 <TIM_Base_SetConfig+0x48>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a43      	ldr	r2, [pc, #268]	; (800614c <TIM_Base_SetConfig+0x130>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00f      	beq.n	8006064 <TIM_Base_SetConfig+0x48>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a42      	ldr	r2, [pc, #264]	; (8006150 <TIM_Base_SetConfig+0x134>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00b      	beq.n	8006064 <TIM_Base_SetConfig+0x48>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a41      	ldr	r2, [pc, #260]	; (8006154 <TIM_Base_SetConfig+0x138>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d007      	beq.n	8006064 <TIM_Base_SetConfig+0x48>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a40      	ldr	r2, [pc, #256]	; (8006158 <TIM_Base_SetConfig+0x13c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d003      	beq.n	8006064 <TIM_Base_SetConfig+0x48>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a3f      	ldr	r2, [pc, #252]	; (800615c <TIM_Base_SetConfig+0x140>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d108      	bne.n	8006076 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a33      	ldr	r2, [pc, #204]	; (8006148 <TIM_Base_SetConfig+0x12c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d023      	beq.n	80060c6 <TIM_Base_SetConfig+0xaa>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006084:	d01f      	beq.n	80060c6 <TIM_Base_SetConfig+0xaa>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a30      	ldr	r2, [pc, #192]	; (800614c <TIM_Base_SetConfig+0x130>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d01b      	beq.n	80060c6 <TIM_Base_SetConfig+0xaa>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a2f      	ldr	r2, [pc, #188]	; (8006150 <TIM_Base_SetConfig+0x134>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d017      	beq.n	80060c6 <TIM_Base_SetConfig+0xaa>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a2e      	ldr	r2, [pc, #184]	; (8006154 <TIM_Base_SetConfig+0x138>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d013      	beq.n	80060c6 <TIM_Base_SetConfig+0xaa>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a2d      	ldr	r2, [pc, #180]	; (8006158 <TIM_Base_SetConfig+0x13c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00f      	beq.n	80060c6 <TIM_Base_SetConfig+0xaa>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <TIM_Base_SetConfig+0x144>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00b      	beq.n	80060c6 <TIM_Base_SetConfig+0xaa>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a2c      	ldr	r2, [pc, #176]	; (8006164 <TIM_Base_SetConfig+0x148>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d007      	beq.n	80060c6 <TIM_Base_SetConfig+0xaa>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a2b      	ldr	r2, [pc, #172]	; (8006168 <TIM_Base_SetConfig+0x14c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_Base_SetConfig+0xaa>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a26      	ldr	r2, [pc, #152]	; (800615c <TIM_Base_SetConfig+0x140>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d108      	bne.n	80060d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a12      	ldr	r2, [pc, #72]	; (8006148 <TIM_Base_SetConfig+0x12c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d013      	beq.n	800612c <TIM_Base_SetConfig+0x110>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a14      	ldr	r2, [pc, #80]	; (8006158 <TIM_Base_SetConfig+0x13c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00f      	beq.n	800612c <TIM_Base_SetConfig+0x110>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a14      	ldr	r2, [pc, #80]	; (8006160 <TIM_Base_SetConfig+0x144>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00b      	beq.n	800612c <TIM_Base_SetConfig+0x110>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a13      	ldr	r2, [pc, #76]	; (8006164 <TIM_Base_SetConfig+0x148>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <TIM_Base_SetConfig+0x110>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a12      	ldr	r2, [pc, #72]	; (8006168 <TIM_Base_SetConfig+0x14c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_Base_SetConfig+0x110>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a0d      	ldr	r2, [pc, #52]	; (800615c <TIM_Base_SetConfig+0x140>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d103      	bne.n	8006134 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	615a      	str	r2, [r3, #20]
}
 800613a:	bf00      	nop
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40012c00 	.word	0x40012c00
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800
 8006154:	40000c00 	.word	0x40000c00
 8006158:	40013400 	.word	0x40013400
 800615c:	40015000 	.word	0x40015000
 8006160:	40014000 	.word	0x40014000
 8006164:	40014400 	.word	0x40014400
 8006168:	40014800 	.word	0x40014800

0800616c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f023 0201 	bic.w	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800619a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0303 	bic.w	r3, r3, #3
 80061a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f023 0302 	bic.w	r3, r3, #2
 80061b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a30      	ldr	r2, [pc, #192]	; (8006288 <TIM_OC1_SetConfig+0x11c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d013      	beq.n	80061f4 <TIM_OC1_SetConfig+0x88>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a2f      	ldr	r2, [pc, #188]	; (800628c <TIM_OC1_SetConfig+0x120>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00f      	beq.n	80061f4 <TIM_OC1_SetConfig+0x88>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a2e      	ldr	r2, [pc, #184]	; (8006290 <TIM_OC1_SetConfig+0x124>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00b      	beq.n	80061f4 <TIM_OC1_SetConfig+0x88>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a2d      	ldr	r2, [pc, #180]	; (8006294 <TIM_OC1_SetConfig+0x128>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d007      	beq.n	80061f4 <TIM_OC1_SetConfig+0x88>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a2c      	ldr	r2, [pc, #176]	; (8006298 <TIM_OC1_SetConfig+0x12c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_OC1_SetConfig+0x88>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a2b      	ldr	r2, [pc, #172]	; (800629c <TIM_OC1_SetConfig+0x130>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d10c      	bne.n	800620e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f023 0308 	bic.w	r3, r3, #8
 80061fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f023 0304 	bic.w	r3, r3, #4
 800620c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a1d      	ldr	r2, [pc, #116]	; (8006288 <TIM_OC1_SetConfig+0x11c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d013      	beq.n	800623e <TIM_OC1_SetConfig+0xd2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a1c      	ldr	r2, [pc, #112]	; (800628c <TIM_OC1_SetConfig+0x120>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00f      	beq.n	800623e <TIM_OC1_SetConfig+0xd2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a1b      	ldr	r2, [pc, #108]	; (8006290 <TIM_OC1_SetConfig+0x124>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00b      	beq.n	800623e <TIM_OC1_SetConfig+0xd2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a1a      	ldr	r2, [pc, #104]	; (8006294 <TIM_OC1_SetConfig+0x128>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d007      	beq.n	800623e <TIM_OC1_SetConfig+0xd2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a19      	ldr	r2, [pc, #100]	; (8006298 <TIM_OC1_SetConfig+0x12c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d003      	beq.n	800623e <TIM_OC1_SetConfig+0xd2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a18      	ldr	r2, [pc, #96]	; (800629c <TIM_OC1_SetConfig+0x130>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d111      	bne.n	8006262 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800624c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	621a      	str	r2, [r3, #32]
}
 800627c:	bf00      	nop
 800627e:	371c      	adds	r7, #28
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	40012c00 	.word	0x40012c00
 800628c:	40013400 	.word	0x40013400
 8006290:	40014000 	.word	0x40014000
 8006294:	40014400 	.word	0x40014400
 8006298:	40014800 	.word	0x40014800
 800629c:	40015000 	.word	0x40015000

080062a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	f023 0210 	bic.w	r2, r3, #16
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	021b      	lsls	r3, r3, #8
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f023 0320 	bic.w	r3, r3, #32
 80062ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a2c      	ldr	r2, [pc, #176]	; (80063b0 <TIM_OC2_SetConfig+0x110>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d007      	beq.n	8006314 <TIM_OC2_SetConfig+0x74>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a2b      	ldr	r2, [pc, #172]	; (80063b4 <TIM_OC2_SetConfig+0x114>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d003      	beq.n	8006314 <TIM_OC2_SetConfig+0x74>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a2a      	ldr	r2, [pc, #168]	; (80063b8 <TIM_OC2_SetConfig+0x118>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d10d      	bne.n	8006330 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800631a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800632e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a1f      	ldr	r2, [pc, #124]	; (80063b0 <TIM_OC2_SetConfig+0x110>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d013      	beq.n	8006360 <TIM_OC2_SetConfig+0xc0>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a1e      	ldr	r2, [pc, #120]	; (80063b4 <TIM_OC2_SetConfig+0x114>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00f      	beq.n	8006360 <TIM_OC2_SetConfig+0xc0>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a1e      	ldr	r2, [pc, #120]	; (80063bc <TIM_OC2_SetConfig+0x11c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00b      	beq.n	8006360 <TIM_OC2_SetConfig+0xc0>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a1d      	ldr	r2, [pc, #116]	; (80063c0 <TIM_OC2_SetConfig+0x120>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d007      	beq.n	8006360 <TIM_OC2_SetConfig+0xc0>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a1c      	ldr	r2, [pc, #112]	; (80063c4 <TIM_OC2_SetConfig+0x124>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_OC2_SetConfig+0xc0>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a17      	ldr	r2, [pc, #92]	; (80063b8 <TIM_OC2_SetConfig+0x118>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d113      	bne.n	8006388 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800636e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	621a      	str	r2, [r3, #32]
}
 80063a2:	bf00      	nop
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	40012c00 	.word	0x40012c00
 80063b4:	40013400 	.word	0x40013400
 80063b8:	40015000 	.word	0x40015000
 80063bc:	40014000 	.word	0x40014000
 80063c0:	40014400 	.word	0x40014400
 80063c4:	40014800 	.word	0x40014800

080063c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 0303 	bic.w	r3, r3, #3
 8006402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a2b      	ldr	r2, [pc, #172]	; (80064d4 <TIM_OC3_SetConfig+0x10c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d007      	beq.n	800643a <TIM_OC3_SetConfig+0x72>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a2a      	ldr	r2, [pc, #168]	; (80064d8 <TIM_OC3_SetConfig+0x110>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d003      	beq.n	800643a <TIM_OC3_SetConfig+0x72>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a29      	ldr	r2, [pc, #164]	; (80064dc <TIM_OC3_SetConfig+0x114>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d10d      	bne.n	8006456 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	021b      	lsls	r3, r3, #8
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a1e      	ldr	r2, [pc, #120]	; (80064d4 <TIM_OC3_SetConfig+0x10c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <TIM_OC3_SetConfig+0xbe>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a1d      	ldr	r2, [pc, #116]	; (80064d8 <TIM_OC3_SetConfig+0x110>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00f      	beq.n	8006486 <TIM_OC3_SetConfig+0xbe>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a1d      	ldr	r2, [pc, #116]	; (80064e0 <TIM_OC3_SetConfig+0x118>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00b      	beq.n	8006486 <TIM_OC3_SetConfig+0xbe>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a1c      	ldr	r2, [pc, #112]	; (80064e4 <TIM_OC3_SetConfig+0x11c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d007      	beq.n	8006486 <TIM_OC3_SetConfig+0xbe>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a1b      	ldr	r2, [pc, #108]	; (80064e8 <TIM_OC3_SetConfig+0x120>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d003      	beq.n	8006486 <TIM_OC3_SetConfig+0xbe>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a16      	ldr	r2, [pc, #88]	; (80064dc <TIM_OC3_SetConfig+0x114>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d113      	bne.n	80064ae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800648c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	4313      	orrs	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	621a      	str	r2, [r3, #32]
}
 80064c8:	bf00      	nop
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	40012c00 	.word	0x40012c00
 80064d8:	40013400 	.word	0x40013400
 80064dc:	40015000 	.word	0x40015000
 80064e0:	40014000 	.word	0x40014000
 80064e4:	40014400 	.word	0x40014400
 80064e8:	40014800 	.word	0x40014800

080064ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800651a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800651e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800653a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	031b      	lsls	r3, r3, #12
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a2c      	ldr	r2, [pc, #176]	; (80065fc <TIM_OC4_SetConfig+0x110>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d007      	beq.n	8006560 <TIM_OC4_SetConfig+0x74>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a2b      	ldr	r2, [pc, #172]	; (8006600 <TIM_OC4_SetConfig+0x114>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_OC4_SetConfig+0x74>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a2a      	ldr	r2, [pc, #168]	; (8006604 <TIM_OC4_SetConfig+0x118>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10d      	bne.n	800657c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	031b      	lsls	r3, r3, #12
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800657a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a1f      	ldr	r2, [pc, #124]	; (80065fc <TIM_OC4_SetConfig+0x110>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d013      	beq.n	80065ac <TIM_OC4_SetConfig+0xc0>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <TIM_OC4_SetConfig+0x114>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00f      	beq.n	80065ac <TIM_OC4_SetConfig+0xc0>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <TIM_OC4_SetConfig+0x11c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00b      	beq.n	80065ac <TIM_OC4_SetConfig+0xc0>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a1d      	ldr	r2, [pc, #116]	; (800660c <TIM_OC4_SetConfig+0x120>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d007      	beq.n	80065ac <TIM_OC4_SetConfig+0xc0>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a1c      	ldr	r2, [pc, #112]	; (8006610 <TIM_OC4_SetConfig+0x124>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_OC4_SetConfig+0xc0>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a17      	ldr	r2, [pc, #92]	; (8006604 <TIM_OC4_SetConfig+0x118>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d113      	bne.n	80065d4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	019b      	lsls	r3, r3, #6
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	019b      	lsls	r3, r3, #6
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40012c00 	.word	0x40012c00
 8006600:	40013400 	.word	0x40013400
 8006604:	40015000 	.word	0x40015000
 8006608:	40014000 	.word	0x40014000
 800660c:	40014400 	.word	0x40014400
 8006610:	40014800 	.word	0x40014800

08006614 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006658:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	041b      	lsls	r3, r3, #16
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a19      	ldr	r2, [pc, #100]	; (80066d0 <TIM_OC5_SetConfig+0xbc>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <TIM_OC5_SetConfig+0x82>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a18      	ldr	r2, [pc, #96]	; (80066d4 <TIM_OC5_SetConfig+0xc0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00f      	beq.n	8006696 <TIM_OC5_SetConfig+0x82>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a17      	ldr	r2, [pc, #92]	; (80066d8 <TIM_OC5_SetConfig+0xc4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00b      	beq.n	8006696 <TIM_OC5_SetConfig+0x82>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a16      	ldr	r2, [pc, #88]	; (80066dc <TIM_OC5_SetConfig+0xc8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d007      	beq.n	8006696 <TIM_OC5_SetConfig+0x82>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <TIM_OC5_SetConfig+0xcc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <TIM_OC5_SetConfig+0x82>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a14      	ldr	r2, [pc, #80]	; (80066e4 <TIM_OC5_SetConfig+0xd0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d109      	bne.n	80066aa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800669c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	621a      	str	r2, [r3, #32]
}
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40012c00 	.word	0x40012c00
 80066d4:	40013400 	.word	0x40013400
 80066d8:	40014000 	.word	0x40014000
 80066dc:	40014400 	.word	0x40014400
 80066e0:	40014800 	.word	0x40014800
 80066e4:	40015000 	.word	0x40015000

080066e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800672e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	051b      	lsls	r3, r3, #20
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a1a      	ldr	r2, [pc, #104]	; (80067a8 <TIM_OC6_SetConfig+0xc0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d013      	beq.n	800676c <TIM_OC6_SetConfig+0x84>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a19      	ldr	r2, [pc, #100]	; (80067ac <TIM_OC6_SetConfig+0xc4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00f      	beq.n	800676c <TIM_OC6_SetConfig+0x84>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a18      	ldr	r2, [pc, #96]	; (80067b0 <TIM_OC6_SetConfig+0xc8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00b      	beq.n	800676c <TIM_OC6_SetConfig+0x84>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a17      	ldr	r2, [pc, #92]	; (80067b4 <TIM_OC6_SetConfig+0xcc>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d007      	beq.n	800676c <TIM_OC6_SetConfig+0x84>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a16      	ldr	r2, [pc, #88]	; (80067b8 <TIM_OC6_SetConfig+0xd0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d003      	beq.n	800676c <TIM_OC6_SetConfig+0x84>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a15      	ldr	r2, [pc, #84]	; (80067bc <TIM_OC6_SetConfig+0xd4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d109      	bne.n	8006780 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006772:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	029b      	lsls	r3, r3, #10
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40013400 	.word	0x40013400
 80067b0:	40014000 	.word	0x40014000
 80067b4:	40014400 	.word	0x40014400
 80067b8:	40014800 	.word	0x40014800
 80067bc:	40015000 	.word	0x40015000

080067c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	2201      	movs	r2, #1
 80067d4:	fa02 f303 	lsl.w	r3, r2, r3
 80067d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1a      	ldr	r2, [r3, #32]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	43db      	mvns	r3, r3
 80067e2:	401a      	ands	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a1a      	ldr	r2, [r3, #32]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	6879      	ldr	r1, [r7, #4]
 80067f4:	fa01 f303 	lsl.w	r3, r1, r3
 80067f8:	431a      	orrs	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	621a      	str	r2, [r3, #32]
}
 80067fe:	bf00      	nop
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
	...

0800680c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d109      	bne.n	8006830 <HAL_TIMEx_PWMN_Start+0x24>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b01      	cmp	r3, #1
 8006826:	bf14      	ite	ne
 8006828:	2301      	movne	r3, #1
 800682a:	2300      	moveq	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	e022      	b.n	8006876 <HAL_TIMEx_PWMN_Start+0x6a>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	2b04      	cmp	r3, #4
 8006834:	d109      	bne.n	800684a <HAL_TIMEx_PWMN_Start+0x3e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b01      	cmp	r3, #1
 8006840:	bf14      	ite	ne
 8006842:	2301      	movne	r3, #1
 8006844:	2300      	moveq	r3, #0
 8006846:	b2db      	uxtb	r3, r3
 8006848:	e015      	b.n	8006876 <HAL_TIMEx_PWMN_Start+0x6a>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b08      	cmp	r3, #8
 800684e:	d109      	bne.n	8006864 <HAL_TIMEx_PWMN_Start+0x58>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b01      	cmp	r3, #1
 800685a:	bf14      	ite	ne
 800685c:	2301      	movne	r3, #1
 800685e:	2300      	moveq	r3, #0
 8006860:	b2db      	uxtb	r3, r3
 8006862:	e008      	b.n	8006876 <HAL_TIMEx_PWMN_Start+0x6a>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	bf14      	ite	ne
 8006870:	2301      	movne	r3, #1
 8006872:	2300      	moveq	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e073      	b.n	8006966 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d104      	bne.n	800688e <HAL_TIMEx_PWMN_Start+0x82>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800688c:	e013      	b.n	80068b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b04      	cmp	r3, #4
 8006892:	d104      	bne.n	800689e <HAL_TIMEx_PWMN_Start+0x92>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800689c:	e00b      	b.n	80068b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d104      	bne.n	80068ae <HAL_TIMEx_PWMN_Start+0xa2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068ac:	e003      	b.n	80068b6 <HAL_TIMEx_PWMN_Start+0xaa>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2202      	movs	r2, #2
 80068b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2204      	movs	r2, #4
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fa52 	bl	8006d68 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a25      	ldr	r2, [pc, #148]	; (8006970 <HAL_TIMEx_PWMN_Start+0x164>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d022      	beq.n	8006924 <HAL_TIMEx_PWMN_Start+0x118>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e6:	d01d      	beq.n	8006924 <HAL_TIMEx_PWMN_Start+0x118>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a21      	ldr	r2, [pc, #132]	; (8006974 <HAL_TIMEx_PWMN_Start+0x168>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d018      	beq.n	8006924 <HAL_TIMEx_PWMN_Start+0x118>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a20      	ldr	r2, [pc, #128]	; (8006978 <HAL_TIMEx_PWMN_Start+0x16c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d013      	beq.n	8006924 <HAL_TIMEx_PWMN_Start+0x118>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1e      	ldr	r2, [pc, #120]	; (800697c <HAL_TIMEx_PWMN_Start+0x170>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00e      	beq.n	8006924 <HAL_TIMEx_PWMN_Start+0x118>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a1d      	ldr	r2, [pc, #116]	; (8006980 <HAL_TIMEx_PWMN_Start+0x174>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d009      	beq.n	8006924 <HAL_TIMEx_PWMN_Start+0x118>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a1b      	ldr	r2, [pc, #108]	; (8006984 <HAL_TIMEx_PWMN_Start+0x178>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d004      	beq.n	8006924 <HAL_TIMEx_PWMN_Start+0x118>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a1a      	ldr	r2, [pc, #104]	; (8006988 <HAL_TIMEx_PWMN_Start+0x17c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d115      	bne.n	8006950 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	4b18      	ldr	r3, [pc, #96]	; (800698c <HAL_TIMEx_PWMN_Start+0x180>)
 800692c:	4013      	ands	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b06      	cmp	r3, #6
 8006934:	d015      	beq.n	8006962 <HAL_TIMEx_PWMN_Start+0x156>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800693c:	d011      	beq.n	8006962 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f042 0201 	orr.w	r2, r2, #1
 800694c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694e:	e008      	b.n	8006962 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	e000      	b.n	8006964 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006962:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	40012c00 	.word	0x40012c00
 8006974:	40000400 	.word	0x40000400
 8006978:	40000800 	.word	0x40000800
 800697c:	40000c00 	.word	0x40000c00
 8006980:	40013400 	.word	0x40013400
 8006984:	40014000 	.word	0x40014000
 8006988:	40015000 	.word	0x40015000
 800698c:	00010007 	.word	0x00010007

08006990 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2200      	movs	r2, #0
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 f9e0 	bl	8006d68 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6a1a      	ldr	r2, [r3, #32]
 80069ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80069b2:	4013      	ands	r3, r2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10f      	bne.n	80069d8 <HAL_TIMEx_PWMN_Stop+0x48>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6a1a      	ldr	r2, [r3, #32]
 80069be:	f244 4344 	movw	r3, #17476	; 0x4444
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d107      	bne.n	80069d8 <HAL_TIMEx_PWMN_Stop+0x48>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	f241 1311 	movw	r3, #4369	; 0x1111
 80069e2:	4013      	ands	r3, r2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10f      	bne.n	8006a08 <HAL_TIMEx_PWMN_Stop+0x78>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6a1a      	ldr	r2, [r3, #32]
 80069ee:	f244 4344 	movw	r3, #17476	; 0x4444
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d107      	bne.n	8006a08 <HAL_TIMEx_PWMN_Stop+0x78>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0201 	bic.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d104      	bne.n	8006a18 <HAL_TIMEx_PWMN_Stop+0x88>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a16:	e013      	b.n	8006a40 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d104      	bne.n	8006a28 <HAL_TIMEx_PWMN_Stop+0x98>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a26:	e00b      	b.n	8006a40 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b08      	cmp	r3, #8
 8006a2c:	d104      	bne.n	8006a38 <HAL_TIMEx_PWMN_Stop+0xa8>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a36:	e003      	b.n	8006a40 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e074      	b.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a34      	ldr	r2, [pc, #208]	; (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d009      	beq.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a33      	ldr	r2, [pc, #204]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d004      	beq.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a31      	ldr	r2, [pc, #196]	; (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d108      	bne.n	8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006aa8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a21      	ldr	r2, [pc, #132]	; (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d022      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae4:	d01d      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a1f      	ldr	r2, [pc, #124]	; (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d018      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a1d      	ldr	r2, [pc, #116]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d013      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a1c      	ldr	r2, [pc, #112]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00e      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a15      	ldr	r2, [pc, #84]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d009      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a18      	ldr	r2, [pc, #96]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d004      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a11      	ldr	r2, [pc, #68]	; (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d10c      	bne.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40012c00 	.word	0x40012c00
 8006b60:	40013400 	.word	0x40013400
 8006b64:	40015000 	.word	0x40015000
 8006b68:	40000400 	.word	0x40000400
 8006b6c:	40000800 	.word	0x40000800
 8006b70:	40000c00 	.word	0x40000c00
 8006b74:	40014000 	.word	0x40014000

08006b78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e096      	b.n	8006cc2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	041b      	lsls	r3, r3, #16
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a2f      	ldr	r2, [pc, #188]	; (8006cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d009      	beq.n	8006c2c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a2d      	ldr	r2, [pc, #180]	; (8006cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d004      	beq.n	8006c2c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a2c      	ldr	r2, [pc, #176]	; (8006cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d106      	bne.n	8006c3a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a24      	ldr	r2, [pc, #144]	; (8006cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d009      	beq.n	8006c58 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a22      	ldr	r2, [pc, #136]	; (8006cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d004      	beq.n	8006c58 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a21      	ldr	r2, [pc, #132]	; (8006cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d12b      	bne.n	8006cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c62:	051b      	lsls	r3, r3, #20
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a11      	ldr	r2, [pc, #68]	; (8006cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d009      	beq.n	8006ca2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a10      	ldr	r2, [pc, #64]	; (8006cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d004      	beq.n	8006ca2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a0e      	ldr	r2, [pc, #56]	; (8006cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d106      	bne.n	8006cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	40012c00 	.word	0x40012c00
 8006cd4:	40013400 	.word	0x40013400
 8006cd8:	40015000 	.word	0x40015000

08006cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f003 031f 	and.w	r3, r3, #31
 8006d7a:	2204      	movs	r2, #4
 8006d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6a1a      	ldr	r2, [r3, #32]
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	43db      	mvns	r3, r3
 8006d8a:	401a      	ands	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a1a      	ldr	r2, [r3, #32]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	6879      	ldr	r1, [r7, #4]
 8006d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006da0:	431a      	orrs	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	621a      	str	r2, [r3, #32]
}
 8006da6:	bf00      	nop
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e042      	b.n	8006e4a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fa fe42 	bl	8001a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2224      	movs	r2, #36	; 0x24
 8006de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0201 	bic.w	r2, r2, #1
 8006df2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fc51 	bl	800769c <UART_SetConfig>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e022      	b.n	8006e4a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 ff41 	bl	8007c94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f042 0201 	orr.w	r2, r2, #1
 8006e40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 ffc8 	bl	8007dd8 <UART_CheckIdleState>
 8006e48:	4603      	mov	r3, r0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b08a      	sub	sp, #40	; 0x28
 8006e56:	af02      	add	r7, sp, #8
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	603b      	str	r3, [r7, #0]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	f040 8083 	bne.w	8006f74 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <HAL_UART_Transmit+0x28>
 8006e74:	88fb      	ldrh	r3, [r7, #6]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e07b      	b.n	8006f76 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d101      	bne.n	8006e8c <HAL_UART_Transmit+0x3a>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e074      	b.n	8006f76 <HAL_UART_Transmit+0x124>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2221      	movs	r2, #33	; 0x21
 8006ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ea4:	f7fa fed0 	bl	8001c48 <HAL_GetTick>
 8006ea8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	88fa      	ldrh	r2, [r7, #6]
 8006eae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	88fa      	ldrh	r2, [r7, #6]
 8006eb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec2:	d108      	bne.n	8006ed6 <HAL_UART_Transmit+0x84>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d104      	bne.n	8006ed6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	61bb      	str	r3, [r7, #24]
 8006ed4:	e003      	b.n	8006ede <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006ee6:	e02c      	b.n	8006f42 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2180      	movs	r1, #128	; 0x80
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 ffbb 	bl	8007e6e <UART_WaitOnFlagUntilTimeout>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e039      	b.n	8006f76 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10b      	bne.n	8006f20 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	3302      	adds	r3, #2
 8006f1c:	61bb      	str	r3, [r7, #24]
 8006f1e:	e007      	b.n	8006f30 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	781a      	ldrb	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1cc      	bne.n	8006ee8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2200      	movs	r2, #0
 8006f56:	2140      	movs	r1, #64	; 0x40
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 ff88 	bl	8007e6e <UART_WaitOnFlagUntilTimeout>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e006      	b.n	8006f76 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	e000      	b.n	8006f76 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006f74:	2302      	movs	r3, #2
  }
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3720      	adds	r7, #32
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08a      	sub	sp, #40	; 0x28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d142      	bne.n	800701e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <HAL_UART_Receive_IT+0x24>
 8006f9e:	88fb      	ldrh	r3, [r7, #6]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e03b      	b.n	8007020 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d101      	bne.n	8006fb6 <HAL_UART_Receive_IT+0x36>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e034      	b.n	8007020 <HAL_UART_Receive_IT+0xa0>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a17      	ldr	r2, [pc, #92]	; (8007028 <HAL_UART_Receive_IT+0xa8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d01f      	beq.n	800700e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d018      	beq.n	800700e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	623b      	str	r3, [r7, #32]
 8006ffc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	69f9      	ldr	r1, [r7, #28]
 8007000:	6a3a      	ldr	r2, [r7, #32]
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	61bb      	str	r3, [r7, #24]
   return(result);
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e6      	bne.n	8006fdc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800700e:	88fb      	ldrh	r3, [r7, #6]
 8007010:	461a      	mov	r2, r3
 8007012:	68b9      	ldr	r1, [r7, #8]
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 fff3 	bl	8008000 <UART_Start_Receive_IT>
 800701a:	4603      	mov	r3, r0
 800701c:	e000      	b.n	8007020 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800701e:	2302      	movs	r3, #2
  }
}
 8007020:	4618      	mov	r0, r3
 8007022:	3728      	adds	r7, #40	; 0x28
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40008000 	.word	0x40008000

0800702c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b0ba      	sub	sp, #232	; 0xe8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007052:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007056:	f640 030f 	movw	r3, #2063	; 0x80f
 800705a:	4013      	ands	r3, r2
 800705c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d11b      	bne.n	80070a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800706c:	f003 0320 	and.w	r3, r3, #32
 8007070:	2b00      	cmp	r3, #0
 8007072:	d015      	beq.n	80070a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b00      	cmp	r3, #0
 800707e:	d105      	bne.n	800708c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d009      	beq.n	80070a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 82d6 	beq.w	8007642 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
      }
      return;
 800709e:	e2d0      	b.n	8007642 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 811f 	beq.w	80072e8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80070aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80070ae:	4b8b      	ldr	r3, [pc, #556]	; (80072dc <HAL_UART_IRQHandler+0x2b0>)
 80070b0:	4013      	ands	r3, r2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d106      	bne.n	80070c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80070b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80070ba:	4b89      	ldr	r3, [pc, #548]	; (80072e0 <HAL_UART_IRQHandler+0x2b4>)
 80070bc:	4013      	ands	r3, r2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 8112 	beq.w	80072e8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d011      	beq.n	80070f4 <HAL_UART_IRQHandler+0xc8>
 80070d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2201      	movs	r2, #1
 80070e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ea:	f043 0201 	orr.w	r2, r3, #1
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d011      	beq.n	8007124 <HAL_UART_IRQHandler+0xf8>
 8007100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00b      	beq.n	8007124 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2202      	movs	r2, #2
 8007112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800711a:	f043 0204 	orr.w	r2, r3, #4
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d011      	beq.n	8007154 <HAL_UART_IRQHandler+0x128>
 8007130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2204      	movs	r2, #4
 8007142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800714a:	f043 0202 	orr.w	r2, r3, #2
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007158:	f003 0308 	and.w	r3, r3, #8
 800715c:	2b00      	cmp	r3, #0
 800715e:	d017      	beq.n	8007190 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007164:	f003 0320 	and.w	r3, r3, #32
 8007168:	2b00      	cmp	r3, #0
 800716a:	d105      	bne.n	8007178 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800716c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007170:	4b5a      	ldr	r3, [pc, #360]	; (80072dc <HAL_UART_IRQHandler+0x2b0>)
 8007172:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2208      	movs	r2, #8
 800717e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007186:	f043 0208 	orr.w	r2, r3, #8
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007198:	2b00      	cmp	r3, #0
 800719a:	d012      	beq.n	80071c2 <HAL_UART_IRQHandler+0x196>
 800719c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00c      	beq.n	80071c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b8:	f043 0220 	orr.w	r2, r3, #32
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 823c 	beq.w	8007646 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d013      	beq.n	8007202 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071de:	f003 0320 	and.w	r3, r3, #32
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d105      	bne.n	80071f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d007      	beq.n	8007202 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007216:	2b40      	cmp	r3, #64	; 0x40
 8007218:	d005      	beq.n	8007226 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800721a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800721e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007222:	2b00      	cmp	r3, #0
 8007224:	d04f      	beq.n	80072c6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 f814 	bl	8008254 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007236:	2b40      	cmp	r3, #64	; 0x40
 8007238:	d141      	bne.n	80072be <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3308      	adds	r3, #8
 8007240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007266:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800726a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800727e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1d9      	bne.n	800723a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d013      	beq.n	80072b6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007292:	4a14      	ldr	r2, [pc, #80]	; (80072e4 <HAL_UART_IRQHandler+0x2b8>)
 8007294:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800729a:	4618      	mov	r0, r3
 800729c:	f7fc fba2 	bl	80039e4 <HAL_DMA_Abort_IT>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d017      	beq.n	80072d6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80072b0:	4610      	mov	r0, r2
 80072b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b4:	e00f      	b.n	80072d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f9da 	bl	8007670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072bc:	e00b      	b.n	80072d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f9d6 	bl	8007670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c4:	e007      	b.n	80072d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f9d2 	bl	8007670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80072d4:	e1b7      	b.n	8007646 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d6:	bf00      	nop
    return;
 80072d8:	e1b5      	b.n	8007646 <HAL_UART_IRQHandler+0x61a>
 80072da:	bf00      	nop
 80072dc:	10000001 	.word	0x10000001
 80072e0:	04000120 	.word	0x04000120
 80072e4:	08008321 	.word	0x08008321

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	f040 814a 	bne.w	8007586 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f6:	f003 0310 	and.w	r3, r3, #16
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 8143 	beq.w	8007586 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007304:	f003 0310 	and.w	r3, r3, #16
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 813c 	beq.w	8007586 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2210      	movs	r2, #16
 8007314:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b40      	cmp	r3, #64	; 0x40
 8007322:	f040 80b5 	bne.w	8007490 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007332:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 8187 	beq.w	800764a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007346:	429a      	cmp	r2, r3
 8007348:	f080 817f 	bcs.w	800764a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007352:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0320 	and.w	r3, r3, #32
 8007362:	2b00      	cmp	r3, #0
 8007364:	f040 8086 	bne.w	8007474 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800737c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007384:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007392:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007396:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800739e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1da      	bne.n	8007368 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3308      	adds	r3, #8
 80073b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073c4:	f023 0301 	bic.w	r3, r3, #1
 80073c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3308      	adds	r3, #8
 80073d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e1      	bne.n	80073b2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3308      	adds	r3, #8
 80073f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007412:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007414:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007418:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e3      	bne.n	80073ee <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2220      	movs	r2, #32
 800742a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007444:	f023 0310 	bic.w	r3, r3, #16
 8007448:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007456:	65bb      	str	r3, [r7, #88]	; 0x58
 8007458:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800745c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e4      	bne.n	8007434 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800746e:	4618      	mov	r0, r3
 8007470:	f7fc fa5f 	bl	8003932 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007480:	b29b      	uxth	r3, r3
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	b29b      	uxth	r3, r3
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f8fb 	bl	8007684 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800748e:	e0dc      	b.n	800764a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800749c:	b29b      	uxth	r3, r3
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 80ce 	beq.w	800764e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80074b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 80c9 	beq.w	800764e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074de:	647b      	str	r3, [r7, #68]	; 0x44
 80074e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e4      	bne.n	80074bc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3308      	adds	r3, #8
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	623b      	str	r3, [r7, #32]
   return(result);
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007508:	f023 0301 	bic.w	r3, r3, #1
 800750c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3308      	adds	r3, #8
 8007516:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800751a:	633a      	str	r2, [r7, #48]	; 0x30
 800751c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e1      	bne.n	80074f2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0310 	bic.w	r3, r3, #16
 8007556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	69b9      	ldr	r1, [r7, #24]
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	e841 2300 	strex	r3, r2, [r1]
 8007570:	617b      	str	r3, [r7, #20]
   return(result);
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e4      	bne.n	8007542 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f880 	bl	8007684 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007584:	e063      	b.n	800764e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00e      	beq.n	80075b0 <HAL_UART_IRQHandler+0x584>
 8007592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d008      	beq.n	80075b0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80075a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 fb57 	bl	8008c5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075ae:	e051      	b.n	8007654 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80075b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d014      	beq.n	80075e6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80075bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d105      	bne.n	80075d4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80075c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d008      	beq.n	80075e6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d03a      	beq.n	8007652 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	4798      	blx	r3
    }
    return;
 80075e4:	e035      	b.n	8007652 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d009      	beq.n	8007606 <HAL_UART_IRQHandler+0x5da>
 80075f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fea4 	bl	800834c <UART_EndTransmit_IT>
    return;
 8007604:	e026      	b.n	8007654 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d009      	beq.n	8007626 <HAL_UART_IRQHandler+0x5fa>
 8007612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007616:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f001 fb30 	bl	8008c84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007624:	e016      	b.n	8007654 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d010      	beq.n	8007654 <HAL_UART_IRQHandler+0x628>
 8007632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007636:	2b00      	cmp	r3, #0
 8007638:	da0c      	bge.n	8007654 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 fb18 	bl	8008c70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007640:	e008      	b.n	8007654 <HAL_UART_IRQHandler+0x628>
      return;
 8007642:	bf00      	nop
 8007644:	e006      	b.n	8007654 <HAL_UART_IRQHandler+0x628>
    return;
 8007646:	bf00      	nop
 8007648:	e004      	b.n	8007654 <HAL_UART_IRQHandler+0x628>
      return;
 800764a:	bf00      	nop
 800764c:	e002      	b.n	8007654 <HAL_UART_IRQHandler+0x628>
      return;
 800764e:	bf00      	nop
 8007650:	e000      	b.n	8007654 <HAL_UART_IRQHandler+0x628>
    return;
 8007652:	bf00      	nop
  }
}
 8007654:	37e8      	adds	r7, #232	; 0xe8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop

0800765c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800769c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076a0:	b08c      	sub	sp, #48	; 0x30
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	431a      	orrs	r2, r3
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	4baa      	ldr	r3, [pc, #680]	; (8007974 <UART_SetConfig+0x2d8>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	6812      	ldr	r2, [r2, #0]
 80076d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a9f      	ldr	r2, [pc, #636]	; (8007978 <UART_SetConfig+0x2dc>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d004      	beq.n	8007708 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007704:	4313      	orrs	r3, r2
 8007706:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007712:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800771c:	430b      	orrs	r3, r1
 800771e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	f023 010f 	bic.w	r1, r3, #15
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a90      	ldr	r2, [pc, #576]	; (800797c <UART_SetConfig+0x2e0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d125      	bne.n	800778c <UART_SetConfig+0xf0>
 8007740:	4b8f      	ldr	r3, [pc, #572]	; (8007980 <UART_SetConfig+0x2e4>)
 8007742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007746:	f003 0303 	and.w	r3, r3, #3
 800774a:	2b03      	cmp	r3, #3
 800774c:	d81a      	bhi.n	8007784 <UART_SetConfig+0xe8>
 800774e:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <UART_SetConfig+0xb8>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	08007765 	.word	0x08007765
 8007758:	08007775 	.word	0x08007775
 800775c:	0800776d 	.word	0x0800776d
 8007760:	0800777d 	.word	0x0800777d
 8007764:	2301      	movs	r3, #1
 8007766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800776a:	e116      	b.n	800799a <UART_SetConfig+0x2fe>
 800776c:	2302      	movs	r3, #2
 800776e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007772:	e112      	b.n	800799a <UART_SetConfig+0x2fe>
 8007774:	2304      	movs	r3, #4
 8007776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800777a:	e10e      	b.n	800799a <UART_SetConfig+0x2fe>
 800777c:	2308      	movs	r3, #8
 800777e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007782:	e10a      	b.n	800799a <UART_SetConfig+0x2fe>
 8007784:	2310      	movs	r3, #16
 8007786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800778a:	e106      	b.n	800799a <UART_SetConfig+0x2fe>
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a7c      	ldr	r2, [pc, #496]	; (8007984 <UART_SetConfig+0x2e8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d138      	bne.n	8007808 <UART_SetConfig+0x16c>
 8007796:	4b7a      	ldr	r3, [pc, #488]	; (8007980 <UART_SetConfig+0x2e4>)
 8007798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800779c:	f003 030c 	and.w	r3, r3, #12
 80077a0:	2b0c      	cmp	r3, #12
 80077a2:	d82d      	bhi.n	8007800 <UART_SetConfig+0x164>
 80077a4:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <UART_SetConfig+0x110>)
 80077a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077aa:	bf00      	nop
 80077ac:	080077e1 	.word	0x080077e1
 80077b0:	08007801 	.word	0x08007801
 80077b4:	08007801 	.word	0x08007801
 80077b8:	08007801 	.word	0x08007801
 80077bc:	080077f1 	.word	0x080077f1
 80077c0:	08007801 	.word	0x08007801
 80077c4:	08007801 	.word	0x08007801
 80077c8:	08007801 	.word	0x08007801
 80077cc:	080077e9 	.word	0x080077e9
 80077d0:	08007801 	.word	0x08007801
 80077d4:	08007801 	.word	0x08007801
 80077d8:	08007801 	.word	0x08007801
 80077dc:	080077f9 	.word	0x080077f9
 80077e0:	2300      	movs	r3, #0
 80077e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077e6:	e0d8      	b.n	800799a <UART_SetConfig+0x2fe>
 80077e8:	2302      	movs	r3, #2
 80077ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ee:	e0d4      	b.n	800799a <UART_SetConfig+0x2fe>
 80077f0:	2304      	movs	r3, #4
 80077f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077f6:	e0d0      	b.n	800799a <UART_SetConfig+0x2fe>
 80077f8:	2308      	movs	r3, #8
 80077fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077fe:	e0cc      	b.n	800799a <UART_SetConfig+0x2fe>
 8007800:	2310      	movs	r3, #16
 8007802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007806:	e0c8      	b.n	800799a <UART_SetConfig+0x2fe>
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a5e      	ldr	r2, [pc, #376]	; (8007988 <UART_SetConfig+0x2ec>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d125      	bne.n	800785e <UART_SetConfig+0x1c2>
 8007812:	4b5b      	ldr	r3, [pc, #364]	; (8007980 <UART_SetConfig+0x2e4>)
 8007814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007818:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800781c:	2b30      	cmp	r3, #48	; 0x30
 800781e:	d016      	beq.n	800784e <UART_SetConfig+0x1b2>
 8007820:	2b30      	cmp	r3, #48	; 0x30
 8007822:	d818      	bhi.n	8007856 <UART_SetConfig+0x1ba>
 8007824:	2b20      	cmp	r3, #32
 8007826:	d00a      	beq.n	800783e <UART_SetConfig+0x1a2>
 8007828:	2b20      	cmp	r3, #32
 800782a:	d814      	bhi.n	8007856 <UART_SetConfig+0x1ba>
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <UART_SetConfig+0x19a>
 8007830:	2b10      	cmp	r3, #16
 8007832:	d008      	beq.n	8007846 <UART_SetConfig+0x1aa>
 8007834:	e00f      	b.n	8007856 <UART_SetConfig+0x1ba>
 8007836:	2300      	movs	r3, #0
 8007838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800783c:	e0ad      	b.n	800799a <UART_SetConfig+0x2fe>
 800783e:	2302      	movs	r3, #2
 8007840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007844:	e0a9      	b.n	800799a <UART_SetConfig+0x2fe>
 8007846:	2304      	movs	r3, #4
 8007848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800784c:	e0a5      	b.n	800799a <UART_SetConfig+0x2fe>
 800784e:	2308      	movs	r3, #8
 8007850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007854:	e0a1      	b.n	800799a <UART_SetConfig+0x2fe>
 8007856:	2310      	movs	r3, #16
 8007858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800785c:	e09d      	b.n	800799a <UART_SetConfig+0x2fe>
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a4a      	ldr	r2, [pc, #296]	; (800798c <UART_SetConfig+0x2f0>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d125      	bne.n	80078b4 <UART_SetConfig+0x218>
 8007868:	4b45      	ldr	r3, [pc, #276]	; (8007980 <UART_SetConfig+0x2e4>)
 800786a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007872:	2bc0      	cmp	r3, #192	; 0xc0
 8007874:	d016      	beq.n	80078a4 <UART_SetConfig+0x208>
 8007876:	2bc0      	cmp	r3, #192	; 0xc0
 8007878:	d818      	bhi.n	80078ac <UART_SetConfig+0x210>
 800787a:	2b80      	cmp	r3, #128	; 0x80
 800787c:	d00a      	beq.n	8007894 <UART_SetConfig+0x1f8>
 800787e:	2b80      	cmp	r3, #128	; 0x80
 8007880:	d814      	bhi.n	80078ac <UART_SetConfig+0x210>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <UART_SetConfig+0x1f0>
 8007886:	2b40      	cmp	r3, #64	; 0x40
 8007888:	d008      	beq.n	800789c <UART_SetConfig+0x200>
 800788a:	e00f      	b.n	80078ac <UART_SetConfig+0x210>
 800788c:	2300      	movs	r3, #0
 800788e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007892:	e082      	b.n	800799a <UART_SetConfig+0x2fe>
 8007894:	2302      	movs	r3, #2
 8007896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800789a:	e07e      	b.n	800799a <UART_SetConfig+0x2fe>
 800789c:	2304      	movs	r3, #4
 800789e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078a2:	e07a      	b.n	800799a <UART_SetConfig+0x2fe>
 80078a4:	2308      	movs	r3, #8
 80078a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078aa:	e076      	b.n	800799a <UART_SetConfig+0x2fe>
 80078ac:	2310      	movs	r3, #16
 80078ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078b2:	e072      	b.n	800799a <UART_SetConfig+0x2fe>
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a35      	ldr	r2, [pc, #212]	; (8007990 <UART_SetConfig+0x2f4>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d12a      	bne.n	8007914 <UART_SetConfig+0x278>
 80078be:	4b30      	ldr	r3, [pc, #192]	; (8007980 <UART_SetConfig+0x2e4>)
 80078c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078cc:	d01a      	beq.n	8007904 <UART_SetConfig+0x268>
 80078ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078d2:	d81b      	bhi.n	800790c <UART_SetConfig+0x270>
 80078d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078d8:	d00c      	beq.n	80078f4 <UART_SetConfig+0x258>
 80078da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078de:	d815      	bhi.n	800790c <UART_SetConfig+0x270>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <UART_SetConfig+0x250>
 80078e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e8:	d008      	beq.n	80078fc <UART_SetConfig+0x260>
 80078ea:	e00f      	b.n	800790c <UART_SetConfig+0x270>
 80078ec:	2300      	movs	r3, #0
 80078ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078f2:	e052      	b.n	800799a <UART_SetConfig+0x2fe>
 80078f4:	2302      	movs	r3, #2
 80078f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078fa:	e04e      	b.n	800799a <UART_SetConfig+0x2fe>
 80078fc:	2304      	movs	r3, #4
 80078fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007902:	e04a      	b.n	800799a <UART_SetConfig+0x2fe>
 8007904:	2308      	movs	r3, #8
 8007906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800790a:	e046      	b.n	800799a <UART_SetConfig+0x2fe>
 800790c:	2310      	movs	r3, #16
 800790e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007912:	e042      	b.n	800799a <UART_SetConfig+0x2fe>
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a17      	ldr	r2, [pc, #92]	; (8007978 <UART_SetConfig+0x2dc>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d13a      	bne.n	8007994 <UART_SetConfig+0x2f8>
 800791e:	4b18      	ldr	r3, [pc, #96]	; (8007980 <UART_SetConfig+0x2e4>)
 8007920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007924:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007928:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800792c:	d01a      	beq.n	8007964 <UART_SetConfig+0x2c8>
 800792e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007932:	d81b      	bhi.n	800796c <UART_SetConfig+0x2d0>
 8007934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007938:	d00c      	beq.n	8007954 <UART_SetConfig+0x2b8>
 800793a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800793e:	d815      	bhi.n	800796c <UART_SetConfig+0x2d0>
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <UART_SetConfig+0x2b0>
 8007944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007948:	d008      	beq.n	800795c <UART_SetConfig+0x2c0>
 800794a:	e00f      	b.n	800796c <UART_SetConfig+0x2d0>
 800794c:	2300      	movs	r3, #0
 800794e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007952:	e022      	b.n	800799a <UART_SetConfig+0x2fe>
 8007954:	2302      	movs	r3, #2
 8007956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800795a:	e01e      	b.n	800799a <UART_SetConfig+0x2fe>
 800795c:	2304      	movs	r3, #4
 800795e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007962:	e01a      	b.n	800799a <UART_SetConfig+0x2fe>
 8007964:	2308      	movs	r3, #8
 8007966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800796a:	e016      	b.n	800799a <UART_SetConfig+0x2fe>
 800796c:	2310      	movs	r3, #16
 800796e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007972:	e012      	b.n	800799a <UART_SetConfig+0x2fe>
 8007974:	cfff69f3 	.word	0xcfff69f3
 8007978:	40008000 	.word	0x40008000
 800797c:	40013800 	.word	0x40013800
 8007980:	40021000 	.word	0x40021000
 8007984:	40004400 	.word	0x40004400
 8007988:	40004800 	.word	0x40004800
 800798c:	40004c00 	.word	0x40004c00
 8007990:	40005000 	.word	0x40005000
 8007994:	2310      	movs	r3, #16
 8007996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4aae      	ldr	r2, [pc, #696]	; (8007c58 <UART_SetConfig+0x5bc>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	f040 8097 	bne.w	8007ad4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079aa:	2b08      	cmp	r3, #8
 80079ac:	d823      	bhi.n	80079f6 <UART_SetConfig+0x35a>
 80079ae:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <UART_SetConfig+0x318>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	080079d9 	.word	0x080079d9
 80079b8:	080079f7 	.word	0x080079f7
 80079bc:	080079e1 	.word	0x080079e1
 80079c0:	080079f7 	.word	0x080079f7
 80079c4:	080079e7 	.word	0x080079e7
 80079c8:	080079f7 	.word	0x080079f7
 80079cc:	080079f7 	.word	0x080079f7
 80079d0:	080079f7 	.word	0x080079f7
 80079d4:	080079ef 	.word	0x080079ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d8:	f7fd f8ee 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 80079dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079de:	e010      	b.n	8007a02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079e0:	4b9e      	ldr	r3, [pc, #632]	; (8007c5c <UART_SetConfig+0x5c0>)
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079e4:	e00d      	b.n	8007a02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079e6:	f7fd f879 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 80079ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079ec:	e009      	b.n	8007a02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079f4:	e005      	b.n	8007a02 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 8130 	beq.w	8007c6a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	4a94      	ldr	r2, [pc, #592]	; (8007c60 <UART_SetConfig+0x5c4>)
 8007a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a14:	461a      	mov	r2, r3
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	4613      	mov	r3, r2
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	4413      	add	r3, r2
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d305      	bcc.n	8007a3a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d903      	bls.n	8007a42 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007a40:	e113      	b.n	8007c6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	2200      	movs	r2, #0
 8007a46:	60bb      	str	r3, [r7, #8]
 8007a48:	60fa      	str	r2, [r7, #12]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	4a84      	ldr	r2, [pc, #528]	; (8007c60 <UART_SetConfig+0x5c4>)
 8007a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	2200      	movs	r2, #0
 8007a58:	603b      	str	r3, [r7, #0]
 8007a5a:	607a      	str	r2, [r7, #4]
 8007a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a64:	f7f8 fc34 	bl	80002d0 <__aeabi_uldivmod>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	4619      	mov	r1, r3
 8007a70:	f04f 0200 	mov.w	r2, #0
 8007a74:	f04f 0300 	mov.w	r3, #0
 8007a78:	020b      	lsls	r3, r1, #8
 8007a7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a7e:	0202      	lsls	r2, r0, #8
 8007a80:	6979      	ldr	r1, [r7, #20]
 8007a82:	6849      	ldr	r1, [r1, #4]
 8007a84:	0849      	lsrs	r1, r1, #1
 8007a86:	2000      	movs	r0, #0
 8007a88:	460c      	mov	r4, r1
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	eb12 0804 	adds.w	r8, r2, r4
 8007a90:	eb43 0905 	adc.w	r9, r3, r5
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	469a      	mov	sl, r3
 8007a9c:	4693      	mov	fp, r2
 8007a9e:	4652      	mov	r2, sl
 8007aa0:	465b      	mov	r3, fp
 8007aa2:	4640      	mov	r0, r8
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	f7f8 fc13 	bl	80002d0 <__aeabi_uldivmod>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4613      	mov	r3, r2
 8007ab0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ab8:	d308      	bcc.n	8007acc <UART_SetConfig+0x430>
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ac0:	d204      	bcs.n	8007acc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6a3a      	ldr	r2, [r7, #32]
 8007ac8:	60da      	str	r2, [r3, #12]
 8007aca:	e0ce      	b.n	8007c6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ad2:	e0ca      	b.n	8007c6a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007adc:	d166      	bne.n	8007bac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007ade:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ae2:	2b08      	cmp	r3, #8
 8007ae4:	d827      	bhi.n	8007b36 <UART_SetConfig+0x49a>
 8007ae6:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <UART_SetConfig+0x450>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b19 	.word	0x08007b19
 8007af4:	08007b21 	.word	0x08007b21
 8007af8:	08007b37 	.word	0x08007b37
 8007afc:	08007b27 	.word	0x08007b27
 8007b00:	08007b37 	.word	0x08007b37
 8007b04:	08007b37 	.word	0x08007b37
 8007b08:	08007b37 	.word	0x08007b37
 8007b0c:	08007b2f 	.word	0x08007b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b10:	f7fd f852 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8007b14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b16:	e014      	b.n	8007b42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b18:	f7fd f864 	bl	8004be4 <HAL_RCC_GetPCLK2Freq>
 8007b1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b1e:	e010      	b.n	8007b42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b20:	4b4e      	ldr	r3, [pc, #312]	; (8007c5c <UART_SetConfig+0x5c0>)
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b24:	e00d      	b.n	8007b42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b26:	f7fc ffd9 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8007b2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b2c:	e009      	b.n	8007b42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b34:	e005      	b.n	8007b42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007b40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 8090 	beq.w	8007c6a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	4a44      	ldr	r2, [pc, #272]	; (8007c60 <UART_SetConfig+0x5c4>)
 8007b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b54:	461a      	mov	r2, r3
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b5c:	005a      	lsls	r2, r3, #1
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	085b      	lsrs	r3, r3, #1
 8007b64:	441a      	add	r2, r3
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	2b0f      	cmp	r3, #15
 8007b74:	d916      	bls.n	8007ba4 <UART_SetConfig+0x508>
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b7c:	d212      	bcs.n	8007ba4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f023 030f 	bic.w	r3, r3, #15
 8007b86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	085b      	lsrs	r3, r3, #1
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	8bfb      	ldrh	r3, [r7, #30]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	8bfa      	ldrh	r2, [r7, #30]
 8007ba0:	60da      	str	r2, [r3, #12]
 8007ba2:	e062      	b.n	8007c6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007baa:	e05e      	b.n	8007c6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bb0:	2b08      	cmp	r3, #8
 8007bb2:	d828      	bhi.n	8007c06 <UART_SetConfig+0x56a>
 8007bb4:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <UART_SetConfig+0x520>)
 8007bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bba:	bf00      	nop
 8007bbc:	08007be1 	.word	0x08007be1
 8007bc0:	08007be9 	.word	0x08007be9
 8007bc4:	08007bf1 	.word	0x08007bf1
 8007bc8:	08007c07 	.word	0x08007c07
 8007bcc:	08007bf7 	.word	0x08007bf7
 8007bd0:	08007c07 	.word	0x08007c07
 8007bd4:	08007c07 	.word	0x08007c07
 8007bd8:	08007c07 	.word	0x08007c07
 8007bdc:	08007bff 	.word	0x08007bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007be0:	f7fc ffea 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8007be4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007be6:	e014      	b.n	8007c12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007be8:	f7fc fffc 	bl	8004be4 <HAL_RCC_GetPCLK2Freq>
 8007bec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bee:	e010      	b.n	8007c12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bf0:	4b1a      	ldr	r3, [pc, #104]	; (8007c5c <UART_SetConfig+0x5c0>)
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bf4:	e00d      	b.n	8007c12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bf6:	f7fc ff71 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8007bfa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bfc:	e009      	b.n	8007c12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c04:	e005      	b.n	8007c12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007c10:	bf00      	nop
    }

    if (pclk != 0U)
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d028      	beq.n	8007c6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	4a10      	ldr	r2, [pc, #64]	; (8007c60 <UART_SetConfig+0x5c4>)
 8007c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c22:	461a      	mov	r2, r3
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	085b      	lsrs	r3, r3, #1
 8007c30:	441a      	add	r2, r3
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	2b0f      	cmp	r3, #15
 8007c40:	d910      	bls.n	8007c64 <UART_SetConfig+0x5c8>
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c48:	d20c      	bcs.n	8007c64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	60da      	str	r2, [r3, #12]
 8007c54:	e009      	b.n	8007c6a <UART_SetConfig+0x5ce>
 8007c56:	bf00      	nop
 8007c58:	40008000 	.word	0x40008000
 8007c5c:	00f42400 	.word	0x00f42400
 8007c60:	08009ac4 	.word	0x08009ac4
      }
      else
      {
        ret = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2200      	movs	r2, #0
 8007c84:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007c86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3730      	adds	r7, #48	; 0x30
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00a      	beq.n	8007cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00a      	beq.n	8007ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d06:	f003 0308 	and.w	r3, r3, #8
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d28:	f003 0310 	and.w	r3, r3, #16
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d01a      	beq.n	8007daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d92:	d10a      	bne.n	8007daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	605a      	str	r2, [r3, #4]
  }
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af02      	add	r7, sp, #8
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007de8:	f7f9 ff2e 	bl	8001c48 <HAL_GetTick>
 8007dec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0308 	and.w	r3, r3, #8
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d10e      	bne.n	8007e1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f82f 	bl	8007e6e <UART_WaitOnFlagUntilTimeout>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e025      	b.n	8007e66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d10e      	bne.n	8007e46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f819 	bl	8007e6e <UART_WaitOnFlagUntilTimeout>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e00f      	b.n	8007e66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b09c      	sub	sp, #112	; 0x70
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	603b      	str	r3, [r7, #0]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e7e:	e0a9      	b.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e86:	f000 80a5 	beq.w	8007fd4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e8a:	f7f9 fedd 	bl	8001c48 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d302      	bcc.n	8007ea0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d140      	bne.n	8007f22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ea8:	e853 3f00 	ldrex	r3, [r3]
 8007eac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007eb4:	667b      	str	r3, [r7, #100]	; 0x64
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ec0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ec4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e6      	bne.n	8007ea0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	f023 0301 	bic.w	r3, r3, #1
 8007ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ef2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ef4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007efa:	e841 2300 	strex	r3, r2, [r1]
 8007efe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e5      	bne.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2220      	movs	r2, #32
 8007f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e069      	b.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d051      	beq.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f3e:	d149      	bne.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f68:	637b      	str	r3, [r7, #52]	; 0x34
 8007f6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e6      	bne.n	8007f4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3308      	adds	r3, #8
 8007f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f023 0301 	bic.w	r3, r3, #1
 8007f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3308      	adds	r3, #8
 8007f9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f9c:	623a      	str	r2, [r7, #32]
 8007f9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa0:	69f9      	ldr	r1, [r7, #28]
 8007fa2:	6a3a      	ldr	r2, [r7, #32]
 8007fa4:	e841 2300 	strex	r3, r2, [r1]
 8007fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e5      	bne.n	8007f7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e010      	b.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69da      	ldr	r2, [r3, #28]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	bf0c      	ite	eq
 8007fe4:	2301      	moveq	r3, #1
 8007fe6:	2300      	movne	r3, #0
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	461a      	mov	r2, r3
 8007fec:	79fb      	ldrb	r3, [r7, #7]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	f43f af46 	beq.w	8007e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3770      	adds	r7, #112	; 0x70
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008000:	b480      	push	{r7}
 8008002:	b0a3      	sub	sp, #140	; 0x8c
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	4613      	mov	r3, r2
 800800c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	88fa      	ldrh	r2, [r7, #6]
 8008018:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	88fa      	ldrh	r2, [r7, #6]
 8008020:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008032:	d10e      	bne.n	8008052 <UART_Start_Receive_IT+0x52>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d105      	bne.n	8008048 <UART_Start_Receive_IT+0x48>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008042:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008046:	e02d      	b.n	80080a4 <UART_Start_Receive_IT+0xa4>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	22ff      	movs	r2, #255	; 0xff
 800804c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008050:	e028      	b.n	80080a4 <UART_Start_Receive_IT+0xa4>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10d      	bne.n	8008076 <UART_Start_Receive_IT+0x76>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d104      	bne.n	800806c <UART_Start_Receive_IT+0x6c>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	22ff      	movs	r2, #255	; 0xff
 8008066:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800806a:	e01b      	b.n	80080a4 <UART_Start_Receive_IT+0xa4>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	227f      	movs	r2, #127	; 0x7f
 8008070:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008074:	e016      	b.n	80080a4 <UART_Start_Receive_IT+0xa4>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800807e:	d10d      	bne.n	800809c <UART_Start_Receive_IT+0x9c>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d104      	bne.n	8008092 <UART_Start_Receive_IT+0x92>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	227f      	movs	r2, #127	; 0x7f
 800808c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008090:	e008      	b.n	80080a4 <UART_Start_Receive_IT+0xa4>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	223f      	movs	r2, #63	; 0x3f
 8008096:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800809a:	e003      	b.n	80080a4 <UART_Start_Receive_IT+0xa4>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2222      	movs	r2, #34	; 0x22
 80080b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3308      	adds	r3, #8
 80080ba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080be:	e853 3f00 	ldrex	r3, [r3]
 80080c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80080c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080c6:	f043 0301 	orr.w	r3, r3, #1
 80080ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3308      	adds	r3, #8
 80080d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80080d8:	673a      	str	r2, [r7, #112]	; 0x70
 80080da:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080dc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80080de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80080e0:	e841 2300 	strex	r3, r2, [r1]
 80080e4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80080e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e3      	bne.n	80080b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080f4:	d153      	bne.n	800819e <UART_Start_Receive_IT+0x19e>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080fc:	88fa      	ldrh	r2, [r7, #6]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d34d      	bcc.n	800819e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810a:	d107      	bne.n	800811c <UART_Start_Receive_IT+0x11c>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d103      	bne.n	800811c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4a4b      	ldr	r2, [pc, #300]	; (8008244 <UART_Start_Receive_IT+0x244>)
 8008118:	671a      	str	r2, [r3, #112]	; 0x70
 800811a:	e002      	b.n	8008122 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4a4a      	ldr	r2, [pc, #296]	; (8008248 <UART_Start_Receive_IT+0x248>)
 8008120:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d01a      	beq.n	8008168 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008146:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008154:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008156:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800815a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e4      	bne.n	8008132 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3308      	adds	r3, #8
 800816e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008172:	e853 3f00 	ldrex	r3, [r3]
 8008176:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800817e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3308      	adds	r3, #8
 8008186:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008188:	64ba      	str	r2, [r7, #72]	; 0x48
 800818a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800818e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e5      	bne.n	8008168 <UART_Start_Receive_IT+0x168>
 800819c:	e04a      	b.n	8008234 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a6:	d107      	bne.n	80081b8 <UART_Start_Receive_IT+0x1b8>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d103      	bne.n	80081b8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4a26      	ldr	r2, [pc, #152]	; (800824c <UART_Start_Receive_IT+0x24c>)
 80081b4:	671a      	str	r2, [r3, #112]	; 0x70
 80081b6:	e002      	b.n	80081be <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4a25      	ldr	r2, [pc, #148]	; (8008250 <UART_Start_Receive_IT+0x250>)
 80081bc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d019      	beq.n	8008202 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d6:	e853 3f00 	ldrex	r3, [r3]
 80081da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80081e2:	677b      	str	r3, [r7, #116]	; 0x74
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ec:	637b      	str	r3, [r7, #52]	; 0x34
 80081ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081f4:	e841 2300 	strex	r3, r2, [r1]
 80081f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e6      	bne.n	80081ce <UART_Start_Receive_IT+0x1ce>
 8008200:	e018      	b.n	8008234 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	e853 3f00 	ldrex	r3, [r3]
 800820e:	613b      	str	r3, [r7, #16]
   return(result);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f043 0320 	orr.w	r3, r3, #32
 8008216:	67bb      	str	r3, [r7, #120]	; 0x78
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008220:	623b      	str	r3, [r7, #32]
 8008222:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008224:	69f9      	ldr	r1, [r7, #28]
 8008226:	6a3a      	ldr	r2, [r7, #32]
 8008228:	e841 2300 	strex	r3, r2, [r1]
 800822c:	61bb      	str	r3, [r7, #24]
   return(result);
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1e6      	bne.n	8008202 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	378c      	adds	r7, #140	; 0x8c
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	0800895d 	.word	0x0800895d
 8008248:	08008665 	.word	0x08008665
 800824c:	08008503 	.word	0x08008503
 8008250:	080083a3 	.word	0x080083a3

08008254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008254:	b480      	push	{r7}
 8008256:	b095      	sub	sp, #84	; 0x54
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008264:	e853 3f00 	ldrex	r3, [r3]
 8008268:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008270:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800827a:	643b      	str	r3, [r7, #64]	; 0x40
 800827c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008280:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e6      	bne.n	800825c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3308      	adds	r3, #8
 8008294:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	61fb      	str	r3, [r7, #28]
   return(result);
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082a4:	f023 0301 	bic.w	r3, r3, #1
 80082a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e3      	bne.n	800828e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d118      	bne.n	8008300 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	e853 3f00 	ldrex	r3, [r3]
 80082da:	60bb      	str	r3, [r7, #8]
   return(result);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f023 0310 	bic.w	r3, r3, #16
 80082e2:	647b      	str	r3, [r7, #68]	; 0x44
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	461a      	mov	r2, r3
 80082ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082ec:	61bb      	str	r3, [r7, #24]
 80082ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f0:	6979      	ldr	r1, [r7, #20]
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	e841 2300 	strex	r3, r2, [r1]
 80082f8:	613b      	str	r3, [r7, #16]
   return(result);
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1e6      	bne.n	80082ce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2220      	movs	r2, #32
 8008304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008314:	bf00      	nop
 8008316:	3754      	adds	r7, #84	; 0x54
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7ff f996 	bl	8007670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008344:	bf00      	nop
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	60bb      	str	r3, [r7, #8]
   return(result);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008368:	61fb      	str	r3, [r7, #28]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	6979      	ldr	r1, [r7, #20]
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	613b      	str	r3, [r7, #16]
   return(result);
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e6      	bne.n	8008354 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff f961 	bl	800765c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800839a:	bf00      	nop
 800839c:	3720      	adds	r7, #32
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b096      	sub	sp, #88	; 0x58
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ba:	2b22      	cmp	r3, #34	; 0x22
 80083bc:	f040 8095 	bne.w	80084ea <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80083ca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80083ce:	b2d9      	uxtb	r1, r3
 80083d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083da:	400a      	ands	r2, r1
 80083dc:	b2d2      	uxtb	r2, r2
 80083de:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	3b01      	subs	r3, #1
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008402:	b29b      	uxth	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d178      	bne.n	80084fa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008418:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800841c:	653b      	str	r3, [r7, #80]	; 0x50
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008426:	647b      	str	r3, [r7, #68]	; 0x44
 8008428:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800842c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e6      	bne.n	8008408 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3308      	adds	r3, #8
 8008440:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008444:	e853 3f00 	ldrex	r3, [r3]
 8008448:	623b      	str	r3, [r7, #32]
   return(result);
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	f023 0301 	bic.w	r3, r3, #1
 8008450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3308      	adds	r3, #8
 8008458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800845a:	633a      	str	r2, [r7, #48]	; 0x30
 800845c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1e5      	bne.n	800843a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2220      	movs	r2, #32
 8008472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008480:	2b01      	cmp	r3, #1
 8008482:	d12e      	bne.n	80084e2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	60fb      	str	r3, [r7, #12]
   return(result);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0310 	bic.w	r3, r3, #16
 800849e:	64bb      	str	r3, [r7, #72]	; 0x48
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	461a      	mov	r2, r3
 80084a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a8:	61fb      	str	r3, [r7, #28]
 80084aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	69b9      	ldr	r1, [r7, #24]
 80084ae:	69fa      	ldr	r2, [r7, #28]
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	617b      	str	r3, [r7, #20]
   return(result);
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e6      	bne.n	800848a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	f003 0310 	and.w	r3, r3, #16
 80084c6:	2b10      	cmp	r3, #16
 80084c8:	d103      	bne.n	80084d2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2210      	movs	r2, #16
 80084d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7ff f8d2 	bl	8007684 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084e0:	e00b      	b.n	80084fa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7f8 fcde 	bl	8000ea4 <HAL_UART_RxCpltCallback>
}
 80084e8:	e007      	b.n	80084fa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	699a      	ldr	r2, [r3, #24]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f042 0208 	orr.w	r2, r2, #8
 80084f8:	619a      	str	r2, [r3, #24]
}
 80084fa:	bf00      	nop
 80084fc:	3758      	adds	r7, #88	; 0x58
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b096      	sub	sp, #88	; 0x58
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008510:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800851a:	2b22      	cmp	r3, #34	; 0x22
 800851c:	f040 8095 	bne.w	800864a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008530:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008534:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008538:	4013      	ands	r3, r2
 800853a:	b29a      	uxth	r2, r3
 800853c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800853e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008544:	1c9a      	adds	r2, r3, #2
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008550:	b29b      	uxth	r3, r3
 8008552:	3b01      	subs	r3, #1
 8008554:	b29a      	uxth	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008562:	b29b      	uxth	r3, r3
 8008564:	2b00      	cmp	r3, #0
 8008566:	d178      	bne.n	800865a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008570:	e853 3f00 	ldrex	r3, [r3]
 8008574:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800857c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008586:	643b      	str	r3, [r7, #64]	; 0x40
 8008588:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800858c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e6      	bne.n	8008568 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3308      	adds	r3, #8
 80085a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	f023 0301 	bic.w	r3, r3, #1
 80085b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3308      	adds	r3, #8
 80085b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e5      	bne.n	800859a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d12e      	bne.n	8008642 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f023 0310 	bic.w	r3, r3, #16
 80085fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008608:	61bb      	str	r3, [r7, #24]
 800860a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6979      	ldr	r1, [r7, #20]
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	613b      	str	r3, [r7, #16]
   return(result);
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e6      	bne.n	80085ea <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	f003 0310 	and.w	r3, r3, #16
 8008626:	2b10      	cmp	r3, #16
 8008628:	d103      	bne.n	8008632 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2210      	movs	r2, #16
 8008630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7ff f822 	bl	8007684 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008640:	e00b      	b.n	800865a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7f8 fc2e 	bl	8000ea4 <HAL_UART_RxCpltCallback>
}
 8008648:	e007      	b.n	800865a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	699a      	ldr	r2, [r3, #24]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f042 0208 	orr.w	r2, r2, #8
 8008658:	619a      	str	r2, [r3, #24]
}
 800865a:	bf00      	nop
 800865c:	3758      	adds	r7, #88	; 0x58
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b0a6      	sub	sp, #152	; 0x98
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008672:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800869a:	2b22      	cmp	r3, #34	; 0x22
 800869c:	f040 814f 	bne.w	800893e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086aa:	e0f6      	b.n	800889a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086b6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80086ba:	b2d9      	uxtb	r1, r3
 80086bc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c6:	400a      	ands	r2, r1
 80086c8:	b2d2      	uxtb	r2, r2
 80086ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086dc:	b29b      	uxth	r3, r3
 80086de:	3b01      	subs	r3, #1
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086f6:	f003 0307 	and.w	r3, r3, #7
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d053      	beq.n	80087a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	d011      	beq.n	800872e <UART_RxISR_8BIT_FIFOEN+0xca>
 800870a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800870e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00b      	beq.n	800872e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2201      	movs	r2, #1
 800871c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008724:	f043 0201 	orr.w	r2, r3, #1
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800872e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d011      	beq.n	800875e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800873a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00b      	beq.n	800875e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2202      	movs	r2, #2
 800874c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008754:	f043 0204 	orr.w	r2, r3, #4
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800875e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008762:	f003 0304 	and.w	r3, r3, #4
 8008766:	2b00      	cmp	r3, #0
 8008768:	d011      	beq.n	800878e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800876a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00b      	beq.n	800878e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2204      	movs	r2, #4
 800877c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008784:	f043 0202 	orr.w	r2, r3, #2
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008794:	2b00      	cmp	r3, #0
 8008796:	d006      	beq.n	80087a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7fe ff69 	bl	8007670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d173      	bne.n	800889a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ba:	e853 3f00 	ldrex	r3, [r3]
 80087be:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80087c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80087d6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80087da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087dc:	e841 2300 	strex	r3, r2, [r1]
 80087e0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80087e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1e4      	bne.n	80087b2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087f2:	e853 3f00 	ldrex	r3, [r3]
 80087f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80087f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087fe:	f023 0301 	bic.w	r3, r3, #1
 8008802:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3308      	adds	r3, #8
 800880a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800880c:	657a      	str	r2, [r7, #84]	; 0x54
 800880e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008810:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008812:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008814:	e841 2300 	strex	r3, r2, [r1]
 8008818:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800881a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1e3      	bne.n	80087e8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2220      	movs	r2, #32
 8008824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008832:	2b01      	cmp	r3, #1
 8008834:	d12e      	bne.n	8008894 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800884a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884c:	f023 0310 	bic.w	r3, r3, #16
 8008850:	67bb      	str	r3, [r7, #120]	; 0x78
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800885a:	643b      	str	r3, [r7, #64]	; 0x40
 800885c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008862:	e841 2300 	strex	r3, r2, [r1]
 8008866:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e6      	bne.n	800883c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	f003 0310 	and.w	r3, r3, #16
 8008878:	2b10      	cmp	r3, #16
 800887a:	d103      	bne.n	8008884 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2210      	movs	r2, #16
 8008882:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7fe fef9 	bl	8007684 <HAL_UARTEx_RxEventCallback>
 8008892:	e002      	b.n	800889a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7f8 fb05 	bl	8000ea4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800889a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d006      	beq.n	80088b0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80088a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f47f aefe 	bne.w	80086ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80088ba:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d045      	beq.n	800894e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d23e      	bcs.n	800894e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3308      	adds	r3, #8
 80088d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	e853 3f00 	ldrex	r3, [r3]
 80088de:	61fb      	str	r3, [r7, #28]
   return(result);
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088e6:	673b      	str	r3, [r7, #112]	; 0x70
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3308      	adds	r3, #8
 80088ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80088f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088f8:	e841 2300 	strex	r3, r2, [r1]
 80088fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e5      	bne.n	80088d0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a14      	ldr	r2, [pc, #80]	; (8008958 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008908:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	e853 3f00 	ldrex	r3, [r3]
 8008916:	60bb      	str	r3, [r7, #8]
   return(result);
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	f043 0320 	orr.w	r3, r3, #32
 800891e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	461a      	mov	r2, r3
 8008926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008928:	61bb      	str	r3, [r7, #24]
 800892a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892c:	6979      	ldr	r1, [r7, #20]
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	e841 2300 	strex	r3, r2, [r1]
 8008934:	613b      	str	r3, [r7, #16]
   return(result);
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1e6      	bne.n	800890a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800893c:	e007      	b.n	800894e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	699a      	ldr	r2, [r3, #24]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f042 0208 	orr.w	r2, r2, #8
 800894c:	619a      	str	r2, [r3, #24]
}
 800894e:	bf00      	nop
 8008950:	3798      	adds	r7, #152	; 0x98
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	080083a3 	.word	0x080083a3

0800895c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b0a8      	sub	sp, #160	; 0xa0
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800896a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008992:	2b22      	cmp	r3, #34	; 0x22
 8008994:	f040 8153 	bne.w	8008c3e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800899e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089a2:	e0fa      	b.n	8008b9a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80089b6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80089ba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80089be:	4013      	ands	r3, r2
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089cc:	1c9a      	adds	r2, r3, #2
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089d8:	b29b      	uxth	r3, r3
 80089da:	3b01      	subs	r3, #1
 80089dc:	b29a      	uxth	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80089ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d053      	beq.n	8008aa2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d011      	beq.n	8008a2a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008a06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00b      	beq.n	8008a2a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2201      	movs	r2, #1
 8008a18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a20:	f043 0201 	orr.w	r2, r3, #1
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d011      	beq.n	8008a5a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00b      	beq.n	8008a5a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2202      	movs	r2, #2
 8008a48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a50:	f043 0204 	orr.w	r2, r3, #4
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d011      	beq.n	8008a8a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008a66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00b      	beq.n	8008a8a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2204      	movs	r2, #4
 8008a78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a80:	f043 0202 	orr.w	r2, r3, #2
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d006      	beq.n	8008aa2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7fe fdeb 	bl	8007670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d175      	bne.n	8008b9a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ab6:	e853 3f00 	ldrex	r3, [r3]
 8008aba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008abe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ac2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ad2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ad6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ad8:	e841 2300 	strex	r3, r2, [r1]
 8008adc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e4      	bne.n	8008aae <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3308      	adds	r3, #8
 8008aea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aee:	e853 3f00 	ldrex	r3, [r3]
 8008af2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008afa:	f023 0301 	bic.w	r3, r3, #1
 8008afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e1      	bne.n	8008ae4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2220      	movs	r2, #32
 8008b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d12e      	bne.n	8008b94 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4c:	f023 0310 	bic.w	r3, r3, #16
 8008b50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e6      	bne.n	8008b3c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69db      	ldr	r3, [r3, #28]
 8008b74:	f003 0310 	and.w	r3, r3, #16
 8008b78:	2b10      	cmp	r3, #16
 8008b7a:	d103      	bne.n	8008b84 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2210      	movs	r2, #16
 8008b82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7fe fd79 	bl	8007684 <HAL_UARTEx_RxEventCallback>
 8008b92:	e002      	b.n	8008b9a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7f8 f985 	bl	8000ea4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b9a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d006      	beq.n	8008bb0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008ba2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ba6:	f003 0320 	and.w	r3, r3, #32
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f47f aefa 	bne.w	80089a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bb6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008bba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d045      	beq.n	8008c4e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008bc8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d23e      	bcs.n	8008c4e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	623b      	str	r3, [r7, #32]
   return(result);
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008be6:	677b      	str	r3, [r7, #116]	; 0x74
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3308      	adds	r3, #8
 8008bee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008bf0:	633a      	str	r2, [r7, #48]	; 0x30
 8008bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bf8:	e841 2300 	strex	r3, r2, [r1]
 8008bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1e5      	bne.n	8008bd0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a14      	ldr	r2, [pc, #80]	; (8008c58 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008c08:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f043 0320 	orr.w	r3, r3, #32
 8008c1e:	673b      	str	r3, [r7, #112]	; 0x70
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c28:	61fb      	str	r3, [r7, #28]
 8008c2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	69b9      	ldr	r1, [r7, #24]
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	617b      	str	r3, [r7, #20]
   return(result);
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e6      	bne.n	8008c0a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c3c:	e007      	b.n	8008c4e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	699a      	ldr	r2, [r3, #24]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f042 0208 	orr.w	r2, r2, #8
 8008c4c:	619a      	str	r2, [r3, #24]
}
 8008c4e:	bf00      	nop
 8008c50:	37a0      	adds	r7, #160	; 0xa0
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	08008503 	.word	0x08008503

08008c5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d101      	bne.n	8008cae <HAL_UARTEx_DisableFifoMode+0x16>
 8008caa:	2302      	movs	r3, #2
 8008cac:	e027      	b.n	8008cfe <HAL_UARTEx_DisableFifoMode+0x66>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2224      	movs	r2, #36	; 0x24
 8008cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f022 0201 	bic.w	r2, r2, #1
 8008cd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008cdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d101      	bne.n	8008d22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d1e:	2302      	movs	r3, #2
 8008d20:	e02d      	b.n	8008d7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2224      	movs	r2, #36	; 0x24
 8008d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f022 0201 	bic.w	r2, r2, #1
 8008d48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f850 	bl	8008e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d101      	bne.n	8008d9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e02d      	b.n	8008dfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2224      	movs	r2, #36	; 0x24
 8008daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f022 0201 	bic.w	r2, r2, #1
 8008dc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	430a      	orrs	r2, r1
 8008dd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f812 	bl	8008e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d108      	bne.n	8008e26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e24:	e031      	b.n	8008e8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e26:	2308      	movs	r3, #8
 8008e28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e2a:	2308      	movs	r3, #8
 8008e2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	0e5b      	lsrs	r3, r3, #25
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	f003 0307 	and.w	r3, r3, #7
 8008e3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	0f5b      	lsrs	r3, r3, #29
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	f003 0307 	and.w	r3, r3, #7
 8008e4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	7b3a      	ldrb	r2, [r7, #12]
 8008e52:	4911      	ldr	r1, [pc, #68]	; (8008e98 <UARTEx_SetNbDataToProcess+0x94>)
 8008e54:	5c8a      	ldrb	r2, [r1, r2]
 8008e56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e5a:	7b3a      	ldrb	r2, [r7, #12]
 8008e5c:	490f      	ldr	r1, [pc, #60]	; (8008e9c <UARTEx_SetNbDataToProcess+0x98>)
 8008e5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e60:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	7b7a      	ldrb	r2, [r7, #13]
 8008e70:	4909      	ldr	r1, [pc, #36]	; (8008e98 <UARTEx_SetNbDataToProcess+0x94>)
 8008e72:	5c8a      	ldrb	r2, [r1, r2]
 8008e74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e78:	7b7a      	ldrb	r2, [r7, #13]
 8008e7a:	4908      	ldr	r1, [pc, #32]	; (8008e9c <UARTEx_SetNbDataToProcess+0x98>)
 8008e7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e8a:	bf00      	nop
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	08009adc 	.word	0x08009adc
 8008e9c:	08009ae4 	.word	0x08009ae4

08008ea0 <siprintf>:
 8008ea0:	b40e      	push	{r1, r2, r3}
 8008ea2:	b500      	push	{lr}
 8008ea4:	b09c      	sub	sp, #112	; 0x70
 8008ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ea8:	9002      	str	r0, [sp, #8]
 8008eaa:	9006      	str	r0, [sp, #24]
 8008eac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008eb0:	4809      	ldr	r0, [pc, #36]	; (8008ed8 <siprintf+0x38>)
 8008eb2:	9107      	str	r1, [sp, #28]
 8008eb4:	9104      	str	r1, [sp, #16]
 8008eb6:	4909      	ldr	r1, [pc, #36]	; (8008edc <siprintf+0x3c>)
 8008eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ebc:	9105      	str	r1, [sp, #20]
 8008ebe:	6800      	ldr	r0, [r0, #0]
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	a902      	add	r1, sp, #8
 8008ec4:	f000 f9a4 	bl	8009210 <_svfiprintf_r>
 8008ec8:	9b02      	ldr	r3, [sp, #8]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	701a      	strb	r2, [r3, #0]
 8008ece:	b01c      	add	sp, #112	; 0x70
 8008ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ed4:	b003      	add	sp, #12
 8008ed6:	4770      	bx	lr
 8008ed8:	2000005c 	.word	0x2000005c
 8008edc:	ffff0208 	.word	0xffff0208

08008ee0 <memset>:
 8008ee0:	4402      	add	r2, r0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d100      	bne.n	8008eea <memset+0xa>
 8008ee8:	4770      	bx	lr
 8008eea:	f803 1b01 	strb.w	r1, [r3], #1
 8008eee:	e7f9      	b.n	8008ee4 <memset+0x4>

08008ef0 <strncmp>:
 8008ef0:	b510      	push	{r4, lr}
 8008ef2:	b16a      	cbz	r2, 8008f10 <strncmp+0x20>
 8008ef4:	3901      	subs	r1, #1
 8008ef6:	1884      	adds	r4, r0, r2
 8008ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008efc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d103      	bne.n	8008f0c <strncmp+0x1c>
 8008f04:	42a0      	cmp	r0, r4
 8008f06:	d001      	beq.n	8008f0c <strncmp+0x1c>
 8008f08:	2a00      	cmp	r2, #0
 8008f0a:	d1f5      	bne.n	8008ef8 <strncmp+0x8>
 8008f0c:	1ad0      	subs	r0, r2, r3
 8008f0e:	bd10      	pop	{r4, pc}
 8008f10:	4610      	mov	r0, r2
 8008f12:	e7fc      	b.n	8008f0e <strncmp+0x1e>

08008f14 <__errno>:
 8008f14:	4b01      	ldr	r3, [pc, #4]	; (8008f1c <__errno+0x8>)
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	2000005c 	.word	0x2000005c

08008f20 <__libc_init_array>:
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	4d0d      	ldr	r5, [pc, #52]	; (8008f58 <__libc_init_array+0x38>)
 8008f24:	4c0d      	ldr	r4, [pc, #52]	; (8008f5c <__libc_init_array+0x3c>)
 8008f26:	1b64      	subs	r4, r4, r5
 8008f28:	10a4      	asrs	r4, r4, #2
 8008f2a:	2600      	movs	r6, #0
 8008f2c:	42a6      	cmp	r6, r4
 8008f2e:	d109      	bne.n	8008f44 <__libc_init_array+0x24>
 8008f30:	4d0b      	ldr	r5, [pc, #44]	; (8008f60 <__libc_init_array+0x40>)
 8008f32:	4c0c      	ldr	r4, [pc, #48]	; (8008f64 <__libc_init_array+0x44>)
 8008f34:	f000 fc6a 	bl	800980c <_init>
 8008f38:	1b64      	subs	r4, r4, r5
 8008f3a:	10a4      	asrs	r4, r4, #2
 8008f3c:	2600      	movs	r6, #0
 8008f3e:	42a6      	cmp	r6, r4
 8008f40:	d105      	bne.n	8008f4e <__libc_init_array+0x2e>
 8008f42:	bd70      	pop	{r4, r5, r6, pc}
 8008f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f48:	4798      	blx	r3
 8008f4a:	3601      	adds	r6, #1
 8008f4c:	e7ee      	b.n	8008f2c <__libc_init_array+0xc>
 8008f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f52:	4798      	blx	r3
 8008f54:	3601      	adds	r6, #1
 8008f56:	e7f2      	b.n	8008f3e <__libc_init_array+0x1e>
 8008f58:	08009b28 	.word	0x08009b28
 8008f5c:	08009b28 	.word	0x08009b28
 8008f60:	08009b28 	.word	0x08009b28
 8008f64:	08009b2c 	.word	0x08009b2c

08008f68 <__retarget_lock_acquire_recursive>:
 8008f68:	4770      	bx	lr

08008f6a <__retarget_lock_release_recursive>:
 8008f6a:	4770      	bx	lr

08008f6c <_free_r>:
 8008f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f6e:	2900      	cmp	r1, #0
 8008f70:	d044      	beq.n	8008ffc <_free_r+0x90>
 8008f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f76:	9001      	str	r0, [sp, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f7e:	bfb8      	it	lt
 8008f80:	18e4      	addlt	r4, r4, r3
 8008f82:	f000 f8df 	bl	8009144 <__malloc_lock>
 8008f86:	4a1e      	ldr	r2, [pc, #120]	; (8009000 <_free_r+0x94>)
 8008f88:	9801      	ldr	r0, [sp, #4]
 8008f8a:	6813      	ldr	r3, [r2, #0]
 8008f8c:	b933      	cbnz	r3, 8008f9c <_free_r+0x30>
 8008f8e:	6063      	str	r3, [r4, #4]
 8008f90:	6014      	str	r4, [r2, #0]
 8008f92:	b003      	add	sp, #12
 8008f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f98:	f000 b8da 	b.w	8009150 <__malloc_unlock>
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	d908      	bls.n	8008fb2 <_free_r+0x46>
 8008fa0:	6825      	ldr	r5, [r4, #0]
 8008fa2:	1961      	adds	r1, r4, r5
 8008fa4:	428b      	cmp	r3, r1
 8008fa6:	bf01      	itttt	eq
 8008fa8:	6819      	ldreq	r1, [r3, #0]
 8008faa:	685b      	ldreq	r3, [r3, #4]
 8008fac:	1949      	addeq	r1, r1, r5
 8008fae:	6021      	streq	r1, [r4, #0]
 8008fb0:	e7ed      	b.n	8008f8e <_free_r+0x22>
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	b10b      	cbz	r3, 8008fbc <_free_r+0x50>
 8008fb8:	42a3      	cmp	r3, r4
 8008fba:	d9fa      	bls.n	8008fb2 <_free_r+0x46>
 8008fbc:	6811      	ldr	r1, [r2, #0]
 8008fbe:	1855      	adds	r5, r2, r1
 8008fc0:	42a5      	cmp	r5, r4
 8008fc2:	d10b      	bne.n	8008fdc <_free_r+0x70>
 8008fc4:	6824      	ldr	r4, [r4, #0]
 8008fc6:	4421      	add	r1, r4
 8008fc8:	1854      	adds	r4, r2, r1
 8008fca:	42a3      	cmp	r3, r4
 8008fcc:	6011      	str	r1, [r2, #0]
 8008fce:	d1e0      	bne.n	8008f92 <_free_r+0x26>
 8008fd0:	681c      	ldr	r4, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	6053      	str	r3, [r2, #4]
 8008fd6:	440c      	add	r4, r1
 8008fd8:	6014      	str	r4, [r2, #0]
 8008fda:	e7da      	b.n	8008f92 <_free_r+0x26>
 8008fdc:	d902      	bls.n	8008fe4 <_free_r+0x78>
 8008fde:	230c      	movs	r3, #12
 8008fe0:	6003      	str	r3, [r0, #0]
 8008fe2:	e7d6      	b.n	8008f92 <_free_r+0x26>
 8008fe4:	6825      	ldr	r5, [r4, #0]
 8008fe6:	1961      	adds	r1, r4, r5
 8008fe8:	428b      	cmp	r3, r1
 8008fea:	bf04      	itt	eq
 8008fec:	6819      	ldreq	r1, [r3, #0]
 8008fee:	685b      	ldreq	r3, [r3, #4]
 8008ff0:	6063      	str	r3, [r4, #4]
 8008ff2:	bf04      	itt	eq
 8008ff4:	1949      	addeq	r1, r1, r5
 8008ff6:	6021      	streq	r1, [r4, #0]
 8008ff8:	6054      	str	r4, [r2, #4]
 8008ffa:	e7ca      	b.n	8008f92 <_free_r+0x26>
 8008ffc:	b003      	add	sp, #12
 8008ffe:	bd30      	pop	{r4, r5, pc}
 8009000:	20000564 	.word	0x20000564

08009004 <sbrk_aligned>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	4e0e      	ldr	r6, [pc, #56]	; (8009040 <sbrk_aligned+0x3c>)
 8009008:	460c      	mov	r4, r1
 800900a:	6831      	ldr	r1, [r6, #0]
 800900c:	4605      	mov	r5, r0
 800900e:	b911      	cbnz	r1, 8009016 <sbrk_aligned+0x12>
 8009010:	f000 fba6 	bl	8009760 <_sbrk_r>
 8009014:	6030      	str	r0, [r6, #0]
 8009016:	4621      	mov	r1, r4
 8009018:	4628      	mov	r0, r5
 800901a:	f000 fba1 	bl	8009760 <_sbrk_r>
 800901e:	1c43      	adds	r3, r0, #1
 8009020:	d00a      	beq.n	8009038 <sbrk_aligned+0x34>
 8009022:	1cc4      	adds	r4, r0, #3
 8009024:	f024 0403 	bic.w	r4, r4, #3
 8009028:	42a0      	cmp	r0, r4
 800902a:	d007      	beq.n	800903c <sbrk_aligned+0x38>
 800902c:	1a21      	subs	r1, r4, r0
 800902e:	4628      	mov	r0, r5
 8009030:	f000 fb96 	bl	8009760 <_sbrk_r>
 8009034:	3001      	adds	r0, #1
 8009036:	d101      	bne.n	800903c <sbrk_aligned+0x38>
 8009038:	f04f 34ff 	mov.w	r4, #4294967295
 800903c:	4620      	mov	r0, r4
 800903e:	bd70      	pop	{r4, r5, r6, pc}
 8009040:	20000568 	.word	0x20000568

08009044 <_malloc_r>:
 8009044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009048:	1ccd      	adds	r5, r1, #3
 800904a:	f025 0503 	bic.w	r5, r5, #3
 800904e:	3508      	adds	r5, #8
 8009050:	2d0c      	cmp	r5, #12
 8009052:	bf38      	it	cc
 8009054:	250c      	movcc	r5, #12
 8009056:	2d00      	cmp	r5, #0
 8009058:	4607      	mov	r7, r0
 800905a:	db01      	blt.n	8009060 <_malloc_r+0x1c>
 800905c:	42a9      	cmp	r1, r5
 800905e:	d905      	bls.n	800906c <_malloc_r+0x28>
 8009060:	230c      	movs	r3, #12
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	2600      	movs	r6, #0
 8009066:	4630      	mov	r0, r6
 8009068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800906c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009140 <_malloc_r+0xfc>
 8009070:	f000 f868 	bl	8009144 <__malloc_lock>
 8009074:	f8d8 3000 	ldr.w	r3, [r8]
 8009078:	461c      	mov	r4, r3
 800907a:	bb5c      	cbnz	r4, 80090d4 <_malloc_r+0x90>
 800907c:	4629      	mov	r1, r5
 800907e:	4638      	mov	r0, r7
 8009080:	f7ff ffc0 	bl	8009004 <sbrk_aligned>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	4604      	mov	r4, r0
 8009088:	d155      	bne.n	8009136 <_malloc_r+0xf2>
 800908a:	f8d8 4000 	ldr.w	r4, [r8]
 800908e:	4626      	mov	r6, r4
 8009090:	2e00      	cmp	r6, #0
 8009092:	d145      	bne.n	8009120 <_malloc_r+0xdc>
 8009094:	2c00      	cmp	r4, #0
 8009096:	d048      	beq.n	800912a <_malloc_r+0xe6>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	4631      	mov	r1, r6
 800909c:	4638      	mov	r0, r7
 800909e:	eb04 0903 	add.w	r9, r4, r3
 80090a2:	f000 fb5d 	bl	8009760 <_sbrk_r>
 80090a6:	4581      	cmp	r9, r0
 80090a8:	d13f      	bne.n	800912a <_malloc_r+0xe6>
 80090aa:	6821      	ldr	r1, [r4, #0]
 80090ac:	1a6d      	subs	r5, r5, r1
 80090ae:	4629      	mov	r1, r5
 80090b0:	4638      	mov	r0, r7
 80090b2:	f7ff ffa7 	bl	8009004 <sbrk_aligned>
 80090b6:	3001      	adds	r0, #1
 80090b8:	d037      	beq.n	800912a <_malloc_r+0xe6>
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	442b      	add	r3, r5
 80090be:	6023      	str	r3, [r4, #0]
 80090c0:	f8d8 3000 	ldr.w	r3, [r8]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d038      	beq.n	800913a <_malloc_r+0xf6>
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	42a2      	cmp	r2, r4
 80090cc:	d12b      	bne.n	8009126 <_malloc_r+0xe2>
 80090ce:	2200      	movs	r2, #0
 80090d0:	605a      	str	r2, [r3, #4]
 80090d2:	e00f      	b.n	80090f4 <_malloc_r+0xb0>
 80090d4:	6822      	ldr	r2, [r4, #0]
 80090d6:	1b52      	subs	r2, r2, r5
 80090d8:	d41f      	bmi.n	800911a <_malloc_r+0xd6>
 80090da:	2a0b      	cmp	r2, #11
 80090dc:	d917      	bls.n	800910e <_malloc_r+0xca>
 80090de:	1961      	adds	r1, r4, r5
 80090e0:	42a3      	cmp	r3, r4
 80090e2:	6025      	str	r5, [r4, #0]
 80090e4:	bf18      	it	ne
 80090e6:	6059      	strne	r1, [r3, #4]
 80090e8:	6863      	ldr	r3, [r4, #4]
 80090ea:	bf08      	it	eq
 80090ec:	f8c8 1000 	streq.w	r1, [r8]
 80090f0:	5162      	str	r2, [r4, r5]
 80090f2:	604b      	str	r3, [r1, #4]
 80090f4:	4638      	mov	r0, r7
 80090f6:	f104 060b 	add.w	r6, r4, #11
 80090fa:	f000 f829 	bl	8009150 <__malloc_unlock>
 80090fe:	f026 0607 	bic.w	r6, r6, #7
 8009102:	1d23      	adds	r3, r4, #4
 8009104:	1af2      	subs	r2, r6, r3
 8009106:	d0ae      	beq.n	8009066 <_malloc_r+0x22>
 8009108:	1b9b      	subs	r3, r3, r6
 800910a:	50a3      	str	r3, [r4, r2]
 800910c:	e7ab      	b.n	8009066 <_malloc_r+0x22>
 800910e:	42a3      	cmp	r3, r4
 8009110:	6862      	ldr	r2, [r4, #4]
 8009112:	d1dd      	bne.n	80090d0 <_malloc_r+0x8c>
 8009114:	f8c8 2000 	str.w	r2, [r8]
 8009118:	e7ec      	b.n	80090f4 <_malloc_r+0xb0>
 800911a:	4623      	mov	r3, r4
 800911c:	6864      	ldr	r4, [r4, #4]
 800911e:	e7ac      	b.n	800907a <_malloc_r+0x36>
 8009120:	4634      	mov	r4, r6
 8009122:	6876      	ldr	r6, [r6, #4]
 8009124:	e7b4      	b.n	8009090 <_malloc_r+0x4c>
 8009126:	4613      	mov	r3, r2
 8009128:	e7cc      	b.n	80090c4 <_malloc_r+0x80>
 800912a:	230c      	movs	r3, #12
 800912c:	603b      	str	r3, [r7, #0]
 800912e:	4638      	mov	r0, r7
 8009130:	f000 f80e 	bl	8009150 <__malloc_unlock>
 8009134:	e797      	b.n	8009066 <_malloc_r+0x22>
 8009136:	6025      	str	r5, [r4, #0]
 8009138:	e7dc      	b.n	80090f4 <_malloc_r+0xb0>
 800913a:	605b      	str	r3, [r3, #4]
 800913c:	deff      	udf	#255	; 0xff
 800913e:	bf00      	nop
 8009140:	20000564 	.word	0x20000564

08009144 <__malloc_lock>:
 8009144:	4801      	ldr	r0, [pc, #4]	; (800914c <__malloc_lock+0x8>)
 8009146:	f7ff bf0f 	b.w	8008f68 <__retarget_lock_acquire_recursive>
 800914a:	bf00      	nop
 800914c:	20000560 	.word	0x20000560

08009150 <__malloc_unlock>:
 8009150:	4801      	ldr	r0, [pc, #4]	; (8009158 <__malloc_unlock+0x8>)
 8009152:	f7ff bf0a 	b.w	8008f6a <__retarget_lock_release_recursive>
 8009156:	bf00      	nop
 8009158:	20000560 	.word	0x20000560

0800915c <__ssputs_r>:
 800915c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009160:	688e      	ldr	r6, [r1, #8]
 8009162:	461f      	mov	r7, r3
 8009164:	42be      	cmp	r6, r7
 8009166:	680b      	ldr	r3, [r1, #0]
 8009168:	4682      	mov	sl, r0
 800916a:	460c      	mov	r4, r1
 800916c:	4690      	mov	r8, r2
 800916e:	d82c      	bhi.n	80091ca <__ssputs_r+0x6e>
 8009170:	898a      	ldrh	r2, [r1, #12]
 8009172:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009176:	d026      	beq.n	80091c6 <__ssputs_r+0x6a>
 8009178:	6965      	ldr	r5, [r4, #20]
 800917a:	6909      	ldr	r1, [r1, #16]
 800917c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009180:	eba3 0901 	sub.w	r9, r3, r1
 8009184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009188:	1c7b      	adds	r3, r7, #1
 800918a:	444b      	add	r3, r9
 800918c:	106d      	asrs	r5, r5, #1
 800918e:	429d      	cmp	r5, r3
 8009190:	bf38      	it	cc
 8009192:	461d      	movcc	r5, r3
 8009194:	0553      	lsls	r3, r2, #21
 8009196:	d527      	bpl.n	80091e8 <__ssputs_r+0x8c>
 8009198:	4629      	mov	r1, r5
 800919a:	f7ff ff53 	bl	8009044 <_malloc_r>
 800919e:	4606      	mov	r6, r0
 80091a0:	b360      	cbz	r0, 80091fc <__ssputs_r+0xa0>
 80091a2:	6921      	ldr	r1, [r4, #16]
 80091a4:	464a      	mov	r2, r9
 80091a6:	f000 faeb 	bl	8009780 <memcpy>
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b4:	81a3      	strh	r3, [r4, #12]
 80091b6:	6126      	str	r6, [r4, #16]
 80091b8:	6165      	str	r5, [r4, #20]
 80091ba:	444e      	add	r6, r9
 80091bc:	eba5 0509 	sub.w	r5, r5, r9
 80091c0:	6026      	str	r6, [r4, #0]
 80091c2:	60a5      	str	r5, [r4, #8]
 80091c4:	463e      	mov	r6, r7
 80091c6:	42be      	cmp	r6, r7
 80091c8:	d900      	bls.n	80091cc <__ssputs_r+0x70>
 80091ca:	463e      	mov	r6, r7
 80091cc:	6820      	ldr	r0, [r4, #0]
 80091ce:	4632      	mov	r2, r6
 80091d0:	4641      	mov	r1, r8
 80091d2:	f000 faab 	bl	800972c <memmove>
 80091d6:	68a3      	ldr	r3, [r4, #8]
 80091d8:	1b9b      	subs	r3, r3, r6
 80091da:	60a3      	str	r3, [r4, #8]
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	4433      	add	r3, r6
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	2000      	movs	r0, #0
 80091e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e8:	462a      	mov	r2, r5
 80091ea:	f000 fad7 	bl	800979c <_realloc_r>
 80091ee:	4606      	mov	r6, r0
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d1e0      	bne.n	80091b6 <__ssputs_r+0x5a>
 80091f4:	6921      	ldr	r1, [r4, #16]
 80091f6:	4650      	mov	r0, sl
 80091f8:	f7ff feb8 	bl	8008f6c <_free_r>
 80091fc:	230c      	movs	r3, #12
 80091fe:	f8ca 3000 	str.w	r3, [sl]
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009208:	81a3      	strh	r3, [r4, #12]
 800920a:	f04f 30ff 	mov.w	r0, #4294967295
 800920e:	e7e9      	b.n	80091e4 <__ssputs_r+0x88>

08009210 <_svfiprintf_r>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	4698      	mov	r8, r3
 8009216:	898b      	ldrh	r3, [r1, #12]
 8009218:	061b      	lsls	r3, r3, #24
 800921a:	b09d      	sub	sp, #116	; 0x74
 800921c:	4607      	mov	r7, r0
 800921e:	460d      	mov	r5, r1
 8009220:	4614      	mov	r4, r2
 8009222:	d50e      	bpl.n	8009242 <_svfiprintf_r+0x32>
 8009224:	690b      	ldr	r3, [r1, #16]
 8009226:	b963      	cbnz	r3, 8009242 <_svfiprintf_r+0x32>
 8009228:	2140      	movs	r1, #64	; 0x40
 800922a:	f7ff ff0b 	bl	8009044 <_malloc_r>
 800922e:	6028      	str	r0, [r5, #0]
 8009230:	6128      	str	r0, [r5, #16]
 8009232:	b920      	cbnz	r0, 800923e <_svfiprintf_r+0x2e>
 8009234:	230c      	movs	r3, #12
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	f04f 30ff 	mov.w	r0, #4294967295
 800923c:	e0d0      	b.n	80093e0 <_svfiprintf_r+0x1d0>
 800923e:	2340      	movs	r3, #64	; 0x40
 8009240:	616b      	str	r3, [r5, #20]
 8009242:	2300      	movs	r3, #0
 8009244:	9309      	str	r3, [sp, #36]	; 0x24
 8009246:	2320      	movs	r3, #32
 8009248:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800924c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009250:	2330      	movs	r3, #48	; 0x30
 8009252:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093f8 <_svfiprintf_r+0x1e8>
 8009256:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800925a:	f04f 0901 	mov.w	r9, #1
 800925e:	4623      	mov	r3, r4
 8009260:	469a      	mov	sl, r3
 8009262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009266:	b10a      	cbz	r2, 800926c <_svfiprintf_r+0x5c>
 8009268:	2a25      	cmp	r2, #37	; 0x25
 800926a:	d1f9      	bne.n	8009260 <_svfiprintf_r+0x50>
 800926c:	ebba 0b04 	subs.w	fp, sl, r4
 8009270:	d00b      	beq.n	800928a <_svfiprintf_r+0x7a>
 8009272:	465b      	mov	r3, fp
 8009274:	4622      	mov	r2, r4
 8009276:	4629      	mov	r1, r5
 8009278:	4638      	mov	r0, r7
 800927a:	f7ff ff6f 	bl	800915c <__ssputs_r>
 800927e:	3001      	adds	r0, #1
 8009280:	f000 80a9 	beq.w	80093d6 <_svfiprintf_r+0x1c6>
 8009284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009286:	445a      	add	r2, fp
 8009288:	9209      	str	r2, [sp, #36]	; 0x24
 800928a:	f89a 3000 	ldrb.w	r3, [sl]
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 80a1 	beq.w	80093d6 <_svfiprintf_r+0x1c6>
 8009294:	2300      	movs	r3, #0
 8009296:	f04f 32ff 	mov.w	r2, #4294967295
 800929a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800929e:	f10a 0a01 	add.w	sl, sl, #1
 80092a2:	9304      	str	r3, [sp, #16]
 80092a4:	9307      	str	r3, [sp, #28]
 80092a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092aa:	931a      	str	r3, [sp, #104]	; 0x68
 80092ac:	4654      	mov	r4, sl
 80092ae:	2205      	movs	r2, #5
 80092b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b4:	4850      	ldr	r0, [pc, #320]	; (80093f8 <_svfiprintf_r+0x1e8>)
 80092b6:	f7f6 ffbb 	bl	8000230 <memchr>
 80092ba:	9a04      	ldr	r2, [sp, #16]
 80092bc:	b9d8      	cbnz	r0, 80092f6 <_svfiprintf_r+0xe6>
 80092be:	06d0      	lsls	r0, r2, #27
 80092c0:	bf44      	itt	mi
 80092c2:	2320      	movmi	r3, #32
 80092c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092c8:	0711      	lsls	r1, r2, #28
 80092ca:	bf44      	itt	mi
 80092cc:	232b      	movmi	r3, #43	; 0x2b
 80092ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092d2:	f89a 3000 	ldrb.w	r3, [sl]
 80092d6:	2b2a      	cmp	r3, #42	; 0x2a
 80092d8:	d015      	beq.n	8009306 <_svfiprintf_r+0xf6>
 80092da:	9a07      	ldr	r2, [sp, #28]
 80092dc:	4654      	mov	r4, sl
 80092de:	2000      	movs	r0, #0
 80092e0:	f04f 0c0a 	mov.w	ip, #10
 80092e4:	4621      	mov	r1, r4
 80092e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ea:	3b30      	subs	r3, #48	; 0x30
 80092ec:	2b09      	cmp	r3, #9
 80092ee:	d94d      	bls.n	800938c <_svfiprintf_r+0x17c>
 80092f0:	b1b0      	cbz	r0, 8009320 <_svfiprintf_r+0x110>
 80092f2:	9207      	str	r2, [sp, #28]
 80092f4:	e014      	b.n	8009320 <_svfiprintf_r+0x110>
 80092f6:	eba0 0308 	sub.w	r3, r0, r8
 80092fa:	fa09 f303 	lsl.w	r3, r9, r3
 80092fe:	4313      	orrs	r3, r2
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	46a2      	mov	sl, r4
 8009304:	e7d2      	b.n	80092ac <_svfiprintf_r+0x9c>
 8009306:	9b03      	ldr	r3, [sp, #12]
 8009308:	1d19      	adds	r1, r3, #4
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	9103      	str	r1, [sp, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	bfbb      	ittet	lt
 8009312:	425b      	neglt	r3, r3
 8009314:	f042 0202 	orrlt.w	r2, r2, #2
 8009318:	9307      	strge	r3, [sp, #28]
 800931a:	9307      	strlt	r3, [sp, #28]
 800931c:	bfb8      	it	lt
 800931e:	9204      	strlt	r2, [sp, #16]
 8009320:	7823      	ldrb	r3, [r4, #0]
 8009322:	2b2e      	cmp	r3, #46	; 0x2e
 8009324:	d10c      	bne.n	8009340 <_svfiprintf_r+0x130>
 8009326:	7863      	ldrb	r3, [r4, #1]
 8009328:	2b2a      	cmp	r3, #42	; 0x2a
 800932a:	d134      	bne.n	8009396 <_svfiprintf_r+0x186>
 800932c:	9b03      	ldr	r3, [sp, #12]
 800932e:	1d1a      	adds	r2, r3, #4
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	9203      	str	r2, [sp, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	bfb8      	it	lt
 8009338:	f04f 33ff 	movlt.w	r3, #4294967295
 800933c:	3402      	adds	r4, #2
 800933e:	9305      	str	r3, [sp, #20]
 8009340:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009408 <_svfiprintf_r+0x1f8>
 8009344:	7821      	ldrb	r1, [r4, #0]
 8009346:	2203      	movs	r2, #3
 8009348:	4650      	mov	r0, sl
 800934a:	f7f6 ff71 	bl	8000230 <memchr>
 800934e:	b138      	cbz	r0, 8009360 <_svfiprintf_r+0x150>
 8009350:	9b04      	ldr	r3, [sp, #16]
 8009352:	eba0 000a 	sub.w	r0, r0, sl
 8009356:	2240      	movs	r2, #64	; 0x40
 8009358:	4082      	lsls	r2, r0
 800935a:	4313      	orrs	r3, r2
 800935c:	3401      	adds	r4, #1
 800935e:	9304      	str	r3, [sp, #16]
 8009360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009364:	4825      	ldr	r0, [pc, #148]	; (80093fc <_svfiprintf_r+0x1ec>)
 8009366:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800936a:	2206      	movs	r2, #6
 800936c:	f7f6 ff60 	bl	8000230 <memchr>
 8009370:	2800      	cmp	r0, #0
 8009372:	d038      	beq.n	80093e6 <_svfiprintf_r+0x1d6>
 8009374:	4b22      	ldr	r3, [pc, #136]	; (8009400 <_svfiprintf_r+0x1f0>)
 8009376:	bb1b      	cbnz	r3, 80093c0 <_svfiprintf_r+0x1b0>
 8009378:	9b03      	ldr	r3, [sp, #12]
 800937a:	3307      	adds	r3, #7
 800937c:	f023 0307 	bic.w	r3, r3, #7
 8009380:	3308      	adds	r3, #8
 8009382:	9303      	str	r3, [sp, #12]
 8009384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009386:	4433      	add	r3, r6
 8009388:	9309      	str	r3, [sp, #36]	; 0x24
 800938a:	e768      	b.n	800925e <_svfiprintf_r+0x4e>
 800938c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009390:	460c      	mov	r4, r1
 8009392:	2001      	movs	r0, #1
 8009394:	e7a6      	b.n	80092e4 <_svfiprintf_r+0xd4>
 8009396:	2300      	movs	r3, #0
 8009398:	3401      	adds	r4, #1
 800939a:	9305      	str	r3, [sp, #20]
 800939c:	4619      	mov	r1, r3
 800939e:	f04f 0c0a 	mov.w	ip, #10
 80093a2:	4620      	mov	r0, r4
 80093a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093a8:	3a30      	subs	r2, #48	; 0x30
 80093aa:	2a09      	cmp	r2, #9
 80093ac:	d903      	bls.n	80093b6 <_svfiprintf_r+0x1a6>
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0c6      	beq.n	8009340 <_svfiprintf_r+0x130>
 80093b2:	9105      	str	r1, [sp, #20]
 80093b4:	e7c4      	b.n	8009340 <_svfiprintf_r+0x130>
 80093b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80093ba:	4604      	mov	r4, r0
 80093bc:	2301      	movs	r3, #1
 80093be:	e7f0      	b.n	80093a2 <_svfiprintf_r+0x192>
 80093c0:	ab03      	add	r3, sp, #12
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	462a      	mov	r2, r5
 80093c6:	4b0f      	ldr	r3, [pc, #60]	; (8009404 <_svfiprintf_r+0x1f4>)
 80093c8:	a904      	add	r1, sp, #16
 80093ca:	4638      	mov	r0, r7
 80093cc:	f3af 8000 	nop.w
 80093d0:	1c42      	adds	r2, r0, #1
 80093d2:	4606      	mov	r6, r0
 80093d4:	d1d6      	bne.n	8009384 <_svfiprintf_r+0x174>
 80093d6:	89ab      	ldrh	r3, [r5, #12]
 80093d8:	065b      	lsls	r3, r3, #25
 80093da:	f53f af2d 	bmi.w	8009238 <_svfiprintf_r+0x28>
 80093de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093e0:	b01d      	add	sp, #116	; 0x74
 80093e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e6:	ab03      	add	r3, sp, #12
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	462a      	mov	r2, r5
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <_svfiprintf_r+0x1f4>)
 80093ee:	a904      	add	r1, sp, #16
 80093f0:	4638      	mov	r0, r7
 80093f2:	f000 f879 	bl	80094e8 <_printf_i>
 80093f6:	e7eb      	b.n	80093d0 <_svfiprintf_r+0x1c0>
 80093f8:	08009aec 	.word	0x08009aec
 80093fc:	08009af6 	.word	0x08009af6
 8009400:	00000000 	.word	0x00000000
 8009404:	0800915d 	.word	0x0800915d
 8009408:	08009af2 	.word	0x08009af2

0800940c <_printf_common>:
 800940c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009410:	4616      	mov	r6, r2
 8009412:	4699      	mov	r9, r3
 8009414:	688a      	ldr	r2, [r1, #8]
 8009416:	690b      	ldr	r3, [r1, #16]
 8009418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800941c:	4293      	cmp	r3, r2
 800941e:	bfb8      	it	lt
 8009420:	4613      	movlt	r3, r2
 8009422:	6033      	str	r3, [r6, #0]
 8009424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009428:	4607      	mov	r7, r0
 800942a:	460c      	mov	r4, r1
 800942c:	b10a      	cbz	r2, 8009432 <_printf_common+0x26>
 800942e:	3301      	adds	r3, #1
 8009430:	6033      	str	r3, [r6, #0]
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	0699      	lsls	r1, r3, #26
 8009436:	bf42      	ittt	mi
 8009438:	6833      	ldrmi	r3, [r6, #0]
 800943a:	3302      	addmi	r3, #2
 800943c:	6033      	strmi	r3, [r6, #0]
 800943e:	6825      	ldr	r5, [r4, #0]
 8009440:	f015 0506 	ands.w	r5, r5, #6
 8009444:	d106      	bne.n	8009454 <_printf_common+0x48>
 8009446:	f104 0a19 	add.w	sl, r4, #25
 800944a:	68e3      	ldr	r3, [r4, #12]
 800944c:	6832      	ldr	r2, [r6, #0]
 800944e:	1a9b      	subs	r3, r3, r2
 8009450:	42ab      	cmp	r3, r5
 8009452:	dc26      	bgt.n	80094a2 <_printf_common+0x96>
 8009454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009458:	1e13      	subs	r3, r2, #0
 800945a:	6822      	ldr	r2, [r4, #0]
 800945c:	bf18      	it	ne
 800945e:	2301      	movne	r3, #1
 8009460:	0692      	lsls	r2, r2, #26
 8009462:	d42b      	bmi.n	80094bc <_printf_common+0xb0>
 8009464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009468:	4649      	mov	r1, r9
 800946a:	4638      	mov	r0, r7
 800946c:	47c0      	blx	r8
 800946e:	3001      	adds	r0, #1
 8009470:	d01e      	beq.n	80094b0 <_printf_common+0xa4>
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	6922      	ldr	r2, [r4, #16]
 8009476:	f003 0306 	and.w	r3, r3, #6
 800947a:	2b04      	cmp	r3, #4
 800947c:	bf02      	ittt	eq
 800947e:	68e5      	ldreq	r5, [r4, #12]
 8009480:	6833      	ldreq	r3, [r6, #0]
 8009482:	1aed      	subeq	r5, r5, r3
 8009484:	68a3      	ldr	r3, [r4, #8]
 8009486:	bf0c      	ite	eq
 8009488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800948c:	2500      	movne	r5, #0
 800948e:	4293      	cmp	r3, r2
 8009490:	bfc4      	itt	gt
 8009492:	1a9b      	subgt	r3, r3, r2
 8009494:	18ed      	addgt	r5, r5, r3
 8009496:	2600      	movs	r6, #0
 8009498:	341a      	adds	r4, #26
 800949a:	42b5      	cmp	r5, r6
 800949c:	d11a      	bne.n	80094d4 <_printf_common+0xc8>
 800949e:	2000      	movs	r0, #0
 80094a0:	e008      	b.n	80094b4 <_printf_common+0xa8>
 80094a2:	2301      	movs	r3, #1
 80094a4:	4652      	mov	r2, sl
 80094a6:	4649      	mov	r1, r9
 80094a8:	4638      	mov	r0, r7
 80094aa:	47c0      	blx	r8
 80094ac:	3001      	adds	r0, #1
 80094ae:	d103      	bne.n	80094b8 <_printf_common+0xac>
 80094b0:	f04f 30ff 	mov.w	r0, #4294967295
 80094b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b8:	3501      	adds	r5, #1
 80094ba:	e7c6      	b.n	800944a <_printf_common+0x3e>
 80094bc:	18e1      	adds	r1, r4, r3
 80094be:	1c5a      	adds	r2, r3, #1
 80094c0:	2030      	movs	r0, #48	; 0x30
 80094c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094c6:	4422      	add	r2, r4
 80094c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094d0:	3302      	adds	r3, #2
 80094d2:	e7c7      	b.n	8009464 <_printf_common+0x58>
 80094d4:	2301      	movs	r3, #1
 80094d6:	4622      	mov	r2, r4
 80094d8:	4649      	mov	r1, r9
 80094da:	4638      	mov	r0, r7
 80094dc:	47c0      	blx	r8
 80094de:	3001      	adds	r0, #1
 80094e0:	d0e6      	beq.n	80094b0 <_printf_common+0xa4>
 80094e2:	3601      	adds	r6, #1
 80094e4:	e7d9      	b.n	800949a <_printf_common+0x8e>
	...

080094e8 <_printf_i>:
 80094e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094ec:	7e0f      	ldrb	r7, [r1, #24]
 80094ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094f0:	2f78      	cmp	r7, #120	; 0x78
 80094f2:	4691      	mov	r9, r2
 80094f4:	4680      	mov	r8, r0
 80094f6:	460c      	mov	r4, r1
 80094f8:	469a      	mov	sl, r3
 80094fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094fe:	d807      	bhi.n	8009510 <_printf_i+0x28>
 8009500:	2f62      	cmp	r7, #98	; 0x62
 8009502:	d80a      	bhi.n	800951a <_printf_i+0x32>
 8009504:	2f00      	cmp	r7, #0
 8009506:	f000 80d4 	beq.w	80096b2 <_printf_i+0x1ca>
 800950a:	2f58      	cmp	r7, #88	; 0x58
 800950c:	f000 80c0 	beq.w	8009690 <_printf_i+0x1a8>
 8009510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009518:	e03a      	b.n	8009590 <_printf_i+0xa8>
 800951a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800951e:	2b15      	cmp	r3, #21
 8009520:	d8f6      	bhi.n	8009510 <_printf_i+0x28>
 8009522:	a101      	add	r1, pc, #4	; (adr r1, 8009528 <_printf_i+0x40>)
 8009524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009528:	08009581 	.word	0x08009581
 800952c:	08009595 	.word	0x08009595
 8009530:	08009511 	.word	0x08009511
 8009534:	08009511 	.word	0x08009511
 8009538:	08009511 	.word	0x08009511
 800953c:	08009511 	.word	0x08009511
 8009540:	08009595 	.word	0x08009595
 8009544:	08009511 	.word	0x08009511
 8009548:	08009511 	.word	0x08009511
 800954c:	08009511 	.word	0x08009511
 8009550:	08009511 	.word	0x08009511
 8009554:	08009699 	.word	0x08009699
 8009558:	080095c1 	.word	0x080095c1
 800955c:	08009653 	.word	0x08009653
 8009560:	08009511 	.word	0x08009511
 8009564:	08009511 	.word	0x08009511
 8009568:	080096bb 	.word	0x080096bb
 800956c:	08009511 	.word	0x08009511
 8009570:	080095c1 	.word	0x080095c1
 8009574:	08009511 	.word	0x08009511
 8009578:	08009511 	.word	0x08009511
 800957c:	0800965b 	.word	0x0800965b
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	1d1a      	adds	r2, r3, #4
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	602a      	str	r2, [r5, #0]
 8009588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800958c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009590:	2301      	movs	r3, #1
 8009592:	e09f      	b.n	80096d4 <_printf_i+0x1ec>
 8009594:	6820      	ldr	r0, [r4, #0]
 8009596:	682b      	ldr	r3, [r5, #0]
 8009598:	0607      	lsls	r7, r0, #24
 800959a:	f103 0104 	add.w	r1, r3, #4
 800959e:	6029      	str	r1, [r5, #0]
 80095a0:	d501      	bpl.n	80095a6 <_printf_i+0xbe>
 80095a2:	681e      	ldr	r6, [r3, #0]
 80095a4:	e003      	b.n	80095ae <_printf_i+0xc6>
 80095a6:	0646      	lsls	r6, r0, #25
 80095a8:	d5fb      	bpl.n	80095a2 <_printf_i+0xba>
 80095aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095ae:	2e00      	cmp	r6, #0
 80095b0:	da03      	bge.n	80095ba <_printf_i+0xd2>
 80095b2:	232d      	movs	r3, #45	; 0x2d
 80095b4:	4276      	negs	r6, r6
 80095b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ba:	485a      	ldr	r0, [pc, #360]	; (8009724 <_printf_i+0x23c>)
 80095bc:	230a      	movs	r3, #10
 80095be:	e012      	b.n	80095e6 <_printf_i+0xfe>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	6820      	ldr	r0, [r4, #0]
 80095c4:	1d19      	adds	r1, r3, #4
 80095c6:	6029      	str	r1, [r5, #0]
 80095c8:	0605      	lsls	r5, r0, #24
 80095ca:	d501      	bpl.n	80095d0 <_printf_i+0xe8>
 80095cc:	681e      	ldr	r6, [r3, #0]
 80095ce:	e002      	b.n	80095d6 <_printf_i+0xee>
 80095d0:	0641      	lsls	r1, r0, #25
 80095d2:	d5fb      	bpl.n	80095cc <_printf_i+0xe4>
 80095d4:	881e      	ldrh	r6, [r3, #0]
 80095d6:	4853      	ldr	r0, [pc, #332]	; (8009724 <_printf_i+0x23c>)
 80095d8:	2f6f      	cmp	r7, #111	; 0x6f
 80095da:	bf0c      	ite	eq
 80095dc:	2308      	moveq	r3, #8
 80095de:	230a      	movne	r3, #10
 80095e0:	2100      	movs	r1, #0
 80095e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095e6:	6865      	ldr	r5, [r4, #4]
 80095e8:	60a5      	str	r5, [r4, #8]
 80095ea:	2d00      	cmp	r5, #0
 80095ec:	bfa2      	ittt	ge
 80095ee:	6821      	ldrge	r1, [r4, #0]
 80095f0:	f021 0104 	bicge.w	r1, r1, #4
 80095f4:	6021      	strge	r1, [r4, #0]
 80095f6:	b90e      	cbnz	r6, 80095fc <_printf_i+0x114>
 80095f8:	2d00      	cmp	r5, #0
 80095fa:	d04b      	beq.n	8009694 <_printf_i+0x1ac>
 80095fc:	4615      	mov	r5, r2
 80095fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8009602:	fb03 6711 	mls	r7, r3, r1, r6
 8009606:	5dc7      	ldrb	r7, [r0, r7]
 8009608:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800960c:	4637      	mov	r7, r6
 800960e:	42bb      	cmp	r3, r7
 8009610:	460e      	mov	r6, r1
 8009612:	d9f4      	bls.n	80095fe <_printf_i+0x116>
 8009614:	2b08      	cmp	r3, #8
 8009616:	d10b      	bne.n	8009630 <_printf_i+0x148>
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	07de      	lsls	r6, r3, #31
 800961c:	d508      	bpl.n	8009630 <_printf_i+0x148>
 800961e:	6923      	ldr	r3, [r4, #16]
 8009620:	6861      	ldr	r1, [r4, #4]
 8009622:	4299      	cmp	r1, r3
 8009624:	bfde      	ittt	le
 8009626:	2330      	movle	r3, #48	; 0x30
 8009628:	f805 3c01 	strble.w	r3, [r5, #-1]
 800962c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009630:	1b52      	subs	r2, r2, r5
 8009632:	6122      	str	r2, [r4, #16]
 8009634:	f8cd a000 	str.w	sl, [sp]
 8009638:	464b      	mov	r3, r9
 800963a:	aa03      	add	r2, sp, #12
 800963c:	4621      	mov	r1, r4
 800963e:	4640      	mov	r0, r8
 8009640:	f7ff fee4 	bl	800940c <_printf_common>
 8009644:	3001      	adds	r0, #1
 8009646:	d14a      	bne.n	80096de <_printf_i+0x1f6>
 8009648:	f04f 30ff 	mov.w	r0, #4294967295
 800964c:	b004      	add	sp, #16
 800964e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	f043 0320 	orr.w	r3, r3, #32
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	4833      	ldr	r0, [pc, #204]	; (8009728 <_printf_i+0x240>)
 800965c:	2778      	movs	r7, #120	; 0x78
 800965e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	6829      	ldr	r1, [r5, #0]
 8009666:	061f      	lsls	r7, r3, #24
 8009668:	f851 6b04 	ldr.w	r6, [r1], #4
 800966c:	d402      	bmi.n	8009674 <_printf_i+0x18c>
 800966e:	065f      	lsls	r7, r3, #25
 8009670:	bf48      	it	mi
 8009672:	b2b6      	uxthmi	r6, r6
 8009674:	07df      	lsls	r7, r3, #31
 8009676:	bf48      	it	mi
 8009678:	f043 0320 	orrmi.w	r3, r3, #32
 800967c:	6029      	str	r1, [r5, #0]
 800967e:	bf48      	it	mi
 8009680:	6023      	strmi	r3, [r4, #0]
 8009682:	b91e      	cbnz	r6, 800968c <_printf_i+0x1a4>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	f023 0320 	bic.w	r3, r3, #32
 800968a:	6023      	str	r3, [r4, #0]
 800968c:	2310      	movs	r3, #16
 800968e:	e7a7      	b.n	80095e0 <_printf_i+0xf8>
 8009690:	4824      	ldr	r0, [pc, #144]	; (8009724 <_printf_i+0x23c>)
 8009692:	e7e4      	b.n	800965e <_printf_i+0x176>
 8009694:	4615      	mov	r5, r2
 8009696:	e7bd      	b.n	8009614 <_printf_i+0x12c>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	6826      	ldr	r6, [r4, #0]
 800969c:	6961      	ldr	r1, [r4, #20]
 800969e:	1d18      	adds	r0, r3, #4
 80096a0:	6028      	str	r0, [r5, #0]
 80096a2:	0635      	lsls	r5, r6, #24
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	d501      	bpl.n	80096ac <_printf_i+0x1c4>
 80096a8:	6019      	str	r1, [r3, #0]
 80096aa:	e002      	b.n	80096b2 <_printf_i+0x1ca>
 80096ac:	0670      	lsls	r0, r6, #25
 80096ae:	d5fb      	bpl.n	80096a8 <_printf_i+0x1c0>
 80096b0:	8019      	strh	r1, [r3, #0]
 80096b2:	2300      	movs	r3, #0
 80096b4:	6123      	str	r3, [r4, #16]
 80096b6:	4615      	mov	r5, r2
 80096b8:	e7bc      	b.n	8009634 <_printf_i+0x14c>
 80096ba:	682b      	ldr	r3, [r5, #0]
 80096bc:	1d1a      	adds	r2, r3, #4
 80096be:	602a      	str	r2, [r5, #0]
 80096c0:	681d      	ldr	r5, [r3, #0]
 80096c2:	6862      	ldr	r2, [r4, #4]
 80096c4:	2100      	movs	r1, #0
 80096c6:	4628      	mov	r0, r5
 80096c8:	f7f6 fdb2 	bl	8000230 <memchr>
 80096cc:	b108      	cbz	r0, 80096d2 <_printf_i+0x1ea>
 80096ce:	1b40      	subs	r0, r0, r5
 80096d0:	6060      	str	r0, [r4, #4]
 80096d2:	6863      	ldr	r3, [r4, #4]
 80096d4:	6123      	str	r3, [r4, #16]
 80096d6:	2300      	movs	r3, #0
 80096d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096dc:	e7aa      	b.n	8009634 <_printf_i+0x14c>
 80096de:	6923      	ldr	r3, [r4, #16]
 80096e0:	462a      	mov	r2, r5
 80096e2:	4649      	mov	r1, r9
 80096e4:	4640      	mov	r0, r8
 80096e6:	47d0      	blx	sl
 80096e8:	3001      	adds	r0, #1
 80096ea:	d0ad      	beq.n	8009648 <_printf_i+0x160>
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	079b      	lsls	r3, r3, #30
 80096f0:	d413      	bmi.n	800971a <_printf_i+0x232>
 80096f2:	68e0      	ldr	r0, [r4, #12]
 80096f4:	9b03      	ldr	r3, [sp, #12]
 80096f6:	4298      	cmp	r0, r3
 80096f8:	bfb8      	it	lt
 80096fa:	4618      	movlt	r0, r3
 80096fc:	e7a6      	b.n	800964c <_printf_i+0x164>
 80096fe:	2301      	movs	r3, #1
 8009700:	4632      	mov	r2, r6
 8009702:	4649      	mov	r1, r9
 8009704:	4640      	mov	r0, r8
 8009706:	47d0      	blx	sl
 8009708:	3001      	adds	r0, #1
 800970a:	d09d      	beq.n	8009648 <_printf_i+0x160>
 800970c:	3501      	adds	r5, #1
 800970e:	68e3      	ldr	r3, [r4, #12]
 8009710:	9903      	ldr	r1, [sp, #12]
 8009712:	1a5b      	subs	r3, r3, r1
 8009714:	42ab      	cmp	r3, r5
 8009716:	dcf2      	bgt.n	80096fe <_printf_i+0x216>
 8009718:	e7eb      	b.n	80096f2 <_printf_i+0x20a>
 800971a:	2500      	movs	r5, #0
 800971c:	f104 0619 	add.w	r6, r4, #25
 8009720:	e7f5      	b.n	800970e <_printf_i+0x226>
 8009722:	bf00      	nop
 8009724:	08009afd 	.word	0x08009afd
 8009728:	08009b0e 	.word	0x08009b0e

0800972c <memmove>:
 800972c:	4288      	cmp	r0, r1
 800972e:	b510      	push	{r4, lr}
 8009730:	eb01 0402 	add.w	r4, r1, r2
 8009734:	d902      	bls.n	800973c <memmove+0x10>
 8009736:	4284      	cmp	r4, r0
 8009738:	4623      	mov	r3, r4
 800973a:	d807      	bhi.n	800974c <memmove+0x20>
 800973c:	1e43      	subs	r3, r0, #1
 800973e:	42a1      	cmp	r1, r4
 8009740:	d008      	beq.n	8009754 <memmove+0x28>
 8009742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800974a:	e7f8      	b.n	800973e <memmove+0x12>
 800974c:	4402      	add	r2, r0
 800974e:	4601      	mov	r1, r0
 8009750:	428a      	cmp	r2, r1
 8009752:	d100      	bne.n	8009756 <memmove+0x2a>
 8009754:	bd10      	pop	{r4, pc}
 8009756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800975a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800975e:	e7f7      	b.n	8009750 <memmove+0x24>

08009760 <_sbrk_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d06      	ldr	r5, [pc, #24]	; (800977c <_sbrk_r+0x1c>)
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	f7f7 fea8 	bl	80014c0 <_sbrk>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_sbrk_r+0x1a>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	b103      	cbz	r3, 800977a <_sbrk_r+0x1a>
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	2000055c 	.word	0x2000055c

08009780 <memcpy>:
 8009780:	440a      	add	r2, r1
 8009782:	4291      	cmp	r1, r2
 8009784:	f100 33ff 	add.w	r3, r0, #4294967295
 8009788:	d100      	bne.n	800978c <memcpy+0xc>
 800978a:	4770      	bx	lr
 800978c:	b510      	push	{r4, lr}
 800978e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009792:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009796:	4291      	cmp	r1, r2
 8009798:	d1f9      	bne.n	800978e <memcpy+0xe>
 800979a:	bd10      	pop	{r4, pc}

0800979c <_realloc_r>:
 800979c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a0:	4680      	mov	r8, r0
 80097a2:	4614      	mov	r4, r2
 80097a4:	460e      	mov	r6, r1
 80097a6:	b921      	cbnz	r1, 80097b2 <_realloc_r+0x16>
 80097a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	4611      	mov	r1, r2
 80097ae:	f7ff bc49 	b.w	8009044 <_malloc_r>
 80097b2:	b92a      	cbnz	r2, 80097c0 <_realloc_r+0x24>
 80097b4:	f7ff fbda 	bl	8008f6c <_free_r>
 80097b8:	4625      	mov	r5, r4
 80097ba:	4628      	mov	r0, r5
 80097bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c0:	f000 f81b 	bl	80097fa <_malloc_usable_size_r>
 80097c4:	4284      	cmp	r4, r0
 80097c6:	4607      	mov	r7, r0
 80097c8:	d802      	bhi.n	80097d0 <_realloc_r+0x34>
 80097ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097ce:	d812      	bhi.n	80097f6 <_realloc_r+0x5a>
 80097d0:	4621      	mov	r1, r4
 80097d2:	4640      	mov	r0, r8
 80097d4:	f7ff fc36 	bl	8009044 <_malloc_r>
 80097d8:	4605      	mov	r5, r0
 80097da:	2800      	cmp	r0, #0
 80097dc:	d0ed      	beq.n	80097ba <_realloc_r+0x1e>
 80097de:	42bc      	cmp	r4, r7
 80097e0:	4622      	mov	r2, r4
 80097e2:	4631      	mov	r1, r6
 80097e4:	bf28      	it	cs
 80097e6:	463a      	movcs	r2, r7
 80097e8:	f7ff ffca 	bl	8009780 <memcpy>
 80097ec:	4631      	mov	r1, r6
 80097ee:	4640      	mov	r0, r8
 80097f0:	f7ff fbbc 	bl	8008f6c <_free_r>
 80097f4:	e7e1      	b.n	80097ba <_realloc_r+0x1e>
 80097f6:	4635      	mov	r5, r6
 80097f8:	e7df      	b.n	80097ba <_realloc_r+0x1e>

080097fa <_malloc_usable_size_r>:
 80097fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097fe:	1f18      	subs	r0, r3, #4
 8009800:	2b00      	cmp	r3, #0
 8009802:	bfbc      	itt	lt
 8009804:	580b      	ldrlt	r3, [r1, r0]
 8009806:	18c0      	addlt	r0, r0, r3
 8009808:	4770      	bx	lr
	...

0800980c <_init>:
 800980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980e:	bf00      	nop
 8009810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009812:	bc08      	pop	{r3}
 8009814:	469e      	mov	lr, r3
 8009816:	4770      	bx	lr

08009818 <_fini>:
 8009818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981a:	bf00      	nop
 800981c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981e:	bc08      	pop	{r3}
 8009820:	469e      	mov	lr, r3
 8009822:	4770      	bx	lr
