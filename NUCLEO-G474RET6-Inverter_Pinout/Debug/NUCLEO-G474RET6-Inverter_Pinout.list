
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d78  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08007f50  08007f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800812c  0800812c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800812c  0800812c  0001812c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008134  08008134  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008134  08008134  00018134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008138  08008138  00018138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800813c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000000c  08008148  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08008148  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019e5e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003072  00000000  00000000  00039edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f8  00000000  00000000  0003cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001062  00000000  00000000  0003e448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028bad  00000000  00000000  0003f4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f49  00000000  00000000  00068057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111db7  00000000  00000000  00080fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005aa8  00000000  00000000  00192d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  00198800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007f38 	.word	0x08007f38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007f38 	.word	0x08007f38

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b0b5      	sub	sp, #212	; 0xd4
 8000518:	af34      	add	r7, sp, #208	; 0xd0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f001 f998 	bl	800184e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f855 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fb0d 	bl	8000b40 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000526:	f000 f913 	bl	8000750 <MX_ADC2_Init>
  MX_ADC1_Init();
 800052a:	f000 f899 	bl	8000660 <MX_ADC1_Init>
  MX_TIM1_Init();
 800052e:	f000 f975 	bl	800081c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000532:	f000 fa21 	bl	8000978 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000536:	f000 fa6b 	bl	8000a10 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800053a:	f000 fab5 	bl	8000aa8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, started, 31, HAL_MAX_DELAY);
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	221f      	movs	r2, #31
 8000544:	491b      	ldr	r1, [pc, #108]	; (80005b4 <main+0xa0>)
 8000546:	481c      	ldr	r0, [pc, #112]	; (80005b8 <main+0xa4>)
 8000548:	f005 fc83 	bl	8005e52 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 800054c:	f04f 33ff 	mov.w	r3, #4294967295
 8000550:	2205      	movs	r2, #5
 8000552:	491a      	ldr	r1, [pc, #104]	; (80005bc <main+0xa8>)
 8000554:	4818      	ldr	r0, [pc, #96]	; (80005b8 <main+0xa4>)
 8000556:	f005 fc7c 	bl	8005e52 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 800055a:	2201      	movs	r2, #1
 800055c:	4918      	ldr	r1, [pc, #96]	; (80005c0 <main+0xac>)
 800055e:	4816      	ldr	r0, [pc, #88]	; (80005b8 <main+0xa4>)
 8000560:	f005 fd0e 	bl	8005f80 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (it_uart){
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <main+0xb0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0fb      	beq.n	8000564 <main+0x50>
		  UART_Echo(huart2);
 800056c:	4c12      	ldr	r4, [pc, #72]	; (80005b8 <main+0xa4>)
 800056e:	4668      	mov	r0, sp
 8000570:	f104 0310 	add.w	r3, r4, #16
 8000574:	2280      	movs	r2, #128	; 0x80
 8000576:	4619      	mov	r1, r3
 8000578:	f007 fcd0 	bl	8007f1c <memcpy>
 800057c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000580:	f000 fda2 	bl	80010c8 <UART_Echo>
		  UART_Create_Cmd(huart2,htim1);
 8000584:	4c0c      	ldr	r4, [pc, #48]	; (80005b8 <main+0xa4>)
 8000586:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <main+0xb4>)
 8000588:	ab20      	add	r3, sp, #128	; 0x80
 800058a:	4611      	mov	r1, r2
 800058c:	224c      	movs	r2, #76	; 0x4c
 800058e:	4618      	mov	r0, r3
 8000590:	f007 fcc4 	bl	8007f1c <memcpy>
 8000594:	4668      	mov	r0, sp
 8000596:	f104 0310 	add.w	r3, r4, #16
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	4619      	mov	r1, r3
 800059e:	f007 fcbd 	bl	8007f1c <memcpy>
 80005a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005a6:	f000 fc7f 	bl	8000ea8 <UART_Create_Cmd>
		  it_uart = 0;
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <main+0xb0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
	  if (it_uart){
 80005b0:	e7d8      	b.n	8000564 <main+0x50>
 80005b2:	bf00      	nop
 80005b4:	080080c4 	.word	0x080080c4
 80005b8:	20000198 	.word	0x20000198
 80005bc:	080080e4 	.word	0x080080e4
 80005c0:	200002f0 	.word	0x200002f0
 80005c4:	200002b8 	.word	0x200002b8
 80005c8:	20000100 	.word	0x20000100

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	2238      	movs	r2, #56	; 0x38
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f007 fc60 	bl	8007ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f002 fdee 	bl	80031d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	2303      	movs	r3, #3
 8000604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000606:	2306      	movs	r3, #6
 8000608:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800060a:	2355      	movs	r3, #85	; 0x55
 800060c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fe8a 	bl	8003338 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800062a:	f000 fb41 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2303      	movs	r3, #3
 8000634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2104      	movs	r1, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f003 f98e 	bl	8003968 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000652:	f000 fb2d 	bl	8000cb0 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2220      	movs	r2, #32
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f007 fc11 	bl	8007ea0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <MX_ADC1_Init+0xe8>)
 8000680:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000684:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000686:	4b30      	ldr	r3, [pc, #192]	; (8000748 <MX_ADC1_Init+0xe8>)
 8000688:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800068c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068e:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <MX_ADC1_Init+0xe8>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000694:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <MX_ADC1_Init+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_ADC1_Init+0xe8>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a6:	4b28      	ldr	r3, [pc, #160]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006a8:	2204      	movs	r2, #4
 80006aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e8:	4817      	ldr	r0, [pc, #92]	; (8000748 <MX_ADC1_Init+0xe8>)
 80006ea:	f001 fae3 	bl	8001cb4 <HAL_ADC_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006f4:	f000 fadc 	bl	8000cb0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000700:	4619      	mov	r1, r3
 8000702:	4811      	ldr	r0, [pc, #68]	; (8000748 <MX_ADC1_Init+0xe8>)
 8000704:	f002 f8fe 	bl	8002904 <HAL_ADCEx_MultiModeConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800070e:	f000 facf 	bl	8000cb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_ADC1_Init+0xec>)
 8000714:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000716:	2306      	movs	r3, #6
 8000718:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800071e:	237f      	movs	r3, #127	; 0x7f
 8000720:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000722:	2304      	movs	r3, #4
 8000724:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_ADC1_Init+0xe8>)
 8000730:	f001 fc82 	bl	8002038 <HAL_ADC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800073a:	f000 fab9 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3730      	adds	r7, #48	; 0x30
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000028 	.word	0x20000028
 800074c:	21800100 	.word	0x21800100

08000750 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2220      	movs	r2, #32
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f007 fb9f 	bl	8007ea0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000762:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_ADC2_Init+0xc0>)
 8000764:	4a2b      	ldr	r2, [pc, #172]	; (8000814 <MX_ADC2_Init+0xc4>)
 8000766:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_ADC2_Init+0xc0>)
 800076a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800076e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_ADC2_Init+0xc0>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_ADC2_Init+0xc0>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_ADC2_Init+0xc0>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_ADC2_Init+0xc0>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_ADC2_Init+0xc0>)
 800078a:	2204      	movs	r2, #4
 800078c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_ADC2_Init+0xc0>)
 8000790:	2200      	movs	r2, #0
 8000792:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_ADC2_Init+0xc0>)
 8000796:	2200      	movs	r2, #0
 8000798:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_ADC2_Init+0xc0>)
 800079c:	2201      	movs	r2, #1
 800079e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007cc:	f001 fa72 	bl	8001cb4 <HAL_ADC_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80007d6:	f000 fa6b 	bl	8000cb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC2_Init+0xc8>)
 80007dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007de:	2306      	movs	r3, #6
 80007e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007e6:	237f      	movs	r3, #127	; 0x7f
 80007e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ea:	2304      	movs	r3, #4
 80007ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_ADC2_Init+0xc0>)
 80007f8:	f001 fc1e 	bl	8002038 <HAL_ADC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000802:	f000 fa55 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000094 	.word	0x20000094
 8000814:	50000100 	.word	0x50000100
 8000818:	19200040 	.word	0x19200040

0800081c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b098      	sub	sp, #96	; 0x60
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000822:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
 800083e:	615a      	str	r2, [r3, #20]
 8000840:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2234      	movs	r2, #52	; 0x34
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f007 fb29 	bl	8007ea0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800084e:	4b48      	ldr	r3, [pc, #288]	; (8000970 <MX_TIM1_Init+0x154>)
 8000850:	4a48      	ldr	r2, [pc, #288]	; (8000974 <MX_TIM1_Init+0x158>)
 8000852:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000854:	4b46      	ldr	r3, [pc, #280]	; (8000970 <MX_TIM1_Init+0x154>)
 8000856:	2207      	movs	r2, #7
 8000858:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800085a:	4b45      	ldr	r3, [pc, #276]	; (8000970 <MX_TIM1_Init+0x154>)
 800085c:	2220      	movs	r2, #32
 800085e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000860:	4b43      	ldr	r3, [pc, #268]	; (8000970 <MX_TIM1_Init+0x154>)
 8000862:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000866:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000868:	4b41      	ldr	r3, [pc, #260]	; (8000970 <MX_TIM1_Init+0x154>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800086e:	4b40      	ldr	r3, [pc, #256]	; (8000970 <MX_TIM1_Init+0x154>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000874:	4b3e      	ldr	r3, [pc, #248]	; (8000970 <MX_TIM1_Init+0x154>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800087a:	483d      	ldr	r0, [pc, #244]	; (8000970 <MX_TIM1_Init+0x154>)
 800087c:	f003 fdea 	bl	8004454 <HAL_TIM_PWM_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000886:	f000 fa13 	bl	8000cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000896:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800089a:	4619      	mov	r1, r3
 800089c:	4834      	ldr	r0, [pc, #208]	; (8000970 <MX_TIM1_Init+0x154>)
 800089e:	f005 f8d5 	bl	8005a4c <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008a8:	f000 fa02 	bl	8000cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ac:	2360      	movs	r3, #96	; 0x60
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 400;
 80008b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80008b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b6:	2300      	movs	r3, #0
 80008b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ba:	2300      	movs	r3, #0
 80008bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ce:	2200      	movs	r2, #0
 80008d0:	4619      	mov	r1, r3
 80008d2:	4827      	ldr	r0, [pc, #156]	; (8000970 <MX_TIM1_Init+0x154>)
 80008d4:	f004 f944 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80008de:	f000 f9e7 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008e6:	2204      	movs	r2, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_TIM1_Init+0x154>)
 80008ec:	f004 f938 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80008f6:	f000 f9db 	bl	8000cb0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000902:	2208      	movs	r2, #8
 8000904:	4619      	mov	r1, r3
 8000906:	481a      	ldr	r0, [pc, #104]	; (8000970 <MX_TIM1_Init+0x154>)
 8000908:	f004 f92a 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000912:	f000 f9cd 	bl	8000cb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 44;
 8000922:	232c      	movs	r3, #44	; 0x2c
 8000924:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800092a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800093c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_TIM1_Init+0x154>)
 8000954:	f005 f910 	bl	8005b78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800095e:	f000 f9a7 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000962:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_TIM1_Init+0x154>)
 8000964:	f000 fd7c 	bl	8001460 <HAL_TIM_MspPostInit>

}
 8000968:	bf00      	nop
 800096a:	3760      	adds	r7, #96	; 0x60
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000100 	.word	0x20000100
 8000974:	40012c00 	.word	0x40012c00

08000978 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_TIM3_Init+0x90>)
 8000998:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <MX_TIM3_Init+0x94>)
 800099a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_TIM3_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_TIM3_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_TIM3_Init+0x90>)
 80009aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_TIM3_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_TIM3_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4619      	mov	r1, r3
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_TIM3_Init+0x90>)
 80009d4:	f004 fe6b 	bl	80056ae <HAL_TIMEx_HallSensor_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80009de:	f000 f967 	bl	8000cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80009e2:	2350      	movs	r3, #80	; 0x50
 80009e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_TIM3_Init+0x90>)
 80009f0:	f005 f82c 	bl	8005a4c <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80009fa:	f000 f959 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000014c 	.word	0x2000014c
 8000a0c:	40000400 	.word	0x40000400

08000a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a5a:	f005 f9aa 	bl	8005db2 <HAL_UART_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 f924 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a6c:	f007 f94d 	bl	8007d0a <HAL_UARTEx_SetTxFifoThreshold>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a76:	f000 f91b 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a7e:	f007 f982 	bl	8007d86 <HAL_UARTEx_SetRxFifoThreshold>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a88:	f000 f912 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_USART2_UART_Init+0x90>)
 8000a8e:	f007 f903 	bl	8007c98 <HAL_UARTEx_DisableFifoMode>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f000 f90a 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000198 	.word	0x20000198
 8000aa4:	40004400 	.word	0x40004400

08000aa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000aae:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <MX_USART3_UART_Init+0x94>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af0:	4811      	ldr	r0, [pc, #68]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000af2:	f005 f95e 	bl	8005db2 <HAL_UART_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000afc:	f000 f8d8 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b04:	f007 f901 	bl	8007d0a <HAL_UARTEx_SetTxFifoThreshold>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b0e:	f000 f8cf 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b16:	f007 f936 	bl	8007d86 <HAL_UARTEx_SetRxFifoThreshold>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b20:	f000 f8c6 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b26:	f007 f8b7 	bl	8007c98 <HAL_UARTEx_DisableFifoMode>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b30:	f000 f8be 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000228 	.word	0x20000228
 8000b3c:	40004800 	.word	0x40004800

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4a3e      	ldr	r2, [pc, #248]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6e:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4a38      	ldr	r2, [pc, #224]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000b74:	f043 0320 	orr.w	r3, r3, #32
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0320 	and.w	r3, r3, #32
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a32      	ldr	r2, [pc, #200]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a2c      	ldr	r2, [pc, #176]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc2:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <MX_GPIO_Init+0x114>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f002 fabf 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2104      	movs	r1, #4
 8000bde:	481e      	ldr	r0, [pc, #120]	; (8000c58 <MX_GPIO_Init+0x118>)
 8000be0:	f002 faba 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4818      	ldr	r0, [pc, #96]	; (8000c5c <MX_GPIO_Init+0x11c>)
 8000bfc:	f002 f92a 	bl	8002e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000c00:	2320      	movs	r3, #32
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f002 f91b 	bl	8002e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_SafetyUC_Pin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4808      	ldr	r0, [pc, #32]	; (8000c58 <MX_GPIO_Init+0x118>)
 8000c36:	f002 f90d 	bl	8002e54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2028      	movs	r0, #40	; 0x28
 8000c40:	f002 f820 	bl	8002c84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c44:	2028      	movs	r0, #40	; 0x28
 8000c46:	f002 f837 	bl	8002cb8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000c00 	.word	0x48000c00
 8000c5c:	48000800 	.word	0x48000800

08000c60 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* __________________________________________________________________________________________________________________________________________________________________________________________________*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	it_uart = 1;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_UART_RxCpltCallback+0x20>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4904      	ldr	r1, [pc, #16]	; (8000c84 <HAL_UART_RxCpltCallback+0x24>)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_UART_RxCpltCallback+0x28>)
 8000c74:	f005 f984 	bl	8005f80 <HAL_UART_Receive_IT>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200002b8 	.word	0x200002b8
 8000c84:	200002f0 	.word	0x200002f0
 8000c88:	20000198 	.word	0x20000198

08000c8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c9e:	f000 fdef 	bl	8001880 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40001000 	.word	0x40001000

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <Change_Speed>:

int speed_buffer[4];
const uint8_t maxSpeed[] = "Too fast my friend, too fast";
const uint8_t speedChangedFin[] = "Speed changed";

void Change_Speed(char cmd[CMD_BUFFER_SIZE],UART_HandleTypeDef huart2,TIM_HandleTypeDef htim1){
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	f107 001c 	add.w	r0, r7, #28
 8000cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/* Debug
	*/
	HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8000cce:	f107 001c 	add.w	r0, r7, #28
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4943      	ldr	r1, [pc, #268]	; (8000de8 <Change_Speed+0x12c>)
 8000cda:	f005 f8ba 	bl	8005e52 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, cmd, 10, HAL_MAX_DELAY);
 8000cde:	f107 001c 	add.w	r0, r7, #28
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	220a      	movs	r2, #10
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	f005 f8b2 	bl	8005e52 <HAL_UART_Transmit>

	speed_buffer[0] = cmd[6] - '0';
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3306      	adds	r3, #6
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	3b30      	subs	r3, #48	; 0x30
 8000cf6:	4a3d      	ldr	r2, [pc, #244]	; (8000dec <Change_Speed+0x130>)
 8000cf8:	6013      	str	r3, [r2, #0]
	speed_buffer[1] = cmd[7] - '0';
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3307      	adds	r3, #7
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3b30      	subs	r3, #48	; 0x30
 8000d02:	4a3a      	ldr	r2, [pc, #232]	; (8000dec <Change_Speed+0x130>)
 8000d04:	6053      	str	r3, [r2, #4]
	speed_buffer[2] = cmd[8] - '0';
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3308      	adds	r3, #8
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	3b30      	subs	r3, #48	; 0x30
 8000d0e:	4a37      	ldr	r2, [pc, #220]	; (8000dec <Change_Speed+0x130>)
 8000d10:	6093      	str	r3, [r2, #8]
	speed_buffer[3] = cmd[9] - '0';
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3309      	adds	r3, #9
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	3b30      	subs	r3, #48	; 0x30
 8000d1a:	4a34      	ldr	r2, [pc, #208]	; (8000dec <Change_Speed+0x130>)
 8000d1c:	60d3      	str	r3, [r2, #12]
	int speed = speed_buffer[0]*1000 + speed_buffer[1]*100 + speed_buffer[2]*10 + speed_buffer[3];
 8000d1e:	4b33      	ldr	r3, [pc, #204]	; (8000dec <Change_Speed+0x130>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d26:	fb03 f202 	mul.w	r2, r3, r2
 8000d2a:	4b30      	ldr	r3, [pc, #192]	; (8000dec <Change_Speed+0x130>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2164      	movs	r1, #100	; 0x64
 8000d30:	fb01 f303 	mul.w	r3, r1, r3
 8000d34:	18d1      	adds	r1, r2, r3
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <Change_Speed+0x130>)
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	18ca      	adds	r2, r1, r3
 8000d44:	4b29      	ldr	r3, [pc, #164]	; (8000dec <Change_Speed+0x130>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	4413      	add	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
	if (speed > MAX_SPEED){
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d52:	db10      	blt.n	8000d76 <Change_Speed+0xba>
		HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8000d54:	f107 001c 	add.w	r0, r7, #28
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	4922      	ldr	r1, [pc, #136]	; (8000de8 <Change_Speed+0x12c>)
 8000d60:	f005 f877 	bl	8005e52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, maxSpeed, 28, HAL_MAX_DELAY);
 8000d64:	f107 001c 	add.w	r0, r7, #28
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	221c      	movs	r2, #28
 8000d6e:	4920      	ldr	r1, [pc, #128]	; (8000df0 <Change_Speed+0x134>)
 8000d70:	f005 f86f 	bl	8005e52 <HAL_UART_Transmit>
		}
		/*HAL_UART_Transmit(&huart2, speedChangedFin, 13, HAL_MAX_DELAY);*/

	}

}
 8000d74:	e031      	b.n	8000dda <Change_Speed+0x11e>
		int speed_actl = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1);
 8000d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7c:	60fb      	str	r3, [r7, #12]
		if (speed > speed_actl){
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	dd25      	ble.n	8000dd2 <Change_Speed+0x116>
			while (speed_actl < speed){
 8000d86:	e00f      	b.n	8000da8 <Change_Speed+0xec>
				speed_actl++;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed_actl);
 8000d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,MAX_SPEED + 1 - speed_actl);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000da0:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(50);
 8000da2:	2032      	movs	r0, #50	; 0x32
 8000da4:	f000 fd8a 	bl	80018bc <HAL_Delay>
			while (speed_actl < speed){
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbeb      	blt.n	8000d88 <Change_Speed+0xcc>
}
 8000db0:	e013      	b.n	8000dda <Change_Speed+0x11e>
				speed_actl--;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed_actl);
 8000db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,MAX_SPEED + 1 - speed_actl);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dca:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(50);
 8000dcc:	2032      	movs	r0, #50	; 0x32
 8000dce:	f000 fd75 	bl	80018bc <HAL_Delay>
			while (speed_actl > speed){
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	dceb      	bgt.n	8000db2 <Change_Speed+0xf6>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000de4:	b004      	add	sp, #16
 8000de6:	4770      	bx	lr
 8000de8:	08007f50 	.word	0x08007f50
 8000dec:	200002bc 	.word	0x200002bc
 8000df0:	08007f7c 	.word	0x08007f7c

08000df4 <Start_Motor>:

void Start_Motor(TIM_HandleTypeDef htim1,char cmd[CMD_BUFFER_SIZE]){
 8000df4:	b084      	sub	sp, #16
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	f107 0c08 	add.w	ip, r7, #8
 8000dfe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,500);
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,500);
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e10:	639a      	str	r2, [r3, #56]	; 0x38
	cmd[6] = '0'; // Pour éviter speed 6 en première instruction
 8000e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e14:	3306      	adds	r3, #6
 8000e16:	2230      	movs	r2, #48	; 0x30
 8000e18:	701a      	strb	r2, [r3, #0]
	cmd[7] = '5'; // Qui n'est pas compris comme 'trop rapide'
 8000e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e1c:	3307      	adds	r3, #7
 8000e1e:	2235      	movs	r2, #53	; 0x35
 8000e20:	701a      	strb	r2, [r3, #0]
	cmd[8] = '0';
 8000e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e24:	3308      	adds	r3, #8
 8000e26:	2230      	movs	r2, #48	; 0x30
 8000e28:	701a      	strb	r2, [r3, #0]
	cmd[9] = '0';
 8000e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e2c:	3309      	adds	r3, #9
 8000e2e:	2230      	movs	r2, #48	; 0x30
 8000e30:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e32:	2100      	movs	r1, #0
 8000e34:	f107 0008 	add.w	r0, r7, #8
 8000e38:	f003 fb64 	bl	8004504 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f107 0008 	add.w	r0, r7, #8
 8000e42:	f004 fce3 	bl	800580c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e46:	2104      	movs	r1, #4
 8000e48:	f107 0008 	add.w	r0, r7, #8
 8000e4c:	f003 fb5a 	bl	8004504 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000e50:	2104      	movs	r1, #4
 8000e52:	f107 0008 	add.w	r0, r7, #8
 8000e56:	f004 fcd9 	bl	800580c <HAL_TIMEx_PWMN_Start>
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e62:	b004      	add	sp, #16
 8000e64:	4770      	bx	lr

08000e66 <Stop_Motor>:

void Stop_Motor(TIM_HandleTypeDef htim1){
 8000e66:	b084      	sub	sp, #16
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	f107 0c08 	add.w	ip, r7, #8
 8000e70:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000e74:	2100      	movs	r1, #0
 8000e76:	f107 0008 	add.w	r0, r7, #8
 8000e7a:	f003 fc55 	bl	8004728 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f107 0008 	add.w	r0, r7, #8
 8000e84:	f004 fd84 	bl	8005990 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000e88:	2104      	movs	r1, #4
 8000e8a:	f107 0008 	add.w	r0, r7, #8
 8000e8e:	f003 fc4b 	bl	8004728 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000e92:	2104      	movs	r1, #4
 8000e94:	f107 0008 	add.w	r0, r7, #8
 8000e98:	f004 fd7a 	bl	8005990 <HAL_TIMEx_PWMN_Stop>
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ea4:	b004      	add	sp, #16
 8000ea6:	4770      	bx	lr

08000ea8 <UART_Create_Cmd>:
const uint8_t newLine[] = "\r\n>>>";
int idxCmd = 0;
char cmd[CMD_BUFFER_SIZE];
char buffer_cmd[1];

char* UART_Create_Cmd(UART_HandleTypeDef huart2,TIM_HandleTypeDef htim1){
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	b5b0      	push	{r4, r5, r7, lr}
 8000eac:	b0b4      	sub	sp, #208	; 0xd0
 8000eae:	af34      	add	r7, sp, #208	; 0xd0
 8000eb0:	f107 0410 	add.w	r4, r7, #16
 8000eb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (buffer_cmd[0] == '\r'){
 8000eb8:	4b74      	ldr	r3, [pc, #464]	; (800108c <UART_Create_Cmd+0x1e4>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b0d      	cmp	r3, #13
 8000ebe:	f040 80cb 	bne.w	8001058 <UART_Create_Cmd+0x1b0>
		if (!(strncmp(cmd,"help",4))){
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	4972      	ldr	r1, [pc, #456]	; (8001090 <UART_Create_Cmd+0x1e8>)
 8000ec6:	4873      	ldr	r0, [pc, #460]	; (8001094 <UART_Create_Cmd+0x1ec>)
 8000ec8:	f006 fff2 	bl	8007eb0 <strncmp>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d110      	bne.n	8000ef4 <UART_Create_Cmd+0x4c>
			HAL_UART_Transmit(&huart2, help, 157, HAL_MAX_DELAY);
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	229d      	movs	r2, #157	; 0x9d
 8000ed8:	496f      	ldr	r1, [pc, #444]	; (8001098 <UART_Create_Cmd+0x1f0>)
 8000eda:	f107 0010 	add.w	r0, r7, #16
 8000ede:	f004 ffb8 	bl	8005e52 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	2205      	movs	r2, #5
 8000ee8:	496c      	ldr	r1, [pc, #432]	; (800109c <UART_Create_Cmd+0x1f4>)
 8000eea:	f107 0010 	add.w	r0, r7, #16
 8000eee:	f004 ffb0 	bl	8005e52 <HAL_UART_Transmit>
 8000ef2:	e0ad      	b.n	8001050 <UART_Create_Cmd+0x1a8>
		}else if(!(strncmp(cmd,"pinout",6))){
 8000ef4:	2206      	movs	r2, #6
 8000ef6:	496a      	ldr	r1, [pc, #424]	; (80010a0 <UART_Create_Cmd+0x1f8>)
 8000ef8:	4866      	ldr	r0, [pc, #408]	; (8001094 <UART_Create_Cmd+0x1ec>)
 8000efa:	f006 ffd9 	bl	8007eb0 <strncmp>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d110      	bne.n	8000f26 <UART_Create_Cmd+0x7e>
			HAL_UART_Transmit(&huart2, pinout, 48, HAL_MAX_DELAY);
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	2230      	movs	r2, #48	; 0x30
 8000f0a:	4966      	ldr	r1, [pc, #408]	; (80010a4 <UART_Create_Cmd+0x1fc>)
 8000f0c:	f107 0010 	add.w	r0, r7, #16
 8000f10:	f004 ff9f 	bl	8005e52 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	2205      	movs	r2, #5
 8000f1a:	4960      	ldr	r1, [pc, #384]	; (800109c <UART_Create_Cmd+0x1f4>)
 8000f1c:	f107 0010 	add.w	r0, r7, #16
 8000f20:	f004 ff97 	bl	8005e52 <HAL_UART_Transmit>
 8000f24:	e094      	b.n	8001050 <UART_Create_Cmd+0x1a8>
		}else if(!(strncmp(cmd,"start",5))){
 8000f26:	2205      	movs	r2, #5
 8000f28:	495f      	ldr	r1, [pc, #380]	; (80010a8 <UART_Create_Cmd+0x200>)
 8000f2a:	485a      	ldr	r0, [pc, #360]	; (8001094 <UART_Create_Cmd+0x1ec>)
 8000f2c:	f006 ffc0 	bl	8007eb0 <strncmp>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d124      	bne.n	8000f80 <UART_Create_Cmd+0xd8>
			Start_Motor(htim1,cmd);
 8000f36:	4b57      	ldr	r3, [pc, #348]	; (8001094 <UART_Create_Cmd+0x1ec>)
 8000f38:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f3a:	466d      	mov	r5, sp
 8000f3c:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8000f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f4c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f50:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000f54:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f5a:	f7ff ff4b 	bl	8000df4 <Start_Motor>
			HAL_UART_Transmit(&huart2, powerOn, 23, HAL_MAX_DELAY);
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	2217      	movs	r2, #23
 8000f64:	4951      	ldr	r1, [pc, #324]	; (80010ac <UART_Create_Cmd+0x204>)
 8000f66:	f107 0010 	add.w	r0, r7, #16
 8000f6a:	f004 ff72 	bl	8005e52 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	2205      	movs	r2, #5
 8000f74:	4949      	ldr	r1, [pc, #292]	; (800109c <UART_Create_Cmd+0x1f4>)
 8000f76:	f107 0010 	add.w	r0, r7, #16
 8000f7a:	f004 ff6a 	bl	8005e52 <HAL_UART_Transmit>
 8000f7e:	e067      	b.n	8001050 <UART_Create_Cmd+0x1a8>
		}else if(!(strncmp(cmd,"stop",4))){
 8000f80:	2204      	movs	r2, #4
 8000f82:	494b      	ldr	r1, [pc, #300]	; (80010b0 <UART_Create_Cmd+0x208>)
 8000f84:	4843      	ldr	r0, [pc, #268]	; (8001094 <UART_Create_Cmd+0x1ec>)
 8000f86:	f006 ff93 	bl	8007eb0 <strncmp>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d122      	bne.n	8000fd6 <UART_Create_Cmd+0x12e>
			Stop_Motor(htim1);
 8000f90:	466d      	mov	r5, sp
 8000f92:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8000f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000fa6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000faa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb0:	f7ff ff59 	bl	8000e66 <Stop_Motor>
			HAL_UART_Transmit(&huart2, powerOff, 23, HAL_MAX_DELAY);
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	2217      	movs	r2, #23
 8000fba:	493e      	ldr	r1, [pc, #248]	; (80010b4 <UART_Create_Cmd+0x20c>)
 8000fbc:	f107 0010 	add.w	r0, r7, #16
 8000fc0:	f004 ff47 	bl	8005e52 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	2205      	movs	r2, #5
 8000fca:	4934      	ldr	r1, [pc, #208]	; (800109c <UART_Create_Cmd+0x1f4>)
 8000fcc:	f107 0010 	add.w	r0, r7, #16
 8000fd0:	f004 ff3f 	bl	8005e52 <HAL_UART_Transmit>
 8000fd4:	e03c      	b.n	8001050 <UART_Create_Cmd+0x1a8>
		}else if(!(strncmp(cmd,"speed",5))){
 8000fd6:	2205      	movs	r2, #5
 8000fd8:	4937      	ldr	r1, [pc, #220]	; (80010b8 <UART_Create_Cmd+0x210>)
 8000fda:	482e      	ldr	r0, [pc, #184]	; (8001094 <UART_Create_Cmd+0x1ec>)
 8000fdc:	f006 ff68 	bl	8007eb0 <strncmp>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d124      	bne.n	8001030 <UART_Create_Cmd+0x188>
			HAL_UART_Transmit(&huart2, speedChanged, 14, HAL_MAX_DELAY);
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	220e      	movs	r2, #14
 8000fec:	4933      	ldr	r1, [pc, #204]	; (80010bc <UART_Create_Cmd+0x214>)
 8000fee:	f107 0010 	add.w	r0, r7, #16
 8000ff2:	f004 ff2e 	bl	8005e52 <HAL_UART_Transmit>
			Change_Speed(cmd, huart2, htim1);
 8000ff6:	a821      	add	r0, sp, #132	; 0x84
 8000ff8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ffc:	224c      	movs	r2, #76	; 0x4c
 8000ffe:	4619      	mov	r1, r3
 8001000:	f006 ff8c 	bl	8007f1c <memcpy>
 8001004:	4668      	mov	r0, sp
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2284      	movs	r2, #132	; 0x84
 800100c:	4619      	mov	r1, r3
 800100e:	f006 ff85 	bl	8007f1c <memcpy>
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001018:	481e      	ldr	r0, [pc, #120]	; (8001094 <UART_Create_Cmd+0x1ec>)
 800101a:	f7ff fe4f 	bl	8000cbc <Change_Speed>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	2205      	movs	r2, #5
 8001024:	491d      	ldr	r1, [pc, #116]	; (800109c <UART_Create_Cmd+0x1f4>)
 8001026:	f107 0010 	add.w	r0, r7, #16
 800102a:	f004 ff12 	bl	8005e52 <HAL_UART_Transmit>
 800102e:	e00f      	b.n	8001050 <UART_Create_Cmd+0x1a8>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, 17, HAL_MAX_DELAY);
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	2211      	movs	r2, #17
 8001036:	4922      	ldr	r1, [pc, #136]	; (80010c0 <UART_Create_Cmd+0x218>)
 8001038:	f107 0010 	add.w	r0, r7, #16
 800103c:	f004 ff09 	bl	8005e52 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	2205      	movs	r2, #5
 8001046:	4915      	ldr	r1, [pc, #84]	; (800109c <UART_Create_Cmd+0x1f4>)
 8001048:	f107 0010 	add.w	r0, r7, #16
 800104c:	f004 ff01 	bl	8005e52 <HAL_UART_Transmit>
		}
		idxCmd = 0;
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <UART_Create_Cmd+0x21c>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e011      	b.n	800107c <UART_Create_Cmd+0x1d4>
	}else{
		cmd[idxCmd] = buffer_cmd[0];
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <UART_Create_Cmd+0x21c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0b      	ldr	r2, [pc, #44]	; (800108c <UART_Create_Cmd+0x1e4>)
 800105e:	7811      	ldrb	r1, [r2, #0]
 8001060:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <UART_Create_Cmd+0x1ec>)
 8001062:	54d1      	strb	r1, [r2, r3]
		idxCmd += 1;
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <UART_Create_Cmd+0x21c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <UART_Create_Cmd+0x21c>)
 800106c:	6013      	str	r3, [r2, #0]
		if (idxCmd > CMD_BUFFER_SIZE){
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <UART_Create_Cmd+0x21c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b20      	cmp	r3, #32
 8001074:	dd02      	ble.n	800107c <UART_Create_Cmd+0x1d4>
			idxCmd = 0;
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <UART_Create_Cmd+0x21c>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
		}
	}
	return cmd;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <UART_Create_Cmd+0x1ec>)
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001086:	b004      	add	sp, #16
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200002f0 	.word	0x200002f0
 8001090:	08007f54 	.word	0x08007f54
 8001094:	200002d0 	.word	0x200002d0
 8001098:	08007f9c 	.word	0x08007f9c
 800109c:	080080e4 	.word	0x080080e4
 80010a0:	08007f5c 	.word	0x08007f5c
 80010a4:	0800803c 	.word	0x0800803c
 80010a8:	08007f64 	.word	0x08007f64
 80010ac:	08008070 	.word	0x08008070
 80010b0:	08007f6c 	.word	0x08007f6c
 80010b4:	08008088 	.word	0x08008088
 80010b8:	08007f74 	.word	0x08007f74
 80010bc:	080080a0 	.word	0x080080a0
 80010c0:	080080b0 	.word	0x080080b0
 80010c4:	200002cc 	.word	0x200002cc

080010c8 <UART_Echo>:

void UART_Echo(UART_HandleTypeDef huart2){
 80010c8:	b084      	sub	sp, #16
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	f107 0c08 	add.w	ip, r7, #8
 80010d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (buffer_cmd[0] == '\r'){
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <UART_Echo+0x50>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b0d      	cmp	r3, #13
 80010dc:	d108      	bne.n	80010f0 <UART_Echo+0x28>
	  HAL_UART_Transmit(&huart2, newLine, 2, HAL_MAX_DELAY);
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	2202      	movs	r2, #2
 80010e4:	490d      	ldr	r1, [pc, #52]	; (800111c <UART_Echo+0x54>)
 80010e6:	f107 0008 	add.w	r0, r7, #8
 80010ea:	f004 feb2 	bl	8005e52 <HAL_UART_Transmit>
 80010ee:	e007      	b.n	8001100 <UART_Echo+0x38>
	}else{
	  HAL_UART_Transmit(&huart2, buffer_cmd, 1, HAL_MAX_DELAY);
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	2201      	movs	r2, #1
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <UART_Echo+0x50>)
 80010f8:	f107 0008 	add.w	r0, r7, #8
 80010fc:	f004 fea9 	bl	8005e52 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 8001100:	2201      	movs	r2, #1
 8001102:	4905      	ldr	r1, [pc, #20]	; (8001118 <UART_Echo+0x50>)
 8001104:	f107 0008 	add.w	r0, r7, #8
 8001108:	f004 ff3a 	bl	8005f80 <HAL_UART_Receive_IT>
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001114:	b004      	add	sp, #16
 8001116:	4770      	bx	lr
 8001118:	200002f0 	.word	0x200002f0
 800111c:	080080e4 	.word	0x080080e4

08001120 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_MspInit+0x44>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_MspInit+0x44>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6613      	str	r3, [r2, #96]	; 0x60
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_MspInit+0x44>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_MspInit+0x44>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_MspInit+0x44>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6593      	str	r3, [r2, #88]	; 0x58
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_MspInit+0x44>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001156:	f002 f8df 	bl	8003318 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0a4      	sub	sp, #144	; 0x90
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001184:	2254      	movs	r2, #84	; 0x54
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f006 fe89 	bl	8007ea0 <memset>
  if(hadc->Instance==ADC1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001196:	d174      	bne.n	8001282 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800119e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fe2b 	bl	8003e04 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011b4:	f7ff fd7c 	bl	8000cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011b8:	4b63      	ldr	r3, [pc, #396]	; (8001348 <HAL_ADC_MspInit+0x1e0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a62      	ldr	r2, [pc, #392]	; (8001348 <HAL_ADC_MspInit+0x1e0>)
 80011c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011c2:	4b61      	ldr	r3, [pc, #388]	; (8001348 <HAL_ADC_MspInit+0x1e0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d10b      	bne.n	80011e2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011ca:	4b60      	ldr	r3, [pc, #384]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a5f      	ldr	r2, [pc, #380]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80011d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b5d      	ldr	r3, [pc, #372]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	4b5a      	ldr	r3, [pc, #360]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a59      	ldr	r2, [pc, #356]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b57      	ldr	r3, [pc, #348]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	623b      	str	r3, [r7, #32]
 80011f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b54      	ldr	r3, [pc, #336]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a53      	ldr	r2, [pc, #332]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b51      	ldr	r3, [pc, #324]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b4e      	ldr	r3, [pc, #312]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a4d      	ldr	r2, [pc, #308]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b4b      	ldr	r3, [pc, #300]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800122a:	2304      	movs	r3, #4
 800122c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122e:	2303      	movs	r3, #3
 8001230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800123e:	4619      	mov	r1, r3
 8001240:	4843      	ldr	r0, [pc, #268]	; (8001350 <HAL_ADC_MspInit+0x1e8>)
 8001242:	f001 fe07 	bl	8002e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001246:	2302      	movs	r3, #2
 8001248:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124a:	2303      	movs	r3, #3
 800124c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001260:	f001 fdf8 	bl	8002e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001264:	2303      	movs	r3, #3
 8001266:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001268:	2303      	movs	r3, #3
 800126a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001278:	4619      	mov	r1, r3
 800127a:	4836      	ldr	r0, [pc, #216]	; (8001354 <HAL_ADC_MspInit+0x1ec>)
 800127c:	f001 fdea 	bl	8002e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001280:	e05e      	b.n	8001340 <HAL_ADC_MspInit+0x1d8>
  else if(hadc->Instance==ADC2)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a34      	ldr	r2, [pc, #208]	; (8001358 <HAL_ADC_MspInit+0x1f0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d159      	bne.n	8001340 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800128c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001292:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001296:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129c:	4618      	mov	r0, r3
 800129e:	f002 fdb1 	bl	8003e04 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80012a8:	f7ff fd02 	bl	8000cb0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_ADC_MspInit+0x1e0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a25      	ldr	r2, [pc, #148]	; (8001348 <HAL_ADC_MspInit+0x1e0>)
 80012b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_ADC_MspInit+0x1e0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d10b      	bne.n	80012d6 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a22      	ldr	r2, [pc, #136]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80012c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a1c      	ldr	r2, [pc, #112]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a16      	ldr	r2, [pc, #88]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_ADC_MspInit+0x1e4>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8001306:	230b      	movs	r3, #11
 8001308:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130a:	2303      	movs	r3, #3
 800130c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001316:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800131a:	4619      	mov	r1, r3
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <HAL_ADC_MspInit+0x1e8>)
 800131e:	f001 fd99 	bl	8002e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001322:	2301      	movs	r3, #1
 8001324:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001326:	2303      	movs	r3, #3
 8001328:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001336:	4619      	mov	r1, r3
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f001 fd8a 	bl	8002e54 <HAL_GPIO_Init>
}
 8001340:	bf00      	nop
 8001342:	3790      	adds	r7, #144	; 0x90
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200002f4 	.word	0x200002f4
 800134c:	40021000 	.word	0x40021000
 8001350:	48000800 	.word	0x48000800
 8001354:	48000400 	.word	0x48000400
 8001358:	50000100 	.word	0x50000100

0800135c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_TIM_PWM_MspInit+0x38>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d10b      	bne.n	8001386 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_TIM_PWM_MspInit+0x3c>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_TIM_PWM_MspInit+0x3c>)
 8001374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001378:	6613      	str	r3, [r2, #96]	; 0x60
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_TIM_PWM_MspInit+0x3c>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40012c00 	.word	0x40012c00
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM3)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a26      	ldr	r2, [pc, #152]	; (8001454 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d145      	bne.n	800144a <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	4a25      	ldr	r2, [pc, #148]	; (8001458 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ca:	4b23      	ldr	r3, [pc, #140]	; (8001458 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	4a19      	ldr	r2, [pc, #100]	; (8001458 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001406:	2350      	movs	r3, #80	; 0x50
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001416:	2302      	movs	r3, #2
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001424:	f001 fd16 	bl	8002e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800143a:	2302      	movs	r3, #2
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001446:	f001 fd05 	bl	8002e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40000400 	.word	0x40000400
 8001458:	40021000 	.word	0x40021000
 800145c:	48000800 	.word	0x48000800

08001460 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a29      	ldr	r2, [pc, #164]	; (8001524 <HAL_TIM_MspPostInit+0xc4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d14b      	bne.n	800151a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b29      	ldr	r3, [pc, #164]	; (8001528 <HAL_TIM_MspPostInit+0xc8>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a28      	ldr	r2, [pc, #160]	; (8001528 <HAL_TIM_MspPostInit+0xc8>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <HAL_TIM_MspPostInit+0xc8>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <HAL_TIM_MspPostInit+0xc8>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a22      	ldr	r2, [pc, #136]	; (8001528 <HAL_TIM_MspPostInit+0xc8>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_TIM_MspPostInit+0xc8>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80014b2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014c4:	2306      	movs	r3, #6
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <HAL_TIM_MspPostInit+0xcc>)
 80014d0:	f001 fcc0 	bl	8002e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80014d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80014e6:	2304      	movs	r3, #4
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	480e      	ldr	r0, [pc, #56]	; (800152c <HAL_TIM_MspPostInit+0xcc>)
 80014f2:	f001 fcaf 	bl	8002e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80014f6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001508:	2306      	movs	r3, #6
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001516:	f001 fc9d 	bl	8002e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40012c00 	.word	0x40012c00
 8001528:	40021000 	.word	0x40021000
 800152c:	48000400 	.word	0x48000400

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b0a0      	sub	sp, #128	; 0x80
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001548:	f107 0318 	add.w	r3, r7, #24
 800154c:	2254      	movs	r2, #84	; 0x54
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f006 fca5 	bl	8007ea0 <memset>
  if(huart->Instance==USART2)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a41      	ldr	r2, [pc, #260]	; (8001660 <HAL_UART_MspInit+0x130>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d13f      	bne.n	80015e0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001560:	2302      	movs	r3, #2
 8001562:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001568:	f107 0318 	add.w	r3, r7, #24
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fc49 	bl	8003e04 <HAL_RCCEx_PeriphCLKConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001578:	f7ff fb9a 	bl	8000cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800157c:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_UART_MspInit+0x134>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	4a38      	ldr	r2, [pc, #224]	; (8001664 <HAL_UART_MspInit+0x134>)
 8001582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001586:	6593      	str	r3, [r2, #88]	; 0x58
 8001588:	4b36      	ldr	r3, [pc, #216]	; (8001664 <HAL_UART_MspInit+0x134>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001594:	4b33      	ldr	r3, [pc, #204]	; (8001664 <HAL_UART_MspInit+0x134>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	4a32      	ldr	r2, [pc, #200]	; (8001664 <HAL_UART_MspInit+0x134>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a0:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_UART_MspInit+0x134>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ac:	230c      	movs	r3, #12
 80015ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015bc:	2307      	movs	r3, #7
 80015be:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015c4:	4619      	mov	r1, r3
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ca:	f001 fc43 	bl	8002e54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2026      	movs	r0, #38	; 0x26
 80015d4:	f001 fb56 	bl	8002c84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015d8:	2026      	movs	r0, #38	; 0x26
 80015da:	f001 fb6d 	bl	8002cb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015de:	e03b      	b.n	8001658 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a20      	ldr	r2, [pc, #128]	; (8001668 <HAL_UART_MspInit+0x138>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d136      	bne.n	8001658 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015ea:	2304      	movs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f2:	f107 0318 	add.w	r3, r7, #24
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 fc04 	bl	8003e04 <HAL_RCCEx_PeriphCLKConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001602:	f7ff fb55 	bl	8000cb0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_UART_MspInit+0x134>)
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	4a16      	ldr	r2, [pc, #88]	; (8001664 <HAL_UART_MspInit+0x134>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001610:	6593      	str	r3, [r2, #88]	; 0x58
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_UART_MspInit+0x134>)
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_UART_MspInit+0x134>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a10      	ldr	r2, [pc, #64]	; (8001664 <HAL_UART_MspInit+0x134>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_UART_MspInit+0x134>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001636:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800163a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001648:	2307      	movs	r3, #7
 800164a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001650:	4619      	mov	r1, r3
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <HAL_UART_MspInit+0x13c>)
 8001654:	f001 fbfe 	bl	8002e54 <HAL_GPIO_Init>
}
 8001658:	bf00      	nop
 800165a:	3780      	adds	r7, #128	; 0x80
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40004400 	.word	0x40004400
 8001664:	40021000 	.word	0x40021000
 8001668:	40004800 	.word	0x40004800
 800166c:	48000800 	.word	0x48000800

08001670 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001680:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <HAL_InitTick+0xc4>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	4a2b      	ldr	r2, [pc, #172]	; (8001734 <HAL_InitTick+0xc4>)
 8001686:	f043 0310 	orr.w	r3, r3, #16
 800168a:	6593      	str	r3, [r2, #88]	; 0x58
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <HAL_InitTick+0xc4>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001698:	f107 020c 	add.w	r2, r7, #12
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 fb36 	bl	8003d14 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016a8:	f002 fb08 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 80016ac:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b0:	4a21      	ldr	r2, [pc, #132]	; (8001738 <HAL_InitTick+0xc8>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0c9b      	lsrs	r3, r3, #18
 80016b8:	3b01      	subs	r3, #1
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <HAL_InitTick+0xcc>)
 80016be:	4a20      	ldr	r2, [pc, #128]	; (8001740 <HAL_InitTick+0xd0>)
 80016c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <HAL_InitTick+0xcc>)
 80016c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016ca:	4a1c      	ldr	r2, [pc, #112]	; (800173c <HAL_InitTick+0xcc>)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HAL_InitTick+0xcc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_InitTick+0xcc>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80016dc:	4817      	ldr	r0, [pc, #92]	; (800173c <HAL_InitTick+0xcc>)
 80016de:	f002 fddf 	bl	80042a0 <HAL_TIM_Base_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80016e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d11b      	bne.n	8001728 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016f0:	4812      	ldr	r0, [pc, #72]	; (800173c <HAL_InitTick+0xcc>)
 80016f2:	f002 fe37 	bl	8004364 <HAL_TIM_Base_Start_IT>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80016fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001700:	2b00      	cmp	r3, #0
 8001702:	d111      	bne.n	8001728 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001704:	2036      	movs	r0, #54	; 0x36
 8001706:	f001 fad7 	bl	8002cb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d808      	bhi.n	8001722 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	2036      	movs	r0, #54	; 0x36
 8001716:	f001 fab5 	bl	8002c84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_InitTick+0xd4>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	e002      	b.n	8001728 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800172c:	4618      	mov	r0, r3
 800172e:	3730      	adds	r7, #48	; 0x30
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	431bde83 	.word	0x431bde83
 800173c:	200002f8 	.word	0x200002f8
 8001740:	40001000 	.word	0x40001000
 8001744:	20000004 	.word	0x20000004

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <USART2_IRQHandler+0x10>)
 80017a6:	f004 fc41 	bl	800602c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000198 	.word	0x20000198

080017b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80017b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017bc:	f001 fce4 	bl	8003188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <TIM6_DAC_IRQHandler+0x10>)
 80017ca:	f003 f849 	bl	8004860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200002f8 	.word	0x200002f8

080017d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <SystemInit+0x20>)
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <SystemInit+0x20>)
 80017e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001800:	480d      	ldr	r0, [pc, #52]	; (8001838 <LoopForever+0x6>)
  ldr r1, =_edata
 8001802:	490e      	ldr	r1, [pc, #56]	; (800183c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001804:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <LoopForever+0xe>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001818:	4c0b      	ldr	r4, [pc, #44]	; (8001848 <LoopForever+0x16>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001826:	f7ff ffd7 	bl	80017d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182a:	f006 fb53 	bl	8007ed4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800182e:	f7fe fe71 	bl	8000514 <main>

08001832 <LoopForever>:

LoopForever:
    b LoopForever
 8001832:	e7fe      	b.n	8001832 <LoopForever>
  ldr   r0, =_estack
 8001834:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800183c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001840:	0800813c 	.word	0x0800813c
  ldr r2, =_sbss
 8001844:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001848:	20000348 	.word	0x20000348

0800184c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC1_2_IRQHandler>

0800184e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f001 fa08 	bl	8002c6e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800185e:	200f      	movs	r0, #15
 8001860:	f7ff ff06 	bl	8001670 <HAL_InitTick>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	e001      	b.n	8001874 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001870:	f7ff fc56 	bl	8001120 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001874:	79fb      	ldrb	r3, [r7, #7]

}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_IncTick+0x1c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_IncTick+0x20>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4413      	add	r3, r2
 800188e:	4a03      	ldr	r2, [pc, #12]	; (800189c <HAL_IncTick+0x1c>)
 8001890:	6013      	str	r3, [r2, #0]
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	20000344 	.word	0x20000344
 80018a0:	20000008 	.word	0x20000008

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000344 	.word	0x20000344

080018bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff ffee 	bl	80018a4 <HAL_GetTick>
 80018c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d4:	d004      	beq.n	80018e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_Delay+0x40>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4413      	add	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e0:	bf00      	nop
 80018e2:	f7ff ffdf 	bl	80018a4 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d8f7      	bhi.n	80018e2 <HAL_Delay+0x26>
  {
  }
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000008 	.word	0x20000008

08001900 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	609a      	str	r2, [r3, #8]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	609a      	str	r2, [r3, #8]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3360      	adds	r3, #96	; 0x60
 800197a:	461a      	mov	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <LL_ADC_SetOffset+0x44>)
 800198a:	4013      	ands	r3, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	4313      	orrs	r3, r2
 8001998:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019a0:	bf00      	nop
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	03fff000 	.word	0x03fff000

080019b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3360      	adds	r3, #96	; 0x60
 80019be:	461a      	mov	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3360      	adds	r3, #96	; 0x60
 80019ec:	461a      	mov	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a06:	bf00      	nop
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b087      	sub	sp, #28
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3360      	adds	r3, #96	; 0x60
 8001a22:	461a      	mov	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a3c:	bf00      	nop
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3360      	adds	r3, #96	; 0x60
 8001a58:	461a      	mov	r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	615a      	str	r2, [r3, #20]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3330      	adds	r3, #48	; 0x30
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	4413      	add	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	211f      	movs	r1, #31
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0e9b      	lsrs	r3, r3, #26
 8001adc:	f003 011f 	and.w	r1, r3, #31
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	431a      	orrs	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3314      	adds	r3, #20
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	0e5b      	lsrs	r3, r3, #25
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	4413      	add	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	0d1b      	lsrs	r3, r3, #20
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	2107      	movs	r1, #7
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	401a      	ands	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	0d1b      	lsrs	r3, r3, #20
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	431a      	orrs	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b46:	bf00      	nop
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d10a      	bne.n	8001b7e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b74:	431a      	orrs	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	407f0000 	.word	0x407f0000

08001ba4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6093      	str	r3, [r2, #8]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bdc:	d101      	bne.n	8001be2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c2c:	d101      	bne.n	8001c32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <LL_ADC_IsEnabled+0x18>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <LL_ADC_IsEnabled+0x1a>
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d101      	bne.n	8001c7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d101      	bne.n	8001ca4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e1af      	b.n	800202e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fa43 	bl	8001168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff67 	bl	8001bc8 <LL_ADC_IsDeepPowerDownEnabled>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff4d 	bl	8001ba4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff82 	bl	8001c18 <LL_ADC_IsInternalRegulatorEnabled>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d115      	bne.n	8001d46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff66 	bl	8001bf0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d24:	4b9f      	ldr	r3, [pc, #636]	; (8001fa4 <HAL_ADC_Init+0x2f0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	4a9f      	ldr	r2, [pc, #636]	; (8001fa8 <HAL_ADC_Init+0x2f4>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	099b      	lsrs	r3, r3, #6
 8001d32:	3301      	adds	r3, #1
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d38:	e002      	b.n	8001d40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f9      	bne.n	8001d3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff64 	bl	8001c18 <LL_ADC_IsInternalRegulatorEnabled>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10d      	bne.n	8001d72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5a:	f043 0210 	orr.w	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff75 	bl	8001c66 <LL_ADC_REG_IsConversionOngoing>
 8001d7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 8148 	bne.w	800201c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f040 8144 	bne.w	800201c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d9c:	f043 0202 	orr.w	r2, r3, #2
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff49 	bl	8001c40 <LL_ADC_IsEnabled>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d141      	bne.n	8001e38 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dbc:	d004      	beq.n	8001dc8 <HAL_ADC_Init+0x114>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a7a      	ldr	r2, [pc, #488]	; (8001fac <HAL_ADC_Init+0x2f8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d10f      	bne.n	8001de8 <HAL_ADC_Init+0x134>
 8001dc8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001dcc:	f7ff ff38 	bl	8001c40 <LL_ADC_IsEnabled>
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	4876      	ldr	r0, [pc, #472]	; (8001fac <HAL_ADC_Init+0x2f8>)
 8001dd4:	f7ff ff34 	bl	8001c40 <LL_ADC_IsEnabled>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4323      	orrs	r3, r4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	e012      	b.n	8001e0e <HAL_ADC_Init+0x15a>
 8001de8:	4871      	ldr	r0, [pc, #452]	; (8001fb0 <HAL_ADC_Init+0x2fc>)
 8001dea:	f7ff ff29 	bl	8001c40 <LL_ADC_IsEnabled>
 8001dee:	4604      	mov	r4, r0
 8001df0:	4870      	ldr	r0, [pc, #448]	; (8001fb4 <HAL_ADC_Init+0x300>)
 8001df2:	f7ff ff25 	bl	8001c40 <LL_ADC_IsEnabled>
 8001df6:	4603      	mov	r3, r0
 8001df8:	431c      	orrs	r4, r3
 8001dfa:	486f      	ldr	r0, [pc, #444]	; (8001fb8 <HAL_ADC_Init+0x304>)
 8001dfc:	f7ff ff20 	bl	8001c40 <LL_ADC_IsEnabled>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4323      	orrs	r3, r4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d012      	beq.n	8001e38 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e1a:	d004      	beq.n	8001e26 <HAL_ADC_Init+0x172>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a62      	ldr	r2, [pc, #392]	; (8001fac <HAL_ADC_Init+0x2f8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_Init+0x176>
 8001e26:	4a65      	ldr	r2, [pc, #404]	; (8001fbc <HAL_ADC_Init+0x308>)
 8001e28:	e000      	b.n	8001e2c <HAL_ADC_Init+0x178>
 8001e2a:	4a65      	ldr	r2, [pc, #404]	; (8001fc0 <HAL_ADC_Init+0x30c>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f7ff fd64 	bl	8001900 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7f5b      	ldrb	r3, [r3, #29]
 8001e3c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e42:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e48:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e4e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e56:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d106      	bne.n	8001e74 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	045b      	lsls	r3, r3, #17
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d009      	beq.n	8001e90 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_ADC_Init+0x310>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	69b9      	ldr	r1, [r7, #24]
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fed1 	bl	8001c66 <LL_ADC_REG_IsConversionOngoing>
 8001ec4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fede 	bl	8001c8c <LL_ADC_INJ_IsConversionOngoing>
 8001ed0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d17f      	bne.n	8001fd8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d17c      	bne.n	8001fd8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ee2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001efa:	f023 0302 	bic.w	r3, r3, #2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	69b9      	ldr	r1, [r7, #24]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d017      	beq.n	8001f40 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f28:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6911      	ldr	r1, [r2, #16]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f3e:	e013      	b.n	8001f68 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f64:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d12a      	bne.n	8001fc8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f88:	4311      	orrs	r1, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f94:	430a      	orrs	r2, r1
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	611a      	str	r2, [r3, #16]
 8001fa2:	e019      	b.n	8001fd8 <HAL_ADC_Init+0x324>
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	053e2d63 	.word	0x053e2d63
 8001fac:	50000100 	.word	0x50000100
 8001fb0:	50000400 	.word	0x50000400
 8001fb4:	50000500 	.word	0x50000500
 8001fb8:	50000600 	.word	0x50000600
 8001fbc:	50000300 	.word	0x50000300
 8001fc0:	50000700 	.word	0x50000700
 8001fc4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d10c      	bne.n	8001ffa <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f023 010f 	bic.w	r1, r3, #15
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	1e5a      	subs	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff8:	e007      	b.n	800200a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 020f 	bic.w	r2, r2, #15
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	f023 0303 	bic.w	r3, r3, #3
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	65da      	str	r2, [r3, #92]	; 0x5c
 800201a:	e007      	b.n	800202c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	f043 0210 	orr.w	r2, r3, #16
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800202c:	7ffb      	ldrb	r3, [r7, #31]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd90      	pop	{r4, r7, pc}
 8002036:	bf00      	nop

08002038 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b0b6      	sub	sp, #216	; 0xd8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002052:	2b01      	cmp	r3, #1
 8002054:	d102      	bne.n	800205c <HAL_ADC_ConfigChannel+0x24>
 8002056:	2302      	movs	r3, #2
 8002058:	f000 bc13 	b.w	8002882 <HAL_ADC_ConfigChannel+0x84a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fdfc 	bl	8001c66 <LL_ADC_REG_IsConversionOngoing>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	f040 83f3 	bne.w	800285c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6859      	ldr	r1, [r3, #4]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	f7ff fd0e 	bl	8001aa4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fdea 	bl	8001c66 <LL_ADC_REG_IsConversionOngoing>
 8002092:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fdf6 	bl	8001c8c <LL_ADC_INJ_IsConversionOngoing>
 80020a0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f040 81d9 	bne.w	8002460 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 81d4 	bne.w	8002460 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020c0:	d10f      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2200      	movs	r2, #0
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7ff fd15 	bl	8001afc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fccf 	bl	8001a7e <LL_ADC_SetSamplingTimeCommonConfig>
 80020e0:	e00e      	b.n	8002100 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	461a      	mov	r2, r3
 80020f0:	f7ff fd04 	bl	8001afc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fcbf 	bl	8001a7e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	08db      	lsrs	r3, r3, #3
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b04      	cmp	r3, #4
 8002120:	d022      	beq.n	8002168 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6919      	ldr	r1, [r3, #16]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002132:	f7ff fc19 	bl	8001968 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6919      	ldr	r1, [r3, #16]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	461a      	mov	r2, r3
 8002144:	f7ff fc65 	bl	8001a12 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	6919      	ldr	r1, [r3, #16]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	7f1b      	ldrb	r3, [r3, #28]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d102      	bne.n	800215e <HAL_ADC_ConfigChannel+0x126>
 8002158:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800215c:	e000      	b.n	8002160 <HAL_ADC_ConfigChannel+0x128>
 800215e:	2300      	movs	r3, #0
 8002160:	461a      	mov	r2, r3
 8002162:	f7ff fc71 	bl	8001a48 <LL_ADC_SetOffsetSaturation>
 8002166:	e17b      	b.n	8002460 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fc1e 	bl	80019b0 <LL_ADC_GetOffsetChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10a      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x15c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fc13 	bl	80019b0 <LL_ADC_GetOffsetChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	0e9b      	lsrs	r3, r3, #26
 800218e:	f003 021f 	and.w	r2, r3, #31
 8002192:	e01e      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x19a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fc08 	bl	80019b0 <LL_ADC_GetOffsetChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80021c2:	2320      	movs	r3, #32
 80021c4:	e004      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80021c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x1b2>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	e018      	b.n	800221c <HAL_ADC_ConfigChannel+0x1e4>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800220e:	2320      	movs	r3, #32
 8002210:	e004      	b.n	800221c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002212:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800221c:	429a      	cmp	r2, r3
 800221e:	d106      	bne.n	800222e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fbd7 	bl	80019dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2101      	movs	r1, #1
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fbbb 	bl	80019b0 <LL_ADC_GetOffsetChannel>
 800223a:	4603      	mov	r3, r0
 800223c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10a      	bne.n	800225a <HAL_ADC_ConfigChannel+0x222>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2101      	movs	r1, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fbb0 	bl	80019b0 <LL_ADC_GetOffsetChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	0e9b      	lsrs	r3, r3, #26
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	e01e      	b.n	8002298 <HAL_ADC_ConfigChannel+0x260>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2101      	movs	r1, #1
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fba5 	bl	80019b0 <LL_ADC_GetOffsetChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002278:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800227c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002280:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002288:	2320      	movs	r3, #32
 800228a:	e004      	b.n	8002296 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800228c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d105      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x278>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	e018      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x2aa>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80022d4:	2320      	movs	r3, #32
 80022d6:	e004      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80022d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d106      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	2101      	movs	r1, #1
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fb74 	bl	80019dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2102      	movs	r1, #2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fb58 	bl	80019b0 <LL_ADC_GetOffsetChannel>
 8002300:	4603      	mov	r3, r0
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10a      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x2e8>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2102      	movs	r1, #2
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fb4d 	bl	80019b0 <LL_ADC_GetOffsetChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	0e9b      	lsrs	r3, r3, #26
 800231a:	f003 021f 	and.w	r2, r3, #31
 800231e:	e01e      	b.n	800235e <HAL_ADC_ConfigChannel+0x326>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2102      	movs	r1, #2
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fb42 	bl	80019b0 <LL_ADC_GetOffsetChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800233e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800234e:	2320      	movs	r3, #32
 8002350:	e004      	b.n	800235c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002352:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x33e>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	0e9b      	lsrs	r3, r3, #26
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	e016      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x36c>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002388:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800238a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800238e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002396:	2320      	movs	r3, #32
 8002398:	e004      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800239a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d106      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2200      	movs	r2, #0
 80023ae:	2102      	movs	r1, #2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fb13 	bl	80019dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2103      	movs	r1, #3
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff faf7 	bl	80019b0 <LL_ADC_GetOffsetChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10a      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x3aa>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2103      	movs	r1, #3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff faec 	bl	80019b0 <LL_ADC_GetOffsetChannel>
 80023d8:	4603      	mov	r3, r0
 80023da:	0e9b      	lsrs	r3, r3, #26
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	e017      	b.n	8002412 <HAL_ADC_ConfigChannel+0x3da>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2103      	movs	r1, #3
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fae1 	bl	80019b0 <LL_ADC_GetOffsetChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023fc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e003      	b.n	8002410 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241a:	2b00      	cmp	r3, #0
 800241c:	d105      	bne.n	800242a <HAL_ADC_ConfigChannel+0x3f2>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0e9b      	lsrs	r3, r3, #26
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	e011      	b.n	800244e <HAL_ADC_ConfigChannel+0x416>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800243a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800243c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002442:	2320      	movs	r3, #32
 8002444:	e003      	b.n	800244e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800244e:	429a      	cmp	r2, r3
 8002450:	d106      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2200      	movs	r2, #0
 8002458:	2103      	movs	r1, #3
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fabe 	bl	80019dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fbeb 	bl	8001c40 <LL_ADC_IsEnabled>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 813d 	bne.w	80026ec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	461a      	mov	r2, r3
 8002480:	f7ff fb68 	bl	8001b54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4aa2      	ldr	r2, [pc, #648]	; (8002714 <HAL_ADC_ConfigChannel+0x6dc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	f040 812e 	bne.w	80026ec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10b      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x480>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0e9b      	lsrs	r3, r3, #26
 80024a6:	3301      	adds	r3, #1
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	2b09      	cmp	r3, #9
 80024ae:	bf94      	ite	ls
 80024b0:	2301      	movls	r3, #1
 80024b2:	2300      	movhi	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e019      	b.n	80024ec <HAL_ADC_ConfigChannel+0x4b4>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80024d0:	2320      	movs	r3, #32
 80024d2:	e003      	b.n	80024dc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80024d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2b09      	cmp	r3, #9
 80024e4:	bf94      	ite	ls
 80024e6:	2301      	movls	r3, #1
 80024e8:	2300      	movhi	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d079      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d107      	bne.n	800250c <HAL_ADC_ConfigChannel+0x4d4>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0e9b      	lsrs	r3, r3, #26
 8002502:	3301      	adds	r3, #1
 8002504:	069b      	lsls	r3, r3, #26
 8002506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800250a:	e015      	b.n	8002538 <HAL_ADC_ConfigChannel+0x500>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800251a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800251e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e003      	b.n	8002530 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	3301      	adds	r3, #1
 8002532:	069b      	lsls	r3, r3, #26
 8002534:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x520>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	3301      	adds	r3, #1
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	2101      	movs	r1, #1
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	e017      	b.n	8002588 <HAL_ADC_ConfigChannel+0x550>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002568:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800256a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002570:	2320      	movs	r3, #32
 8002572:	e003      	b.n	800257c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	ea42 0103 	orr.w	r1, r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x576>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	3301      	adds	r3, #1
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	051b      	lsls	r3, r3, #20
 80025ac:	e018      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x5a8>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80025c6:	2320      	movs	r3, #32
 80025c8:	e003      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80025ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025e0:	430b      	orrs	r3, r1
 80025e2:	e07e      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d107      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x5c8>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	0e9b      	lsrs	r3, r3, #26
 80025f6:	3301      	adds	r3, #1
 80025f8:	069b      	lsls	r3, r3, #26
 80025fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025fe:	e015      	b.n	800262c <HAL_ADC_ConfigChannel+0x5f4>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002618:	2320      	movs	r3, #32
 800261a:	e003      	b.n	8002624 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	3301      	adds	r3, #1
 8002626:	069b      	lsls	r3, r3, #26
 8002628:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HAL_ADC_ConfigChannel+0x614>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0e9b      	lsrs	r3, r3, #26
 800263e:	3301      	adds	r3, #1
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	2101      	movs	r1, #1
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	e017      	b.n	800267c <HAL_ADC_ConfigChannel+0x644>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	61fb      	str	r3, [r7, #28]
  return result;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002664:	2320      	movs	r3, #32
 8002666:	e003      	b.n	8002670 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	3301      	adds	r3, #1
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	ea42 0103 	orr.w	r1, r2, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10d      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x670>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0e9b      	lsrs	r3, r3, #26
 8002692:	3301      	adds	r3, #1
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	3b1e      	subs	r3, #30
 80026a0:	051b      	lsls	r3, r3, #20
 80026a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026a6:	e01b      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x6a8>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	613b      	str	r3, [r7, #16]
  return result;
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80026c0:	2320      	movs	r3, #32
 80026c2:	e003      	b.n	80026cc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	f003 021f 	and.w	r2, r3, #31
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	3b1e      	subs	r3, #30
 80026da:	051b      	lsls	r3, r3, #20
 80026dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026e0:	430b      	orrs	r3, r1
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	6892      	ldr	r2, [r2, #8]
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7ff fa08 	bl	8001afc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_ADC_ConfigChannel+0x6e0>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80be 	beq.w	8002876 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002702:	d004      	beq.n	800270e <HAL_ADC_ConfigChannel+0x6d6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_ADC_ConfigChannel+0x6e4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10a      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x6ec>
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <HAL_ADC_ConfigChannel+0x6e8>)
 8002710:	e009      	b.n	8002726 <HAL_ADC_ConfigChannel+0x6ee>
 8002712:	bf00      	nop
 8002714:	407f0000 	.word	0x407f0000
 8002718:	80080000 	.word	0x80080000
 800271c:	50000100 	.word	0x50000100
 8002720:	50000300 	.word	0x50000300
 8002724:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_ADC_ConfigChannel+0x854>)
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f910 	bl	800194c <LL_ADC_GetCommonPathInternalCh>
 800272c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a56      	ldr	r2, [pc, #344]	; (8002890 <HAL_ADC_ConfigChannel+0x858>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d004      	beq.n	8002744 <HAL_ADC_ConfigChannel+0x70c>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a55      	ldr	r2, [pc, #340]	; (8002894 <HAL_ADC_ConfigChannel+0x85c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d13a      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002744:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d134      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002758:	d005      	beq.n	8002766 <HAL_ADC_ConfigChannel+0x72e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <HAL_ADC_ConfigChannel+0x860>)
 8002760:	4293      	cmp	r3, r2
 8002762:	f040 8085 	bne.w	8002870 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800276e:	d004      	beq.n	800277a <HAL_ADC_ConfigChannel+0x742>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a49      	ldr	r2, [pc, #292]	; (800289c <HAL_ADC_ConfigChannel+0x864>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_ADC_ConfigChannel+0x746>
 800277a:	4a49      	ldr	r2, [pc, #292]	; (80028a0 <HAL_ADC_ConfigChannel+0x868>)
 800277c:	e000      	b.n	8002780 <HAL_ADC_ConfigChannel+0x748>
 800277e:	4a43      	ldr	r2, [pc, #268]	; (800288c <HAL_ADC_ConfigChannel+0x854>)
 8002780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002784:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002788:	4619      	mov	r1, r3
 800278a:	4610      	mov	r0, r2
 800278c:	f7ff f8cb 	bl	8001926 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002790:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <HAL_ADC_ConfigChannel+0x86c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	4a44      	ldr	r2, [pc, #272]	; (80028a8 <HAL_ADC_ConfigChannel+0x870>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027aa:	e002      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f9      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b8:	e05a      	b.n	8002870 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a3b      	ldr	r2, [pc, #236]	; (80028ac <HAL_ADC_ConfigChannel+0x874>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d125      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x7d8>
 80027c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d11f      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a31      	ldr	r2, [pc, #196]	; (800289c <HAL_ADC_ConfigChannel+0x864>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d104      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x7ac>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a34      	ldr	r2, [pc, #208]	; (80028b0 <HAL_ADC_ConfigChannel+0x878>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d047      	beq.n	8002874 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ec:	d004      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0x7c0>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a2a      	ldr	r2, [pc, #168]	; (800289c <HAL_ADC_ConfigChannel+0x864>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x7c4>
 80027f8:	4a29      	ldr	r2, [pc, #164]	; (80028a0 <HAL_ADC_ConfigChannel+0x868>)
 80027fa:	e000      	b.n	80027fe <HAL_ADC_ConfigChannel+0x7c6>
 80027fc:	4a23      	ldr	r2, [pc, #140]	; (800288c <HAL_ADC_ConfigChannel+0x854>)
 80027fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002806:	4619      	mov	r1, r3
 8002808:	4610      	mov	r0, r2
 800280a:	f7ff f88c 	bl	8001926 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800280e:	e031      	b.n	8002874 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a27      	ldr	r2, [pc, #156]	; (80028b4 <HAL_ADC_ConfigChannel+0x87c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d12d      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800281a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800281e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d127      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_ADC_ConfigChannel+0x864>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d022      	beq.n	8002876 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002838:	d004      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x80c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a17      	ldr	r2, [pc, #92]	; (800289c <HAL_ADC_ConfigChannel+0x864>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x810>
 8002844:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <HAL_ADC_ConfigChannel+0x868>)
 8002846:	e000      	b.n	800284a <HAL_ADC_ConfigChannel+0x812>
 8002848:	4a10      	ldr	r2, [pc, #64]	; (800288c <HAL_ADC_ConfigChannel+0x854>)
 800284a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800284e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f7ff f866 	bl	8001926 <LL_ADC_SetCommonPathInternalCh>
 800285a:	e00c      	b.n	8002876 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	f043 0220 	orr.w	r2, r3, #32
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800286e:	e002      	b.n	8002876 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002870:	bf00      	nop
 8002872:	e000      	b.n	8002876 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002874:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800287e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002882:	4618      	mov	r0, r3
 8002884:	37d8      	adds	r7, #216	; 0xd8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	50000700 	.word	0x50000700
 8002890:	c3210000 	.word	0xc3210000
 8002894:	90c00010 	.word	0x90c00010
 8002898:	50000600 	.word	0x50000600
 800289c:	50000100 	.word	0x50000100
 80028a0:	50000300 	.word	0x50000300
 80028a4:	20000000 	.word	0x20000000
 80028a8:	053e2d63 	.word	0x053e2d63
 80028ac:	c7520000 	.word	0xc7520000
 80028b0:	50000500 	.word	0x50000500
 80028b4:	cb840000 	.word	0xcb840000

080028b8 <LL_ADC_IsEnabled>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <LL_ADC_IsEnabled+0x18>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <LL_ADC_IsEnabled+0x1a>
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_REG_IsConversionOngoing>:
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d101      	bne.n	80028f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b0a1      	sub	sp, #132	; 0x84
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800291e:	2302      	movs	r3, #2
 8002920:	e0e7      	b.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800292a:	2300      	movs	r3, #0
 800292c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800292e:	2300      	movs	r3, #0
 8002930:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800293a:	d102      	bne.n	8002942 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800293c:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	e009      	b.n	8002956 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6e      	ldr	r2, [pc, #440]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d102      	bne.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800294c:	4b6d      	ldr	r3, [pc, #436]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	e001      	b.n	8002956 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10b      	bne.n	8002974 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002960:	f043 0220 	orr.w	r2, r3, #32
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0be      	b.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff ffb1 	bl	80028de <LL_ADC_REG_IsConversionOngoing>
 800297c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff ffab 	bl	80028de <LL_ADC_REG_IsConversionOngoing>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	f040 80a0 	bne.w	8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 809c 	bne.w	8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a0:	d004      	beq.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a55      	ldr	r2, [pc, #340]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d101      	bne.n	80029b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80029ac:	4b56      	ldr	r3, [pc, #344]	; (8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80029ae:	e000      	b.n	80029b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80029b0:	4b56      	ldr	r3, [pc, #344]	; (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80029b2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d04b      	beq.n	8002a54 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ce:	035b      	lsls	r3, r3, #13
 80029d0:	430b      	orrs	r3, r1
 80029d2:	431a      	orrs	r2, r3
 80029d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e0:	d004      	beq.n	80029ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a45      	ldr	r2, [pc, #276]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d10f      	bne.n	8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80029ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029f0:	f7ff ff62 	bl	80028b8 <LL_ADC_IsEnabled>
 80029f4:	4604      	mov	r4, r0
 80029f6:	4841      	ldr	r0, [pc, #260]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029f8:	f7ff ff5e 	bl	80028b8 <LL_ADC_IsEnabled>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4323      	orrs	r3, r4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e012      	b.n	8002a32 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002a0c:	483c      	ldr	r0, [pc, #240]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a0e:	f7ff ff53 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a12:	4604      	mov	r4, r0
 8002a14:	483b      	ldr	r0, [pc, #236]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a16:	f7ff ff4f 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	431c      	orrs	r4, r3
 8002a1e:	483c      	ldr	r0, [pc, #240]	; (8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a20:	f7ff ff4a 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4323      	orrs	r3, r4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d056      	beq.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a3e:	f023 030f 	bic.w	r3, r3, #15
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	6811      	ldr	r1, [r2, #0]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	6892      	ldr	r2, [r2, #8]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a50:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a52:	e047      	b.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a68:	d004      	beq.n	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a23      	ldr	r2, [pc, #140]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d10f      	bne.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002a74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a78:	f7ff ff1e 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	481f      	ldr	r0, [pc, #124]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a80:	f7ff ff1a 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4323      	orrs	r3, r4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	e012      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002a94:	481a      	ldr	r0, [pc, #104]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a96:	f7ff ff0f 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	4819      	ldr	r0, [pc, #100]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a9e:	f7ff ff0b 	bl	80028b8 <LL_ADC_IsEnabled>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	431c      	orrs	r4, r3
 8002aa6:	481a      	ldr	r0, [pc, #104]	; (8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002aa8:	f7ff ff06 	bl	80028b8 <LL_ADC_IsEnabled>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4323      	orrs	r3, r4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d012      	beq.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ac6:	f023 030f 	bic.w	r3, r3, #15
 8002aca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002acc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ace:	e009      	b.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ae2:	e000      	b.n	8002ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002aee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3784      	adds	r7, #132	; 0x84
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd90      	pop	{r4, r7, pc}
 8002afa:	bf00      	nop
 8002afc:	50000100 	.word	0x50000100
 8002b00:	50000400 	.word	0x50000400
 8002b04:	50000500 	.word	0x50000500
 8002b08:	50000300 	.word	0x50000300
 8002b0c:	50000700 	.word	0x50000700
 8002b10:	50000600 	.word	0x50000600

08002b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b30:	4013      	ands	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b46:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	60d3      	str	r3, [r2, #12]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <__NVIC_GetPriorityGrouping+0x18>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	f003 0307 	and.w	r3, r3, #7
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	db0b      	blt.n	8002ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	f003 021f 	and.w	r2, r3, #31
 8002b90:	4907      	ldr	r1, [pc, #28]	; (8002bb0 <__NVIC_EnableIRQ+0x38>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2001      	movs	r0, #1
 8002b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000e100 	.word	0xe000e100

08002bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	6039      	str	r1, [r7, #0]
 8002bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	db0a      	blt.n	8002bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	490c      	ldr	r1, [pc, #48]	; (8002c00 <__NVIC_SetPriority+0x4c>)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	0112      	lsls	r2, r2, #4
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bdc:	e00a      	b.n	8002bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4908      	ldr	r1, [pc, #32]	; (8002c04 <__NVIC_SetPriority+0x50>)
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	3b04      	subs	r3, #4
 8002bec:	0112      	lsls	r2, r2, #4
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	761a      	strb	r2, [r3, #24]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000e100 	.word	0xe000e100
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	; 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f1c3 0307 	rsb	r3, r3, #7
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	bf28      	it	cs
 8002c26:	2304      	movcs	r3, #4
 8002c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d902      	bls.n	8002c38 <NVIC_EncodePriority+0x30>
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3b03      	subs	r3, #3
 8002c36:	e000      	b.n	8002c3a <NVIC_EncodePriority+0x32>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43da      	mvns	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c50:	f04f 31ff 	mov.w	r1, #4294967295
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5a:	43d9      	mvns	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	4313      	orrs	r3, r2
         );
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3724      	adds	r7, #36	; 0x24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff ff4c 	bl	8002b14 <__NVIC_SetPriorityGrouping>
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c92:	f7ff ff63 	bl	8002b5c <__NVIC_GetPriorityGrouping>
 8002c96:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	6978      	ldr	r0, [r7, #20]
 8002c9e:	f7ff ffb3 	bl	8002c08 <NVIC_EncodePriority>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ff82 	bl	8002bb4 <__NVIC_SetPriority>
}
 8002cb0:	bf00      	nop
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ff56 	bl	8002b78 <__NVIC_EnableIRQ>
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d005      	beq.n	8002cf8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	e037      	b.n	8002d68 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 020e 	bic.w	r2, r2, #14
 8002d06:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d16:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0201 	bic.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	2101      	movs	r1, #1
 8002d36:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d44:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00c      	beq.n	8002d68 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d5c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d66:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d00d      	beq.n	8002dba <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2204      	movs	r2, #4
 8002da2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e047      	b.n	8002e4a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 020e 	bic.w	r2, r2, #14
 8002dc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0201 	bic.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002de8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f003 021f 	and.w	r2, r3, #31
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2101      	movs	r1, #1
 8002df8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e06:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00c      	beq.n	8002e2a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e28:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
    }
  }
  return status;
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e62:	e15a      	b.n	800311a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	2101      	movs	r1, #1
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e70:	4013      	ands	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 814c 	beq.w	8003114 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d005      	beq.n	8002e94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d130      	bne.n	8002ef6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eca:	2201      	movs	r2, #1
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	f003 0201 	and.w	r2, r3, #1
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d017      	beq.n	8002f32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d123      	bne.n	8002f86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	08da      	lsrs	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3208      	adds	r2, #8
 8002f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	220f      	movs	r2, #15
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	08da      	lsrs	r2, r3, #3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3208      	adds	r2, #8
 8002f80:	6939      	ldr	r1, [r7, #16]
 8002f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	2203      	movs	r2, #3
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0203 	and.w	r2, r3, #3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80a6 	beq.w	8003114 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc8:	4b5b      	ldr	r3, [pc, #364]	; (8003138 <HAL_GPIO_Init+0x2e4>)
 8002fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fcc:	4a5a      	ldr	r2, [pc, #360]	; (8003138 <HAL_GPIO_Init+0x2e4>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6613      	str	r3, [r2, #96]	; 0x60
 8002fd4:	4b58      	ldr	r3, [pc, #352]	; (8003138 <HAL_GPIO_Init+0x2e4>)
 8002fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fe0:	4a56      	ldr	r2, [pc, #344]	; (800313c <HAL_GPIO_Init+0x2e8>)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	089b      	lsrs	r3, r3, #2
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	220f      	movs	r2, #15
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4013      	ands	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800300a:	d01f      	beq.n	800304c <HAL_GPIO_Init+0x1f8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a4c      	ldr	r2, [pc, #304]	; (8003140 <HAL_GPIO_Init+0x2ec>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d019      	beq.n	8003048 <HAL_GPIO_Init+0x1f4>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a4b      	ldr	r2, [pc, #300]	; (8003144 <HAL_GPIO_Init+0x2f0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d013      	beq.n	8003044 <HAL_GPIO_Init+0x1f0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a4a      	ldr	r2, [pc, #296]	; (8003148 <HAL_GPIO_Init+0x2f4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00d      	beq.n	8003040 <HAL_GPIO_Init+0x1ec>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a49      	ldr	r2, [pc, #292]	; (800314c <HAL_GPIO_Init+0x2f8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d007      	beq.n	800303c <HAL_GPIO_Init+0x1e8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a48      	ldr	r2, [pc, #288]	; (8003150 <HAL_GPIO_Init+0x2fc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d101      	bne.n	8003038 <HAL_GPIO_Init+0x1e4>
 8003034:	2305      	movs	r3, #5
 8003036:	e00a      	b.n	800304e <HAL_GPIO_Init+0x1fa>
 8003038:	2306      	movs	r3, #6
 800303a:	e008      	b.n	800304e <HAL_GPIO_Init+0x1fa>
 800303c:	2304      	movs	r3, #4
 800303e:	e006      	b.n	800304e <HAL_GPIO_Init+0x1fa>
 8003040:	2303      	movs	r3, #3
 8003042:	e004      	b.n	800304e <HAL_GPIO_Init+0x1fa>
 8003044:	2302      	movs	r3, #2
 8003046:	e002      	b.n	800304e <HAL_GPIO_Init+0x1fa>
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <HAL_GPIO_Init+0x1fa>
 800304c:	2300      	movs	r3, #0
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	f002 0203 	and.w	r2, r2, #3
 8003054:	0092      	lsls	r2, r2, #2
 8003056:	4093      	lsls	r3, r2
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800305e:	4937      	ldr	r1, [pc, #220]	; (800313c <HAL_GPIO_Init+0x2e8>)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	089b      	lsrs	r3, r3, #2
 8003064:	3302      	adds	r3, #2
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800306c:	4b39      	ldr	r3, [pc, #228]	; (8003154 <HAL_GPIO_Init+0x300>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	43db      	mvns	r3, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003090:	4a30      	ldr	r2, [pc, #192]	; (8003154 <HAL_GPIO_Init+0x300>)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_GPIO_Init+0x300>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030ba:	4a26      	ldr	r2, [pc, #152]	; (8003154 <HAL_GPIO_Init+0x300>)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030c0:	4b24      	ldr	r3, [pc, #144]	; (8003154 <HAL_GPIO_Init+0x300>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030e4:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <HAL_GPIO_Init+0x300>)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030ea:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <HAL_GPIO_Init+0x300>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800310e:	4a11      	ldr	r2, [pc, #68]	; (8003154 <HAL_GPIO_Init+0x300>)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	3301      	adds	r3, #1
 8003118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	f47f ae9d 	bne.w	8002e64 <HAL_GPIO_Init+0x10>
  }
}
 800312a:	bf00      	nop
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40021000 	.word	0x40021000
 800313c:	40010000 	.word	0x40010000
 8003140:	48000400 	.word	0x48000400
 8003144:	48000800 	.word	0x48000800
 8003148:	48000c00 	.word	0x48000c00
 800314c:	48001000 	.word	0x48001000
 8003150:	48001400 	.word	0x48001400
 8003154:	40010400 	.word	0x40010400

08003158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
 8003164:	4613      	mov	r3, r2
 8003166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003168:	787b      	ldrb	r3, [r7, #1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003174:	e002      	b.n	800317c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f806 	bl	80031b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40010400 	.word	0x40010400

080031b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d141      	bne.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031de:	4b4b      	ldr	r3, [pc, #300]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ea:	d131      	bne.n	8003250 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031ec:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f2:	4a46      	ldr	r2, [pc, #280]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031fc:	4b43      	ldr	r3, [pc, #268]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003204:	4a41      	ldr	r2, [pc, #260]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800320a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800320c:	4b40      	ldr	r3, [pc, #256]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2232      	movs	r2, #50	; 0x32
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	4a3f      	ldr	r2, [pc, #252]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	0c9b      	lsrs	r3, r3, #18
 800321e:	3301      	adds	r3, #1
 8003220:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003222:	e002      	b.n	800322a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	3b01      	subs	r3, #1
 8003228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800322a:	4b38      	ldr	r3, [pc, #224]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d102      	bne.n	800323e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f2      	bne.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800323e:	4b33      	ldr	r3, [pc, #204]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324a:	d158      	bne.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e057      	b.n	8003300 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003250:	4b2e      	ldr	r3, [pc, #184]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003256:	4a2d      	ldr	r2, [pc, #180]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003260:	e04d      	b.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003268:	d141      	bne.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d131      	bne.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800327e:	4a23      	ldr	r2, [pc, #140]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003284:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003290:	4a1e      	ldr	r2, [pc, #120]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003296:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2232      	movs	r2, #50	; 0x32
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	0c9b      	lsrs	r3, r3, #18
 80032aa:	3301      	adds	r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ae:	e002      	b.n	80032b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c2:	d102      	bne.n	80032ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f2      	bne.n	80032b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d6:	d112      	bne.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e011      	b.n	8003300 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032ec:	e007      	b.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032f6:	4a05      	ldr	r2, [pc, #20]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40007000 	.word	0x40007000
 8003310:	20000000 	.word	0x20000000
 8003314:	431bde83 	.word	0x431bde83

08003318 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4a04      	ldr	r2, [pc, #16]	; (8003334 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003326:	6093      	str	r3, [r2, #8]
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40007000 	.word	0x40007000

08003338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e306      	b.n	8003958 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d075      	beq.n	8003442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003356:	4b97      	ldr	r3, [pc, #604]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003360:	4b94      	ldr	r3, [pc, #592]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b0c      	cmp	r3, #12
 800336e:	d102      	bne.n	8003376 <HAL_RCC_OscConfig+0x3e>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b03      	cmp	r3, #3
 8003374:	d002      	beq.n	800337c <HAL_RCC_OscConfig+0x44>
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d10b      	bne.n	8003394 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337c:	4b8d      	ldr	r3, [pc, #564]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d05b      	beq.n	8003440 <HAL_RCC_OscConfig+0x108>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d157      	bne.n	8003440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e2e1      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339c:	d106      	bne.n	80033ac <HAL_RCC_OscConfig+0x74>
 800339e:	4b85      	ldr	r3, [pc, #532]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a84      	ldr	r2, [pc, #528]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e01d      	b.n	80033e8 <HAL_RCC_OscConfig+0xb0>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x98>
 80033b6:	4b7f      	ldr	r3, [pc, #508]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7e      	ldr	r2, [pc, #504]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80033bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b7c      	ldr	r3, [pc, #496]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a7b      	ldr	r2, [pc, #492]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80033c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e00b      	b.n	80033e8 <HAL_RCC_OscConfig+0xb0>
 80033d0:	4b78      	ldr	r3, [pc, #480]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a77      	ldr	r2, [pc, #476]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80033d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b75      	ldr	r3, [pc, #468]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a74      	ldr	r2, [pc, #464]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80033e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d013      	beq.n	8003418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fe fa58 	bl	80018a4 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f8:	f7fe fa54 	bl	80018a4 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e2a6      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800340a:	4b6a      	ldr	r3, [pc, #424]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0xc0>
 8003416:	e014      	b.n	8003442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fe fa44 	bl	80018a4 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003420:	f7fe fa40 	bl	80018a4 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b64      	cmp	r3, #100	; 0x64
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e292      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003432:	4b60      	ldr	r3, [pc, #384]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0xe8>
 800343e:	e000      	b.n	8003442 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d075      	beq.n	800353a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344e:	4b59      	ldr	r3, [pc, #356]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003458:	4b56      	ldr	r3, [pc, #344]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	d102      	bne.n	800346e <HAL_RCC_OscConfig+0x136>
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d002      	beq.n	8003474 <HAL_RCC_OscConfig+0x13c>
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d11f      	bne.n	80034b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003474:	4b4f      	ldr	r3, [pc, #316]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_OscConfig+0x154>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e265      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348c:	4b49      	ldr	r3, [pc, #292]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	4946      	ldr	r1, [pc, #280]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034a0:	4b45      	ldr	r3, [pc, #276]	; (80035b8 <HAL_RCC_OscConfig+0x280>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe f8e3 	bl	8001670 <HAL_InitTick>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d043      	beq.n	8003538 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e251      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d023      	beq.n	8003504 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034bc:	4b3d      	ldr	r3, [pc, #244]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a3c      	ldr	r2, [pc, #240]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80034c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe f9ec 	bl	80018a4 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d0:	f7fe f9e8 	bl	80018a4 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e23a      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034e2:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ee:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	061b      	lsls	r3, r3, #24
 80034fc:	492d      	ldr	r1, [pc, #180]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
 8003502:	e01a      	b.n	800353a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003504:	4b2b      	ldr	r3, [pc, #172]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 800350a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800350e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe f9c8 	bl	80018a4 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003518:	f7fe f9c4 	bl	80018a4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e216      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x1e0>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003538:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d041      	beq.n	80035ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01c      	beq.n	8003588 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354e:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 8003550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003554:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355e:	f7fe f9a1 	bl	80018a4 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003566:	f7fe f99d 	bl	80018a4 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e1ef      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003578:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 800357a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0ef      	beq.n	8003566 <HAL_RCC_OscConfig+0x22e>
 8003586:	e020      	b.n	80035ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 800358a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <HAL_RCC_OscConfig+0x27c>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003598:	f7fe f984 	bl	80018a4 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800359e:	e00d      	b.n	80035bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a0:	f7fe f980 	bl	80018a4 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d906      	bls.n	80035bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e1d2      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000
 80035b8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035bc:	4b8c      	ldr	r3, [pc, #560]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 80035be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ea      	bne.n	80035a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80a6 	beq.w	8003724 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d8:	2300      	movs	r3, #0
 80035da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035dc:	4b84      	ldr	r3, [pc, #528]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_OscConfig+0x2b4>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x2b6>
 80035ec:	2300      	movs	r3, #0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00d      	beq.n	800360e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f2:	4b7f      	ldr	r3, [pc, #508]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	4a7e      	ldr	r2, [pc, #504]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fc:	6593      	str	r3, [r2, #88]	; 0x58
 80035fe:	4b7c      	ldr	r3, [pc, #496]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800360a:	2301      	movs	r3, #1
 800360c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360e:	4b79      	ldr	r3, [pc, #484]	; (80037f4 <HAL_RCC_OscConfig+0x4bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d118      	bne.n	800364c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800361a:	4b76      	ldr	r3, [pc, #472]	; (80037f4 <HAL_RCC_OscConfig+0x4bc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a75      	ldr	r2, [pc, #468]	; (80037f4 <HAL_RCC_OscConfig+0x4bc>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003626:	f7fe f93d 	bl	80018a4 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362e:	f7fe f939 	bl	80018a4 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e18b      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003640:	4b6c      	ldr	r3, [pc, #432]	; (80037f4 <HAL_RCC_OscConfig+0x4bc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d108      	bne.n	8003666 <HAL_RCC_OscConfig+0x32e>
 8003654:	4b66      	ldr	r3, [pc, #408]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	4a65      	ldr	r2, [pc, #404]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003664:	e024      	b.n	80036b0 <HAL_RCC_OscConfig+0x378>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b05      	cmp	r3, #5
 800366c:	d110      	bne.n	8003690 <HAL_RCC_OscConfig+0x358>
 800366e:	4b60      	ldr	r3, [pc, #384]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003674:	4a5e      	ldr	r2, [pc, #376]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 8003676:	f043 0304 	orr.w	r3, r3, #4
 800367a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800367e:	4b5c      	ldr	r3, [pc, #368]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	4a5a      	ldr	r2, [pc, #360]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800368e:	e00f      	b.n	80036b0 <HAL_RCC_OscConfig+0x378>
 8003690:	4b57      	ldr	r3, [pc, #348]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	4a56      	ldr	r2, [pc, #344]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a0:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	4a52      	ldr	r2, [pc, #328]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 80036a8:	f023 0304 	bic.w	r3, r3, #4
 80036ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d016      	beq.n	80036e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe f8f4 	bl	80018a4 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c0:	f7fe f8f0 	bl	80018a4 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e140      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d6:	4b46      	ldr	r3, [pc, #280]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ed      	beq.n	80036c0 <HAL_RCC_OscConfig+0x388>
 80036e4:	e015      	b.n	8003712 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fe f8dd 	bl	80018a4 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fe f8d9 	bl	80018a4 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e129      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003704:	4b3a      	ldr	r3, [pc, #232]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ed      	bne.n	80036ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003712:	7ffb      	ldrb	r3, [r7, #31]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d105      	bne.n	8003724 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003718:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	4a34      	ldr	r2, [pc, #208]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 800371e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003722:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d03c      	beq.n	80037aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01c      	beq.n	8003772 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003738:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 800373a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800373e:	4a2c      	ldr	r2, [pc, #176]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fe f8ac 	bl	80018a4 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003750:	f7fe f8a8 	bl	80018a4 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e0fa      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003762:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 8003764:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ef      	beq.n	8003750 <HAL_RCC_OscConfig+0x418>
 8003770:	e01b      	b.n	80037aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003772:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 8003774:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003778:	4a1d      	ldr	r2, [pc, #116]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003782:	f7fe f88f 	bl	80018a4 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800378a:	f7fe f88b 	bl	80018a4 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0dd      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 800379e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1ef      	bne.n	800378a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80d1 	beq.w	8003956 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037b4:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b0c      	cmp	r3, #12
 80037be:	f000 808b 	beq.w	80038d8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d15e      	bne.n	8003888 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a08      	ldr	r2, [pc, #32]	; (80037f0 <HAL_RCC_OscConfig+0x4b8>)
 80037d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fe f865 	bl	80018a4 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037dc:	e00c      	b.n	80037f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037de:	f7fe f861 	bl	80018a4 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d905      	bls.n	80037f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e0b3      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f8:	4b59      	ldr	r3, [pc, #356]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ec      	bne.n	80037de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003804:	4b56      	ldr	r3, [pc, #344]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	4b56      	ldr	r3, [pc, #344]	; (8003964 <HAL_RCC_OscConfig+0x62c>)
 800380a:	4013      	ands	r3, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6a11      	ldr	r1, [r2, #32]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003814:	3a01      	subs	r2, #1
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	4311      	orrs	r1, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800381e:	0212      	lsls	r2, r2, #8
 8003820:	4311      	orrs	r1, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003826:	0852      	lsrs	r2, r2, #1
 8003828:	3a01      	subs	r2, #1
 800382a:	0552      	lsls	r2, r2, #21
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003832:	0852      	lsrs	r2, r2, #1
 8003834:	3a01      	subs	r2, #1
 8003836:	0652      	lsls	r2, r2, #25
 8003838:	4311      	orrs	r1, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800383e:	06d2      	lsls	r2, r2, #27
 8003840:	430a      	orrs	r2, r1
 8003842:	4947      	ldr	r1, [pc, #284]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 8003844:	4313      	orrs	r3, r2
 8003846:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003848:	4b45      	ldr	r3, [pc, #276]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a44      	ldr	r2, [pc, #272]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 800384e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003852:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003854:	4b42      	ldr	r3, [pc, #264]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a41      	ldr	r2, [pc, #260]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 800385a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fe f820 	bl	80018a4 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003868:	f7fe f81c 	bl	80018a4 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e06e      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387a:	4b39      	ldr	r3, [pc, #228]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x530>
 8003886:	e066      	b.n	8003956 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003888:	4b35      	ldr	r3, [pc, #212]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a34      	ldr	r2, [pc, #208]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 800388e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003892:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003894:	4b32      	ldr	r3, [pc, #200]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a31      	ldr	r2, [pc, #196]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 800389a:	f023 0303 	bic.w	r3, r3, #3
 800389e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038a0:	4b2f      	ldr	r3, [pc, #188]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a2e      	ldr	r2, [pc, #184]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 80038a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fd fff8 	bl	80018a4 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fd fff4 	bl	80018a4 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e046      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ca:	4b25      	ldr	r3, [pc, #148]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x580>
 80038d6:	e03e      	b.n	8003956 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e039      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038e4:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <HAL_RCC_OscConfig+0x628>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f003 0203 	and.w	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d12c      	bne.n	8003952 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	3b01      	subs	r3, #1
 8003904:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d123      	bne.n	8003952 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d11b      	bne.n	8003952 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d113      	bne.n	8003952 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	3b01      	subs	r3, #1
 8003938:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d109      	bne.n	8003952 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	3b01      	subs	r3, #1
 800394c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d001      	beq.n	8003956 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000
 8003964:	019f800c 	.word	0x019f800c

08003968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e11e      	b.n	8003bbe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003980:	4b91      	ldr	r3, [pc, #580]	; (8003bc8 <HAL_RCC_ClockConfig+0x260>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d910      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b8e      	ldr	r3, [pc, #568]	; (8003bc8 <HAL_RCC_ClockConfig+0x260>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 020f 	bic.w	r2, r3, #15
 8003996:	498c      	ldr	r1, [pc, #560]	; (8003bc8 <HAL_RCC_ClockConfig+0x260>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b8a      	ldr	r3, [pc, #552]	; (8003bc8 <HAL_RCC_ClockConfig+0x260>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e106      	b.n	8003bbe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d073      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d129      	bne.n	8003a18 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c4:	4b81      	ldr	r3, [pc, #516]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0f4      	b.n	8003bbe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039d4:	f000 f9d0 	bl	8003d78 <RCC_GetSysClockFreqFromPLLSource>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4a7c      	ldr	r2, [pc, #496]	; (8003bd0 <HAL_RCC_ClockConfig+0x268>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d93f      	bls.n	8003a62 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039e2:	4b7a      	ldr	r3, [pc, #488]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d033      	beq.n	8003a62 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d12f      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a02:	4b72      	ldr	r3, [pc, #456]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a0a:	4a70      	ldr	r2, [pc, #448]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e024      	b.n	8003a62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a20:	4b6a      	ldr	r3, [pc, #424]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d109      	bne.n	8003a40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0c6      	b.n	8003bbe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a30:	4b66      	ldr	r3, [pc, #408]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0be      	b.n	8003bbe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a40:	f000 f8ce 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4a61      	ldr	r2, [pc, #388]	; (8003bd0 <HAL_RCC_ClockConfig+0x268>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d909      	bls.n	8003a62 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a4e:	4b5f      	ldr	r3, [pc, #380]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a56:	4a5d      	ldr	r2, [pc, #372]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a5e:	2380      	movs	r3, #128	; 0x80
 8003a60:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a62:	4b5a      	ldr	r3, [pc, #360]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f023 0203 	bic.w	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4957      	ldr	r1, [pc, #348]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a74:	f7fd ff16 	bl	80018a4 <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7c:	f7fd ff12 	bl	80018a4 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e095      	b.n	8003bbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a92:	4b4e      	ldr	r3, [pc, #312]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 020c 	and.w	r2, r3, #12
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d1eb      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d023      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003abc:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4a42      	ldr	r2, [pc, #264]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003ac2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ac6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ad4:	4b3d      	ldr	r3, [pc, #244]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003adc:	4a3b      	ldr	r2, [pc, #236]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003ade:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ae2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b39      	ldr	r3, [pc, #228]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4936      	ldr	r1, [pc, #216]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b80      	cmp	r3, #128	; 0x80
 8003afc:	d105      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003afe:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	4a32      	ldr	r2, [pc, #200]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003b04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b08:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b0a:	4b2f      	ldr	r3, [pc, #188]	; (8003bc8 <HAL_RCC_ClockConfig+0x260>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d21d      	bcs.n	8003b54 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b18:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <HAL_RCC_ClockConfig+0x260>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 020f 	bic.w	r2, r3, #15
 8003b20:	4929      	ldr	r1, [pc, #164]	; (8003bc8 <HAL_RCC_ClockConfig+0x260>)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b28:	f7fd febc 	bl	80018a4 <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b30:	f7fd feb8 	bl	80018a4 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e03b      	b.n	8003bbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <HAL_RCC_ClockConfig+0x260>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1ed      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b60:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4917      	ldr	r1, [pc, #92]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d009      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	490f      	ldr	r1, [pc, #60]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b92:	f000 f825 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 8003b96:	4602      	mov	r2, r0
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_RCC_ClockConfig+0x264>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	490c      	ldr	r1, [pc, #48]	; (8003bd4 <HAL_RCC_ClockConfig+0x26c>)
 8003ba4:	5ccb      	ldrb	r3, [r1, r3]
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bae:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <HAL_RCC_ClockConfig+0x270>)
 8003bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <HAL_RCC_ClockConfig+0x274>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd fd5a 	bl	8001670 <HAL_InitTick>
 8003bbc:	4603      	mov	r3, r0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40022000 	.word	0x40022000
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	04c4b400 	.word	0x04c4b400
 8003bd4:	080080ec 	.word	0x080080ec
 8003bd8:	20000000 	.word	0x20000000
 8003bdc:	20000004 	.word	0x20000004

08003be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003be6:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d102      	bne.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bf2:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	e047      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d102      	bne.n	8003c0a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c04:	4b26      	ldr	r3, [pc, #152]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	e03e      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c0a:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d136      	bne.n	8003c84 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d10c      	bne.n	8003c4e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c34:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	4a16      	ldr	r2, [pc, #88]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c3e:	68d2      	ldr	r2, [r2, #12]
 8003c40:	0a12      	lsrs	r2, r2, #8
 8003c42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	617b      	str	r3, [r7, #20]
      break;
 8003c4c:	e00c      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c4e:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c56:	4a10      	ldr	r2, [pc, #64]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c58:	68d2      	ldr	r2, [r2, #12]
 8003c5a:	0a12      	lsrs	r2, r2, #8
 8003c5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]
      break;
 8003c66:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	0e5b      	lsrs	r3, r3, #25
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	3301      	adds	r3, #1
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	e001      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c88:	693b      	ldr	r3, [r7, #16]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	00f42400 	.word	0x00f42400
 8003ca0:	016e3600 	.word	0x016e3600

08003ca4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca8:	4b03      	ldr	r3, [pc, #12]	; (8003cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000000 	.word	0x20000000

08003cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cc0:	f7ff fff0 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	4904      	ldr	r1, [pc, #16]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cd2:	5ccb      	ldrb	r3, [r1, r3]
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	080080fc 	.word	0x080080fc

08003ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cec:	f7ff ffda 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	0adb      	lsrs	r3, r3, #11
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	4904      	ldr	r1, [pc, #16]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cfe:	5ccb      	ldrb	r3, [r1, r3]
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	080080fc 	.word	0x080080fc

08003d14 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	220f      	movs	r2, #15
 8003d22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d24:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <HAL_RCC_GetClockConfig+0x5c>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0203 	and.w	r2, r3, #3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d30:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <HAL_RCC_GetClockConfig+0x5c>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <HAL_RCC_GetClockConfig+0x5c>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <HAL_RCC_GetClockConfig+0x5c>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	08db      	lsrs	r3, r3, #3
 8003d4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <HAL_RCC_GetClockConfig+0x60>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 020f 	and.w	r2, r3, #15
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	601a      	str	r2, [r3, #0]
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40022000 	.word	0x40022000

08003d78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d7e:	4b1e      	ldr	r3, [pc, #120]	; (8003df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	3301      	adds	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d10c      	bne.n	8003db6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d9c:	4a17      	ldr	r2, [pc, #92]	; (8003dfc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003da6:	68d2      	ldr	r2, [r2, #12]
 8003da8:	0a12      	lsrs	r2, r2, #8
 8003daa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dae:	fb02 f303 	mul.w	r3, r2, r3
 8003db2:	617b      	str	r3, [r7, #20]
    break;
 8003db4:	e00c      	b.n	8003dd0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003db6:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dc0:	68d2      	ldr	r2, [r2, #12]
 8003dc2:	0a12      	lsrs	r2, r2, #8
 8003dc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dc8:	fb02 f303 	mul.w	r3, r2, r3
 8003dcc:	617b      	str	r3, [r7, #20]
    break;
 8003dce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	0e5b      	lsrs	r3, r3, #25
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dea:	687b      	ldr	r3, [r7, #4]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	016e3600 	.word	0x016e3600
 8003e00:	00f42400 	.word	0x00f42400

08003e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e10:	2300      	movs	r3, #0
 8003e12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8098 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e22:	2300      	movs	r3, #0
 8003e24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e26:	4b43      	ldr	r3, [pc, #268]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10d      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e32:	4b40      	ldr	r3, [pc, #256]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	4a3f      	ldr	r2, [pc, #252]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e3e:	4b3d      	ldr	r3, [pc, #244]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e4e:	4b3a      	ldr	r3, [pc, #232]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a39      	ldr	r2, [pc, #228]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e5a:	f7fd fd23 	bl	80018a4 <HAL_GetTick>
 8003e5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e60:	e009      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e62:	f7fd fd1f 	bl	80018a4 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d902      	bls.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	74fb      	strb	r3, [r7, #19]
        break;
 8003e74:	e005      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e76:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0ef      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e82:	7cfb      	ldrb	r3, [r7, #19]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d159      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e88:	4b2a      	ldr	r3, [pc, #168]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01e      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d019      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ea4:	4b23      	ldr	r3, [pc, #140]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eb0:	4b20      	ldr	r3, [pc, #128]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec0:	4b1c      	ldr	r3, [pc, #112]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	4a1b      	ldr	r2, [pc, #108]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ed0:	4a18      	ldr	r2, [pc, #96]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d016      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fd fcdf 	bl	80018a4 <HAL_GetTick>
 8003ee6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee8:	e00b      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fd fcdb 	bl	80018a4 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d902      	bls.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	74fb      	strb	r3, [r7, #19]
            break;
 8003f00:	e006      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0ec      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10b      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f24:	4903      	ldr	r1, [pc, #12]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f2c:	e008      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	74bb      	strb	r3, [r7, #18]
 8003f32:	e005      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f40:	7c7b      	ldrb	r3, [r7, #17]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d105      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f46:	4ba7      	ldr	r3, [pc, #668]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4a:	4aa6      	ldr	r2, [pc, #664]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f5e:	4ba1      	ldr	r3, [pc, #644]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f023 0203 	bic.w	r2, r3, #3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	499d      	ldr	r1, [pc, #628]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f80:	4b98      	ldr	r3, [pc, #608]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f023 020c 	bic.w	r2, r3, #12
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	4995      	ldr	r1, [pc, #596]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fa2:	4b90      	ldr	r3, [pc, #576]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	498c      	ldr	r1, [pc, #560]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fc4:	4b87      	ldr	r3, [pc, #540]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	4984      	ldr	r1, [pc, #528]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fe6:	4b7f      	ldr	r3, [pc, #508]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	497b      	ldr	r1, [pc, #492]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004008:	4b76      	ldr	r3, [pc, #472]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	4973      	ldr	r1, [pc, #460]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800402a:	4b6e      	ldr	r3, [pc, #440]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	496a      	ldr	r1, [pc, #424]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800404c:	4b65      	ldr	r3, [pc, #404]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	4962      	ldr	r1, [pc, #392]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800406e:	4b5d      	ldr	r3, [pc, #372]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	4959      	ldr	r1, [pc, #356]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004090:	4b54      	ldr	r3, [pc, #336]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004092:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	4951      	ldr	r1, [pc, #324]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040b2:	4b4c      	ldr	r3, [pc, #304]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	4948      	ldr	r1, [pc, #288]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d015      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040d4:	4b43      	ldr	r3, [pc, #268]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	4940      	ldr	r1, [pc, #256]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f2:	d105      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f4:	4b3b      	ldr	r3, [pc, #236]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a3a      	ldr	r2, [pc, #232]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004108:	2b00      	cmp	r3, #0
 800410a:	d015      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800410c:	4b35      	ldr	r3, [pc, #212]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411a:	4932      	ldr	r1, [pc, #200]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800412a:	d105      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800412c:	4b2d      	ldr	r3, [pc, #180]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a2c      	ldr	r2, [pc, #176]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004136:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d015      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004144:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	4924      	ldr	r1, [pc, #144]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004162:	d105      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004164:	4b1f      	ldr	r3, [pc, #124]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4a1e      	ldr	r2, [pc, #120]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800416e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800417c:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418a:	4916      	ldr	r1, [pc, #88]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800419a:	d105      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800419c:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4a10      	ldr	r2, [pc, #64]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d019      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	4908      	ldr	r1, [pc, #32]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041d2:	d109      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4a02      	ldr	r2, [pc, #8]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041de:	60d3      	str	r3, [r2, #12]
 80041e0:	e002      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d015      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041f4:	4b29      	ldr	r3, [pc, #164]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	4926      	ldr	r1, [pc, #152]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004212:	d105      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004214:	4b21      	ldr	r3, [pc, #132]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a20      	ldr	r2, [pc, #128]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800421a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d015      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800422c:	4b1b      	ldr	r3, [pc, #108]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004232:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423a:	4918      	ldr	r1, [pc, #96]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424a:	d105      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a12      	ldr	r2, [pc, #72]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004256:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d015      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800426a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004272:	490a      	ldr	r1, [pc, #40]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004282:	d105      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a04      	ldr	r2, [pc, #16]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800428a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800428e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004290:	7cbb      	ldrb	r3, [r7, #18]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40021000 	.word	0x40021000

080042a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e049      	b.n	8004346 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f841 	bl	800434e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	4610      	mov	r0, r2
 80042e0:	f000 fd7a 	bl	8004dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d001      	beq.n	800437c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e054      	b.n	8004426 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a26      	ldr	r2, [pc, #152]	; (8004434 <HAL_TIM_Base_Start_IT+0xd0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d022      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x80>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a6:	d01d      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x80>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a22      	ldr	r2, [pc, #136]	; (8004438 <HAL_TIM_Base_Start_IT+0xd4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x80>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a21      	ldr	r2, [pc, #132]	; (800443c <HAL_TIM_Base_Start_IT+0xd8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d013      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x80>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <HAL_TIM_Base_Start_IT+0xdc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x80>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <HAL_TIM_Base_Start_IT+0xe0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x80>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <HAL_TIM_Base_Start_IT+0xe4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x80>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1b      	ldr	r2, [pc, #108]	; (800444c <HAL_TIM_Base_Start_IT+0xe8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d115      	bne.n	8004410 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	4b19      	ldr	r3, [pc, #100]	; (8004450 <HAL_TIM_Base_Start_IT+0xec>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b06      	cmp	r3, #6
 80043f4:	d015      	beq.n	8004422 <HAL_TIM_Base_Start_IT+0xbe>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d011      	beq.n	8004422 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0201 	orr.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440e:	e008      	b.n	8004422 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	e000      	b.n	8004424 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004422:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40013400 	.word	0x40013400
 8004448:	40014000 	.word	0x40014000
 800444c:	40015000 	.word	0x40015000
 8004450:	00010007 	.word	0x00010007

08004454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e049      	b.n	80044fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fc ff6e 	bl	800135c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 fca0 	bl	8004dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <HAL_TIM_PWM_Start+0x24>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	bf14      	ite	ne
 8004520:	2301      	movne	r3, #1
 8004522:	2300      	moveq	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	e03c      	b.n	80045a2 <HAL_TIM_PWM_Start+0x9e>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2b04      	cmp	r3, #4
 800452c:	d109      	bne.n	8004542 <HAL_TIM_PWM_Start+0x3e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b01      	cmp	r3, #1
 8004538:	bf14      	ite	ne
 800453a:	2301      	movne	r3, #1
 800453c:	2300      	moveq	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	e02f      	b.n	80045a2 <HAL_TIM_PWM_Start+0x9e>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b08      	cmp	r3, #8
 8004546:	d109      	bne.n	800455c <HAL_TIM_PWM_Start+0x58>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	bf14      	ite	ne
 8004554:	2301      	movne	r3, #1
 8004556:	2300      	moveq	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	e022      	b.n	80045a2 <HAL_TIM_PWM_Start+0x9e>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d109      	bne.n	8004576 <HAL_TIM_PWM_Start+0x72>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b01      	cmp	r3, #1
 800456c:	bf14      	ite	ne
 800456e:	2301      	movne	r3, #1
 8004570:	2300      	moveq	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	e015      	b.n	80045a2 <HAL_TIM_PWM_Start+0x9e>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b10      	cmp	r3, #16
 800457a:	d109      	bne.n	8004590 <HAL_TIM_PWM_Start+0x8c>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	bf14      	ite	ne
 8004588:	2301      	movne	r3, #1
 800458a:	2300      	moveq	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e008      	b.n	80045a2 <HAL_TIM_PWM_Start+0x9e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	bf14      	ite	ne
 800459c:	2301      	movne	r3, #1
 800459e:	2300      	moveq	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e0a6      	b.n	80046f8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <HAL_TIM_PWM_Start+0xb6>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b8:	e023      	b.n	8004602 <HAL_TIM_PWM_Start+0xfe>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d104      	bne.n	80045ca <HAL_TIM_PWM_Start+0xc6>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c8:	e01b      	b.n	8004602 <HAL_TIM_PWM_Start+0xfe>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d104      	bne.n	80045da <HAL_TIM_PWM_Start+0xd6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d8:	e013      	b.n	8004602 <HAL_TIM_PWM_Start+0xfe>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	d104      	bne.n	80045ea <HAL_TIM_PWM_Start+0xe6>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045e8:	e00b      	b.n	8004602 <HAL_TIM_PWM_Start+0xfe>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_PWM_Start+0xf6>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f8:	e003      	b.n	8004602 <HAL_TIM_PWM_Start+0xfe>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2201      	movs	r2, #1
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f001 f82a 	bl	8005664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a3a      	ldr	r2, [pc, #232]	; (8004700 <HAL_TIM_PWM_Start+0x1fc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d018      	beq.n	800464c <HAL_TIM_PWM_Start+0x148>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a39      	ldr	r2, [pc, #228]	; (8004704 <HAL_TIM_PWM_Start+0x200>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d013      	beq.n	800464c <HAL_TIM_PWM_Start+0x148>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a37      	ldr	r2, [pc, #220]	; (8004708 <HAL_TIM_PWM_Start+0x204>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00e      	beq.n	800464c <HAL_TIM_PWM_Start+0x148>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a36      	ldr	r2, [pc, #216]	; (800470c <HAL_TIM_PWM_Start+0x208>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d009      	beq.n	800464c <HAL_TIM_PWM_Start+0x148>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a34      	ldr	r2, [pc, #208]	; (8004710 <HAL_TIM_PWM_Start+0x20c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_TIM_PWM_Start+0x148>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a33      	ldr	r2, [pc, #204]	; (8004714 <HAL_TIM_PWM_Start+0x210>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d101      	bne.n	8004650 <HAL_TIM_PWM_Start+0x14c>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <HAL_TIM_PWM_Start+0x14e>
 8004650:	2300      	movs	r3, #0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004664:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a25      	ldr	r2, [pc, #148]	; (8004700 <HAL_TIM_PWM_Start+0x1fc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d022      	beq.n	80046b6 <HAL_TIM_PWM_Start+0x1b2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004678:	d01d      	beq.n	80046b6 <HAL_TIM_PWM_Start+0x1b2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a26      	ldr	r2, [pc, #152]	; (8004718 <HAL_TIM_PWM_Start+0x214>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d018      	beq.n	80046b6 <HAL_TIM_PWM_Start+0x1b2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a24      	ldr	r2, [pc, #144]	; (800471c <HAL_TIM_PWM_Start+0x218>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <HAL_TIM_PWM_Start+0x1b2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a23      	ldr	r2, [pc, #140]	; (8004720 <HAL_TIM_PWM_Start+0x21c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00e      	beq.n	80046b6 <HAL_TIM_PWM_Start+0x1b2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a19      	ldr	r2, [pc, #100]	; (8004704 <HAL_TIM_PWM_Start+0x200>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d009      	beq.n	80046b6 <HAL_TIM_PWM_Start+0x1b2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a18      	ldr	r2, [pc, #96]	; (8004708 <HAL_TIM_PWM_Start+0x204>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d004      	beq.n	80046b6 <HAL_TIM_PWM_Start+0x1b2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a18      	ldr	r2, [pc, #96]	; (8004714 <HAL_TIM_PWM_Start+0x210>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d115      	bne.n	80046e2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_TIM_PWM_Start+0x220>)
 80046be:	4013      	ands	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b06      	cmp	r3, #6
 80046c6:	d015      	beq.n	80046f4 <HAL_TIM_PWM_Start+0x1f0>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ce:	d011      	beq.n	80046f4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e0:	e008      	b.n	80046f4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0201 	orr.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	e000      	b.n	80046f6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40013400 	.word	0x40013400
 8004708:	40014000 	.word	0x40014000
 800470c:	40014400 	.word	0x40014400
 8004710:	40014800 	.word	0x40014800
 8004714:	40015000 	.word	0x40015000
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	00010007 	.word	0x00010007

08004728 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2200      	movs	r2, #0
 8004738:	6839      	ldr	r1, [r7, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 ff92 	bl	8005664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a40      	ldr	r2, [pc, #256]	; (8004848 <HAL_TIM_PWM_Stop+0x120>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d018      	beq.n	800477c <HAL_TIM_PWM_Stop+0x54>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a3f      	ldr	r2, [pc, #252]	; (800484c <HAL_TIM_PWM_Stop+0x124>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <HAL_TIM_PWM_Stop+0x54>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a3d      	ldr	r2, [pc, #244]	; (8004850 <HAL_TIM_PWM_Stop+0x128>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_TIM_PWM_Stop+0x54>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3c      	ldr	r2, [pc, #240]	; (8004854 <HAL_TIM_PWM_Stop+0x12c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_TIM_PWM_Stop+0x54>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a3a      	ldr	r2, [pc, #232]	; (8004858 <HAL_TIM_PWM_Stop+0x130>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_TIM_PWM_Stop+0x54>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a39      	ldr	r2, [pc, #228]	; (800485c <HAL_TIM_PWM_Stop+0x134>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <HAL_TIM_PWM_Stop+0x58>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_TIM_PWM_Stop+0x5a>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d017      	beq.n	80047b6 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10f      	bne.n	80047b6 <HAL_TIM_PWM_Stop+0x8e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6a1a      	ldr	r2, [r3, #32]
 800479c:	f244 4344 	movw	r3, #17476	; 0x4444
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d107      	bne.n	80047b6 <HAL_TIM_PWM_Stop+0x8e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6a1a      	ldr	r2, [r3, #32]
 80047bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10f      	bne.n	80047e6 <HAL_TIM_PWM_Stop+0xbe>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6a1a      	ldr	r2, [r3, #32]
 80047cc:	f244 4344 	movw	r3, #17476	; 0x4444
 80047d0:	4013      	ands	r3, r2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d107      	bne.n	80047e6 <HAL_TIM_PWM_Stop+0xbe>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0201 	bic.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_PWM_Stop+0xce>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f4:	e023      	b.n	800483e <HAL_TIM_PWM_Stop+0x116>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_PWM_Stop+0xde>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004804:	e01b      	b.n	800483e <HAL_TIM_PWM_Stop+0x116>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Stop+0xee>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004814:	e013      	b.n	800483e <HAL_TIM_PWM_Stop+0x116>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b0c      	cmp	r3, #12
 800481a:	d104      	bne.n	8004826 <HAL_TIM_PWM_Stop+0xfe>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004824:	e00b      	b.n	800483e <HAL_TIM_PWM_Stop+0x116>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b10      	cmp	r3, #16
 800482a:	d104      	bne.n	8004836 <HAL_TIM_PWM_Stop+0x10e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004834:	e003      	b.n	800483e <HAL_TIM_PWM_Stop+0x116>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40013400 	.word	0x40013400
 8004850:	40014000 	.word	0x40014000
 8004854:	40014400 	.word	0x40014400
 8004858:	40014800 	.word	0x40014800
 800485c:	40015000 	.word	0x40015000

08004860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b02      	cmp	r3, #2
 8004874:	d122      	bne.n	80048bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b02      	cmp	r3, #2
 8004882:	d11b      	bne.n	80048bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0202 	mvn.w	r2, #2
 800488c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fa7a 	bl	8004d9c <HAL_TIM_IC_CaptureCallback>
 80048a8:	e005      	b.n	80048b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa6c 	bl	8004d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fa7d 	bl	8004db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d122      	bne.n	8004910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d11b      	bne.n	8004910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0204 	mvn.w	r2, #4
 80048e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fa50 	bl	8004d9c <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa42 	bl	8004d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fa53 	bl	8004db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b08      	cmp	r3, #8
 800491c:	d122      	bne.n	8004964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b08      	cmp	r3, #8
 800492a:	d11b      	bne.n	8004964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0208 	mvn.w	r2, #8
 8004934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2204      	movs	r2, #4
 800493a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa26 	bl	8004d9c <HAL_TIM_IC_CaptureCallback>
 8004950:	e005      	b.n	800495e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa18 	bl	8004d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fa29 	bl	8004db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b10      	cmp	r3, #16
 8004970:	d122      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b10      	cmp	r3, #16
 800497e:	d11b      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0210 	mvn.w	r2, #16
 8004988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2208      	movs	r2, #8
 800498e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f9fc 	bl	8004d9c <HAL_TIM_IC_CaptureCallback>
 80049a4:	e005      	b.n	80049b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f9ee 	bl	8004d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f9ff 	bl	8004db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d10e      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d107      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0201 	mvn.w	r2, #1
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fc f954 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	2b80      	cmp	r3, #128	; 0x80
 80049f0:	d10e      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	2b80      	cmp	r3, #128	; 0x80
 80049fe:	d107      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f001 f970 	bl	8005cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1e:	d10e      	bne.n	8004a3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2a:	2b80      	cmp	r3, #128	; 0x80
 8004a2c:	d107      	bne.n	8004a3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f001 f963 	bl	8005d04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a48:	2b40      	cmp	r3, #64	; 0x40
 8004a4a:	d10e      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d107      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f9ad 	bl	8004dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d10e      	bne.n	8004a96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d107      	bne.n	8004a96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f06f 0220 	mvn.w	r2, #32
 8004a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f001 f923 	bl	8005cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aa4:	d10f      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab4:	d107      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f001 f929 	bl	8005d18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ad4:	d10f      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ae4:	d107      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f001 f91b 	bl	8005d2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b04:	d10f      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b14:	d107      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f001 f90d 	bl	8005d40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b34:	d10f      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b44:	d107      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f001 f8ff 	bl	8005d54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e0ff      	b.n	8004d7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b14      	cmp	r3, #20
 8004b8a:	f200 80f0 	bhi.w	8004d6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b8e:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004be9 	.word	0x08004be9
 8004b98:	08004d6f 	.word	0x08004d6f
 8004b9c:	08004d6f 	.word	0x08004d6f
 8004ba0:	08004d6f 	.word	0x08004d6f
 8004ba4:	08004c29 	.word	0x08004c29
 8004ba8:	08004d6f 	.word	0x08004d6f
 8004bac:	08004d6f 	.word	0x08004d6f
 8004bb0:	08004d6f 	.word	0x08004d6f
 8004bb4:	08004c6b 	.word	0x08004c6b
 8004bb8:	08004d6f 	.word	0x08004d6f
 8004bbc:	08004d6f 	.word	0x08004d6f
 8004bc0:	08004d6f 	.word	0x08004d6f
 8004bc4:	08004cab 	.word	0x08004cab
 8004bc8:	08004d6f 	.word	0x08004d6f
 8004bcc:	08004d6f 	.word	0x08004d6f
 8004bd0:	08004d6f 	.word	0x08004d6f
 8004bd4:	08004ced 	.word	0x08004ced
 8004bd8:	08004d6f 	.word	0x08004d6f
 8004bdc:	08004d6f 	.word	0x08004d6f
 8004be0:	08004d6f 	.word	0x08004d6f
 8004be4:	08004d2d 	.word	0x08004d2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f99a 	bl	8004f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0208 	orr.w	r2, r2, #8
 8004c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0204 	bic.w	r2, r2, #4
 8004c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6999      	ldr	r1, [r3, #24]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	619a      	str	r2, [r3, #24]
      break;
 8004c26:	e0a5      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fa14 	bl	800505c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6999      	ldr	r1, [r3, #24]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	021a      	lsls	r2, r3, #8
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	619a      	str	r2, [r3, #24]
      break;
 8004c68:	e084      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fa87 	bl	8005184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0208 	orr.w	r2, r2, #8
 8004c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0204 	bic.w	r2, r2, #4
 8004c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69d9      	ldr	r1, [r3, #28]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	61da      	str	r2, [r3, #28]
      break;
 8004ca8:	e064      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 faf9 	bl	80052a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69d9      	ldr	r1, [r3, #28]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	021a      	lsls	r2, r3, #8
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	61da      	str	r2, [r3, #28]
      break;
 8004cea:	e043      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fb6c 	bl	80053d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0208 	orr.w	r2, r2, #8
 8004d06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0204 	bic.w	r2, r2, #4
 8004d16:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d2a:	e023      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fbb6 	bl	80054a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d56:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	021a      	lsls	r2, r3, #8
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d6c:	e002      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
      break;
 8004d72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop

08004d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a46      	ldr	r2, [pc, #280]	; (8004f04 <TIM_Base_SetConfig+0x12c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d017      	beq.n	8004e20 <TIM_Base_SetConfig+0x48>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d013      	beq.n	8004e20 <TIM_Base_SetConfig+0x48>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a43      	ldr	r2, [pc, #268]	; (8004f08 <TIM_Base_SetConfig+0x130>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00f      	beq.n	8004e20 <TIM_Base_SetConfig+0x48>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a42      	ldr	r2, [pc, #264]	; (8004f0c <TIM_Base_SetConfig+0x134>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00b      	beq.n	8004e20 <TIM_Base_SetConfig+0x48>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a41      	ldr	r2, [pc, #260]	; (8004f10 <TIM_Base_SetConfig+0x138>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d007      	beq.n	8004e20 <TIM_Base_SetConfig+0x48>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a40      	ldr	r2, [pc, #256]	; (8004f14 <TIM_Base_SetConfig+0x13c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_Base_SetConfig+0x48>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a3f      	ldr	r2, [pc, #252]	; (8004f18 <TIM_Base_SetConfig+0x140>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d108      	bne.n	8004e32 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a33      	ldr	r2, [pc, #204]	; (8004f04 <TIM_Base_SetConfig+0x12c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d023      	beq.n	8004e82 <TIM_Base_SetConfig+0xaa>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e40:	d01f      	beq.n	8004e82 <TIM_Base_SetConfig+0xaa>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a30      	ldr	r2, [pc, #192]	; (8004f08 <TIM_Base_SetConfig+0x130>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01b      	beq.n	8004e82 <TIM_Base_SetConfig+0xaa>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <TIM_Base_SetConfig+0x134>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d017      	beq.n	8004e82 <TIM_Base_SetConfig+0xaa>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2e      	ldr	r2, [pc, #184]	; (8004f10 <TIM_Base_SetConfig+0x138>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <TIM_Base_SetConfig+0xaa>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2d      	ldr	r2, [pc, #180]	; (8004f14 <TIM_Base_SetConfig+0x13c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00f      	beq.n	8004e82 <TIM_Base_SetConfig+0xaa>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2d      	ldr	r2, [pc, #180]	; (8004f1c <TIM_Base_SetConfig+0x144>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00b      	beq.n	8004e82 <TIM_Base_SetConfig+0xaa>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	; (8004f20 <TIM_Base_SetConfig+0x148>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <TIM_Base_SetConfig+0xaa>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2b      	ldr	r2, [pc, #172]	; (8004f24 <TIM_Base_SetConfig+0x14c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_Base_SetConfig+0xaa>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a26      	ldr	r2, [pc, #152]	; (8004f18 <TIM_Base_SetConfig+0x140>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d108      	bne.n	8004e94 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a12      	ldr	r2, [pc, #72]	; (8004f04 <TIM_Base_SetConfig+0x12c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <TIM_Base_SetConfig+0x110>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a14      	ldr	r2, [pc, #80]	; (8004f14 <TIM_Base_SetConfig+0x13c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00f      	beq.n	8004ee8 <TIM_Base_SetConfig+0x110>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a14      	ldr	r2, [pc, #80]	; (8004f1c <TIM_Base_SetConfig+0x144>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00b      	beq.n	8004ee8 <TIM_Base_SetConfig+0x110>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <TIM_Base_SetConfig+0x148>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d007      	beq.n	8004ee8 <TIM_Base_SetConfig+0x110>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a12      	ldr	r2, [pc, #72]	; (8004f24 <TIM_Base_SetConfig+0x14c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_Base_SetConfig+0x110>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a0d      	ldr	r2, [pc, #52]	; (8004f18 <TIM_Base_SetConfig+0x140>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d103      	bne.n	8004ef0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	615a      	str	r2, [r3, #20]
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40012c00 	.word	0x40012c00
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	40000800 	.word	0x40000800
 8004f10:	40000c00 	.word	0x40000c00
 8004f14:	40013400 	.word	0x40013400
 8004f18:	40015000 	.word	0x40015000
 8004f1c:	40014000 	.word	0x40014000
 8004f20:	40014400 	.word	0x40014400
 8004f24:	40014800 	.word	0x40014800

08004f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f023 0201 	bic.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 0302 	bic.w	r3, r3, #2
 8004f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a30      	ldr	r2, [pc, #192]	; (8005044 <TIM_OC1_SetConfig+0x11c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d013      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x88>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a2f      	ldr	r2, [pc, #188]	; (8005048 <TIM_OC1_SetConfig+0x120>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00f      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x88>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a2e      	ldr	r2, [pc, #184]	; (800504c <TIM_OC1_SetConfig+0x124>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00b      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x88>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a2d      	ldr	r2, [pc, #180]	; (8005050 <TIM_OC1_SetConfig+0x128>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d007      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x88>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a2c      	ldr	r2, [pc, #176]	; (8005054 <TIM_OC1_SetConfig+0x12c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x88>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a2b      	ldr	r2, [pc, #172]	; (8005058 <TIM_OC1_SetConfig+0x130>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10c      	bne.n	8004fca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0308 	bic.w	r3, r3, #8
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f023 0304 	bic.w	r3, r3, #4
 8004fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <TIM_OC1_SetConfig+0x11c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d013      	beq.n	8004ffa <TIM_OC1_SetConfig+0xd2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <TIM_OC1_SetConfig+0x120>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00f      	beq.n	8004ffa <TIM_OC1_SetConfig+0xd2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1b      	ldr	r2, [pc, #108]	; (800504c <TIM_OC1_SetConfig+0x124>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00b      	beq.n	8004ffa <TIM_OC1_SetConfig+0xd2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1a      	ldr	r2, [pc, #104]	; (8005050 <TIM_OC1_SetConfig+0x128>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d007      	beq.n	8004ffa <TIM_OC1_SetConfig+0xd2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a19      	ldr	r2, [pc, #100]	; (8005054 <TIM_OC1_SetConfig+0x12c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d003      	beq.n	8004ffa <TIM_OC1_SetConfig+0xd2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a18      	ldr	r2, [pc, #96]	; (8005058 <TIM_OC1_SetConfig+0x130>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d111      	bne.n	800501e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	621a      	str	r2, [r3, #32]
}
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40013400 	.word	0x40013400
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400
 8005054:	40014800 	.word	0x40014800
 8005058:	40015000 	.word	0x40015000

0800505c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f023 0210 	bic.w	r2, r3, #16
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800508a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f023 0320 	bic.w	r3, r3, #32
 80050aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a2c      	ldr	r2, [pc, #176]	; (800516c <TIM_OC2_SetConfig+0x110>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d007      	beq.n	80050d0 <TIM_OC2_SetConfig+0x74>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a2b      	ldr	r2, [pc, #172]	; (8005170 <TIM_OC2_SetConfig+0x114>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_OC2_SetConfig+0x74>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a2a      	ldr	r2, [pc, #168]	; (8005174 <TIM_OC2_SetConfig+0x118>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d10d      	bne.n	80050ec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a1f      	ldr	r2, [pc, #124]	; (800516c <TIM_OC2_SetConfig+0x110>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d013      	beq.n	800511c <TIM_OC2_SetConfig+0xc0>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <TIM_OC2_SetConfig+0x114>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00f      	beq.n	800511c <TIM_OC2_SetConfig+0xc0>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a1e      	ldr	r2, [pc, #120]	; (8005178 <TIM_OC2_SetConfig+0x11c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00b      	beq.n	800511c <TIM_OC2_SetConfig+0xc0>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a1d      	ldr	r2, [pc, #116]	; (800517c <TIM_OC2_SetConfig+0x120>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d007      	beq.n	800511c <TIM_OC2_SetConfig+0xc0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <TIM_OC2_SetConfig+0x124>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_OC2_SetConfig+0xc0>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a17      	ldr	r2, [pc, #92]	; (8005174 <TIM_OC2_SetConfig+0x118>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d113      	bne.n	8005144 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800512a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40012c00 	.word	0x40012c00
 8005170:	40013400 	.word	0x40013400
 8005174:	40015000 	.word	0x40015000
 8005178:	40014000 	.word	0x40014000
 800517c:	40014400 	.word	0x40014400
 8005180:	40014800 	.word	0x40014800

08005184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	021b      	lsls	r3, r3, #8
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a2b      	ldr	r2, [pc, #172]	; (8005290 <TIM_OC3_SetConfig+0x10c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d007      	beq.n	80051f6 <TIM_OC3_SetConfig+0x72>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a2a      	ldr	r2, [pc, #168]	; (8005294 <TIM_OC3_SetConfig+0x110>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_OC3_SetConfig+0x72>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a29      	ldr	r2, [pc, #164]	; (8005298 <TIM_OC3_SetConfig+0x114>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10d      	bne.n	8005212 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <TIM_OC3_SetConfig+0x10c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <TIM_OC3_SetConfig+0xbe>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <TIM_OC3_SetConfig+0x110>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00f      	beq.n	8005242 <TIM_OC3_SetConfig+0xbe>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a1d      	ldr	r2, [pc, #116]	; (800529c <TIM_OC3_SetConfig+0x118>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_OC3_SetConfig+0xbe>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1c      	ldr	r2, [pc, #112]	; (80052a0 <TIM_OC3_SetConfig+0x11c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d007      	beq.n	8005242 <TIM_OC3_SetConfig+0xbe>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1b      	ldr	r2, [pc, #108]	; (80052a4 <TIM_OC3_SetConfig+0x120>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_OC3_SetConfig+0xbe>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a16      	ldr	r2, [pc, #88]	; (8005298 <TIM_OC3_SetConfig+0x114>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d113      	bne.n	800526a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	621a      	str	r2, [r3, #32]
}
 8005284:	bf00      	nop
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40013400 	.word	0x40013400
 8005298:	40015000 	.word	0x40015000
 800529c:	40014000 	.word	0x40014000
 80052a0:	40014400 	.word	0x40014400
 80052a4:	40014800 	.word	0x40014800

080052a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	031b      	lsls	r3, r3, #12
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a2c      	ldr	r2, [pc, #176]	; (80053b8 <TIM_OC4_SetConfig+0x110>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_OC4_SetConfig+0x74>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a2b      	ldr	r2, [pc, #172]	; (80053bc <TIM_OC4_SetConfig+0x114>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_OC4_SetConfig+0x74>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a2a      	ldr	r2, [pc, #168]	; (80053c0 <TIM_OC4_SetConfig+0x118>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d10d      	bne.n	8005338 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	031b      	lsls	r3, r3, #12
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005336:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a1f      	ldr	r2, [pc, #124]	; (80053b8 <TIM_OC4_SetConfig+0x110>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d013      	beq.n	8005368 <TIM_OC4_SetConfig+0xc0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a1e      	ldr	r2, [pc, #120]	; (80053bc <TIM_OC4_SetConfig+0x114>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00f      	beq.n	8005368 <TIM_OC4_SetConfig+0xc0>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a1e      	ldr	r2, [pc, #120]	; (80053c4 <TIM_OC4_SetConfig+0x11c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00b      	beq.n	8005368 <TIM_OC4_SetConfig+0xc0>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <TIM_OC4_SetConfig+0x120>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <TIM_OC4_SetConfig+0xc0>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a1c      	ldr	r2, [pc, #112]	; (80053cc <TIM_OC4_SetConfig+0x124>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_OC4_SetConfig+0xc0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a17      	ldr	r2, [pc, #92]	; (80053c0 <TIM_OC4_SetConfig+0x118>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d113      	bne.n	8005390 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800536e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005376:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	019b      	lsls	r3, r3, #6
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	019b      	lsls	r3, r3, #6
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	621a      	str	r2, [r3, #32]
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40013400 	.word	0x40013400
 80053c0:	40015000 	.word	0x40015000
 80053c4:	40014000 	.word	0x40014000
 80053c8:	40014400 	.word	0x40014400
 80053cc:	40014800 	.word	0x40014800

080053d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005414:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a19      	ldr	r2, [pc, #100]	; (800548c <TIM_OC5_SetConfig+0xbc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <TIM_OC5_SetConfig+0x82>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a18      	ldr	r2, [pc, #96]	; (8005490 <TIM_OC5_SetConfig+0xc0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00f      	beq.n	8005452 <TIM_OC5_SetConfig+0x82>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a17      	ldr	r2, [pc, #92]	; (8005494 <TIM_OC5_SetConfig+0xc4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00b      	beq.n	8005452 <TIM_OC5_SetConfig+0x82>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a16      	ldr	r2, [pc, #88]	; (8005498 <TIM_OC5_SetConfig+0xc8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d007      	beq.n	8005452 <TIM_OC5_SetConfig+0x82>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a15      	ldr	r2, [pc, #84]	; (800549c <TIM_OC5_SetConfig+0xcc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d003      	beq.n	8005452 <TIM_OC5_SetConfig+0x82>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a14      	ldr	r2, [pc, #80]	; (80054a0 <TIM_OC5_SetConfig+0xd0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d109      	bne.n	8005466 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005458:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	621a      	str	r2, [r3, #32]
}
 8005480:	bf00      	nop
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40013400 	.word	0x40013400
 8005494:	40014000 	.word	0x40014000
 8005498:	40014400 	.word	0x40014400
 800549c:	40014800 	.word	0x40014800
 80054a0:	40015000 	.word	0x40015000

080054a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	051b      	lsls	r3, r3, #20
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a1a      	ldr	r2, [pc, #104]	; (8005564 <TIM_OC6_SetConfig+0xc0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d013      	beq.n	8005528 <TIM_OC6_SetConfig+0x84>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a19      	ldr	r2, [pc, #100]	; (8005568 <TIM_OC6_SetConfig+0xc4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00f      	beq.n	8005528 <TIM_OC6_SetConfig+0x84>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a18      	ldr	r2, [pc, #96]	; (800556c <TIM_OC6_SetConfig+0xc8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00b      	beq.n	8005528 <TIM_OC6_SetConfig+0x84>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a17      	ldr	r2, [pc, #92]	; (8005570 <TIM_OC6_SetConfig+0xcc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d007      	beq.n	8005528 <TIM_OC6_SetConfig+0x84>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a16      	ldr	r2, [pc, #88]	; (8005574 <TIM_OC6_SetConfig+0xd0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_OC6_SetConfig+0x84>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a15      	ldr	r2, [pc, #84]	; (8005578 <TIM_OC6_SetConfig+0xd4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d109      	bne.n	800553c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800552e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	029b      	lsls	r3, r3, #10
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	621a      	str	r2, [r3, #32]
}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40013400 	.word	0x40013400
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800
 8005578:	40015000 	.word	0x40015000

0800557c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a28      	ldr	r2, [pc, #160]	; (8005648 <TIM_TI1_SetConfig+0xcc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01b      	beq.n	80055e2 <TIM_TI1_SetConfig+0x66>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b0:	d017      	beq.n	80055e2 <TIM_TI1_SetConfig+0x66>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4a25      	ldr	r2, [pc, #148]	; (800564c <TIM_TI1_SetConfig+0xd0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <TIM_TI1_SetConfig+0x66>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a24      	ldr	r2, [pc, #144]	; (8005650 <TIM_TI1_SetConfig+0xd4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00f      	beq.n	80055e2 <TIM_TI1_SetConfig+0x66>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a23      	ldr	r2, [pc, #140]	; (8005654 <TIM_TI1_SetConfig+0xd8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00b      	beq.n	80055e2 <TIM_TI1_SetConfig+0x66>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4a22      	ldr	r2, [pc, #136]	; (8005658 <TIM_TI1_SetConfig+0xdc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d007      	beq.n	80055e2 <TIM_TI1_SetConfig+0x66>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4a21      	ldr	r2, [pc, #132]	; (800565c <TIM_TI1_SetConfig+0xe0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d003      	beq.n	80055e2 <TIM_TI1_SetConfig+0x66>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4a20      	ldr	r2, [pc, #128]	; (8005660 <TIM_TI1_SetConfig+0xe4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d101      	bne.n	80055e6 <TIM_TI1_SetConfig+0x6a>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <TIM_TI1_SetConfig+0x6c>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d008      	beq.n	80055fe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f023 0303 	bic.w	r3, r3, #3
 80055f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	e003      	b.n	8005606 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800560c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	b2db      	uxtb	r3, r3
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f023 030a 	bic.w	r3, r3, #10
 8005620:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f003 030a 	and.w	r3, r3, #10
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800
 8005654:	40000c00 	.word	0x40000c00
 8005658:	40013400 	.word	0x40013400
 800565c:	40014000 	.word	0x40014000
 8005660:	40015000 	.word	0x40015000

08005664 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	2201      	movs	r2, #1
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a1a      	ldr	r2, [r3, #32]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	43db      	mvns	r3, r3
 8005686:	401a      	ands	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a1a      	ldr	r2, [r3, #32]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	fa01 f303 	lsl.w	r3, r1, r3
 800569c:	431a      	orrs	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	621a      	str	r2, [r3, #32]
}
 80056a2:	bf00      	nop
 80056a4:	371c      	adds	r7, #28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b08a      	sub	sp, #40	; 0x28
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e0a0      	b.n	8005804 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fb fe60 	bl	800139c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f7ff fb72 	bl	8004dd8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	6819      	ldr	r1, [r3, #0]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2203      	movs	r2, #3
 8005702:	f7ff ff3b 	bl	800557c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 020c 	bic.w	r2, r2, #12
 8005714:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6999      	ldr	r1, [r3, #24]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005736:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800575a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6812      	ldr	r2, [r2, #0]
 8005766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800576a:	f023 0307 	bic.w	r3, r3, #7
 800576e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0204 	orr.w	r2, r2, #4
 800577e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005780:	2300      	movs	r3, #0
 8005782:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005784:	2300      	movs	r3, #0
 8005786:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005788:	2370      	movs	r3, #112	; 0x70
 800578a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800578c:	2300      	movs	r3, #0
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005790:	2300      	movs	r3, #0
 8005792:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005794:	2300      	movs	r3, #0
 8005796:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f107 020c 	add.w	r2, r7, #12
 80057a6:	4611      	mov	r1, r2
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fc57 	bl	800505c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80057bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c0:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80057d0:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3728      	adds	r7, #40	; 0x28
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d109      	bne.n	8005830 <HAL_TIMEx_PWMN_Start+0x24>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	bf14      	ite	ne
 8005828:	2301      	movne	r3, #1
 800582a:	2300      	moveq	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	e022      	b.n	8005876 <HAL_TIMEx_PWMN_Start+0x6a>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b04      	cmp	r3, #4
 8005834:	d109      	bne.n	800584a <HAL_TIMEx_PWMN_Start+0x3e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b01      	cmp	r3, #1
 8005840:	bf14      	ite	ne
 8005842:	2301      	movne	r3, #1
 8005844:	2300      	moveq	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	e015      	b.n	8005876 <HAL_TIMEx_PWMN_Start+0x6a>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d109      	bne.n	8005864 <HAL_TIMEx_PWMN_Start+0x58>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	bf14      	ite	ne
 800585c:	2301      	movne	r3, #1
 800585e:	2300      	moveq	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	e008      	b.n	8005876 <HAL_TIMEx_PWMN_Start+0x6a>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	bf14      	ite	ne
 8005870:	2301      	movne	r3, #1
 8005872:	2300      	moveq	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e073      	b.n	8005966 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <HAL_TIMEx_PWMN_Start+0x82>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800588c:	e013      	b.n	80058b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b04      	cmp	r3, #4
 8005892:	d104      	bne.n	800589e <HAL_TIMEx_PWMN_Start+0x92>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800589c:	e00b      	b.n	80058b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d104      	bne.n	80058ae <HAL_TIMEx_PWMN_Start+0xa2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058ac:	e003      	b.n	80058b6 <HAL_TIMEx_PWMN_Start+0xaa>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2204      	movs	r2, #4
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fa52 	bl	8005d68 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a25      	ldr	r2, [pc, #148]	; (8005970 <HAL_TIMEx_PWMN_Start+0x164>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d022      	beq.n	8005924 <HAL_TIMEx_PWMN_Start+0x118>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e6:	d01d      	beq.n	8005924 <HAL_TIMEx_PWMN_Start+0x118>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a21      	ldr	r2, [pc, #132]	; (8005974 <HAL_TIMEx_PWMN_Start+0x168>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d018      	beq.n	8005924 <HAL_TIMEx_PWMN_Start+0x118>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a20      	ldr	r2, [pc, #128]	; (8005978 <HAL_TIMEx_PWMN_Start+0x16c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <HAL_TIMEx_PWMN_Start+0x118>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1e      	ldr	r2, [pc, #120]	; (800597c <HAL_TIMEx_PWMN_Start+0x170>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00e      	beq.n	8005924 <HAL_TIMEx_PWMN_Start+0x118>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1d      	ldr	r2, [pc, #116]	; (8005980 <HAL_TIMEx_PWMN_Start+0x174>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d009      	beq.n	8005924 <HAL_TIMEx_PWMN_Start+0x118>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1b      	ldr	r2, [pc, #108]	; (8005984 <HAL_TIMEx_PWMN_Start+0x178>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_TIMEx_PWMN_Start+0x118>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1a      	ldr	r2, [pc, #104]	; (8005988 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d115      	bne.n	8005950 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	4b18      	ldr	r3, [pc, #96]	; (800598c <HAL_TIMEx_PWMN_Start+0x180>)
 800592c:	4013      	ands	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b06      	cmp	r3, #6
 8005934:	d015      	beq.n	8005962 <HAL_TIMEx_PWMN_Start+0x156>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593c:	d011      	beq.n	8005962 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0201 	orr.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	e008      	b.n	8005962 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e000      	b.n	8005964 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005962:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40000400 	.word	0x40000400
 8005978:	40000800 	.word	0x40000800
 800597c:	40000c00 	.word	0x40000c00
 8005980:	40013400 	.word	0x40013400
 8005984:	40014000 	.word	0x40014000
 8005988:	40015000 	.word	0x40015000
 800598c:	00010007 	.word	0x00010007

08005990 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2200      	movs	r2, #0
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f9e0 	bl	8005d68 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6a1a      	ldr	r2, [r3, #32]
 80059ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10f      	bne.n	80059d8 <HAL_TIMEx_PWMN_Stop+0x48>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6a1a      	ldr	r2, [r3, #32]
 80059be:	f244 4344 	movw	r3, #17476	; 0x4444
 80059c2:	4013      	ands	r3, r2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d107      	bne.n	80059d8 <HAL_TIMEx_PWMN_Stop+0x48>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6a1a      	ldr	r2, [r3, #32]
 80059de:	f241 1311 	movw	r3, #4369	; 0x1111
 80059e2:	4013      	ands	r3, r2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10f      	bne.n	8005a08 <HAL_TIMEx_PWMN_Stop+0x78>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6a1a      	ldr	r2, [r3, #32]
 80059ee:	f244 4344 	movw	r3, #17476	; 0x4444
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d107      	bne.n	8005a08 <HAL_TIMEx_PWMN_Stop+0x78>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0201 	bic.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <HAL_TIMEx_PWMN_Stop+0x88>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a16:	e013      	b.n	8005a40 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d104      	bne.n	8005a28 <HAL_TIMEx_PWMN_Stop+0x98>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a26:	e00b      	b.n	8005a40 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d104      	bne.n	8005a38 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a36:	e003      	b.n	8005a40 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e074      	b.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a34      	ldr	r2, [pc, #208]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a33      	ldr	r2, [pc, #204]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a31      	ldr	r2, [pc, #196]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d108      	bne.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005aa8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a21      	ldr	r2, [pc, #132]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d022      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae4:	d01d      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1f      	ldr	r2, [pc, #124]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d018      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1d      	ldr	r2, [pc, #116]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00e      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a18      	ldr	r2, [pc, #96]	; (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d004      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a11      	ldr	r2, [pc, #68]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d10c      	bne.n	8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40013400 	.word	0x40013400
 8005b64:	40015000 	.word	0x40015000
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40000c00 	.word	0x40000c00
 8005b74:	40014000 	.word	0x40014000

08005b78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e096      	b.n	8005cc2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	041b      	lsls	r3, r3, #16
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2f      	ldr	r2, [pc, #188]	; (8005cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2d      	ldr	r2, [pc, #180]	; (8005cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2c      	ldr	r2, [pc, #176]	; (8005cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d106      	bne.n	8005c3a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a24      	ldr	r2, [pc, #144]	; (8005cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d009      	beq.n	8005c58 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a22      	ldr	r2, [pc, #136]	; (8005cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d004      	beq.n	8005c58 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a21      	ldr	r2, [pc, #132]	; (8005cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d12b      	bne.n	8005cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	051b      	lsls	r3, r3, #20
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a11      	ldr	r2, [pc, #68]	; (8005cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a10      	ldr	r2, [pc, #64]	; (8005cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a0e      	ldr	r2, [pc, #56]	; (8005cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d106      	bne.n	8005cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40012c00 	.word	0x40012c00
 8005cd4:	40013400 	.word	0x40013400
 8005cd8:	40015000 	.word	0x40015000

08005cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 031f 	and.w	r3, r3, #31
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a1a      	ldr	r2, [r3, #32]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1a      	ldr	r2, [r3, #32]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005da0:	431a      	orrs	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e042      	b.n	8005e4a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fb fbaa 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2224      	movs	r2, #36	; 0x24
 8005de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0201 	bic.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fc51 	bl	800669c <UART_SetConfig>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e022      	b.n	8005e4a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 ff41 	bl	8006c94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0201 	orr.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 ffc8 	bl	8006dd8 <UART_CheckIdleState>
 8005e48:	4603      	mov	r3, r0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b08a      	sub	sp, #40	; 0x28
 8005e56:	af02      	add	r7, sp, #8
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	603b      	str	r3, [r7, #0]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	f040 8083 	bne.w	8005f74 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <HAL_UART_Transmit+0x28>
 8005e74:	88fb      	ldrh	r3, [r7, #6]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e07b      	b.n	8005f76 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_UART_Transmit+0x3a>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e074      	b.n	8005f76 <HAL_UART_Transmit+0x124>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2221      	movs	r2, #33	; 0x21
 8005ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ea4:	f7fb fcfe 	bl	80018a4 <HAL_GetTick>
 8005ea8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	88fa      	ldrh	r2, [r7, #6]
 8005eae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	88fa      	ldrh	r2, [r7, #6]
 8005eb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec2:	d108      	bne.n	8005ed6 <HAL_UART_Transmit+0x84>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d104      	bne.n	8005ed6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	e003      	b.n	8005ede <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005ee6:	e02c      	b.n	8005f42 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	2180      	movs	r1, #128	; 0x80
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 ffbb 	bl	8006e6e <UART_WaitOnFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e039      	b.n	8005f76 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10b      	bne.n	8005f20 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	e007      	b.n	8005f30 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	781a      	ldrb	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1cc      	bne.n	8005ee8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2200      	movs	r2, #0
 8005f56:	2140      	movs	r1, #64	; 0x40
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 ff88 	bl	8006e6e <UART_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e006      	b.n	8005f76 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e000      	b.n	8005f76 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005f74:	2302      	movs	r3, #2
  }
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	; 0x28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d142      	bne.n	800601e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_UART_Receive_IT+0x24>
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e03b      	b.n	8006020 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_UART_Receive_IT+0x36>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e034      	b.n	8006020 <HAL_UART_Receive_IT+0xa0>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a17      	ldr	r2, [pc, #92]	; (8006028 <HAL_UART_Receive_IT+0xa8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d01f      	beq.n	800600e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d018      	beq.n	800600e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	623b      	str	r3, [r7, #32]
 8005ffc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	69f9      	ldr	r1, [r7, #28]
 8006000:	6a3a      	ldr	r2, [r7, #32]
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	61bb      	str	r3, [r7, #24]
   return(result);
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e6      	bne.n	8005fdc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	461a      	mov	r2, r3
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 fff3 	bl	8007000 <UART_Start_Receive_IT>
 800601a:	4603      	mov	r3, r0
 800601c:	e000      	b.n	8006020 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800601e:	2302      	movs	r3, #2
  }
}
 8006020:	4618      	mov	r0, r3
 8006022:	3728      	adds	r7, #40	; 0x28
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	40008000 	.word	0x40008000

0800602c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b0ba      	sub	sp, #232	; 0xe8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006052:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006056:	f640 030f 	movw	r3, #2063	; 0x80f
 800605a:	4013      	ands	r3, r2
 800605c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d11b      	bne.n	80060a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d015      	beq.n	80060a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d105      	bne.n	800608c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 82d6 	beq.w	8006642 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
      }
      return;
 800609e:	e2d0      	b.n	8006642 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 811f 	beq.w	80062e8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80060aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80060ae:	4b8b      	ldr	r3, [pc, #556]	; (80062dc <HAL_UART_IRQHandler+0x2b0>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80060b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80060ba:	4b89      	ldr	r3, [pc, #548]	; (80062e0 <HAL_UART_IRQHandler+0x2b4>)
 80060bc:	4013      	ands	r3, r2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8112 	beq.w	80062e8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d011      	beq.n	80060f4 <HAL_UART_IRQHandler+0xc8>
 80060d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00b      	beq.n	80060f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2201      	movs	r2, #1
 80060e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d011      	beq.n	8006124 <HAL_UART_IRQHandler+0xf8>
 8006100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00b      	beq.n	8006124 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2202      	movs	r2, #2
 8006112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800611a:	f043 0204 	orr.w	r2, r3, #4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d011      	beq.n	8006154 <HAL_UART_IRQHandler+0x128>
 8006130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2204      	movs	r2, #4
 8006142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800614a:	f043 0202 	orr.w	r2, r3, #2
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b00      	cmp	r3, #0
 800615e:	d017      	beq.n	8006190 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	d105      	bne.n	8006178 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800616c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006170:	4b5a      	ldr	r3, [pc, #360]	; (80062dc <HAL_UART_IRQHandler+0x2b0>)
 8006172:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00b      	beq.n	8006190 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2208      	movs	r2, #8
 800617e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006186:	f043 0208 	orr.w	r2, r3, #8
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006198:	2b00      	cmp	r3, #0
 800619a:	d012      	beq.n	80061c2 <HAL_UART_IRQHandler+0x196>
 800619c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00c      	beq.n	80061c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061b8:	f043 0220 	orr.w	r2, r3, #32
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 823c 	beq.w	8006646 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d013      	beq.n	8006202 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d105      	bne.n	80061f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	d005      	beq.n	8006226 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800621a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800621e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006222:	2b00      	cmp	r3, #0
 8006224:	d04f      	beq.n	80062c6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f001 f814 	bl	8007254 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006236:	2b40      	cmp	r3, #64	; 0x40
 8006238:	d141      	bne.n	80062be <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3308      	adds	r3, #8
 8006240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006266:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800626a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800627e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1d9      	bne.n	800623a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d013      	beq.n	80062b6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006292:	4a14      	ldr	r2, [pc, #80]	; (80062e4 <HAL_UART_IRQHandler+0x2b8>)
 8006294:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800629a:	4618      	mov	r0, r3
 800629c:	f7fc fd73 	bl	8002d86 <HAL_DMA_Abort_IT>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d017      	beq.n	80062d6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80062b0:	4610      	mov	r0, r2
 80062b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b4:	e00f      	b.n	80062d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f9da 	bl	8006670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062bc:	e00b      	b.n	80062d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f9d6 	bl	8006670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c4:	e007      	b.n	80062d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f9d2 	bl	8006670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80062d4:	e1b7      	b.n	8006646 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d6:	bf00      	nop
    return;
 80062d8:	e1b5      	b.n	8006646 <HAL_UART_IRQHandler+0x61a>
 80062da:	bf00      	nop
 80062dc:	10000001 	.word	0x10000001
 80062e0:	04000120 	.word	0x04000120
 80062e4:	08007321 	.word	0x08007321

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	f040 814a 	bne.w	8006586 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f6:	f003 0310 	and.w	r3, r3, #16
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 8143 	beq.w	8006586 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 813c 	beq.w	8006586 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2210      	movs	r2, #16
 8006314:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006320:	2b40      	cmp	r3, #64	; 0x40
 8006322:	f040 80b5 	bne.w	8006490 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006332:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 8187 	beq.w	800664a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006346:	429a      	cmp	r2, r3
 8006348:	f080 817f 	bcs.w	800664a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006352:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	f040 8086 	bne.w	8006474 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800637c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006384:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006392:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006396:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800639e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1da      	bne.n	8006368 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3308      	adds	r3, #8
 80063b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063c4:	f023 0301 	bic.w	r3, r3, #1
 80063c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3308      	adds	r3, #8
 80063d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e1      	bne.n	80063b2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3308      	adds	r3, #8
 800640e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006412:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006414:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006418:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e3      	bne.n	80063ee <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2220      	movs	r2, #32
 800642a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006444:	f023 0310 	bic.w	r3, r3, #16
 8006448:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006456:	65bb      	str	r3, [r7, #88]	; 0x58
 8006458:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800645c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e4      	bne.n	8006434 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646e:	4618      	mov	r0, r3
 8006470:	f7fc fc30 	bl	8002cd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006480:	b29b      	uxth	r3, r3
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	b29b      	uxth	r3, r3
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f8fb 	bl	8006684 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800648e:	e0dc      	b.n	800664a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800649c:	b29b      	uxth	r3, r3
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 80ce 	beq.w	800664e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80064b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 80c9 	beq.w	800664e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064de:	647b      	str	r3, [r7, #68]	; 0x44
 80064e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e4      	bne.n	80064bc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3308      	adds	r3, #8
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	623b      	str	r3, [r7, #32]
   return(result);
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800651a:	633a      	str	r2, [r7, #48]	; 0x30
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e1      	bne.n	80064f2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0310 	bic.w	r3, r3, #16
 8006556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	69b9      	ldr	r1, [r7, #24]
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	617b      	str	r3, [r7, #20]
   return(result);
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e4      	bne.n	8006542 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f880 	bl	8006684 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006584:	e063      	b.n	800664e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00e      	beq.n	80065b0 <HAL_UART_IRQHandler+0x584>
 8006592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d008      	beq.n	80065b0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80065a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 fb57 	bl	8007c5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065ae:	e051      	b.n	8006654 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80065b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d014      	beq.n	80065e6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80065bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d105      	bne.n	80065d4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80065c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d008      	beq.n	80065e6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d03a      	beq.n	8006652 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	4798      	blx	r3
    }
    return;
 80065e4:	e035      	b.n	8006652 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d009      	beq.n	8006606 <HAL_UART_IRQHandler+0x5da>
 80065f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fea4 	bl	800734c <UART_EndTransmit_IT>
    return;
 8006604:	e026      	b.n	8006654 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <HAL_UART_IRQHandler+0x5fa>
 8006612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006616:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 fb30 	bl	8007c84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006624:	e016      	b.n	8006654 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d010      	beq.n	8006654 <HAL_UART_IRQHandler+0x628>
 8006632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006636:	2b00      	cmp	r3, #0
 8006638:	da0c      	bge.n	8006654 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fb18 	bl	8007c70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006640:	e008      	b.n	8006654 <HAL_UART_IRQHandler+0x628>
      return;
 8006642:	bf00      	nop
 8006644:	e006      	b.n	8006654 <HAL_UART_IRQHandler+0x628>
    return;
 8006646:	bf00      	nop
 8006648:	e004      	b.n	8006654 <HAL_UART_IRQHandler+0x628>
      return;
 800664a:	bf00      	nop
 800664c:	e002      	b.n	8006654 <HAL_UART_IRQHandler+0x628>
      return;
 800664e:	bf00      	nop
 8006650:	e000      	b.n	8006654 <HAL_UART_IRQHandler+0x628>
    return;
 8006652:	bf00      	nop
  }
}
 8006654:	37e8      	adds	r7, #232	; 0xe8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop

0800665c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800669c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a0:	b08c      	sub	sp, #48	; 0x30
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	431a      	orrs	r2, r3
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	4baa      	ldr	r3, [pc, #680]	; (8006974 <UART_SetConfig+0x2d8>)
 80066cc:	4013      	ands	r3, r2
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	6812      	ldr	r2, [r2, #0]
 80066d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066d4:	430b      	orrs	r3, r1
 80066d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a9f      	ldr	r2, [pc, #636]	; (8006978 <UART_SetConfig+0x2dc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d004      	beq.n	8006708 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006704:	4313      	orrs	r3, r2
 8006706:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006712:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800671c:	430b      	orrs	r3, r1
 800671e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	f023 010f 	bic.w	r1, r3, #15
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a90      	ldr	r2, [pc, #576]	; (800697c <UART_SetConfig+0x2e0>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d125      	bne.n	800678c <UART_SetConfig+0xf0>
 8006740:	4b8f      	ldr	r3, [pc, #572]	; (8006980 <UART_SetConfig+0x2e4>)
 8006742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	2b03      	cmp	r3, #3
 800674c:	d81a      	bhi.n	8006784 <UART_SetConfig+0xe8>
 800674e:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <UART_SetConfig+0xb8>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	08006765 	.word	0x08006765
 8006758:	08006775 	.word	0x08006775
 800675c:	0800676d 	.word	0x0800676d
 8006760:	0800677d 	.word	0x0800677d
 8006764:	2301      	movs	r3, #1
 8006766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800676a:	e116      	b.n	800699a <UART_SetConfig+0x2fe>
 800676c:	2302      	movs	r3, #2
 800676e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006772:	e112      	b.n	800699a <UART_SetConfig+0x2fe>
 8006774:	2304      	movs	r3, #4
 8006776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800677a:	e10e      	b.n	800699a <UART_SetConfig+0x2fe>
 800677c:	2308      	movs	r3, #8
 800677e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006782:	e10a      	b.n	800699a <UART_SetConfig+0x2fe>
 8006784:	2310      	movs	r3, #16
 8006786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678a:	e106      	b.n	800699a <UART_SetConfig+0x2fe>
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a7c      	ldr	r2, [pc, #496]	; (8006984 <UART_SetConfig+0x2e8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d138      	bne.n	8006808 <UART_SetConfig+0x16c>
 8006796:	4b7a      	ldr	r3, [pc, #488]	; (8006980 <UART_SetConfig+0x2e4>)
 8006798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679c:	f003 030c 	and.w	r3, r3, #12
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d82d      	bhi.n	8006800 <UART_SetConfig+0x164>
 80067a4:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <UART_SetConfig+0x110>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	080067e1 	.word	0x080067e1
 80067b0:	08006801 	.word	0x08006801
 80067b4:	08006801 	.word	0x08006801
 80067b8:	08006801 	.word	0x08006801
 80067bc:	080067f1 	.word	0x080067f1
 80067c0:	08006801 	.word	0x08006801
 80067c4:	08006801 	.word	0x08006801
 80067c8:	08006801 	.word	0x08006801
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	08006801 	.word	0x08006801
 80067d4:	08006801 	.word	0x08006801
 80067d8:	08006801 	.word	0x08006801
 80067dc:	080067f9 	.word	0x080067f9
 80067e0:	2300      	movs	r3, #0
 80067e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067e6:	e0d8      	b.n	800699a <UART_SetConfig+0x2fe>
 80067e8:	2302      	movs	r3, #2
 80067ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ee:	e0d4      	b.n	800699a <UART_SetConfig+0x2fe>
 80067f0:	2304      	movs	r3, #4
 80067f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f6:	e0d0      	b.n	800699a <UART_SetConfig+0x2fe>
 80067f8:	2308      	movs	r3, #8
 80067fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067fe:	e0cc      	b.n	800699a <UART_SetConfig+0x2fe>
 8006800:	2310      	movs	r3, #16
 8006802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006806:	e0c8      	b.n	800699a <UART_SetConfig+0x2fe>
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a5e      	ldr	r2, [pc, #376]	; (8006988 <UART_SetConfig+0x2ec>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d125      	bne.n	800685e <UART_SetConfig+0x1c2>
 8006812:	4b5b      	ldr	r3, [pc, #364]	; (8006980 <UART_SetConfig+0x2e4>)
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006818:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800681c:	2b30      	cmp	r3, #48	; 0x30
 800681e:	d016      	beq.n	800684e <UART_SetConfig+0x1b2>
 8006820:	2b30      	cmp	r3, #48	; 0x30
 8006822:	d818      	bhi.n	8006856 <UART_SetConfig+0x1ba>
 8006824:	2b20      	cmp	r3, #32
 8006826:	d00a      	beq.n	800683e <UART_SetConfig+0x1a2>
 8006828:	2b20      	cmp	r3, #32
 800682a:	d814      	bhi.n	8006856 <UART_SetConfig+0x1ba>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <UART_SetConfig+0x19a>
 8006830:	2b10      	cmp	r3, #16
 8006832:	d008      	beq.n	8006846 <UART_SetConfig+0x1aa>
 8006834:	e00f      	b.n	8006856 <UART_SetConfig+0x1ba>
 8006836:	2300      	movs	r3, #0
 8006838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800683c:	e0ad      	b.n	800699a <UART_SetConfig+0x2fe>
 800683e:	2302      	movs	r3, #2
 8006840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006844:	e0a9      	b.n	800699a <UART_SetConfig+0x2fe>
 8006846:	2304      	movs	r3, #4
 8006848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800684c:	e0a5      	b.n	800699a <UART_SetConfig+0x2fe>
 800684e:	2308      	movs	r3, #8
 8006850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006854:	e0a1      	b.n	800699a <UART_SetConfig+0x2fe>
 8006856:	2310      	movs	r3, #16
 8006858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800685c:	e09d      	b.n	800699a <UART_SetConfig+0x2fe>
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a4a      	ldr	r2, [pc, #296]	; (800698c <UART_SetConfig+0x2f0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d125      	bne.n	80068b4 <UART_SetConfig+0x218>
 8006868:	4b45      	ldr	r3, [pc, #276]	; (8006980 <UART_SetConfig+0x2e4>)
 800686a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006872:	2bc0      	cmp	r3, #192	; 0xc0
 8006874:	d016      	beq.n	80068a4 <UART_SetConfig+0x208>
 8006876:	2bc0      	cmp	r3, #192	; 0xc0
 8006878:	d818      	bhi.n	80068ac <UART_SetConfig+0x210>
 800687a:	2b80      	cmp	r3, #128	; 0x80
 800687c:	d00a      	beq.n	8006894 <UART_SetConfig+0x1f8>
 800687e:	2b80      	cmp	r3, #128	; 0x80
 8006880:	d814      	bhi.n	80068ac <UART_SetConfig+0x210>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <UART_SetConfig+0x1f0>
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d008      	beq.n	800689c <UART_SetConfig+0x200>
 800688a:	e00f      	b.n	80068ac <UART_SetConfig+0x210>
 800688c:	2300      	movs	r3, #0
 800688e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006892:	e082      	b.n	800699a <UART_SetConfig+0x2fe>
 8006894:	2302      	movs	r3, #2
 8006896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800689a:	e07e      	b.n	800699a <UART_SetConfig+0x2fe>
 800689c:	2304      	movs	r3, #4
 800689e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068a2:	e07a      	b.n	800699a <UART_SetConfig+0x2fe>
 80068a4:	2308      	movs	r3, #8
 80068a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068aa:	e076      	b.n	800699a <UART_SetConfig+0x2fe>
 80068ac:	2310      	movs	r3, #16
 80068ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068b2:	e072      	b.n	800699a <UART_SetConfig+0x2fe>
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a35      	ldr	r2, [pc, #212]	; (8006990 <UART_SetConfig+0x2f4>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d12a      	bne.n	8006914 <UART_SetConfig+0x278>
 80068be:	4b30      	ldr	r3, [pc, #192]	; (8006980 <UART_SetConfig+0x2e4>)
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068cc:	d01a      	beq.n	8006904 <UART_SetConfig+0x268>
 80068ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068d2:	d81b      	bhi.n	800690c <UART_SetConfig+0x270>
 80068d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d8:	d00c      	beq.n	80068f4 <UART_SetConfig+0x258>
 80068da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068de:	d815      	bhi.n	800690c <UART_SetConfig+0x270>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <UART_SetConfig+0x250>
 80068e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e8:	d008      	beq.n	80068fc <UART_SetConfig+0x260>
 80068ea:	e00f      	b.n	800690c <UART_SetConfig+0x270>
 80068ec:	2300      	movs	r3, #0
 80068ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f2:	e052      	b.n	800699a <UART_SetConfig+0x2fe>
 80068f4:	2302      	movs	r3, #2
 80068f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fa:	e04e      	b.n	800699a <UART_SetConfig+0x2fe>
 80068fc:	2304      	movs	r3, #4
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006902:	e04a      	b.n	800699a <UART_SetConfig+0x2fe>
 8006904:	2308      	movs	r3, #8
 8006906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800690a:	e046      	b.n	800699a <UART_SetConfig+0x2fe>
 800690c:	2310      	movs	r3, #16
 800690e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006912:	e042      	b.n	800699a <UART_SetConfig+0x2fe>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a17      	ldr	r2, [pc, #92]	; (8006978 <UART_SetConfig+0x2dc>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d13a      	bne.n	8006994 <UART_SetConfig+0x2f8>
 800691e:	4b18      	ldr	r3, [pc, #96]	; (8006980 <UART_SetConfig+0x2e4>)
 8006920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006924:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006928:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800692c:	d01a      	beq.n	8006964 <UART_SetConfig+0x2c8>
 800692e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006932:	d81b      	bhi.n	800696c <UART_SetConfig+0x2d0>
 8006934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006938:	d00c      	beq.n	8006954 <UART_SetConfig+0x2b8>
 800693a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800693e:	d815      	bhi.n	800696c <UART_SetConfig+0x2d0>
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <UART_SetConfig+0x2b0>
 8006944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006948:	d008      	beq.n	800695c <UART_SetConfig+0x2c0>
 800694a:	e00f      	b.n	800696c <UART_SetConfig+0x2d0>
 800694c:	2300      	movs	r3, #0
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006952:	e022      	b.n	800699a <UART_SetConfig+0x2fe>
 8006954:	2302      	movs	r3, #2
 8006956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800695a:	e01e      	b.n	800699a <UART_SetConfig+0x2fe>
 800695c:	2304      	movs	r3, #4
 800695e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006962:	e01a      	b.n	800699a <UART_SetConfig+0x2fe>
 8006964:	2308      	movs	r3, #8
 8006966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800696a:	e016      	b.n	800699a <UART_SetConfig+0x2fe>
 800696c:	2310      	movs	r3, #16
 800696e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006972:	e012      	b.n	800699a <UART_SetConfig+0x2fe>
 8006974:	cfff69f3 	.word	0xcfff69f3
 8006978:	40008000 	.word	0x40008000
 800697c:	40013800 	.word	0x40013800
 8006980:	40021000 	.word	0x40021000
 8006984:	40004400 	.word	0x40004400
 8006988:	40004800 	.word	0x40004800
 800698c:	40004c00 	.word	0x40004c00
 8006990:	40005000 	.word	0x40005000
 8006994:	2310      	movs	r3, #16
 8006996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4aae      	ldr	r2, [pc, #696]	; (8006c58 <UART_SetConfig+0x5bc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	f040 8097 	bne.w	8006ad4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069aa:	2b08      	cmp	r3, #8
 80069ac:	d823      	bhi.n	80069f6 <UART_SetConfig+0x35a>
 80069ae:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <UART_SetConfig+0x318>)
 80069b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b4:	080069d9 	.word	0x080069d9
 80069b8:	080069f7 	.word	0x080069f7
 80069bc:	080069e1 	.word	0x080069e1
 80069c0:	080069f7 	.word	0x080069f7
 80069c4:	080069e7 	.word	0x080069e7
 80069c8:	080069f7 	.word	0x080069f7
 80069cc:	080069f7 	.word	0x080069f7
 80069d0:	080069f7 	.word	0x080069f7
 80069d4:	080069ef 	.word	0x080069ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069d8:	f7fd f970 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 80069dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069de:	e010      	b.n	8006a02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069e0:	4b9e      	ldr	r3, [pc, #632]	; (8006c5c <UART_SetConfig+0x5c0>)
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069e4:	e00d      	b.n	8006a02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069e6:	f7fd f8fb 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 80069ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069ec:	e009      	b.n	8006a02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069f4:	e005      	b.n	8006a02 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8130 	beq.w	8006c6a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	4a94      	ldr	r2, [pc, #592]	; (8006c60 <UART_SetConfig+0x5c4>)
 8006a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	4613      	mov	r3, r2
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	4413      	add	r3, r2
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d305      	bcc.n	8006a3a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d903      	bls.n	8006a42 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a40:	e113      	b.n	8006c6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	2200      	movs	r2, #0
 8006a46:	60bb      	str	r3, [r7, #8]
 8006a48:	60fa      	str	r2, [r7, #12]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	4a84      	ldr	r2, [pc, #528]	; (8006c60 <UART_SetConfig+0x5c4>)
 8006a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	2200      	movs	r2, #0
 8006a58:	603b      	str	r3, [r7, #0]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a64:	f7f9 fbd8 	bl	8000218 <__aeabi_uldivmod>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	4619      	mov	r1, r3
 8006a70:	f04f 0200 	mov.w	r2, #0
 8006a74:	f04f 0300 	mov.w	r3, #0
 8006a78:	020b      	lsls	r3, r1, #8
 8006a7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a7e:	0202      	lsls	r2, r0, #8
 8006a80:	6979      	ldr	r1, [r7, #20]
 8006a82:	6849      	ldr	r1, [r1, #4]
 8006a84:	0849      	lsrs	r1, r1, #1
 8006a86:	2000      	movs	r0, #0
 8006a88:	460c      	mov	r4, r1
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	eb12 0804 	adds.w	r8, r2, r4
 8006a90:	eb43 0905 	adc.w	r9, r3, r5
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	469a      	mov	sl, r3
 8006a9c:	4693      	mov	fp, r2
 8006a9e:	4652      	mov	r2, sl
 8006aa0:	465b      	mov	r3, fp
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	f7f9 fbb7 	bl	8000218 <__aeabi_uldivmod>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4613      	mov	r3, r2
 8006ab0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ab8:	d308      	bcc.n	8006acc <UART_SetConfig+0x430>
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac0:	d204      	bcs.n	8006acc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6a3a      	ldr	r2, [r7, #32]
 8006ac8:	60da      	str	r2, [r3, #12]
 8006aca:	e0ce      	b.n	8006c6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ad2:	e0ca      	b.n	8006c6a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006adc:	d166      	bne.n	8006bac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006ade:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d827      	bhi.n	8006b36 <UART_SetConfig+0x49a>
 8006ae6:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <UART_SetConfig+0x450>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	08006b37 	.word	0x08006b37
 8006afc:	08006b27 	.word	0x08006b27
 8006b00:	08006b37 	.word	0x08006b37
 8006b04:	08006b37 	.word	0x08006b37
 8006b08:	08006b37 	.word	0x08006b37
 8006b0c:	08006b2f 	.word	0x08006b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b10:	f7fd f8d4 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 8006b14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b16:	e014      	b.n	8006b42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b18:	f7fd f8e6 	bl	8003ce8 <HAL_RCC_GetPCLK2Freq>
 8006b1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b1e:	e010      	b.n	8006b42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b20:	4b4e      	ldr	r3, [pc, #312]	; (8006c5c <UART_SetConfig+0x5c0>)
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b24:	e00d      	b.n	8006b42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b26:	f7fd f85b 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 8006b2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b2c:	e009      	b.n	8006b42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b34:	e005      	b.n	8006b42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8090 	beq.w	8006c6a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	4a44      	ldr	r2, [pc, #272]	; (8006c60 <UART_SetConfig+0x5c4>)
 8006b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b54:	461a      	mov	r2, r3
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b5c:	005a      	lsls	r2, r3, #1
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	441a      	add	r2, r3
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	2b0f      	cmp	r3, #15
 8006b74:	d916      	bls.n	8006ba4 <UART_SetConfig+0x508>
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7c:	d212      	bcs.n	8006ba4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f023 030f 	bic.w	r3, r3, #15
 8006b86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	8bfb      	ldrh	r3, [r7, #30]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	8bfa      	ldrh	r2, [r7, #30]
 8006ba0:	60da      	str	r2, [r3, #12]
 8006ba2:	e062      	b.n	8006c6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006baa:	e05e      	b.n	8006c6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d828      	bhi.n	8006c06 <UART_SetConfig+0x56a>
 8006bb4:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <UART_SetConfig+0x520>)
 8006bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bba:	bf00      	nop
 8006bbc:	08006be1 	.word	0x08006be1
 8006bc0:	08006be9 	.word	0x08006be9
 8006bc4:	08006bf1 	.word	0x08006bf1
 8006bc8:	08006c07 	.word	0x08006c07
 8006bcc:	08006bf7 	.word	0x08006bf7
 8006bd0:	08006c07 	.word	0x08006c07
 8006bd4:	08006c07 	.word	0x08006c07
 8006bd8:	08006c07 	.word	0x08006c07
 8006bdc:	08006bff 	.word	0x08006bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be0:	f7fd f86c 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 8006be4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006be6:	e014      	b.n	8006c12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be8:	f7fd f87e 	bl	8003ce8 <HAL_RCC_GetPCLK2Freq>
 8006bec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bee:	e010      	b.n	8006c12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bf0:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <UART_SetConfig+0x5c0>)
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bf4:	e00d      	b.n	8006c12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf6:	f7fc fff3 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 8006bfa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bfc:	e009      	b.n	8006c12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c04:	e005      	b.n	8006c12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c10:	bf00      	nop
    }

    if (pclk != 0U)
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d028      	beq.n	8006c6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	4a10      	ldr	r2, [pc, #64]	; (8006c60 <UART_SetConfig+0x5c4>)
 8006c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c22:	461a      	mov	r2, r3
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	085b      	lsrs	r3, r3, #1
 8006c30:	441a      	add	r2, r3
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	2b0f      	cmp	r3, #15
 8006c40:	d910      	bls.n	8006c64 <UART_SetConfig+0x5c8>
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c48:	d20c      	bcs.n	8006c64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60da      	str	r2, [r3, #12]
 8006c54:	e009      	b.n	8006c6a <UART_SetConfig+0x5ce>
 8006c56:	bf00      	nop
 8006c58:	40008000 	.word	0x40008000
 8006c5c:	00f42400 	.word	0x00f42400
 8006c60:	08008104 	.word	0x08008104
      }
      else
      {
        ret = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2200      	movs	r2, #0
 8006c84:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006c86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3730      	adds	r7, #48	; 0x30
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d06:	f003 0308 	and.w	r3, r3, #8
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01a      	beq.n	8006daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d92:	d10a      	bne.n	8006daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]
  }
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006de8:	f7fa fd5c 	bl	80018a4 <HAL_GetTick>
 8006dec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0308 	and.w	r3, r3, #8
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d10e      	bne.n	8006e1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f82f 	bl	8006e6e <UART_WaitOnFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e025      	b.n	8006e66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d10e      	bne.n	8006e46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f819 	bl	8006e6e <UART_WaitOnFlagUntilTimeout>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e00f      	b.n	8006e66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b09c      	sub	sp, #112	; 0x70
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	603b      	str	r3, [r7, #0]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e7e:	e0a9      	b.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	f000 80a5 	beq.w	8006fd4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e8a:	f7fa fd0b 	bl	80018a4 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d302      	bcc.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d140      	bne.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eb4:	667b      	str	r3, [r7, #100]	; 0x64
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ec0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ec4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e6      	bne.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ef2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ef4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e5      	bne.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e069      	b.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d051      	beq.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3e:	d149      	bne.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f68:	637b      	str	r3, [r7, #52]	; 0x34
 8006f6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e6      	bne.n	8006f4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f9c:	623a      	str	r2, [r7, #32]
 8006f9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	69f9      	ldr	r1, [r7, #28]
 8006fa2:	6a3a      	ldr	r2, [r7, #32]
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e5      	bne.n	8006f7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e010      	b.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	69da      	ldr	r2, [r3, #28]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2301      	moveq	r3, #1
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	461a      	mov	r2, r3
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	f43f af46 	beq.w	8006e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3770      	adds	r7, #112	; 0x70
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007000:	b480      	push	{r7}
 8007002:	b0a3      	sub	sp, #140	; 0x8c
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4613      	mov	r3, r2
 800700c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	88fa      	ldrh	r2, [r7, #6]
 8007018:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	88fa      	ldrh	r2, [r7, #6]
 8007020:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007032:	d10e      	bne.n	8007052 <UART_Start_Receive_IT+0x52>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d105      	bne.n	8007048 <UART_Start_Receive_IT+0x48>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007042:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007046:	e02d      	b.n	80070a4 <UART_Start_Receive_IT+0xa4>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	22ff      	movs	r2, #255	; 0xff
 800704c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007050:	e028      	b.n	80070a4 <UART_Start_Receive_IT+0xa4>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10d      	bne.n	8007076 <UART_Start_Receive_IT+0x76>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d104      	bne.n	800706c <UART_Start_Receive_IT+0x6c>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	22ff      	movs	r2, #255	; 0xff
 8007066:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800706a:	e01b      	b.n	80070a4 <UART_Start_Receive_IT+0xa4>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	227f      	movs	r2, #127	; 0x7f
 8007070:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007074:	e016      	b.n	80070a4 <UART_Start_Receive_IT+0xa4>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800707e:	d10d      	bne.n	800709c <UART_Start_Receive_IT+0x9c>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d104      	bne.n	8007092 <UART_Start_Receive_IT+0x92>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	227f      	movs	r2, #127	; 0x7f
 800708c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007090:	e008      	b.n	80070a4 <UART_Start_Receive_IT+0xa4>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	223f      	movs	r2, #63	; 0x3f
 8007096:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800709a:	e003      	b.n	80070a4 <UART_Start_Receive_IT+0xa4>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2222      	movs	r2, #34	; 0x22
 80070b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3308      	adds	r3, #8
 80070ba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070be:	e853 3f00 	ldrex	r3, [r3]
 80070c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80070c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070c6:	f043 0301 	orr.w	r3, r3, #1
 80070ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3308      	adds	r3, #8
 80070d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80070d8:	673a      	str	r2, [r7, #112]	; 0x70
 80070da:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80070de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80070e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e3      	bne.n	80070b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070f4:	d153      	bne.n	800719e <UART_Start_Receive_IT+0x19e>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070fc:	88fa      	ldrh	r2, [r7, #6]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d34d      	bcc.n	800719e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710a:	d107      	bne.n	800711c <UART_Start_Receive_IT+0x11c>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d103      	bne.n	800711c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4a4b      	ldr	r2, [pc, #300]	; (8007244 <UART_Start_Receive_IT+0x244>)
 8007118:	671a      	str	r2, [r3, #112]	; 0x70
 800711a:	e002      	b.n	8007122 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4a4a      	ldr	r2, [pc, #296]	; (8007248 <UART_Start_Receive_IT+0x248>)
 8007120:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d01a      	beq.n	8007168 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007146:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007154:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007156:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800715a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e4      	bne.n	8007132 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3308      	adds	r3, #8
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800717e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007188:	64ba      	str	r2, [r7, #72]	; 0x48
 800718a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800718e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e5      	bne.n	8007168 <UART_Start_Receive_IT+0x168>
 800719c:	e04a      	b.n	8007234 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a6:	d107      	bne.n	80071b8 <UART_Start_Receive_IT+0x1b8>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d103      	bne.n	80071b8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4a26      	ldr	r2, [pc, #152]	; (800724c <UART_Start_Receive_IT+0x24c>)
 80071b4:	671a      	str	r2, [r3, #112]	; 0x70
 80071b6:	e002      	b.n	80071be <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4a25      	ldr	r2, [pc, #148]	; (8007250 <UART_Start_Receive_IT+0x250>)
 80071bc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d019      	beq.n	8007202 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80071e2:	677b      	str	r3, [r7, #116]	; 0x74
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ec:	637b      	str	r3, [r7, #52]	; 0x34
 80071ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e6      	bne.n	80071ce <UART_Start_Receive_IT+0x1ce>
 8007200:	e018      	b.n	8007234 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	613b      	str	r3, [r7, #16]
   return(result);
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f043 0320 	orr.w	r3, r3, #32
 8007216:	67bb      	str	r3, [r7, #120]	; 0x78
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	461a      	mov	r2, r3
 800721e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007220:	623b      	str	r3, [r7, #32]
 8007222:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	69f9      	ldr	r1, [r7, #28]
 8007226:	6a3a      	ldr	r2, [r7, #32]
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	61bb      	str	r3, [r7, #24]
   return(result);
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e6      	bne.n	8007202 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	378c      	adds	r7, #140	; 0x8c
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	0800795d 	.word	0x0800795d
 8007248:	08007665 	.word	0x08007665
 800724c:	08007503 	.word	0x08007503
 8007250:	080073a3 	.word	0x080073a3

08007254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b095      	sub	sp, #84	; 0x54
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007270:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800727a:	643b      	str	r3, [r7, #64]	; 0x40
 800727c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007280:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e6      	bne.n	800725c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	61fb      	str	r3, [r7, #28]
   return(result);
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072a4:	f023 0301 	bic.w	r3, r3, #1
 80072a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e3      	bne.n	800728e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d118      	bne.n	8007300 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	60bb      	str	r3, [r7, #8]
   return(result);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f023 0310 	bic.w	r3, r3, #16
 80072e2:	647b      	str	r3, [r7, #68]	; 0x44
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ec:	61bb      	str	r3, [r7, #24]
 80072ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6979      	ldr	r1, [r7, #20]
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	613b      	str	r3, [r7, #16]
   return(result);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e6      	bne.n	80072ce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2220      	movs	r2, #32
 8007304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007314:	bf00      	nop
 8007316:	3754      	adds	r7, #84	; 0x54
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff f996 	bl	8006670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	60bb      	str	r3, [r7, #8]
   return(result);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007368:	61fb      	str	r3, [r7, #28]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6979      	ldr	r1, [r7, #20]
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	613b      	str	r3, [r7, #16]
   return(result);
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e6      	bne.n	8007354 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff f961 	bl	800665c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800739a:	bf00      	nop
 800739c:	3720      	adds	r7, #32
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b096      	sub	sp, #88	; 0x58
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ba:	2b22      	cmp	r3, #34	; 0x22
 80073bc:	f040 8095 	bne.w	80074ea <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073ca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80073ce:	b2d9      	uxtb	r1, r3
 80073d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073da:	400a      	ands	r2, r1
 80073dc:	b2d2      	uxtb	r2, r2
 80073de:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007402:	b29b      	uxth	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d178      	bne.n	80074fa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007418:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800741c:	653b      	str	r3, [r7, #80]	; 0x50
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007426:	647b      	str	r3, [r7, #68]	; 0x44
 8007428:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800742c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e6      	bne.n	8007408 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3308      	adds	r3, #8
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	623b      	str	r3, [r7, #32]
   return(result);
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	f023 0301 	bic.w	r3, r3, #1
 8007450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3308      	adds	r3, #8
 8007458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800745a:	633a      	str	r2, [r7, #48]	; 0x30
 800745c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e5      	bne.n	800743a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2220      	movs	r2, #32
 8007472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007480:	2b01      	cmp	r3, #1
 8007482:	d12e      	bne.n	80074e2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	60fb      	str	r3, [r7, #12]
   return(result);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0310 	bic.w	r3, r3, #16
 800749e:	64bb      	str	r3, [r7, #72]	; 0x48
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	69b9      	ldr	r1, [r7, #24]
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	617b      	str	r3, [r7, #20]
   return(result);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e6      	bne.n	800748a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	2b10      	cmp	r3, #16
 80074c8:	d103      	bne.n	80074d2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2210      	movs	r2, #16
 80074d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff f8d2 	bl	8006684 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074e0:	e00b      	b.n	80074fa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7f9 fbbc 	bl	8000c60 <HAL_UART_RxCpltCallback>
}
 80074e8:	e007      	b.n	80074fa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	699a      	ldr	r2, [r3, #24]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f042 0208 	orr.w	r2, r2, #8
 80074f8:	619a      	str	r2, [r3, #24]
}
 80074fa:	bf00      	nop
 80074fc:	3758      	adds	r7, #88	; 0x58
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b096      	sub	sp, #88	; 0x58
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007510:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751a:	2b22      	cmp	r3, #34	; 0x22
 800751c:	f040 8095 	bne.w	800764a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007530:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007534:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007538:	4013      	ands	r3, r2
 800753a:	b29a      	uxth	r2, r3
 800753c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800753e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007544:	1c9a      	adds	r2, r3, #2
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007562:	b29b      	uxth	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d178      	bne.n	800765a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800757c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007586:	643b      	str	r3, [r7, #64]	; 0x40
 8007588:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800758c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e6      	bne.n	8007568 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3308      	adds	r3, #8
 80075a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	f023 0301 	bic.w	r3, r3, #1
 80075b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3308      	adds	r3, #8
 80075b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e5      	bne.n	800759a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d12e      	bne.n	8007642 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f023 0310 	bic.w	r3, r3, #16
 80075fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007608:	61bb      	str	r3, [r7, #24]
 800760a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6979      	ldr	r1, [r7, #20]
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	613b      	str	r3, [r7, #16]
   return(result);
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e6      	bne.n	80075ea <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	f003 0310 	and.w	r3, r3, #16
 8007626:	2b10      	cmp	r3, #16
 8007628:	d103      	bne.n	8007632 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2210      	movs	r2, #16
 8007630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff f822 	bl	8006684 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007640:	e00b      	b.n	800765a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7f9 fb0c 	bl	8000c60 <HAL_UART_RxCpltCallback>
}
 8007648:	e007      	b.n	800765a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	699a      	ldr	r2, [r3, #24]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0208 	orr.w	r2, r2, #8
 8007658:	619a      	str	r2, [r3, #24]
}
 800765a:	bf00      	nop
 800765c:	3758      	adds	r7, #88	; 0x58
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b0a6      	sub	sp, #152	; 0x98
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007672:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800769a:	2b22      	cmp	r3, #34	; 0x22
 800769c:	f040 814f 	bne.w	800793e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076aa:	e0f6      	b.n	800789a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076b6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80076ba:	b2d9      	uxtb	r1, r3
 80076bc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c6:	400a      	ands	r2, r1
 80076c8:	b2d2      	uxtb	r2, r2
 80076ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076dc:	b29b      	uxth	r3, r3
 80076de:	3b01      	subs	r3, #1
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80076f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d053      	beq.n	80077a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d011      	beq.n	800772e <UART_RxISR_8BIT_FIFOEN+0xca>
 800770a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800770e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2201      	movs	r2, #1
 800771c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007724:	f043 0201 	orr.w	r2, r3, #1
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800772e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d011      	beq.n	800775e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800773a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00b      	beq.n	800775e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2202      	movs	r2, #2
 800774c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007754:	f043 0204 	orr.w	r2, r3, #4
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800775e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007762:	f003 0304 	and.w	r3, r3, #4
 8007766:	2b00      	cmp	r3, #0
 8007768:	d011      	beq.n	800778e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800776a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2204      	movs	r2, #4
 800777c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007784:	f043 0202 	orr.w	r2, r3, #2
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d006      	beq.n	80077a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7fe ff69 	bl	8006670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d173      	bne.n	800789a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80077c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80077d6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80077da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80077e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e4      	bne.n	80077b2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3308      	adds	r3, #8
 80077ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f2:	e853 3f00 	ldrex	r3, [r3]
 80077f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80077f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077fe:	f023 0301 	bic.w	r3, r3, #1
 8007802:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3308      	adds	r3, #8
 800780a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800780c:	657a      	str	r2, [r7, #84]	; 0x54
 800780e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007812:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800781a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e3      	bne.n	80077e8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007832:	2b01      	cmp	r3, #1
 8007834:	d12e      	bne.n	8007894 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	f023 0310 	bic.w	r3, r3, #16
 8007850:	67bb      	str	r3, [r7, #120]	; 0x78
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800785a:	643b      	str	r3, [r7, #64]	; 0x40
 800785c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e6      	bne.n	800783c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	2b10      	cmp	r3, #16
 800787a:	d103      	bne.n	8007884 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2210      	movs	r2, #16
 8007882:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7fe fef9 	bl	8006684 <HAL_UARTEx_RxEventCallback>
 8007892:	e002      	b.n	800789a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7f9 f9e3 	bl	8000c60 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800789a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d006      	beq.n	80078b0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80078a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f47f aefe 	bne.w	80076ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80078ba:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d045      	beq.n	800794e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80078c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d23e      	bcs.n	800794e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3308      	adds	r3, #8
 80078d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	61fb      	str	r3, [r7, #28]
   return(result);
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078e6:	673b      	str	r3, [r7, #112]	; 0x70
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3308      	adds	r3, #8
 80078ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80078f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e5      	bne.n	80078d0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a14      	ldr	r2, [pc, #80]	; (8007958 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007908:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	60bb      	str	r3, [r7, #8]
   return(result);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	f043 0320 	orr.w	r3, r3, #32
 800791e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007928:	61bb      	str	r3, [r7, #24]
 800792a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	6979      	ldr	r1, [r7, #20]
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	613b      	str	r3, [r7, #16]
   return(result);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e6      	bne.n	800790a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800793c:	e007      	b.n	800794e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	699a      	ldr	r2, [r3, #24]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f042 0208 	orr.w	r2, r2, #8
 800794c:	619a      	str	r2, [r3, #24]
}
 800794e:	bf00      	nop
 8007950:	3798      	adds	r7, #152	; 0x98
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	080073a3 	.word	0x080073a3

0800795c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b0a8      	sub	sp, #160	; 0xa0
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800796a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007992:	2b22      	cmp	r3, #34	; 0x22
 8007994:	f040 8153 	bne.w	8007c3e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800799e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079a2:	e0fa      	b.n	8007b9a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079aa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80079b6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80079ba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80079be:	4013      	ands	r3, r2
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079cc:	1c9a      	adds	r2, r3, #2
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80079ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079f2:	f003 0307 	and.w	r3, r3, #7
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d053      	beq.n	8007aa2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d011      	beq.n	8007a2a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007a06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2201      	movs	r2, #1
 8007a18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a20:	f043 0201 	orr.w	r2, r3, #1
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d011      	beq.n	8007a5a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00b      	beq.n	8007a5a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2202      	movs	r2, #2
 8007a48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a50:	f043 0204 	orr.w	r2, r3, #4
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d011      	beq.n	8007a8a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007a66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2204      	movs	r2, #4
 8007a78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a80:	f043 0202 	orr.w	r2, r3, #2
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d006      	beq.n	8007aa2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7fe fdeb 	bl	8006670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d175      	bne.n	8007b9a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007abe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ac2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ad2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ad6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e4      	bne.n	8007aae <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007afa:	f023 0301 	bic.w	r3, r3, #1
 8007afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e1      	bne.n	8007ae4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d12e      	bne.n	8007b94 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	f023 0310 	bic.w	r3, r3, #16
 8007b50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e6      	bne.n	8007b3c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	f003 0310 	and.w	r3, r3, #16
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d103      	bne.n	8007b84 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2210      	movs	r2, #16
 8007b82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7fe fd79 	bl	8006684 <HAL_UARTEx_RxEventCallback>
 8007b92:	e002      	b.n	8007b9a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7f9 f863 	bl	8000c60 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b9a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d006      	beq.n	8007bb0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007ba2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f47f aefa 	bne.w	80079a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bb6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007bba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d045      	beq.n	8007c4e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bc8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d23e      	bcs.n	8007c4e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	e853 3f00 	ldrex	r3, [r3]
 8007bde:	623b      	str	r3, [r7, #32]
   return(result);
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007be6:	677b      	str	r3, [r7, #116]	; 0x74
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3308      	adds	r3, #8
 8007bee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007bf0:	633a      	str	r2, [r7, #48]	; 0x30
 8007bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e5      	bne.n	8007bd0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a14      	ldr	r2, [pc, #80]	; (8007c58 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007c08:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f043 0320 	orr.w	r3, r3, #32
 8007c1e:	673b      	str	r3, [r7, #112]	; 0x70
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	461a      	mov	r2, r3
 8007c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c28:	61fb      	str	r3, [r7, #28]
 8007c2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2c:	69b9      	ldr	r1, [r7, #24]
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	e841 2300 	strex	r3, r2, [r1]
 8007c34:	617b      	str	r3, [r7, #20]
   return(result);
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e6      	bne.n	8007c0a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c3c:	e007      	b.n	8007c4e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699a      	ldr	r2, [r3, #24]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0208 	orr.w	r2, r2, #8
 8007c4c:	619a      	str	r2, [r3, #24]
}
 8007c4e:	bf00      	nop
 8007c50:	37a0      	adds	r7, #160	; 0xa0
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	08007503 	.word	0x08007503

08007c5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d101      	bne.n	8007cae <HAL_UARTEx_DisableFifoMode+0x16>
 8007caa:	2302      	movs	r3, #2
 8007cac:	e027      	b.n	8007cfe <HAL_UARTEx_DisableFifoMode+0x66>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2224      	movs	r2, #36	; 0x24
 8007cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 0201 	bic.w	r2, r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007cdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e02d      	b.n	8007d7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2224      	movs	r2, #36	; 0x24
 8007d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0201 	bic.w	r2, r2, #1
 8007d48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f850 	bl	8007e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e02d      	b.n	8007dfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2224      	movs	r2, #36	; 0x24
 8007daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0201 	bic.w	r2, r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f812 	bl	8007e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d108      	bne.n	8007e26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e24:	e031      	b.n	8007e8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e26:	2308      	movs	r3, #8
 8007e28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e2a:	2308      	movs	r3, #8
 8007e2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	0e5b      	lsrs	r3, r3, #25
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	0f5b      	lsrs	r3, r3, #29
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	7b3a      	ldrb	r2, [r7, #12]
 8007e52:	4911      	ldr	r1, [pc, #68]	; (8007e98 <UARTEx_SetNbDataToProcess+0x94>)
 8007e54:	5c8a      	ldrb	r2, [r1, r2]
 8007e56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e5a:	7b3a      	ldrb	r2, [r7, #12]
 8007e5c:	490f      	ldr	r1, [pc, #60]	; (8007e9c <UARTEx_SetNbDataToProcess+0x98>)
 8007e5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e60:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
 8007e6e:	7b7a      	ldrb	r2, [r7, #13]
 8007e70:	4909      	ldr	r1, [pc, #36]	; (8007e98 <UARTEx_SetNbDataToProcess+0x94>)
 8007e72:	5c8a      	ldrb	r2, [r1, r2]
 8007e74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e78:	7b7a      	ldrb	r2, [r7, #13]
 8007e7a:	4908      	ldr	r1, [pc, #32]	; (8007e9c <UARTEx_SetNbDataToProcess+0x98>)
 8007e7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e8a:	bf00      	nop
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	0800811c 	.word	0x0800811c
 8007e9c:	08008124 	.word	0x08008124

08007ea0 <memset>:
 8007ea0:	4402      	add	r2, r0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d100      	bne.n	8007eaa <memset+0xa>
 8007ea8:	4770      	bx	lr
 8007eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8007eae:	e7f9      	b.n	8007ea4 <memset+0x4>

08007eb0 <strncmp>:
 8007eb0:	b510      	push	{r4, lr}
 8007eb2:	b16a      	cbz	r2, 8007ed0 <strncmp+0x20>
 8007eb4:	3901      	subs	r1, #1
 8007eb6:	1884      	adds	r4, r0, r2
 8007eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ebc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d103      	bne.n	8007ecc <strncmp+0x1c>
 8007ec4:	42a0      	cmp	r0, r4
 8007ec6:	d001      	beq.n	8007ecc <strncmp+0x1c>
 8007ec8:	2a00      	cmp	r2, #0
 8007eca:	d1f5      	bne.n	8007eb8 <strncmp+0x8>
 8007ecc:	1ad0      	subs	r0, r2, r3
 8007ece:	bd10      	pop	{r4, pc}
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	e7fc      	b.n	8007ece <strncmp+0x1e>

08007ed4 <__libc_init_array>:
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	4d0d      	ldr	r5, [pc, #52]	; (8007f0c <__libc_init_array+0x38>)
 8007ed8:	4c0d      	ldr	r4, [pc, #52]	; (8007f10 <__libc_init_array+0x3c>)
 8007eda:	1b64      	subs	r4, r4, r5
 8007edc:	10a4      	asrs	r4, r4, #2
 8007ede:	2600      	movs	r6, #0
 8007ee0:	42a6      	cmp	r6, r4
 8007ee2:	d109      	bne.n	8007ef8 <__libc_init_array+0x24>
 8007ee4:	4d0b      	ldr	r5, [pc, #44]	; (8007f14 <__libc_init_array+0x40>)
 8007ee6:	4c0c      	ldr	r4, [pc, #48]	; (8007f18 <__libc_init_array+0x44>)
 8007ee8:	f000 f826 	bl	8007f38 <_init>
 8007eec:	1b64      	subs	r4, r4, r5
 8007eee:	10a4      	asrs	r4, r4, #2
 8007ef0:	2600      	movs	r6, #0
 8007ef2:	42a6      	cmp	r6, r4
 8007ef4:	d105      	bne.n	8007f02 <__libc_init_array+0x2e>
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}
 8007ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007efc:	4798      	blx	r3
 8007efe:	3601      	adds	r6, #1
 8007f00:	e7ee      	b.n	8007ee0 <__libc_init_array+0xc>
 8007f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f06:	4798      	blx	r3
 8007f08:	3601      	adds	r6, #1
 8007f0a:	e7f2      	b.n	8007ef2 <__libc_init_array+0x1e>
 8007f0c:	08008134 	.word	0x08008134
 8007f10:	08008134 	.word	0x08008134
 8007f14:	08008134 	.word	0x08008134
 8007f18:	08008138 	.word	0x08008138

08007f1c <memcpy>:
 8007f1c:	440a      	add	r2, r1
 8007f1e:	4291      	cmp	r1, r2
 8007f20:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f24:	d100      	bne.n	8007f28 <memcpy+0xc>
 8007f26:	4770      	bx	lr
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f32:	4291      	cmp	r1, r2
 8007f34:	d1f9      	bne.n	8007f2a <memcpy+0xe>
 8007f36:	bd10      	pop	{r4, pc}

08007f38 <_init>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	bf00      	nop
 8007f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3e:	bc08      	pop	{r3}
 8007f40:	469e      	mov	lr, r3
 8007f42:	4770      	bx	lr

08007f44 <_fini>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	bf00      	nop
 8007f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	469e      	mov	lr, r3
 8007f4e:	4770      	bx	lr
