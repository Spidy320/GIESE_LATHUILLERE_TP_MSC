
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ca8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08008e88  08008e88  00018e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090d8  080090d8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080090d8  080090d8  000190d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090e0  080090e0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e0  080090e0  000190e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090e4  080090e4  000190e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080090e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  2000005c  08009144  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08009144  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b7e3  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003880  00000000  00000000  0003b8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  0003f138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c2  00000000  00000000  000406d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029c13  00000000  00000000  0004179a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be21  00000000  00000000  0006b3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112a50  00000000  00000000  000871ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000602c  00000000  00000000  00199c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  0019fc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008e70 	.word	0x08008e70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08008e70 	.word	0x08008e70

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08c      	sub	sp, #48	; 0x30
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2220      	movs	r2, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f007 ffb5 	bl	8008544 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005da:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <MX_ADC1_Init+0xe8>)
 80005dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e2:	4b30      	ldr	r3, [pc, #192]	; (80006a4 <MX_ADC1_Init+0xe8>)
 80005e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ea:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <MX_ADC1_Init+0xe8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f0:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <MX_ADC1_Init+0xe8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <MX_ADC1_Init+0xe8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <MX_ADC1_Init+0xe8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000604:	2204      	movs	r2, #4
 8000606:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <MX_ADC1_Init+0xe8>)
 800060a:	2200      	movs	r2, #0
 800060c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000616:	2201      	movs	r2, #1
 8000618:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_ADC1_Init+0xe8>)
 800062a:	2200      	movs	r2, #0
 800062c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_ADC1_Init+0xe8>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000644:	4817      	ldr	r0, [pc, #92]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000646:	f001 fc0d 	bl	8001e64 <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000650:	f000 fb42 	bl	8000cd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	4619      	mov	r1, r3
 800065e:	4811      	ldr	r0, [pc, #68]	; (80006a4 <MX_ADC1_Init+0xe8>)
 8000660:	f002 fc82 	bl	8002f68 <HAL_ADCEx_MultiModeConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800066a:	f000 fb35 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_ADC1_Init+0xec>)
 8000670:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000672:	2306      	movs	r3, #6
 8000674:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800067a:	237f      	movs	r3, #127	; 0x7f
 800067c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800067e:	2304      	movs	r3, #4
 8000680:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <MX_ADC1_Init+0xe8>)
 800068c:	f001 ffa4 	bl	80025d8 <HAL_ADC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000696:	f000 fb1f 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	3730      	adds	r7, #48	; 0x30
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000078 	.word	0x20000078
 80006a8:	08600004 	.word	0x08600004

080006ac <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2220      	movs	r2, #32
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f007 ff43 	bl	8008544 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006be:	4b2b      	ldr	r3, [pc, #172]	; (800076c <MX_ADC2_Init+0xc0>)
 80006c0:	4a2b      	ldr	r2, [pc, #172]	; (8000770 <MX_ADC2_Init+0xc4>)
 80006c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <MX_ADC2_Init+0xc0>)
 80006c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006cc:	4b27      	ldr	r3, [pc, #156]	; (800076c <MX_ADC2_Init+0xc0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_ADC2_Init+0xc0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <MX_ADC2_Init+0xc0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_ADC2_Init+0xc0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_ADC2_Init+0xc0>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_ADC2_Init+0xc0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_ADC2_Init+0xc0>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ADC2_Init+0xc0>)
 8000706:	2200      	movs	r2, #0
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_ADC2_Init+0xc0>)
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_ADC2_Init+0xc0>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_ADC2_Init+0xc0>)
 8000728:	f001 fb9c 	bl	8001e64 <HAL_ADC_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000732:	f000 fad1 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_ADC2_Init+0xc8>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073a:	2306      	movs	r3, #6
 800073c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000742:	237f      	movs	r3, #127	; 0x7f
 8000744:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000746:	2304      	movs	r3, #4
 8000748:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_ADC2_Init+0xc0>)
 8000754:	f001 ff40 	bl	80025d8 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800075e:	f000 fabb 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000e4 	.word	0x200000e4
 8000770:	50000100 	.word	0x50000100
 8000774:	19200040 	.word	0x19200040

08000778 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b0a4      	sub	sp, #144	; 0x90
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000794:	2254      	movs	r2, #84	; 0x54
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f007 fed3 	bl	8008544 <memset>
  if(adcHandle->Instance==ADC1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007a6:	d174      	bne.n	8000892 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fe55 	bl	8004468 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007c4:	f000 fa88 	bl	8000cd8 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007c8:	4b63      	ldr	r3, [pc, #396]	; (8000958 <HAL_ADC_MspInit+0x1e0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a62      	ldr	r2, [pc, #392]	; (8000958 <HAL_ADC_MspInit+0x1e0>)
 80007d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007d2:	4b61      	ldr	r3, [pc, #388]	; (8000958 <HAL_ADC_MspInit+0x1e0>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d10b      	bne.n	80007f2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007da:	4b60      	ldr	r3, [pc, #384]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a5f      	ldr	r2, [pc, #380]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 80007e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b5d      	ldr	r3, [pc, #372]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b5a      	ldr	r3, [pc, #360]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a59      	ldr	r2, [pc, #356]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b57      	ldr	r3, [pc, #348]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	623b      	str	r3, [r7, #32]
 8000808:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b54      	ldr	r3, [pc, #336]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a53      	ldr	r2, [pc, #332]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b51      	ldr	r3, [pc, #324]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	61fb      	str	r3, [r7, #28]
 8000820:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b4e      	ldr	r3, [pc, #312]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a4d      	ldr	r2, [pc, #308]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b4b      	ldr	r3, [pc, #300]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800083a:	2304      	movs	r3, #4
 800083c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083e:	2303      	movs	r3, #3
 8000840:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800084e:	4619      	mov	r1, r3
 8000850:	4843      	ldr	r0, [pc, #268]	; (8000960 <HAL_ADC_MspInit+0x1e8>)
 8000852:	f002 fe31 	bl	80034b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000856:	2302      	movs	r3, #2
 8000858:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085a:	2303      	movs	r3, #3
 800085c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f002 fe22 	bl	80034b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_Imes_Pin|V_Imes_Pin;
 8000874:	2303      	movs	r3, #3
 8000876:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000878:	2303      	movs	r3, #3
 800087a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000888:	4619      	mov	r1, r3
 800088a:	4836      	ldr	r0, [pc, #216]	; (8000964 <HAL_ADC_MspInit+0x1ec>)
 800088c:	f002 fe14 	bl	80034b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000890:	e05e      	b.n	8000950 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a34      	ldr	r2, [pc, #208]	; (8000968 <HAL_ADC_MspInit+0x1f0>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d159      	bne.n	8000950 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800089c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ac:	4618      	mov	r0, r3
 80008ae:	f003 fddb 	bl	8004468 <HAL_RCCEx_PeriphCLKConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008b8:	f000 fa0e 	bl	8000cd8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008bc:	4b26      	ldr	r3, [pc, #152]	; (8000958 <HAL_ADC_MspInit+0x1e0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	4a25      	ldr	r2, [pc, #148]	; (8000958 <HAL_ADC_MspInit+0x1e0>)
 80008c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <HAL_ADC_MspInit+0x1e0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d10b      	bne.n	80008e6 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a22      	ldr	r2, [pc, #136]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 80008d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a1c      	ldr	r2, [pc, #112]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a16      	ldr	r2, [pc, #88]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000916:	230b      	movs	r3, #11
 8000918:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091a:	2303      	movs	r3, #3
 800091c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800092a:	4619      	mov	r1, r3
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <HAL_ADC_MspInit+0x1e8>)
 800092e:	f002 fdc3 	bl	80034b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000932:	2301      	movs	r3, #1
 8000934:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000936:	2303      	movs	r3, #3
 8000938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f002 fdb4 	bl	80034b8 <HAL_GPIO_Init>
}
 8000950:	bf00      	nop
 8000952:	3790      	adds	r7, #144	; 0x90
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000150 	.word	0x20000150
 800095c:	40021000 	.word	0x40021000
 8000960:	48000800 	.word	0x48000800
 8000964:	48000400 	.word	0x48000400
 8000968:	50000100 	.word	0x50000100

0800096c <Adc_init>:
const uint8_t courant[] = "Courant : ";
uint32_t courant_mes;
char courant_str[5];
int val_moy;

void Adc_init(void){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8000972:	f7ff fe23 	bl	80005bc <MX_ADC1_Init>
	HAL_ADC_Start(&hadc1);
 8000976:	4818      	ldr	r0, [pc, #96]	; (80009d8 <Adc_init+0x6c>)
 8000978:	f001 fc36 	bl	80021e8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800097c:	f04f 31ff 	mov.w	r1, #4294967295
 8000980:	4815      	ldr	r0, [pc, #84]	; (80009d8 <Adc_init+0x6c>)
 8000982:	f001 fd15 	bl	80023b0 <HAL_ADC_PollForConversion>
	for(int i = 0;i < 100; i++){
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	e014      	b.n	80009b6 <Adc_init+0x4a>
		val_moy += HAL_ADC_GetValue(&hadc1);
 800098c:	4812      	ldr	r0, [pc, #72]	; (80009d8 <Adc_init+0x6c>)
 800098e:	f001 fe15 	bl	80025bc <HAL_ADC_GetValue>
 8000992:	4603      	mov	r3, r0
 8000994:	4a11      	ldr	r2, [pc, #68]	; (80009dc <Adc_init+0x70>)
 8000996:	6812      	ldr	r2, [r2, #0]
 8000998:	4413      	add	r3, r2
 800099a:	461a      	mov	r2, r3
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <Adc_init+0x70>)
 800099e:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <Adc_init+0x6c>)
 80009a2:	f001 fc21 	bl	80021e8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80009a6:	f04f 31ff 	mov.w	r1, #4294967295
 80009aa:	480b      	ldr	r0, [pc, #44]	; (80009d8 <Adc_init+0x6c>)
 80009ac:	f001 fd00 	bl	80023b0 <HAL_ADC_PollForConversion>
	for(int i = 0;i < 100; i++){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b63      	cmp	r3, #99	; 0x63
 80009ba:	dde7      	ble.n	800098c <Adc_init+0x20>
	}
	val_moy = val_moy / 100;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <Adc_init+0x70>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <Adc_init+0x74>)
 80009c2:	fb82 1203 	smull	r1, r2, r2, r3
 80009c6:	1152      	asrs	r2, r2, #5
 80009c8:	17db      	asrs	r3, r3, #31
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	4a03      	ldr	r2, [pc, #12]	; (80009dc <Adc_init+0x70>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000078 	.word	0x20000078
 80009dc:	20000160 	.word	0x20000160
 80009e0:	51eb851f 	.word	0x51eb851f

080009e4 <Mes_Courant>:


void Mes_Courant(void){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	courant_mes = HAL_ADC_GetValue(&hadc1) - val_moy;
 80009e8:	4813      	ldr	r0, [pc, #76]	; (8000a38 <Mes_Courant+0x54>)
 80009ea:	f001 fde7 	bl	80025bc <HAL_ADC_GetValue>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <Mes_Courant+0x58>)
 80009f2:	6812      	ldr	r2, [r2, #0]
 80009f4:	1a9b      	subs	r3, r3, r2
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <Mes_Courant+0x5c>)
 80009f8:	6013      	str	r3, [r2, #0]
	HAL_ADC_Start(&hadc1);
 80009fa:	480f      	ldr	r0, [pc, #60]	; (8000a38 <Mes_Courant+0x54>)
 80009fc:	f001 fbf4 	bl	80021e8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <Mes_Courant+0x54>)
 8000a06:	f001 fcd3 	bl	80023b0 <HAL_ADC_PollForConversion>
	sprintf(courant_str, "%ld", courant_mes);
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <Mes_Courant+0x5c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	; (8000a44 <Mes_Courant+0x60>)
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <Mes_Courant+0x64>)
 8000a14:	f007 fd76 	bl	8008504 <siprintf>
	HAL_UART_Transmit(&huart2, courant, 10, HAL_MAX_DELAY);
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	490b      	ldr	r1, [pc, #44]	; (8000a4c <Mes_Courant+0x68>)
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <Mes_Courant+0x6c>)
 8000a22:	f005 fd48 	bl	80064b6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, courant_str, 5, HAL_MAX_DELAY);
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	2205      	movs	r2, #5
 8000a2c:	4906      	ldr	r1, [pc, #24]	; (8000a48 <Mes_Courant+0x64>)
 8000a2e:	4808      	ldr	r0, [pc, #32]	; (8000a50 <Mes_Courant+0x6c>)
 8000a30:	f005 fd41 	bl	80064b6 <HAL_UART_Transmit>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000078 	.word	0x20000078
 8000a3c:	20000160 	.word	0x20000160
 8000a40:	20000154 	.word	0x20000154
 8000a44:	08008e88 	.word	0x08008e88
 8000a48:	20000158 	.word	0x20000158
 8000a4c:	08008ec0 	.word	0x08008ec0
 8000a50:	20000288 	.word	0x20000288

08000a54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	4b3f      	ldr	r3, [pc, #252]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a3e      	ldr	r2, [pc, #248]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b3c      	ldr	r3, [pc, #240]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a82:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a38      	ldr	r2, [pc, #224]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a88:	f043 0320 	orr.w	r3, r3, #32
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0320 	and.w	r3, r3, #32
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b33      	ldr	r3, [pc, #204]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a32      	ldr	r2, [pc, #200]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a2c      	ldr	r2, [pc, #176]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <MX_GPIO_Init+0x114>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f002 fe67 	bl	80037bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2104      	movs	r1, #4
 8000af2:	481e      	ldr	r0, [pc, #120]	; (8000b6c <MX_GPIO_Init+0x118>)
 8000af4:	f002 fe62 	bl	80037bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4818      	ldr	r0, [pc, #96]	; (8000b70 <MX_GPIO_Init+0x11c>)
 8000b10:	f002 fcd2 	bl	80034b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000b14:	2320      	movs	r3, #32
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2e:	f002 fcc3 	bl	80034b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000b32:	2304      	movs	r3, #4
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <MX_GPIO_Init+0x118>)
 8000b4a:	f002 fcb5 	bl	80034b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2028      	movs	r0, #40	; 0x28
 8000b54:	f002 fbc8 	bl	80032e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b58:	2028      	movs	r0, #40	; 0x28
 8000b5a:	f002 fbdf 	bl	800331c <HAL_NVIC_EnableIRQ>

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48000c00 	.word	0x48000c00
 8000b70:	48000800 	.word	0x48000800

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b78:	f000 feeb 	bl	8001952 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7c:	f000 f83a 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b80:	f7ff ff68 	bl	8000a54 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000b84:	f7ff fd92 	bl	80006ac <MX_ADC2_Init>
  MX_ADC1_Init();
 8000b88:	f7ff fd18 	bl	80005bc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b8c:	f000 fb9c 	bl	80012c8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b90:	f000 fc48 	bl	8001424 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000b94:	f000 fd7c 	bl	8001690 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000b98:	f000 fdc6 	bl	8001728 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, started, 31, HAL_MAX_DELAY);
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	221f      	movs	r2, #31
 8000ba2:	490f      	ldr	r1, [pc, #60]	; (8000be0 <main+0x6c>)
 8000ba4:	480f      	ldr	r0, [pc, #60]	; (8000be4 <main+0x70>)
 8000ba6:	f005 fc86 	bl	80064b6 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	2205      	movs	r2, #5
 8000bb0:	490d      	ldr	r1, [pc, #52]	; (8000be8 <main+0x74>)
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <main+0x70>)
 8000bb4:	f005 fc7f 	bl	80064b6 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	490c      	ldr	r1, [pc, #48]	; (8000bec <main+0x78>)
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <main+0x70>)
 8000bbe:	f005 fd11 	bl	80065e4 <HAL_UART_Receive_IT>
  Adc_init();
 8000bc2:	f7ff fed3 	bl	800096c <Adc_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (it_uart){
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <main+0x7c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0fb      	beq.n	8000bc6 <main+0x52>
		  UART_Echo();
 8000bce:	f000 fa39 	bl	8001044 <UART_Echo>
		  UART_Create_Cmd();
 8000bd2:	f000 f959 	bl	8000e88 <UART_Create_Cmd>
		  it_uart = 0;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <main+0x7c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
	  if (it_uart){
 8000bdc:	e7f3      	b.n	8000bc6 <main+0x52>
 8000bde:	bf00      	nop
 8000be0:	0800903c 	.word	0x0800903c
 8000be4:	20000288 	.word	0x20000288
 8000be8:	0800905c 	.word	0x0800905c
 8000bec:	2000019c 	.word	0x2000019c
 8000bf0:	20000164 	.word	0x20000164

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b094      	sub	sp, #80	; 0x50
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	2238      	movs	r2, #56	; 0x38
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f007 fc9e 	bl	8008544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f002 fe0c 	bl	8003834 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c24:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	2302      	movs	r3, #2
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c2e:	2306      	movs	r3, #6
 8000c30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c32:	2355      	movs	r3, #85	; 0x55
 8000c34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fea8 	bl	800399c <HAL_RCC_OscConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c52:	f000 f841 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c56:	230f      	movs	r3, #15
 8000c58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 f9ac 	bl	8003fcc <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c7a:	f000 f82d 	bl	8000cd8 <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3750      	adds	r7, #80	; 0x50
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* __________________________________________________________________________________________________________________________________________________________________________________________________*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	it_uart = 1;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_UART_RxCpltCallback+0x20>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	4904      	ldr	r1, [pc, #16]	; (8000cac <HAL_UART_RxCpltCallback+0x24>)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_UART_RxCpltCallback+0x28>)
 8000c9c:	f005 fca2 	bl	80065e4 <HAL_UART_Receive_IT>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000164 	.word	0x20000164
 8000cac:	2000019c 	.word	0x2000019c
 8000cb0:	20000288 	.word	0x20000288

08000cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d101      	bne.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cc6:	f000 fe5d 	bl	8001984 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40001000 	.word	0x40001000

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <Change_Speed>:

int speed_buffer[4];
const uint8_t maxSpeed[] = "Too fast my friend, too fast";
const uint8_t speedChangedFin[] = "Speed changed";

void Change_Speed(char cmd[CMD_BUFFER_SIZE]){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	/* Debug

	HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, cmd, 10, HAL_MAX_DELAY);
*/
	speed_buffer[0] = cmd[6] - '0';
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3306      	adds	r3, #6
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	3b30      	subs	r3, #48	; 0x30
 8000cf4:	4a3a      	ldr	r2, [pc, #232]	; (8000de0 <Change_Speed+0xfc>)
 8000cf6:	6013      	str	r3, [r2, #0]
	speed_buffer[1] = cmd[7] - '0';
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3307      	adds	r3, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	4a37      	ldr	r2, [pc, #220]	; (8000de0 <Change_Speed+0xfc>)
 8000d02:	6053      	str	r3, [r2, #4]
	speed_buffer[2] = cmd[8] - '0';
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3308      	adds	r3, #8
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	3b30      	subs	r3, #48	; 0x30
 8000d0c:	4a34      	ldr	r2, [pc, #208]	; (8000de0 <Change_Speed+0xfc>)
 8000d0e:	6093      	str	r3, [r2, #8]
	speed_buffer[3] = cmd[9] - '0';
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3309      	adds	r3, #9
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	3b30      	subs	r3, #48	; 0x30
 8000d18:	4a31      	ldr	r2, [pc, #196]	; (8000de0 <Change_Speed+0xfc>)
 8000d1a:	60d3      	str	r3, [r2, #12]
	int speed = speed_buffer[0]*1000 + speed_buffer[1]*100 + speed_buffer[2]*10 + speed_buffer[3];
 8000d1c:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <Change_Speed+0xfc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d24:	fb03 f202 	mul.w	r2, r3, r2
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <Change_Speed+0xfc>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2164      	movs	r1, #100	; 0x64
 8000d2e:	fb01 f303 	mul.w	r3, r1, r3
 8000d32:	18d1      	adds	r1, r2, r3
 8000d34:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <Change_Speed+0xfc>)
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	18ca      	adds	r2, r1, r3
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <Change_Speed+0xfc>)
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60bb      	str	r3, [r7, #8]
	if (speed > MAX_SPEED){
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d50:	db0e      	blt.n	8000d70 <Change_Speed+0x8c>
		HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	2202      	movs	r2, #2
 8000d58:	4922      	ldr	r1, [pc, #136]	; (8000de4 <Change_Speed+0x100>)
 8000d5a:	4823      	ldr	r0, [pc, #140]	; (8000de8 <Change_Speed+0x104>)
 8000d5c:	f005 fbab 	bl	80064b6 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, maxSpeed, 28, HAL_MAX_DELAY);
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	221c      	movs	r2, #28
 8000d66:	4921      	ldr	r1, [pc, #132]	; (8000dec <Change_Speed+0x108>)
 8000d68:	481f      	ldr	r0, [pc, #124]	; (8000de8 <Change_Speed+0x104>)
 8000d6a:	f005 fba4 	bl	80064b6 <HAL_UART_Transmit>
		}
		/*HAL_UART_Transmit(&huart2, speedChangedFin, 13, HAL_MAX_DELAY);*/

	}

}
 8000d6e:	e033      	b.n	8000dd8 <Change_Speed+0xf4>
		int speed_actl = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1);
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <Change_Speed+0x10c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d76:	60fb      	str	r3, [r7, #12]
		if (speed > speed_actl){
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dd27      	ble.n	8000dd0 <Change_Speed+0xec>
			while (speed_actl < speed){
 8000d80:	e011      	b.n	8000da6 <Change_Speed+0xc2>
				speed_actl++;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3301      	adds	r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed_actl);
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <Change_Speed+0x10c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,MAX_SPEED + 1 - speed_actl);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <Change_Speed+0x10c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(50);
 8000d9c:	2032      	movs	r0, #50	; 0x32
 8000d9e:	f000 fe0f 	bl	80019c0 <HAL_Delay>
				Mes_Courant();
 8000da2:	f7ff fe1f 	bl	80009e4 <Mes_Courant>
			while (speed_actl < speed){
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	dbe9      	blt.n	8000d82 <Change_Speed+0x9e>
}
 8000dae:	e013      	b.n	8000dd8 <Change_Speed+0xf4>
				speed_actl--;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed_actl);
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <Change_Speed+0x10c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,MAX_SPEED + 1 - speed_actl);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <Change_Speed+0x10c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(50);
 8000dca:	2032      	movs	r0, #50	; 0x32
 8000dcc:	f000 fdf8 	bl	80019c0 <HAL_Delay>
			while (speed_actl > speed){
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dceb      	bgt.n	8000db0 <Change_Speed+0xcc>
}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000168 	.word	0x20000168
 8000de4:	08008e8c 	.word	0x08008e8c
 8000de8:	20000288 	.word	0x20000288
 8000dec:	08008ecc 	.word	0x08008ecc
 8000df0:	200001f0 	.word	0x200001f0

08000df4 <Start_Motor>:

void Start_Motor(char cmd[CMD_BUFFER_SIZE]){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,500);
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <Start_Motor+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e04:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,500);
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <Start_Motor+0x64>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e0e:	639a      	str	r2, [r3, #56]	; 0x38
	cmd[6] = '0'; // Pour éviter speed 6 en première instruction
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3306      	adds	r3, #6
 8000e14:	2230      	movs	r2, #48	; 0x30
 8000e16:	701a      	strb	r2, [r3, #0]
	cmd[7] = '5'; // Qui n'est pas compris comme 'trop rapide'
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3307      	adds	r3, #7
 8000e1c:	2235      	movs	r2, #53	; 0x35
 8000e1e:	701a      	strb	r2, [r3, #0]
	cmd[8] = '0';
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3308      	adds	r3, #8
 8000e24:	2230      	movs	r2, #48	; 0x30
 8000e26:	701a      	strb	r2, [r3, #0]
	cmd[9] = '0';
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3309      	adds	r3, #9
 8000e2c:	2230      	movs	r2, #48	; 0x30
 8000e2e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e30:	2100      	movs	r1, #0
 8000e32:	4809      	ldr	r0, [pc, #36]	; (8000e58 <Start_Motor+0x64>)
 8000e34:	f003 fe98 	bl	8004b68 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <Start_Motor+0x64>)
 8000e3c:	f005 f818 	bl	8005e70 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e40:	2104      	movs	r1, #4
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <Start_Motor+0x64>)
 8000e44:	f003 fe90 	bl	8004b68 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000e48:	2104      	movs	r1, #4
 8000e4a:	4803      	ldr	r0, [pc, #12]	; (8000e58 <Start_Motor+0x64>)
 8000e4c:	f005 f810 	bl	8005e70 <HAL_TIMEx_PWMN_Start>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001f0 	.word	0x200001f0

08000e5c <Stop_Motor>:

void Stop_Motor(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000e60:	2100      	movs	r1, #0
 8000e62:	4808      	ldr	r0, [pc, #32]	; (8000e84 <Stop_Motor+0x28>)
 8000e64:	f003 ff92 	bl	8004d8c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <Stop_Motor+0x28>)
 8000e6c:	f005 f8c2 	bl	8005ff4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000e70:	2104      	movs	r1, #4
 8000e72:	4804      	ldr	r0, [pc, #16]	; (8000e84 <Stop_Motor+0x28>)
 8000e74:	f003 ff8a 	bl	8004d8c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000e78:	2104      	movs	r1, #4
 8000e7a:	4802      	ldr	r0, [pc, #8]	; (8000e84 <Stop_Motor+0x28>)
 8000e7c:	f005 f8ba 	bl	8005ff4 <HAL_TIMEx_PWMN_Stop>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200001f0 	.word	0x200001f0

08000e88 <UART_Create_Cmd>:
const uint8_t newLine[] = "\r\n>>>";
int idxCmd = 0;
char cmd[CMD_BUFFER_SIZE];
char buffer_cmd[1];

char* UART_Create_Cmd(void){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	if (buffer_cmd[0] == '\r'){
 8000e8c:	4b5c      	ldr	r3, [pc, #368]	; (8001000 <UART_Create_Cmd+0x178>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b0d      	cmp	r3, #13
 8000e92:	f040 809f 	bne.w	8000fd4 <UART_Create_Cmd+0x14c>
		if (!(strncmp(cmd,"help",4))){
 8000e96:	2204      	movs	r2, #4
 8000e98:	495a      	ldr	r1, [pc, #360]	; (8001004 <UART_Create_Cmd+0x17c>)
 8000e9a:	485b      	ldr	r0, [pc, #364]	; (8001008 <UART_Create_Cmd+0x180>)
 8000e9c:	f007 fb5a 	bl	8008554 <strncmp>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10e      	bne.n	8000ec4 <UART_Create_Cmd+0x3c>
			HAL_UART_Transmit(&huart2, help, 157, HAL_MAX_DELAY);
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	229d      	movs	r2, #157	; 0x9d
 8000eac:	4957      	ldr	r1, [pc, #348]	; (800100c <UART_Create_Cmd+0x184>)
 8000eae:	4858      	ldr	r0, [pc, #352]	; (8001010 <UART_Create_Cmd+0x188>)
 8000eb0:	f005 fb01 	bl	80064b6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	2205      	movs	r2, #5
 8000eba:	4956      	ldr	r1, [pc, #344]	; (8001014 <UART_Create_Cmd+0x18c>)
 8000ebc:	4854      	ldr	r0, [pc, #336]	; (8001010 <UART_Create_Cmd+0x188>)
 8000ebe:	f005 fafa 	bl	80064b6 <HAL_UART_Transmit>
 8000ec2:	e083      	b.n	8000fcc <UART_Create_Cmd+0x144>
		}else if(!(strncmp(cmd,"pinout",6))){
 8000ec4:	2206      	movs	r2, #6
 8000ec6:	4954      	ldr	r1, [pc, #336]	; (8001018 <UART_Create_Cmd+0x190>)
 8000ec8:	484f      	ldr	r0, [pc, #316]	; (8001008 <UART_Create_Cmd+0x180>)
 8000eca:	f007 fb43 	bl	8008554 <strncmp>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10e      	bne.n	8000ef2 <UART_Create_Cmd+0x6a>
			HAL_UART_Transmit(&huart2, pinout, 88, HAL_MAX_DELAY);
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed8:	2258      	movs	r2, #88	; 0x58
 8000eda:	4950      	ldr	r1, [pc, #320]	; (800101c <UART_Create_Cmd+0x194>)
 8000edc:	484c      	ldr	r0, [pc, #304]	; (8001010 <UART_Create_Cmd+0x188>)
 8000ede:	f005 faea 	bl	80064b6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	2205      	movs	r2, #5
 8000ee8:	494a      	ldr	r1, [pc, #296]	; (8001014 <UART_Create_Cmd+0x18c>)
 8000eea:	4849      	ldr	r0, [pc, #292]	; (8001010 <UART_Create_Cmd+0x188>)
 8000eec:	f005 fae3 	bl	80064b6 <HAL_UART_Transmit>
 8000ef0:	e06c      	b.n	8000fcc <UART_Create_Cmd+0x144>
		}else if(!(strncmp(cmd,"start",5))){
 8000ef2:	2205      	movs	r2, #5
 8000ef4:	494a      	ldr	r1, [pc, #296]	; (8001020 <UART_Create_Cmd+0x198>)
 8000ef6:	4844      	ldr	r0, [pc, #272]	; (8001008 <UART_Create_Cmd+0x180>)
 8000ef8:	f007 fb2c 	bl	8008554 <strncmp>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d111      	bne.n	8000f26 <UART_Create_Cmd+0x9e>
			Start_Motor(cmd);
 8000f02:	4841      	ldr	r0, [pc, #260]	; (8001008 <UART_Create_Cmd+0x180>)
 8000f04:	f7ff ff76 	bl	8000df4 <Start_Motor>
			HAL_UART_Transmit(&huart2, powerOn, 23, HAL_MAX_DELAY);
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	2217      	movs	r2, #23
 8000f0e:	4945      	ldr	r1, [pc, #276]	; (8001024 <UART_Create_Cmd+0x19c>)
 8000f10:	483f      	ldr	r0, [pc, #252]	; (8001010 <UART_Create_Cmd+0x188>)
 8000f12:	f005 fad0 	bl	80064b6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	2205      	movs	r2, #5
 8000f1c:	493d      	ldr	r1, [pc, #244]	; (8001014 <UART_Create_Cmd+0x18c>)
 8000f1e:	483c      	ldr	r0, [pc, #240]	; (8001010 <UART_Create_Cmd+0x188>)
 8000f20:	f005 fac9 	bl	80064b6 <HAL_UART_Transmit>
 8000f24:	e052      	b.n	8000fcc <UART_Create_Cmd+0x144>
		}else if(!(strncmp(cmd,"stop",4))){
 8000f26:	2204      	movs	r2, #4
 8000f28:	493f      	ldr	r1, [pc, #252]	; (8001028 <UART_Create_Cmd+0x1a0>)
 8000f2a:	4837      	ldr	r0, [pc, #220]	; (8001008 <UART_Create_Cmd+0x180>)
 8000f2c:	f007 fb12 	bl	8008554 <strncmp>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d110      	bne.n	8000f58 <UART_Create_Cmd+0xd0>
			Stop_Motor();
 8000f36:	f7ff ff91 	bl	8000e5c <Stop_Motor>
			HAL_UART_Transmit(&huart2, powerOff, 23, HAL_MAX_DELAY);
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	2217      	movs	r2, #23
 8000f40:	493a      	ldr	r1, [pc, #232]	; (800102c <UART_Create_Cmd+0x1a4>)
 8000f42:	4833      	ldr	r0, [pc, #204]	; (8001010 <UART_Create_Cmd+0x188>)
 8000f44:	f005 fab7 	bl	80064b6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	2205      	movs	r2, #5
 8000f4e:	4931      	ldr	r1, [pc, #196]	; (8001014 <UART_Create_Cmd+0x18c>)
 8000f50:	482f      	ldr	r0, [pc, #188]	; (8001010 <UART_Create_Cmd+0x188>)
 8000f52:	f005 fab0 	bl	80064b6 <HAL_UART_Transmit>
 8000f56:	e039      	b.n	8000fcc <UART_Create_Cmd+0x144>
		}else if(!(strncmp(cmd,"speed",5))){
 8000f58:	2205      	movs	r2, #5
 8000f5a:	4935      	ldr	r1, [pc, #212]	; (8001030 <UART_Create_Cmd+0x1a8>)
 8000f5c:	482a      	ldr	r0, [pc, #168]	; (8001008 <UART_Create_Cmd+0x180>)
 8000f5e:	f007 faf9 	bl	8008554 <strncmp>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d111      	bne.n	8000f8c <UART_Create_Cmd+0x104>
			HAL_UART_Transmit(&huart2, speedChanged, 14, HAL_MAX_DELAY);
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	220e      	movs	r2, #14
 8000f6e:	4931      	ldr	r1, [pc, #196]	; (8001034 <UART_Create_Cmd+0x1ac>)
 8000f70:	4827      	ldr	r0, [pc, #156]	; (8001010 <UART_Create_Cmd+0x188>)
 8000f72:	f005 faa0 	bl	80064b6 <HAL_UART_Transmit>
			Change_Speed(cmd);
 8000f76:	4824      	ldr	r0, [pc, #144]	; (8001008 <UART_Create_Cmd+0x180>)
 8000f78:	f7ff feb4 	bl	8000ce4 <Change_Speed>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f80:	2205      	movs	r2, #5
 8000f82:	4924      	ldr	r1, [pc, #144]	; (8001014 <UART_Create_Cmd+0x18c>)
 8000f84:	4822      	ldr	r0, [pc, #136]	; (8001010 <UART_Create_Cmd+0x188>)
 8000f86:	f005 fa96 	bl	80064b6 <HAL_UART_Transmit>
 8000f8a:	e01f      	b.n	8000fcc <UART_Create_Cmd+0x144>
		}else if(!(strncmp(cmd,"courant",7))){
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	492a      	ldr	r1, [pc, #168]	; (8001038 <UART_Create_Cmd+0x1b0>)
 8000f90:	481d      	ldr	r0, [pc, #116]	; (8001008 <UART_Create_Cmd+0x180>)
 8000f92:	f007 fadf 	bl	8008554 <strncmp>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d109      	bne.n	8000fb0 <UART_Create_Cmd+0x128>
			Mes_Courant();
 8000f9c:	f7ff fd22 	bl	80009e4 <Mes_Courant>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	2205      	movs	r2, #5
 8000fa6:	491b      	ldr	r1, [pc, #108]	; (8001014 <UART_Create_Cmd+0x18c>)
 8000fa8:	4819      	ldr	r0, [pc, #100]	; (8001010 <UART_Create_Cmd+0x188>)
 8000faa:	f005 fa84 	bl	80064b6 <HAL_UART_Transmit>
 8000fae:	e00d      	b.n	8000fcc <UART_Create_Cmd+0x144>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, 17, HAL_MAX_DELAY);
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb4:	2211      	movs	r2, #17
 8000fb6:	4921      	ldr	r1, [pc, #132]	; (800103c <UART_Create_Cmd+0x1b4>)
 8000fb8:	4815      	ldr	r0, [pc, #84]	; (8001010 <UART_Create_Cmd+0x188>)
 8000fba:	f005 fa7c 	bl	80064b6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	2205      	movs	r2, #5
 8000fc4:	4913      	ldr	r1, [pc, #76]	; (8001014 <UART_Create_Cmd+0x18c>)
 8000fc6:	4812      	ldr	r0, [pc, #72]	; (8001010 <UART_Create_Cmd+0x188>)
 8000fc8:	f005 fa75 	bl	80064b6 <HAL_UART_Transmit>
		}
		idxCmd = 0;
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <UART_Create_Cmd+0x1b8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	e011      	b.n	8000ff8 <UART_Create_Cmd+0x170>
	}else{
		cmd[idxCmd] = buffer_cmd[0];
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <UART_Create_Cmd+0x1b8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a09      	ldr	r2, [pc, #36]	; (8001000 <UART_Create_Cmd+0x178>)
 8000fda:	7811      	ldrb	r1, [r2, #0]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <UART_Create_Cmd+0x180>)
 8000fde:	54d1      	strb	r1, [r2, r3]
		idxCmd += 1;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <UART_Create_Cmd+0x1b8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	4a16      	ldr	r2, [pc, #88]	; (8001040 <UART_Create_Cmd+0x1b8>)
 8000fe8:	6013      	str	r3, [r2, #0]
		if (idxCmd > CMD_BUFFER_SIZE){
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <UART_Create_Cmd+0x1b8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b20      	cmp	r3, #32
 8000ff0:	dd02      	ble.n	8000ff8 <UART_Create_Cmd+0x170>
			idxCmd = 0;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <UART_Create_Cmd+0x1b8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
		}
	}
	return cmd;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <UART_Create_Cmd+0x180>)
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000019c 	.word	0x2000019c
 8001004:	08008e90 	.word	0x08008e90
 8001008:	2000017c 	.word	0x2000017c
 800100c:	08008eec 	.word	0x08008eec
 8001010:	20000288 	.word	0x20000288
 8001014:	0800905c 	.word	0x0800905c
 8001018:	08008e98 	.word	0x08008e98
 800101c:	08008f8c 	.word	0x08008f8c
 8001020:	08008ea0 	.word	0x08008ea0
 8001024:	08008fe8 	.word	0x08008fe8
 8001028:	08008ea8 	.word	0x08008ea8
 800102c:	08009000 	.word	0x08009000
 8001030:	08008eb0 	.word	0x08008eb0
 8001034:	08009018 	.word	0x08009018
 8001038:	08008eb8 	.word	0x08008eb8
 800103c:	08009028 	.word	0x08009028
 8001040:	20000178 	.word	0x20000178

08001044 <UART_Echo>:

void UART_Echo(void){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	if (buffer_cmd[0] == '\r'){
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <UART_Echo+0x38>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b0d      	cmp	r3, #13
 800104e:	d107      	bne.n	8001060 <UART_Echo+0x1c>
	  HAL_UART_Transmit(&huart2, newLine, 2, HAL_MAX_DELAY);
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	2202      	movs	r2, #2
 8001056:	490a      	ldr	r1, [pc, #40]	; (8001080 <UART_Echo+0x3c>)
 8001058:	480a      	ldr	r0, [pc, #40]	; (8001084 <UART_Echo+0x40>)
 800105a:	f005 fa2c 	bl	80064b6 <HAL_UART_Transmit>
 800105e:	e006      	b.n	800106e <UART_Echo+0x2a>
	}else{
	  HAL_UART_Transmit(&huart2, buffer_cmd, 1, HAL_MAX_DELAY);
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	2201      	movs	r2, #1
 8001066:	4905      	ldr	r1, [pc, #20]	; (800107c <UART_Echo+0x38>)
 8001068:	4806      	ldr	r0, [pc, #24]	; (8001084 <UART_Echo+0x40>)
 800106a:	f005 fa24 	bl	80064b6 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 800106e:	2201      	movs	r2, #1
 8001070:	4902      	ldr	r1, [pc, #8]	; (800107c <UART_Echo+0x38>)
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <UART_Echo+0x40>)
 8001074:	f005 fab6 	bl	80065e4 <HAL_UART_Receive_IT>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000019c 	.word	0x2000019c
 8001080:	0800905c 	.word	0x0800905c
 8001084:	20000288 	.word	0x20000288

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_MspInit+0x44>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_MspInit+0x44>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6613      	str	r3, [r2, #96]	; 0x60
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_MspInit+0x44>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_MspInit+0x44>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_MspInit+0x44>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	6593      	str	r3, [r2, #88]	; 0x58
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_MspInit+0x44>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010be:	f002 fc5d 	bl	800397c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010e0:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <HAL_InitTick+0xc4>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e4:	4a2b      	ldr	r2, [pc, #172]	; (8001194 <HAL_InitTick+0xc4>)
 80010e6:	f043 0310 	orr.w	r3, r3, #16
 80010ea:	6593      	str	r3, [r2, #88]	; 0x58
 80010ec:	4b29      	ldr	r3, [pc, #164]	; (8001194 <HAL_InitTick+0xc4>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010f8:	f107 020c 	add.w	r2, r7, #12
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f003 f938 	bl	8004378 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001108:	f003 f90a 	bl	8004320 <HAL_RCC_GetPCLK1Freq>
 800110c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800110e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001110:	4a21      	ldr	r2, [pc, #132]	; (8001198 <HAL_InitTick+0xc8>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	0c9b      	lsrs	r3, r3, #18
 8001118:	3b01      	subs	r3, #1
 800111a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <HAL_InitTick+0xcc>)
 800111e:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <HAL_InitTick+0xd0>)
 8001120:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_InitTick+0xcc>)
 8001124:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001128:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <HAL_InitTick+0xcc>)
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_InitTick+0xcc>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_InitTick+0xcc>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800113c:	4817      	ldr	r0, [pc, #92]	; (800119c <HAL_InitTick+0xcc>)
 800113e:	f003 fbe1 	bl	8004904 <HAL_TIM_Base_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001148:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800114c:	2b00      	cmp	r3, #0
 800114e:	d11b      	bne.n	8001188 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001150:	4812      	ldr	r0, [pc, #72]	; (800119c <HAL_InitTick+0xcc>)
 8001152:	f003 fc39 	bl	80049c8 <HAL_TIM_Base_Start_IT>
 8001156:	4603      	mov	r3, r0
 8001158:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800115c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001160:	2b00      	cmp	r3, #0
 8001162:	d111      	bne.n	8001188 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001164:	2036      	movs	r0, #54	; 0x36
 8001166:	f002 f8d9 	bl	800331c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d808      	bhi.n	8001182 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	2036      	movs	r0, #54	; 0x36
 8001176:	f002 f8b7 	bl	80032e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_InitTick+0xd4>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e002      	b.n	8001188 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001188:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800118c:	4618      	mov	r0, r3
 800118e:	3730      	adds	r7, #48	; 0x30
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	431bde83 	.word	0x431bde83
 800119c:	200001a0 	.word	0x200001a0
 80011a0:	40001000 	.word	0x40001000
 80011a4:	20000004 	.word	0x20000004

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <NMI_Handler+0x4>

080011ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <MemManage_Handler+0x4>

080011ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <USART2_IRQHandler+0x10>)
 8001206:	f005 fa43 	bl	8006690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000288 	.word	0x20000288

08001214 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001218:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800121c:	f002 fae6 	bl	80037ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM6_DAC_IRQHandler+0x10>)
 800122a:	f003 fe4b 	bl	8004ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200001a0 	.word	0x200001a0

08001238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d207      	bcs.n	8001278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001268:	f007 f986 	bl	8008578 <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e009      	b.n	800128c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <_sbrk+0x64>)
 8001288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20020000 	.word	0x20020000
 8001298:	00000400 	.word	0x00000400
 800129c:	200001ec 	.word	0x200001ec
 80012a0:	200004f8 	.word	0x200004f8

080012a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <SystemInit+0x20>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <SystemInit+0x20>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b098      	sub	sp, #96	; 0x60
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
 80012ea:	615a      	str	r2, [r3, #20]
 80012ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2234      	movs	r2, #52	; 0x34
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f007 f925 	bl	8008544 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012fa:	4b48      	ldr	r3, [pc, #288]	; (800141c <MX_TIM1_Init+0x154>)
 80012fc:	4a48      	ldr	r2, [pc, #288]	; (8001420 <MX_TIM1_Init+0x158>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001300:	4b46      	ldr	r3, [pc, #280]	; (800141c <MX_TIM1_Init+0x154>)
 8001302:	2207      	movs	r2, #7
 8001304:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001306:	4b45      	ldr	r3, [pc, #276]	; (800141c <MX_TIM1_Init+0x154>)
 8001308:	2220      	movs	r2, #32
 800130a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800130c:	4b43      	ldr	r3, [pc, #268]	; (800141c <MX_TIM1_Init+0x154>)
 800130e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001312:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b41      	ldr	r3, [pc, #260]	; (800141c <MX_TIM1_Init+0x154>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800131a:	4b40      	ldr	r3, [pc, #256]	; (800141c <MX_TIM1_Init+0x154>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001320:	4b3e      	ldr	r3, [pc, #248]	; (800141c <MX_TIM1_Init+0x154>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001326:	483d      	ldr	r0, [pc, #244]	; (800141c <MX_TIM1_Init+0x154>)
 8001328:	f003 fbc6 	bl	8004ab8 <HAL_TIM_PWM_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001332:	f7ff fcd1 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001342:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001346:	4619      	mov	r1, r3
 8001348:	4834      	ldr	r0, [pc, #208]	; (800141c <MX_TIM1_Init+0x154>)
 800134a:	f004 feb1 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001354:	f7ff fcc0 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001358:	2360      	movs	r3, #96	; 0x60
 800135a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 400;
 800135c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001360:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001362:	2300      	movs	r3, #0
 8001364:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001366:	2300      	movs	r3, #0
 8001368:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001376:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800137a:	2200      	movs	r2, #0
 800137c:	4619      	mov	r1, r3
 800137e:	4827      	ldr	r0, [pc, #156]	; (800141c <MX_TIM1_Init+0x154>)
 8001380:	f003 ff20 	bl	80051c4 <HAL_TIM_PWM_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800138a:	f7ff fca5 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001392:	2204      	movs	r2, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4821      	ldr	r0, [pc, #132]	; (800141c <MX_TIM1_Init+0x154>)
 8001398:	f003 ff14 	bl	80051c4 <HAL_TIM_PWM_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80013a2:	f7ff fc99 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013ae:	2208      	movs	r2, #8
 80013b0:	4619      	mov	r1, r3
 80013b2:	481a      	ldr	r0, [pc, #104]	; (800141c <MX_TIM1_Init+0x154>)
 80013b4:	f003 ff06 	bl	80051c4 <HAL_TIM_PWM_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80013be:	f7ff fc8b 	bl	8000cd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 44;
 80013ce:	232c      	movs	r3, #44	; 0x2c
 80013d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	4807      	ldr	r0, [pc, #28]	; (800141c <MX_TIM1_Init+0x154>)
 8001400:	f004 feec 	bl	80061dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800140a:	f7ff fc65 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800140e:	4803      	ldr	r0, [pc, #12]	; (800141c <MX_TIM1_Init+0x154>)
 8001410:	f000 f8d6 	bl	80015c0 <HAL_TIM_MspPostInit>

}
 8001414:	bf00      	nop
 8001416:	3760      	adds	r7, #96	; 0x60
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200001f0 	.word	0x200001f0
 8001420:	40012c00 	.word	0x40012c00

08001424 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_TIM3_Init+0x90>)
 8001444:	4a1c      	ldr	r2, [pc, #112]	; (80014b8 <MX_TIM3_Init+0x94>)
 8001446:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_TIM3_Init+0x90>)
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_TIM3_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_TIM3_Init+0x90>)
 8001456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_TIM3_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_TIM3_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_TIM3_Init+0x90>)
 8001480:	f004 fc47 	bl	8005d12 <HAL_TIMEx_HallSensor_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800148a:	f7ff fc25 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800148e:	2350      	movs	r3, #80	; 0x50
 8001490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_TIM3_Init+0x90>)
 800149c:	f004 fe08 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80014a6:	f7ff fc17 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000023c 	.word	0x2000023c
 80014b8:	40000400 	.word	0x40000400

080014bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <HAL_TIM_PWM_MspInit+0x38>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d10b      	bne.n	80014e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80014d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d8:	6613      	str	r3, [r2, #96]	; 0x60
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40012c00 	.word	0x40012c00
 80014f8:	40021000 	.word	0x40021000

080014fc <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d145      	bne.n	80015aa <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6593      	str	r3, [r2, #88]	; 0x58
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	4a19      	ldr	r2, [pc, #100]	; (80015b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001566:	2350      	movs	r3, #80	; 0x50
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001576:	2302      	movs	r3, #2
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001584:	f001 ff98 	bl	80034b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800159a:	2302      	movs	r3, #2
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80015a6:	f001 ff87 	bl	80034b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40000400 	.word	0x40000400
 80015b8:	40021000 	.word	0x40021000
 80015bc:	48000800 	.word	0x48000800

080015c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a29      	ldr	r2, [pc, #164]	; (8001684 <HAL_TIM_MspPostInit+0xc4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d14b      	bne.n	800167a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b29      	ldr	r3, [pc, #164]	; (8001688 <HAL_TIM_MspPostInit+0xc8>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	4a28      	ldr	r2, [pc, #160]	; (8001688 <HAL_TIM_MspPostInit+0xc8>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_TIM_MspPostInit+0xc8>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <HAL_TIM_MspPostInit+0xc8>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a22      	ldr	r2, [pc, #136]	; (8001688 <HAL_TIM_MspPostInit+0xc8>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_TIM_MspPostInit+0xc8>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001612:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001624:	2306      	movs	r3, #6
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	4817      	ldr	r0, [pc, #92]	; (800168c <HAL_TIM_MspPostInit+0xcc>)
 8001630:	f001 ff42 	bl	80034b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001646:	2304      	movs	r3, #4
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	480e      	ldr	r0, [pc, #56]	; (800168c <HAL_TIM_MspPostInit+0xcc>)
 8001652:	f001 ff31 	bl	80034b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001656:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001668:	2306      	movs	r3, #6
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001676:	f001 ff1f 	bl	80034b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40012c00 	.word	0x40012c00
 8001688:	40021000 	.word	0x40021000
 800168c:	48000400 	.word	0x48000400

08001690 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <MX_USART2_UART_Init+0x90>)
 8001696:	4a23      	ldr	r2, [pc, #140]	; (8001724 <MX_USART2_UART_Init+0x94>)
 8001698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <MX_USART2_UART_Init+0x90>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <MX_USART2_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <MX_USART2_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <MX_USART2_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <MX_USART2_UART_Init+0x90>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <MX_USART2_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_USART2_UART_Init+0x90>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <MX_USART2_UART_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_USART2_UART_Init+0x90>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MX_USART2_UART_Init+0x90>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016d8:	4811      	ldr	r0, [pc, #68]	; (8001720 <MX_USART2_UART_Init+0x90>)
 80016da:	f004 fe9c 	bl	8006416 <HAL_UART_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016e4:	f7ff faf8 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e8:	2100      	movs	r1, #0
 80016ea:	480d      	ldr	r0, [pc, #52]	; (8001720 <MX_USART2_UART_Init+0x90>)
 80016ec:	f006 fe3f 	bl	800836e <HAL_UARTEx_SetTxFifoThreshold>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016f6:	f7ff faef 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fa:	2100      	movs	r1, #0
 80016fc:	4808      	ldr	r0, [pc, #32]	; (8001720 <MX_USART2_UART_Init+0x90>)
 80016fe:	f006 fe74 	bl	80083ea <HAL_UARTEx_SetRxFifoThreshold>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001708:	f7ff fae6 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <MX_USART2_UART_Init+0x90>)
 800170e:	f006 fdf5 	bl	80082fc <HAL_UARTEx_DisableFifoMode>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001718:	f7ff fade 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000288 	.word	0x20000288
 8001724:	40004400 	.word	0x40004400

08001728 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 800172e:	4a23      	ldr	r2, [pc, #140]	; (80017bc <MX_USART3_UART_Init+0x94>)
 8001730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001732:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 8001734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001770:	4811      	ldr	r0, [pc, #68]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 8001772:	f004 fe50 	bl	8006416 <HAL_UART_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800177c:	f7ff faac 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001780:	2100      	movs	r1, #0
 8001782:	480d      	ldr	r0, [pc, #52]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 8001784:	f006 fdf3 	bl	800836e <HAL_UARTEx_SetTxFifoThreshold>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800178e:	f7ff faa3 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001792:	2100      	movs	r1, #0
 8001794:	4808      	ldr	r0, [pc, #32]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 8001796:	f006 fe28 	bl	80083ea <HAL_UARTEx_SetRxFifoThreshold>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017a0:	f7ff fa9a 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <MX_USART3_UART_Init+0x90>)
 80017a6:	f006 fda9 	bl	80082fc <HAL_UARTEx_DisableFifoMode>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017b0:	f7ff fa92 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000318 	.word	0x20000318
 80017bc:	40004800 	.word	0x40004800

080017c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0a0      	sub	sp, #128	; 0x80
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d8:	f107 0318 	add.w	r3, r7, #24
 80017dc:	2254      	movs	r2, #84	; 0x54
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f006 feaf 	bl	8008544 <memset>
  if(uartHandle->Instance==USART2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a41      	ldr	r2, [pc, #260]	; (80018f0 <HAL_UART_MspInit+0x130>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d13f      	bne.n	8001870 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 fe33 	bl	8004468 <HAL_RCCEx_PeriphCLKConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001808:	f7ff fa66 	bl	8000cd8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800180c:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <HAL_UART_MspInit+0x134>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	4a38      	ldr	r2, [pc, #224]	; (80018f4 <HAL_UART_MspInit+0x134>)
 8001812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001816:	6593      	str	r3, [r2, #88]	; 0x58
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_UART_MspInit+0x134>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <HAL_UART_MspInit+0x134>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001828:	4a32      	ldr	r2, [pc, #200]	; (80018f4 <HAL_UART_MspInit+0x134>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001830:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <HAL_UART_MspInit+0x134>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800183c:	230c      	movs	r3, #12
 800183e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800184c:	2307      	movs	r3, #7
 800184e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001854:	4619      	mov	r1, r3
 8001856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185a:	f001 fe2d 	bl	80034b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2026      	movs	r0, #38	; 0x26
 8001864:	f001 fd40 	bl	80032e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001868:	2026      	movs	r0, #38	; 0x26
 800186a:	f001 fd57 	bl	800331c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800186e:	e03b      	b.n	80018e8 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a20      	ldr	r2, [pc, #128]	; (80018f8 <HAL_UART_MspInit+0x138>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d136      	bne.n	80018e8 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800187a:	2304      	movs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001882:	f107 0318 	add.w	r3, r7, #24
 8001886:	4618      	mov	r0, r3
 8001888:	f002 fdee 	bl	8004468 <HAL_RCCEx_PeriphCLKConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001892:	f7ff fa21 	bl	8000cd8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_UART_MspInit+0x134>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <HAL_UART_MspInit+0x134>)
 800189c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a0:	6593      	str	r3, [r2, #88]	; 0x58
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_UART_MspInit+0x134>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_UART_MspInit+0x134>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <HAL_UART_MspInit+0x134>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_UART_MspInit+0x134>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018d8:	2307      	movs	r3, #7
 80018da:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <HAL_UART_MspInit+0x13c>)
 80018e4:	f001 fde8 	bl	80034b8 <HAL_GPIO_Init>
}
 80018e8:	bf00      	nop
 80018ea:	3780      	adds	r7, #128	; 0x80
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40004400 	.word	0x40004400
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40004800 	.word	0x40004800
 80018fc:	48000800 	.word	0x48000800

08001900 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001902:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <LoopForever+0x6>)
  ldr r1, =_edata
 8001906:	490e      	ldr	r1, [pc, #56]	; (8001940 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <LoopForever+0xe>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <LoopForever+0x12>)
  ldr r4, =_ebss
 800191c:	4c0b      	ldr	r4, [pc, #44]	; (800194c <LoopForever+0x16>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800192a:	f7ff fcbb 	bl	80012a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192e:	f006 fe29 	bl	8008584 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001932:	f7ff f91f 	bl	8000b74 <main>

08001936 <LoopForever>:

LoopForever:
    b LoopForever
 8001936:	e7fe      	b.n	8001936 <LoopForever>
  ldr   r0, =_estack
 8001938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001944:	080090e8 	.word	0x080090e8
  ldr r2, =_sbss
 8001948:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800194c:	200004f4 	.word	0x200004f4

08001950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC1_2_IRQHandler>

08001952 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195c:	2003      	movs	r0, #3
 800195e:	f001 fcb8 	bl	80032d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001962:	200f      	movs	r0, #15
 8001964:	f7ff fbb4 	bl	80010d0 <HAL_InitTick>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	71fb      	strb	r3, [r7, #7]
 8001972:	e001      	b.n	8001978 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001974:	f7ff fb88 	bl	8001088 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001978:	79fb      	ldrb	r3, [r7, #7]

}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_IncTick+0x1c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_IncTick+0x20>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4413      	add	r3, r2
 8001992:	4a03      	ldr	r2, [pc, #12]	; (80019a0 <HAL_IncTick+0x1c>)
 8001994:	6013      	str	r3, [r2, #0]
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	200003a8 	.word	0x200003a8
 80019a4:	20000008 	.word	0x20000008

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	200003a8 	.word	0x200003a8

080019c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff ffee 	bl	80019a8 <HAL_GetTick>
 80019cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d004      	beq.n	80019e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_Delay+0x40>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019e4:	bf00      	nop
 80019e6:	f7ff ffdf 	bl	80019a8 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d8f7      	bhi.n	80019e6 <HAL_Delay+0x26>
  {
  }
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000008 	.word	0x20000008

08001a04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	609a      	str	r2, [r3, #8]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3360      	adds	r3, #96	; 0x60
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <LL_ADC_SetOffset+0x44>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001aa4:	bf00      	nop
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	03fff000 	.word	0x03fff000

08001ab4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3360      	adds	r3, #96	; 0x60
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3360      	adds	r3, #96	; 0x60
 8001af0:	461a      	mov	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b0a:	bf00      	nop
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b087      	sub	sp, #28
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	3360      	adds	r3, #96	; 0x60
 8001b26:	461a      	mov	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b40:	bf00      	nop
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3360      	adds	r3, #96	; 0x60
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b76:	bf00      	nop
 8001b78:	371c      	adds	r7, #28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	615a      	str	r2, [r3, #20]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b087      	sub	sp, #28
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3330      	adds	r3, #48	; 0x30
 8001bde:	461a      	mov	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	4413      	add	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	211f      	movs	r1, #31
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	401a      	ands	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	f003 011f 	and.w	r1, r3, #31
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	431a      	orrs	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c1a:	bf00      	nop
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b087      	sub	sp, #28
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3314      	adds	r3, #20
 8001c36:	461a      	mov	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	0e5b      	lsrs	r3, r3, #25
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	4413      	add	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	0d1b      	lsrs	r3, r3, #20
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	2107      	movs	r1, #7
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	0d1b      	lsrs	r3, r3, #20
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c70:	bf00      	nop
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a0f      	ldr	r2, [pc, #60]	; (8001cc8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d10a      	bne.n	8001ca6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001ca4:	e00a      	b.n	8001cbc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	407f0000 	.word	0x407f0000

08001ccc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 031f 	and.w	r3, r3, #31
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6093      	str	r3, [r2, #8]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d3c:	d101      	bne.n	8001d42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d8c:	d101      	bne.n	8001d92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001db0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <LL_ADC_IsEnabled+0x18>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <LL_ADC_IsEnabled+0x1a>
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dfe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e02:	f043 0204 	orr.w	r2, r3, #4
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d101      	bne.n	8001e2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d101      	bne.n	8001e54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e1af      	b.n	80021de <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7fe fc73 	bl	8000778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff3f 	bl	8001d28 <LL_ADC_IsDeepPowerDownEnabled>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d004      	beq.n	8001eba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff25 	bl	8001d04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff5a 	bl	8001d78 <LL_ADC_IsInternalRegulatorEnabled>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d115      	bne.n	8001ef6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff3e 	bl	8001d50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ed4:	4b9f      	ldr	r3, [pc, #636]	; (8002154 <HAL_ADC_Init+0x2f0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	099b      	lsrs	r3, r3, #6
 8001eda:	4a9f      	ldr	r2, [pc, #636]	; (8002158 <HAL_ADC_Init+0x2f4>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	099b      	lsrs	r3, r3, #6
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ee8:	e002      	b.n	8001ef0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f9      	bne.n	8001eea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff3c 	bl	8001d78 <LL_ADC_IsInternalRegulatorEnabled>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10d      	bne.n	8001f22 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	f043 0210 	orr.w	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff75 	bl	8001e16 <LL_ADC_REG_IsConversionOngoing>
 8001f2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 8148 	bne.w	80021cc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 8144 	bne.w	80021cc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f4c:	f043 0202 	orr.w	r2, r3, #2
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff35 	bl	8001dc8 <LL_ADC_IsEnabled>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d141      	bne.n	8001fe8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f6c:	d004      	beq.n	8001f78 <HAL_ADC_Init+0x114>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7a      	ldr	r2, [pc, #488]	; (800215c <HAL_ADC_Init+0x2f8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d10f      	bne.n	8001f98 <HAL_ADC_Init+0x134>
 8001f78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f7c:	f7ff ff24 	bl	8001dc8 <LL_ADC_IsEnabled>
 8001f80:	4604      	mov	r4, r0
 8001f82:	4876      	ldr	r0, [pc, #472]	; (800215c <HAL_ADC_Init+0x2f8>)
 8001f84:	f7ff ff20 	bl	8001dc8 <LL_ADC_IsEnabled>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4323      	orrs	r3, r4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	e012      	b.n	8001fbe <HAL_ADC_Init+0x15a>
 8001f98:	4871      	ldr	r0, [pc, #452]	; (8002160 <HAL_ADC_Init+0x2fc>)
 8001f9a:	f7ff ff15 	bl	8001dc8 <LL_ADC_IsEnabled>
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	4870      	ldr	r0, [pc, #448]	; (8002164 <HAL_ADC_Init+0x300>)
 8001fa2:	f7ff ff11 	bl	8001dc8 <LL_ADC_IsEnabled>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	431c      	orrs	r4, r3
 8001faa:	486f      	ldr	r0, [pc, #444]	; (8002168 <HAL_ADC_Init+0x304>)
 8001fac:	f7ff ff0c 	bl	8001dc8 <LL_ADC_IsEnabled>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4323      	orrs	r3, r4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2301      	moveq	r3, #1
 8001fba:	2300      	movne	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d012      	beq.n	8001fe8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fca:	d004      	beq.n	8001fd6 <HAL_ADC_Init+0x172>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a62      	ldr	r2, [pc, #392]	; (800215c <HAL_ADC_Init+0x2f8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Init+0x176>
 8001fd6:	4a65      	ldr	r2, [pc, #404]	; (800216c <HAL_ADC_Init+0x308>)
 8001fd8:	e000      	b.n	8001fdc <HAL_ADC_Init+0x178>
 8001fda:	4a65      	ldr	r2, [pc, #404]	; (8002170 <HAL_ADC_Init+0x30c>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	f7ff fd0e 	bl	8001a04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7f5b      	ldrb	r3, [r3, #29]
 8001fec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ff2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ff8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ffe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002006:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002012:	2b01      	cmp	r3, #1
 8002014:	d106      	bne.n	8002024 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	3b01      	subs	r3, #1
 800201c:	045b      	lsls	r3, r3, #17
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d009      	beq.n	8002040 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	4b4b      	ldr	r3, [pc, #300]	; (8002174 <HAL_ADC_Init+0x310>)
 8002048:	4013      	ands	r3, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	69b9      	ldr	r1, [r7, #24]
 8002050:	430b      	orrs	r3, r1
 8002052:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fed1 	bl	8001e16 <LL_ADC_REG_IsConversionOngoing>
 8002074:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fede 	bl	8001e3c <LL_ADC_INJ_IsConversionOngoing>
 8002080:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d17f      	bne.n	8002188 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d17c      	bne.n	8002188 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002092:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800209a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020aa:	f023 0302 	bic.w	r3, r3, #2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	69b9      	ldr	r1, [r7, #24]
 80020b4:	430b      	orrs	r3, r1
 80020b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d017      	beq.n	80020f0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6911      	ldr	r1, [r2, #16]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80020ee:	e013      	b.n	8002118 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002114:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800211e:	2b01      	cmp	r3, #1
 8002120:	d12a      	bne.n	8002178 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002138:	4311      	orrs	r1, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800213e:	4311      	orrs	r1, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002144:	430a      	orrs	r2, r1
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	611a      	str	r2, [r3, #16]
 8002152:	e019      	b.n	8002188 <HAL_ADC_Init+0x324>
 8002154:	20000000 	.word	0x20000000
 8002158:	053e2d63 	.word	0x053e2d63
 800215c:	50000100 	.word	0x50000100
 8002160:	50000400 	.word	0x50000400
 8002164:	50000500 	.word	0x50000500
 8002168:	50000600 	.word	0x50000600
 800216c:	50000300 	.word	0x50000300
 8002170:	50000700 	.word	0x50000700
 8002174:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d10c      	bne.n	80021aa <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f023 010f 	bic.w	r1, r3, #15
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	1e5a      	subs	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
 80021a8:	e007      	b.n	80021ba <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 020f 	bic.w	r2, r2, #15
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80021ca:	e007      	b.n	80021dc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d0:	f043 0210 	orr.w	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}
 80021e6:	bf00      	nop

080021e8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f8:	d004      	beq.n	8002204 <HAL_ADC_Start+0x1c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a67      	ldr	r2, [pc, #412]	; (800239c <HAL_ADC_Start+0x1b4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d101      	bne.n	8002208 <HAL_ADC_Start+0x20>
 8002204:	4b66      	ldr	r3, [pc, #408]	; (80023a0 <HAL_ADC_Start+0x1b8>)
 8002206:	e000      	b.n	800220a <HAL_ADC_Start+0x22>
 8002208:	4b66      	ldr	r3, [pc, #408]	; (80023a4 <HAL_ADC_Start+0x1bc>)
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fd5e 	bl	8001ccc <LL_ADC_GetMultimode>
 8002210:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fdfd 	bl	8001e16 <LL_ADC_REG_IsConversionOngoing>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 80b4 	bne.w	800238c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_ADC_Start+0x4a>
 800222e:	2302      	movs	r3, #2
 8002230:	e0af      	b.n	8002392 <HAL_ADC_Start+0x1aa>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fe0c 	bl	8002e58 <ADC_Enable>
 8002240:	4603      	mov	r3, r0
 8002242:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 809b 	bne.w	8002382 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a4d      	ldr	r2, [pc, #308]	; (800239c <HAL_ADC_Start+0x1b4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d009      	beq.n	800227e <HAL_ADC_Start+0x96>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a4e      	ldr	r2, [pc, #312]	; (80023a8 <HAL_ADC_Start+0x1c0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d002      	beq.n	800227a <HAL_ADC_Start+0x92>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	e003      	b.n	8002282 <HAL_ADC_Start+0x9a>
 800227a:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_ADC_Start+0x1c4>)
 800227c:	e001      	b.n	8002282 <HAL_ADC_Start+0x9a>
 800227e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	4293      	cmp	r3, r2
 8002288:	d002      	beq.n	8002290 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002294:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a8:	d106      	bne.n	80022b8 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	f023 0206 	bic.w	r2, r3, #6
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	661a      	str	r2, [r3, #96]	; 0x60
 80022b6:	e002      	b.n	80022be <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	221c      	movs	r2, #28
 80022c4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a32      	ldr	r2, [pc, #200]	; (800239c <HAL_ADC_Start+0x1b4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d009      	beq.n	80022ec <HAL_ADC_Start+0x104>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a32      	ldr	r2, [pc, #200]	; (80023a8 <HAL_ADC_Start+0x1c0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d002      	beq.n	80022e8 <HAL_ADC_Start+0x100>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	e003      	b.n	80022f0 <HAL_ADC_Start+0x108>
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <HAL_ADC_Start+0x1c4>)
 80022ea:	e001      	b.n	80022f0 <HAL_ADC_Start+0x108>
 80022ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d008      	beq.n	800230a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b05      	cmp	r3, #5
 8002302:	d002      	beq.n	800230a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b09      	cmp	r3, #9
 8002308:	d114      	bne.n	8002334 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002320:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fd5e 	bl	8001dee <LL_ADC_REG_StartConversion>
 8002332:	e02d      	b.n	8002390 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002338:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a15      	ldr	r2, [pc, #84]	; (800239c <HAL_ADC_Start+0x1b4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d009      	beq.n	800235e <HAL_ADC_Start+0x176>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <HAL_ADC_Start+0x1c0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d002      	beq.n	800235a <HAL_ADC_Start+0x172>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	e003      	b.n	8002362 <HAL_ADC_Start+0x17a>
 800235a:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_ADC_Start+0x1c4>)
 800235c:	e001      	b.n	8002362 <HAL_ADC_Start+0x17a>
 800235e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002362:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00f      	beq.n	8002390 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002378:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002380:	e006      	b.n	8002390 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800238a:	e001      	b.n	8002390 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800238c:	2302      	movs	r3, #2
 800238e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002390:	7dfb      	ldrb	r3, [r7, #23]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	50000100 	.word	0x50000100
 80023a0:	50000300 	.word	0x50000300
 80023a4:	50000700 	.word	0x50000700
 80023a8:	50000500 	.word	0x50000500
 80023ac:	50000400 	.word	0x50000400

080023b0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023c2:	d004      	beq.n	80023ce <HAL_ADC_PollForConversion+0x1e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a77      	ldr	r2, [pc, #476]	; (80025a8 <HAL_ADC_PollForConversion+0x1f8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_PollForConversion+0x22>
 80023ce:	4b77      	ldr	r3, [pc, #476]	; (80025ac <HAL_ADC_PollForConversion+0x1fc>)
 80023d0:	e000      	b.n	80023d4 <HAL_ADC_PollForConversion+0x24>
 80023d2:	4b77      	ldr	r3, [pc, #476]	; (80025b0 <HAL_ADC_PollForConversion+0x200>)
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fc79 	bl	8001ccc <LL_ADC_GetMultimode>
 80023da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d102      	bne.n	80023ea <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80023e4:	2308      	movs	r3, #8
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	e037      	b.n	800245a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d002      	beq.n	80023fc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b09      	cmp	r3, #9
 80023fa:	d111      	bne.n	8002420 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d007      	beq.n	800241a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240e:	f043 0220 	orr.w	r2, r3, #32
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0c1      	b.n	800259e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800241a:	2304      	movs	r3, #4
 800241c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800241e:	e01c      	b.n	800245a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002428:	d004      	beq.n	8002434 <HAL_ADC_PollForConversion+0x84>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a5e      	ldr	r2, [pc, #376]	; (80025a8 <HAL_ADC_PollForConversion+0x1f8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d101      	bne.n	8002438 <HAL_ADC_PollForConversion+0x88>
 8002434:	4b5d      	ldr	r3, [pc, #372]	; (80025ac <HAL_ADC_PollForConversion+0x1fc>)
 8002436:	e000      	b.n	800243a <HAL_ADC_PollForConversion+0x8a>
 8002438:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <HAL_ADC_PollForConversion+0x200>)
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fc54 	bl	8001ce8 <LL_ADC_GetMultiDMATransfer>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0a3      	b.n	800259e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002456:	2304      	movs	r3, #4
 8002458:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800245a:	f7ff faa5 	bl	80019a8 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002460:	e021      	b.n	80024a6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d01d      	beq.n	80024a6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800246a:	f7ff fa9d 	bl	80019a8 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d302      	bcc.n	8002480 <HAL_ADC_PollForConversion+0xd0>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d112      	bne.n	80024a6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10b      	bne.n	80024a6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002492:	f043 0204 	orr.w	r2, r3, #4
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e07b      	b.n	800259e <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0d6      	beq.n	8002462 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fb6f 	bl	8001ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01c      	beq.n	800250a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7f5b      	ldrb	r3, [r3, #29]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d118      	bne.n	800250a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d111      	bne.n	800250a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d105      	bne.n	800250a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a26      	ldr	r2, [pc, #152]	; (80025a8 <HAL_ADC_PollForConversion+0x1f8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d009      	beq.n	8002528 <HAL_ADC_PollForConversion+0x178>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <HAL_ADC_PollForConversion+0x204>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d002      	beq.n	8002524 <HAL_ADC_PollForConversion+0x174>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	e003      	b.n	800252c <HAL_ADC_PollForConversion+0x17c>
 8002524:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_ADC_PollForConversion+0x208>)
 8002526:	e001      	b.n	800252c <HAL_ADC_PollForConversion+0x17c>
 8002528:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	4293      	cmp	r3, r2
 8002532:	d008      	beq.n	8002546 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d002      	beq.n	8002546 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b09      	cmp	r3, #9
 8002544:	d104      	bne.n	8002550 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	e014      	b.n	800257a <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <HAL_ADC_PollForConversion+0x1f8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d009      	beq.n	800256e <HAL_ADC_PollForConversion+0x1be>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <HAL_ADC_PollForConversion+0x204>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d002      	beq.n	800256a <HAL_ADC_PollForConversion+0x1ba>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	e003      	b.n	8002572 <HAL_ADC_PollForConversion+0x1c2>
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <HAL_ADC_PollForConversion+0x208>)
 800256c:	e001      	b.n	8002572 <HAL_ADC_PollForConversion+0x1c2>
 800256e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002572:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d104      	bne.n	800258a <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2208      	movs	r2, #8
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e008      	b.n	800259c <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d103      	bne.n	800259c <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	220c      	movs	r2, #12
 800259a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3720      	adds	r7, #32
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	50000100 	.word	0x50000100
 80025ac:	50000300 	.word	0x50000300
 80025b0:	50000700 	.word	0x50000700
 80025b4:	50000500 	.word	0x50000500
 80025b8:	50000400 	.word	0x50000400

080025bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0b6      	sub	sp, #216	; 0xd8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d102      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x24>
 80025f6:	2302      	movs	r3, #2
 80025f8:	f000 bc13 	b.w	8002e22 <HAL_ADC_ConfigChannel+0x84a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fc04 	bl	8001e16 <LL_ADC_REG_IsConversionOngoing>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	f040 83f3 	bne.w	8002dfc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6859      	ldr	r1, [r3, #4]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	f7ff fad3 	bl	8001bce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fbf2 	bl	8001e16 <LL_ADC_REG_IsConversionOngoing>
 8002632:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fbfe 	bl	8001e3c <LL_ADC_INJ_IsConversionOngoing>
 8002640:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002644:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002648:	2b00      	cmp	r3, #0
 800264a:	f040 81d9 	bne.w	8002a00 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800264e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 81d4 	bne.w	8002a00 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002660:	d10f      	bne.n	8002682 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	4619      	mov	r1, r3
 800266e:	f7ff fada 	bl	8001c26 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fa81 	bl	8001b82 <LL_ADC_SetSamplingTimeCommonConfig>
 8002680:	e00e      	b.n	80026a0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	461a      	mov	r2, r3
 8002690:	f7ff fac9 	bl	8001c26 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fa71 	bl	8001b82 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	08db      	lsrs	r3, r3, #3
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d022      	beq.n	8002708 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6919      	ldr	r1, [r3, #16]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026d2:	f7ff f9cb 	bl	8001a6c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6919      	ldr	r1, [r3, #16]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	461a      	mov	r2, r3
 80026e4:	f7ff fa17 	bl	8001b16 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6919      	ldr	r1, [r3, #16]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	7f1b      	ldrb	r3, [r3, #28]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d102      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x126>
 80026f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026fc:	e000      	b.n	8002700 <HAL_ADC_ConfigChannel+0x128>
 80026fe:	2300      	movs	r3, #0
 8002700:	461a      	mov	r2, r3
 8002702:	f7ff fa23 	bl	8001b4c <LL_ADC_SetOffsetSaturation>
 8002706:	e17b      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff f9d0 	bl	8001ab4 <LL_ADC_GetOffsetChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10a      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x15c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff f9c5 	bl	8001ab4 <LL_ADC_GetOffsetChannel>
 800272a:	4603      	mov	r3, r0
 800272c:	0e9b      	lsrs	r3, r3, #26
 800272e:	f003 021f 	and.w	r2, r3, #31
 8002732:	e01e      	b.n	8002772 <HAL_ADC_ConfigChannel+0x19a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff f9ba 	bl	8001ab4 <LL_ADC_GetOffsetChannel>
 8002740:	4603      	mov	r3, r0
 8002742:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002756:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800275a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002762:	2320      	movs	r3, #32
 8002764:	e004      	b.n	8002770 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002766:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277a:	2b00      	cmp	r3, #0
 800277c:	d105      	bne.n	800278a <HAL_ADC_ConfigChannel+0x1b2>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	0e9b      	lsrs	r3, r3, #26
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	e018      	b.n	80027bc <HAL_ADC_ConfigChannel+0x1e4>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800279e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e004      	b.n	80027bc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80027b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027bc:	429a      	cmp	r2, r3
 80027be:	d106      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff f989 	bl	8001ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2101      	movs	r1, #1
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff f96d 	bl	8001ab4 <LL_ADC_GetOffsetChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x222>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff f962 	bl	8001ab4 <LL_ADC_GetOffsetChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	0e9b      	lsrs	r3, r3, #26
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	e01e      	b.n	8002838 <HAL_ADC_ConfigChannel+0x260>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2101      	movs	r1, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff f957 	bl	8001ab4 <LL_ADC_GetOffsetChannel>
 8002806:	4603      	mov	r3, r0
 8002808:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002818:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800281c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002828:	2320      	movs	r3, #32
 800282a:	e004      	b.n	8002836 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800282c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x278>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	e018      	b.n	8002882 <HAL_ADC_ConfigChannel+0x2aa>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002864:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800286c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002874:	2320      	movs	r3, #32
 8002876:	e004      	b.n	8002882 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002882:	429a      	cmp	r2, r3
 8002884:	d106      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2200      	movs	r2, #0
 800288c:	2101      	movs	r1, #1
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff f926 	bl	8001ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2102      	movs	r1, #2
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff f90a 	bl	8001ab4 <LL_ADC_GetOffsetChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10a      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x2e8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2102      	movs	r1, #2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff f8ff 	bl	8001ab4 <LL_ADC_GetOffsetChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	0e9b      	lsrs	r3, r3, #26
 80028ba:	f003 021f 	and.w	r2, r3, #31
 80028be:	e01e      	b.n	80028fe <HAL_ADC_ConfigChannel+0x326>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2102      	movs	r1, #2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f8f4 	bl	8001ab4 <LL_ADC_GetOffsetChannel>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e004      	b.n	80028fc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80028f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x33e>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	0e9b      	lsrs	r3, r3, #26
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	e016      	b.n	8002944 <HAL_ADC_ConfigChannel+0x36c>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800292a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800292e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002936:	2320      	movs	r3, #32
 8002938:	e004      	b.n	8002944 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800293a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002944:	429a      	cmp	r2, r3
 8002946:	d106      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2200      	movs	r2, #0
 800294e:	2102      	movs	r1, #2
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff f8c5 	bl	8001ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2103      	movs	r1, #3
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f8a9 	bl	8001ab4 <LL_ADC_GetOffsetChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x3aa>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2103      	movs	r1, #3
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f89e 	bl	8001ab4 <LL_ADC_GetOffsetChannel>
 8002978:	4603      	mov	r3, r0
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	e017      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x3da>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2103      	movs	r1, #3
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f893 	bl	8001ab4 <LL_ADC_GetOffsetChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800299a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800299c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800299e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80029a4:	2320      	movs	r3, #32
 80029a6:	e003      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80029a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x3f2>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	0e9b      	lsrs	r3, r3, #26
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	e011      	b.n	80029ee <HAL_ADC_ConfigChannel+0x416>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e003      	b.n	80029ee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80029e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d106      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2200      	movs	r2, #0
 80029f8:	2103      	movs	r1, #3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff f870 	bl	8001ae0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff f9df 	bl	8001dc8 <LL_ADC_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f040 813d 	bne.w	8002c8c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f7ff f92c 	bl	8001c7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4aa2      	ldr	r2, [pc, #648]	; (8002cb4 <HAL_ADC_ConfigChannel+0x6dc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	f040 812e 	bne.w	8002c8c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x480>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	3301      	adds	r3, #1
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	2b09      	cmp	r3, #9
 8002a4e:	bf94      	ite	ls
 8002a50:	2301      	movls	r3, #1
 8002a52:	2300      	movhi	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e019      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x4b4>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a68:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e003      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2b09      	cmp	r3, #9
 8002a84:	bf94      	ite	ls
 8002a86:	2301      	movls	r3, #1
 8002a88:	2300      	movhi	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d079      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x4d4>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0e9b      	lsrs	r3, r3, #26
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	069b      	lsls	r3, r3, #26
 8002aa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aaa:	e015      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x500>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002abc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	e003      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	069b      	lsls	r3, r3, #26
 8002ad4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x520>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0e9b      	lsrs	r3, r3, #26
 8002aea:	3301      	adds	r3, #1
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	e017      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x550>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002b10:	2320      	movs	r3, #32
 8002b12:	e003      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	2101      	movs	r1, #1
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	ea42 0103 	orr.w	r1, r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x576>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	0e9b      	lsrs	r3, r3, #26
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f003 021f 	and.w	r2, r3, #31
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	051b      	lsls	r3, r3, #20
 8002b4c:	e018      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x5a8>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b66:	2320      	movs	r3, #32
 8002b68:	e003      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b6c:	fab3 f383 	clz	r3, r3
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b80:	430b      	orrs	r3, r1
 8002b82:	e07e      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d107      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x5c8>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	0e9b      	lsrs	r3, r3, #26
 8002b96:	3301      	adds	r3, #1
 8002b98:	069b      	lsls	r3, r3, #26
 8002b9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b9e:	e015      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x5f4>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002bb8:	2320      	movs	r3, #32
 8002bba:	e003      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	069b      	lsls	r3, r3, #26
 8002bc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x614>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	3301      	adds	r3, #1
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	2101      	movs	r1, #1
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	e017      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x644>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	61fb      	str	r3, [r7, #28]
  return result;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002c04:	2320      	movs	r3, #32
 8002c06:	e003      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	ea42 0103 	orr.w	r1, r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10d      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x670>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	3301      	adds	r3, #1
 8002c34:	f003 021f 	and.w	r2, r3, #31
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3b1e      	subs	r3, #30
 8002c40:	051b      	lsls	r3, r3, #20
 8002c42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c46:	e01b      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x6a8>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	613b      	str	r3, [r7, #16]
  return result;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e003      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f003 021f 	and.w	r2, r3, #31
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	3b1e      	subs	r3, #30
 8002c7a:	051b      	lsls	r3, r3, #20
 8002c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c80:	430b      	orrs	r3, r1
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	6892      	ldr	r2, [r2, #8]
 8002c86:	4619      	mov	r1, r3
 8002c88:	f7fe ffcd 	bl	8001c26 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80be 	beq.w	8002e16 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ca2:	d004      	beq.n	8002cae <HAL_ADC_ConfigChannel+0x6d6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_ADC_ConfigChannel+0x6e4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d10a      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x6ec>
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <HAL_ADC_ConfigChannel+0x6e8>)
 8002cb0:	e009      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x6ee>
 8002cb2:	bf00      	nop
 8002cb4:	407f0000 	.word	0x407f0000
 8002cb8:	80080000 	.word	0x80080000
 8002cbc:	50000100 	.word	0x50000100
 8002cc0:	50000300 	.word	0x50000300
 8002cc4:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_ADC_ConfigChannel+0x854>)
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fec2 	bl	8001a50 <LL_ADC_GetCommonPathInternalCh>
 8002ccc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a56      	ldr	r2, [pc, #344]	; (8002e30 <HAL_ADC_ConfigChannel+0x858>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <HAL_ADC_ConfigChannel+0x70c>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a55      	ldr	r2, [pc, #340]	; (8002e34 <HAL_ADC_ConfigChannel+0x85c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d13a      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d134      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf8:	d005      	beq.n	8002d06 <HAL_ADC_ConfigChannel+0x72e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a4e      	ldr	r2, [pc, #312]	; (8002e38 <HAL_ADC_ConfigChannel+0x860>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	f040 8085 	bne.w	8002e10 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d0e:	d004      	beq.n	8002d1a <HAL_ADC_ConfigChannel+0x742>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a49      	ldr	r2, [pc, #292]	; (8002e3c <HAL_ADC_ConfigChannel+0x864>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x746>
 8002d1a:	4a49      	ldr	r2, [pc, #292]	; (8002e40 <HAL_ADC_ConfigChannel+0x868>)
 8002d1c:	e000      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x748>
 8002d1e:	4a43      	ldr	r2, [pc, #268]	; (8002e2c <HAL_ADC_ConfigChannel+0x854>)
 8002d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	f7fe fe7d 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d30:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <HAL_ADC_ConfigChannel+0x86c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	4a44      	ldr	r2, [pc, #272]	; (8002e48 <HAL_ADC_ConfigChannel+0x870>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d4a:	e002      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f9      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d58:	e05a      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a3b      	ldr	r2, [pc, #236]	; (8002e4c <HAL_ADC_ConfigChannel+0x874>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d125      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x7d8>
 8002d64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d11f      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a31      	ldr	r2, [pc, #196]	; (8002e3c <HAL_ADC_ConfigChannel+0x864>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d104      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x7ac>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a34      	ldr	r2, [pc, #208]	; (8002e50 <HAL_ADC_ConfigChannel+0x878>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d047      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d8c:	d004      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x7c0>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a2a      	ldr	r2, [pc, #168]	; (8002e3c <HAL_ADC_ConfigChannel+0x864>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d101      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x7c4>
 8002d98:	4a29      	ldr	r2, [pc, #164]	; (8002e40 <HAL_ADC_ConfigChannel+0x868>)
 8002d9a:	e000      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x7c6>
 8002d9c:	4a23      	ldr	r2, [pc, #140]	; (8002e2c <HAL_ADC_ConfigChannel+0x854>)
 8002d9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002da6:	4619      	mov	r1, r3
 8002da8:	4610      	mov	r0, r2
 8002daa:	f7fe fe3e 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dae:	e031      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a27      	ldr	r2, [pc, #156]	; (8002e54 <HAL_ADC_ConfigChannel+0x87c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d12d      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d127      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <HAL_ADC_ConfigChannel+0x864>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d022      	beq.n	8002e16 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dd8:	d004      	beq.n	8002de4 <HAL_ADC_ConfigChannel+0x80c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <HAL_ADC_ConfigChannel+0x864>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d101      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x810>
 8002de4:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <HAL_ADC_ConfigChannel+0x868>)
 8002de6:	e000      	b.n	8002dea <HAL_ADC_ConfigChannel+0x812>
 8002de8:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <HAL_ADC_ConfigChannel+0x854>)
 8002dea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002df2:	4619      	mov	r1, r3
 8002df4:	4610      	mov	r0, r2
 8002df6:	f7fe fe18 	bl	8001a2a <LL_ADC_SetCommonPathInternalCh>
 8002dfa:	e00c      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	f043 0220 	orr.w	r2, r3, #32
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e0e:	e002      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e10:	bf00      	nop
 8002e12:	e000      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	37d8      	adds	r7, #216	; 0xd8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	50000700 	.word	0x50000700
 8002e30:	c3210000 	.word	0xc3210000
 8002e34:	90c00010 	.word	0x90c00010
 8002e38:	50000600 	.word	0x50000600
 8002e3c:	50000100 	.word	0x50000100
 8002e40:	50000300 	.word	0x50000300
 8002e44:	20000000 	.word	0x20000000
 8002e48:	053e2d63 	.word	0x053e2d63
 8002e4c:	c7520000 	.word	0xc7520000
 8002e50:	50000500 	.word	0x50000500
 8002e54:	cb840000 	.word	0xcb840000

08002e58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe ffaf 	bl	8001dc8 <LL_ADC_IsEnabled>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d14d      	bne.n	8002f0c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <ADC_Enable+0xc0>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	f043 0210 	orr.w	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8e:	f043 0201 	orr.w	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e039      	b.n	8002f0e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe ff7e 	bl	8001da0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ea4:	f7fe fd80 	bl	80019a8 <HAL_GetTick>
 8002ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eaa:	e028      	b.n	8002efe <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe ff89 	bl	8001dc8 <LL_ADC_IsEnabled>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe ff6d 	bl	8001da0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ec6:	f7fe fd6f 	bl	80019a8 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d914      	bls.n	8002efe <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d00d      	beq.n	8002efe <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	f043 0210 	orr.w	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e007      	b.n	8002f0e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d1cf      	bne.n	8002eac <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	8000003f 	.word	0x8000003f

08002f1c <LL_ADC_IsEnabled>:
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <LL_ADC_IsEnabled+0x18>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <LL_ADC_IsEnabled+0x1a>
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <LL_ADC_REG_IsConversionOngoing>:
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d101      	bne.n	8002f5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b0a1      	sub	sp, #132	; 0x84
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e0e7      	b.n	8003156 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002f92:	2300      	movs	r3, #0
 8002f94:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f9e:	d102      	bne.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fa0:	4b6f      	ldr	r3, [pc, #444]	; (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	e009      	b.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a6e      	ldr	r2, [pc, #440]	; (8003164 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d102      	bne.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002fb0:	4b6d      	ldr	r3, [pc, #436]	; (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	e001      	b.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0be      	b.n	8003156 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ffb1 	bl	8002f42 <LL_ADC_REG_IsConversionOngoing>
 8002fe0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ffab 	bl	8002f42 <LL_ADC_REG_IsConversionOngoing>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 80a0 	bne.w	8003134 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 809c 	bne.w	8003134 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003004:	d004      	beq.n	8003010 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a55      	ldr	r2, [pc, #340]	; (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d101      	bne.n	8003014 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003010:	4b56      	ldr	r3, [pc, #344]	; (800316c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003012:	e000      	b.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003014:	4b56      	ldr	r3, [pc, #344]	; (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003016:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d04b      	beq.n	80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003032:	035b      	lsls	r3, r3, #13
 8003034:	430b      	orrs	r3, r1
 8003036:	431a      	orrs	r2, r3
 8003038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800303a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003044:	d004      	beq.n	8003050 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a45      	ldr	r2, [pc, #276]	; (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d10f      	bne.n	8003070 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003050:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003054:	f7ff ff62 	bl	8002f1c <LL_ADC_IsEnabled>
 8003058:	4604      	mov	r4, r0
 800305a:	4841      	ldr	r0, [pc, #260]	; (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800305c:	f7ff ff5e 	bl	8002f1c <LL_ADC_IsEnabled>
 8003060:	4603      	mov	r3, r0
 8003062:	4323      	orrs	r3, r4
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e012      	b.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003070:	483c      	ldr	r0, [pc, #240]	; (8003164 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003072:	f7ff ff53 	bl	8002f1c <LL_ADC_IsEnabled>
 8003076:	4604      	mov	r4, r0
 8003078:	483b      	ldr	r0, [pc, #236]	; (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800307a:	f7ff ff4f 	bl	8002f1c <LL_ADC_IsEnabled>
 800307e:	4603      	mov	r3, r0
 8003080:	431c      	orrs	r4, r3
 8003082:	483c      	ldr	r0, [pc, #240]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003084:	f7ff ff4a 	bl	8002f1c <LL_ADC_IsEnabled>
 8003088:	4603      	mov	r3, r0
 800308a:	4323      	orrs	r3, r4
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d056      	beq.n	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800309a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030a2:	f023 030f 	bic.w	r3, r3, #15
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	6811      	ldr	r1, [r2, #0]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	6892      	ldr	r2, [r2, #8]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030b6:	e047      	b.n	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030cc:	d004      	beq.n	80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a23      	ldr	r2, [pc, #140]	; (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d10f      	bne.n	80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80030d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80030dc:	f7ff ff1e 	bl	8002f1c <LL_ADC_IsEnabled>
 80030e0:	4604      	mov	r4, r0
 80030e2:	481f      	ldr	r0, [pc, #124]	; (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030e4:	f7ff ff1a 	bl	8002f1c <LL_ADC_IsEnabled>
 80030e8:	4603      	mov	r3, r0
 80030ea:	4323      	orrs	r3, r4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e012      	b.n	800311e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80030f8:	481a      	ldr	r0, [pc, #104]	; (8003164 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80030fa:	f7ff ff0f 	bl	8002f1c <LL_ADC_IsEnabled>
 80030fe:	4604      	mov	r4, r0
 8003100:	4819      	ldr	r0, [pc, #100]	; (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003102:	f7ff ff0b 	bl	8002f1c <LL_ADC_IsEnabled>
 8003106:	4603      	mov	r3, r0
 8003108:	431c      	orrs	r4, r3
 800310a:	481a      	ldr	r0, [pc, #104]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800310c:	f7ff ff06 	bl	8002f1c <LL_ADC_IsEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	4323      	orrs	r3, r4
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d012      	beq.n	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800312a:	f023 030f 	bic.w	r3, r3, #15
 800312e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003130:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003132:	e009      	b.n	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	f043 0220 	orr.w	r2, r3, #32
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003146:	e000      	b.n	800314a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003148:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003152:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003156:	4618      	mov	r0, r3
 8003158:	3784      	adds	r7, #132	; 0x84
 800315a:	46bd      	mov	sp, r7
 800315c:	bd90      	pop	{r4, r7, pc}
 800315e:	bf00      	nop
 8003160:	50000100 	.word	0x50000100
 8003164:	50000400 	.word	0x50000400
 8003168:	50000500 	.word	0x50000500
 800316c:	50000300 	.word	0x50000300
 8003170:	50000700 	.word	0x50000700
 8003174:	50000600 	.word	0x50000600

08003178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003194:	4013      	ands	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031aa:	4a04      	ldr	r2, [pc, #16]	; (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	60d3      	str	r3, [r2, #12]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <__NVIC_GetPriorityGrouping+0x18>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	f003 0307 	and.w	r3, r3, #7
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	db0b      	blt.n	8003206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	f003 021f 	and.w	r2, r3, #31
 80031f4:	4907      	ldr	r1, [pc, #28]	; (8003214 <__NVIC_EnableIRQ+0x38>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2001      	movs	r0, #1
 80031fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000e100 	.word	0xe000e100

08003218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	2b00      	cmp	r3, #0
 800322a:	db0a      	blt.n	8003242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	490c      	ldr	r1, [pc, #48]	; (8003264 <__NVIC_SetPriority+0x4c>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	0112      	lsls	r2, r2, #4
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	440b      	add	r3, r1
 800323c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003240:	e00a      	b.n	8003258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	4908      	ldr	r1, [pc, #32]	; (8003268 <__NVIC_SetPriority+0x50>)
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	3b04      	subs	r3, #4
 8003250:	0112      	lsls	r2, r2, #4
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	440b      	add	r3, r1
 8003256:	761a      	strb	r2, [r3, #24]
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000e100 	.word	0xe000e100
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800326c:	b480      	push	{r7}
 800326e:	b089      	sub	sp, #36	; 0x24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f1c3 0307 	rsb	r3, r3, #7
 8003286:	2b04      	cmp	r3, #4
 8003288:	bf28      	it	cs
 800328a:	2304      	movcs	r3, #4
 800328c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3304      	adds	r3, #4
 8003292:	2b06      	cmp	r3, #6
 8003294:	d902      	bls.n	800329c <NVIC_EncodePriority+0x30>
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3b03      	subs	r3, #3
 800329a:	e000      	b.n	800329e <NVIC_EncodePriority+0x32>
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a0:	f04f 32ff 	mov.w	r2, #4294967295
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43da      	mvns	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	401a      	ands	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b4:	f04f 31ff 	mov.w	r1, #4294967295
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	43d9      	mvns	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c4:	4313      	orrs	r3, r2
         );
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3724      	adds	r7, #36	; 0x24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff ff4c 	bl	8003178 <__NVIC_SetPriorityGrouping>
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032f6:	f7ff ff63 	bl	80031c0 <__NVIC_GetPriorityGrouping>
 80032fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	6978      	ldr	r0, [r7, #20]
 8003302:	f7ff ffb3 	bl	800326c <NVIC_EncodePriority>
 8003306:	4602      	mov	r2, r0
 8003308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330c:	4611      	mov	r1, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff ff82 	bl	8003218 <__NVIC_SetPriority>
}
 8003314:	bf00      	nop
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff ff56 	bl	80031dc <__NVIC_EnableIRQ>
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d005      	beq.n	800335c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2204      	movs	r2, #4
 8003354:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
 800335a:	e037      	b.n	80033cc <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 020e 	bic.w	r2, r2, #14
 800336a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003376:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800337a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f003 021f 	and.w	r2, r3, #31
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	2101      	movs	r1, #1
 800339a:	fa01 f202 	lsl.w	r2, r1, r2
 800339e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033a8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00c      	beq.n	80033cc <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033c0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033ca:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d00d      	beq.n	800341e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2204      	movs	r2, #4
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
 800341c:	e047      	b.n	80034ae <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 020e 	bic.w	r2, r2, #14
 800342c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003448:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800344c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	f003 021f 	and.w	r2, r3, #31
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2101      	movs	r1, #1
 800345c:	fa01 f202 	lsl.w	r2, r1, r2
 8003460:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800346a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00c      	beq.n	800348e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003482:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800348c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4798      	blx	r3
    }
  }
  return status;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034c6:	e15a      	b.n	800377e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	2101      	movs	r1, #1
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	4013      	ands	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 814c 	beq.w	8003778 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d005      	beq.n	80034f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d130      	bne.n	800355a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2203      	movs	r2, #3
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800352e:	2201      	movs	r2, #1
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	f003 0201 	and.w	r2, r3, #1
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b03      	cmp	r3, #3
 8003564:	d017      	beq.n	8003596 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	2203      	movs	r2, #3
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d123      	bne.n	80035ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	08da      	lsrs	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3208      	adds	r2, #8
 80035aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	220f      	movs	r2, #15
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	08da      	lsrs	r2, r3, #3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3208      	adds	r2, #8
 80035e4:	6939      	ldr	r1, [r7, #16]
 80035e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	2203      	movs	r2, #3
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4013      	ands	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0203 	and.w	r2, r3, #3
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80a6 	beq.w	8003778 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362c:	4b5b      	ldr	r3, [pc, #364]	; (800379c <HAL_GPIO_Init+0x2e4>)
 800362e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003630:	4a5a      	ldr	r2, [pc, #360]	; (800379c <HAL_GPIO_Init+0x2e4>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6613      	str	r3, [r2, #96]	; 0x60
 8003638:	4b58      	ldr	r3, [pc, #352]	; (800379c <HAL_GPIO_Init+0x2e4>)
 800363a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003644:	4a56      	ldr	r2, [pc, #344]	; (80037a0 <HAL_GPIO_Init+0x2e8>)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	089b      	lsrs	r3, r3, #2
 800364a:	3302      	adds	r3, #2
 800364c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	220f      	movs	r2, #15
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800366e:	d01f      	beq.n	80036b0 <HAL_GPIO_Init+0x1f8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a4c      	ldr	r2, [pc, #304]	; (80037a4 <HAL_GPIO_Init+0x2ec>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d019      	beq.n	80036ac <HAL_GPIO_Init+0x1f4>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a4b      	ldr	r2, [pc, #300]	; (80037a8 <HAL_GPIO_Init+0x2f0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <HAL_GPIO_Init+0x1f0>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a4a      	ldr	r2, [pc, #296]	; (80037ac <HAL_GPIO_Init+0x2f4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00d      	beq.n	80036a4 <HAL_GPIO_Init+0x1ec>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a49      	ldr	r2, [pc, #292]	; (80037b0 <HAL_GPIO_Init+0x2f8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <HAL_GPIO_Init+0x1e8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a48      	ldr	r2, [pc, #288]	; (80037b4 <HAL_GPIO_Init+0x2fc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d101      	bne.n	800369c <HAL_GPIO_Init+0x1e4>
 8003698:	2305      	movs	r3, #5
 800369a:	e00a      	b.n	80036b2 <HAL_GPIO_Init+0x1fa>
 800369c:	2306      	movs	r3, #6
 800369e:	e008      	b.n	80036b2 <HAL_GPIO_Init+0x1fa>
 80036a0:	2304      	movs	r3, #4
 80036a2:	e006      	b.n	80036b2 <HAL_GPIO_Init+0x1fa>
 80036a4:	2303      	movs	r3, #3
 80036a6:	e004      	b.n	80036b2 <HAL_GPIO_Init+0x1fa>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e002      	b.n	80036b2 <HAL_GPIO_Init+0x1fa>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <HAL_GPIO_Init+0x1fa>
 80036b0:	2300      	movs	r3, #0
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	f002 0203 	and.w	r2, r2, #3
 80036b8:	0092      	lsls	r2, r2, #2
 80036ba:	4093      	lsls	r3, r2
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036c2:	4937      	ldr	r1, [pc, #220]	; (80037a0 <HAL_GPIO_Init+0x2e8>)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	3302      	adds	r3, #2
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036d0:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <HAL_GPIO_Init+0x300>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	43db      	mvns	r3, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036f4:	4a30      	ldr	r2, [pc, #192]	; (80037b8 <HAL_GPIO_Init+0x300>)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036fa:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <HAL_GPIO_Init+0x300>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800371e:	4a26      	ldr	r2, [pc, #152]	; (80037b8 <HAL_GPIO_Init+0x300>)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003724:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <HAL_GPIO_Init+0x300>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	43db      	mvns	r3, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003748:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <HAL_GPIO_Init+0x300>)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800374e:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <HAL_GPIO_Init+0x300>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	43db      	mvns	r3, r3
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003772:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <HAL_GPIO_Init+0x300>)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	3301      	adds	r3, #1
 800377c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	f47f ae9d 	bne.w	80034c8 <HAL_GPIO_Init+0x10>
  }
}
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40021000 	.word	0x40021000
 80037a0:	40010000 	.word	0x40010000
 80037a4:	48000400 	.word	0x48000400
 80037a8:	48000800 	.word	0x48000800
 80037ac:	48000c00 	.word	0x48000c00
 80037b0:	48001000 	.word	0x48001000
 80037b4:	48001400 	.word	0x48001400
 80037b8:	40010400 	.word	0x40010400

080037bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	807b      	strh	r3, [r7, #2]
 80037c8:	4613      	mov	r3, r2
 80037ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037cc:	787b      	ldrb	r3, [r7, #1]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037d2:	887a      	ldrh	r2, [r7, #2]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037d8:	e002      	b.n	80037e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037da:	887a      	ldrh	r2, [r7, #2]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d006      	beq.n	8003810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003802:	4a05      	ldr	r2, [pc, #20]	; (8003818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003804:	88fb      	ldrh	r3, [r7, #6]
 8003806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f806 	bl	800381c <HAL_GPIO_EXTI_Callback>
  }
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40010400 	.word	0x40010400

0800381c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d141      	bne.n	80038c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003842:	4b4b      	ldr	r3, [pc, #300]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800384a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384e:	d131      	bne.n	80038b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003850:	4b47      	ldr	r3, [pc, #284]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003856:	4a46      	ldr	r2, [pc, #280]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800385c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003860:	4b43      	ldr	r3, [pc, #268]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003868:	4a41      	ldr	r2, [pc, #260]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800386e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003870:	4b40      	ldr	r3, [pc, #256]	; (8003974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2232      	movs	r2, #50	; 0x32
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	4a3f      	ldr	r2, [pc, #252]	; (8003978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	0c9b      	lsrs	r3, r3, #18
 8003882:	3301      	adds	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003886:	e002      	b.n	800388e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3b01      	subs	r3, #1
 800388c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800388e:	4b38      	ldr	r3, [pc, #224]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389a:	d102      	bne.n	80038a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f2      	bne.n	8003888 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038a2:	4b33      	ldr	r3, [pc, #204]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ae:	d158      	bne.n	8003962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e057      	b.n	8003964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038b4:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ba:	4a2d      	ldr	r2, [pc, #180]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038c4:	e04d      	b.n	8003962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038cc:	d141      	bne.n	8003952 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ce:	4b28      	ldr	r3, [pc, #160]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038da:	d131      	bne.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038dc:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e2:	4a23      	ldr	r2, [pc, #140]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ec:	4b20      	ldr	r3, [pc, #128]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038f4:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2232      	movs	r2, #50	; 0x32
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	4a1c      	ldr	r2, [pc, #112]	; (8003978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	0c9b      	lsrs	r3, r3, #18
 800390e:	3301      	adds	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003912:	e002      	b.n	800391a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3b01      	subs	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800391a:	4b15      	ldr	r3, [pc, #84]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003926:	d102      	bne.n	800392e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f2      	bne.n	8003914 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393a:	d112      	bne.n	8003962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e011      	b.n	8003964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003946:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003950:	e007      	b.n	8003962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800395a:	4a05      	ldr	r2, [pc, #20]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003960:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	40007000 	.word	0x40007000
 8003974:	20000000 	.word	0x20000000
 8003978:	431bde83 	.word	0x431bde83

0800397c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a04      	ldr	r2, [pc, #16]	; (8003998 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800398a:	6093      	str	r3, [r2, #8]
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40007000 	.word	0x40007000

0800399c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e306      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d075      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ba:	4b97      	ldr	r3, [pc, #604]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c4:	4b94      	ldr	r3, [pc, #592]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	d102      	bne.n	80039da <HAL_RCC_OscConfig+0x3e>
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d002      	beq.n	80039e0 <HAL_RCC_OscConfig+0x44>
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d10b      	bne.n	80039f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	4b8d      	ldr	r3, [pc, #564]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d05b      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x108>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d157      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e2e1      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a00:	d106      	bne.n	8003a10 <HAL_RCC_OscConfig+0x74>
 8003a02:	4b85      	ldr	r3, [pc, #532]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a84      	ldr	r2, [pc, #528]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e01d      	b.n	8003a4c <HAL_RCC_OscConfig+0xb0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x98>
 8003a1a:	4b7f      	ldr	r3, [pc, #508]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a7e      	ldr	r2, [pc, #504]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b7c      	ldr	r3, [pc, #496]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a7b      	ldr	r2, [pc, #492]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0xb0>
 8003a34:	4b78      	ldr	r3, [pc, #480]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a77      	ldr	r2, [pc, #476]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b75      	ldr	r3, [pc, #468]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a74      	ldr	r2, [pc, #464]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d013      	beq.n	8003a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fd ffa8 	bl	80019a8 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fd ffa4 	bl	80019a8 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e2a6      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a6e:	4b6a      	ldr	r3, [pc, #424]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0xc0>
 8003a7a:	e014      	b.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fd ff94 	bl	80019a8 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fd ff90 	bl	80019a8 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	; 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e292      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a96:	4b60      	ldr	r3, [pc, #384]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0xe8>
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d075      	beq.n	8003b9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab2:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003abc:	4b56      	ldr	r3, [pc, #344]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b0c      	cmp	r3, #12
 8003aca:	d102      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x136>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x13c>
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d11f      	bne.n	8003b18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad8:	4b4f      	ldr	r3, [pc, #316]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_OscConfig+0x154>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e265      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b49      	ldr	r3, [pc, #292]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	4946      	ldr	r1, [pc, #280]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b04:	4b45      	ldr	r3, [pc, #276]	; (8003c1c <HAL_RCC_OscConfig+0x280>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fd fae1 	bl	80010d0 <HAL_InitTick>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d043      	beq.n	8003b9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e251      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d023      	beq.n	8003b68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b20:	4b3d      	ldr	r3, [pc, #244]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a3c      	ldr	r2, [pc, #240]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd ff3c 	bl	80019a8 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b34:	f7fd ff38 	bl	80019a8 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e23a      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b46:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b52:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	061b      	lsls	r3, r3, #24
 8003b60:	492d      	ldr	r1, [pc, #180]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	604b      	str	r3, [r1, #4]
 8003b66:	e01a      	b.n	8003b9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fd ff18 	bl	80019a8 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b7c:	f7fd ff14 	bl	80019a8 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e216      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b8e:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x1e0>
 8003b9a:	e000      	b.n	8003b9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d041      	beq.n	8003c2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01c      	beq.n	8003bec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bb2:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb8:	4a17      	ldr	r2, [pc, #92]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc2:	f7fd fef1 	bl	80019a8 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bca:	f7fd feed 	bl	80019a8 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e1ef      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0ef      	beq.n	8003bca <HAL_RCC_OscConfig+0x22e>
 8003bea:	e020      	b.n	8003c2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf2:	4a09      	ldr	r2, [pc, #36]	; (8003c18 <HAL_RCC_OscConfig+0x27c>)
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfc:	f7fd fed4 	bl	80019a8 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c02:	e00d      	b.n	8003c20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c04:	f7fd fed0 	bl	80019a8 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d906      	bls.n	8003c20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e1d2      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c20:	4b8c      	ldr	r3, [pc, #560]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1ea      	bne.n	8003c04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80a6 	beq.w	8003d88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c40:	4b84      	ldr	r3, [pc, #528]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_OscConfig+0x2b4>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <HAL_RCC_OscConfig+0x2b6>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	4b7f      	ldr	r3, [pc, #508]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	4a7e      	ldr	r2, [pc, #504]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6593      	str	r3, [r2, #88]	; 0x58
 8003c62:	4b7c      	ldr	r3, [pc, #496]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c72:	4b79      	ldr	r3, [pc, #484]	; (8003e58 <HAL_RCC_OscConfig+0x4bc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d118      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c7e:	4b76      	ldr	r3, [pc, #472]	; (8003e58 <HAL_RCC_OscConfig+0x4bc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a75      	ldr	r2, [pc, #468]	; (8003e58 <HAL_RCC_OscConfig+0x4bc>)
 8003c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8a:	f7fd fe8d 	bl	80019a8 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c92:	f7fd fe89 	bl	80019a8 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e18b      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca4:	4b6c      	ldr	r3, [pc, #432]	; (8003e58 <HAL_RCC_OscConfig+0x4bc>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d108      	bne.n	8003cca <HAL_RCC_OscConfig+0x32e>
 8003cb8:	4b66      	ldr	r3, [pc, #408]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	4a65      	ldr	r2, [pc, #404]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc8:	e024      	b.n	8003d14 <HAL_RCC_OscConfig+0x378>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b05      	cmp	r3, #5
 8003cd0:	d110      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x358>
 8003cd2:	4b60      	ldr	r3, [pc, #384]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd8:	4a5e      	ldr	r2, [pc, #376]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003cda:	f043 0304 	orr.w	r3, r3, #4
 8003cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ce2:	4b5c      	ldr	r3, [pc, #368]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	4a5a      	ldr	r2, [pc, #360]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cf2:	e00f      	b.n	8003d14 <HAL_RCC_OscConfig+0x378>
 8003cf4:	4b57      	ldr	r3, [pc, #348]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	4a56      	ldr	r2, [pc, #344]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	4a52      	ldr	r2, [pc, #328]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
 8003d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d016      	beq.n	8003d4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7fd fe44 	bl	80019a8 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fd fe40 	bl	80019a8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e140      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3a:	4b46      	ldr	r3, [pc, #280]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ed      	beq.n	8003d24 <HAL_RCC_OscConfig+0x388>
 8003d48:	e015      	b.n	8003d76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4a:	f7fd fe2d 	bl	80019a8 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fd fe29 	bl	80019a8 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e129      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d68:	4b3a      	ldr	r3, [pc, #232]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1ed      	bne.n	8003d52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d76:	7ffb      	ldrb	r3, [r7, #31]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7c:	4b35      	ldr	r3, [pc, #212]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	4a34      	ldr	r2, [pc, #208]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d03c      	beq.n	8003e0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01c      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d9c:	4b2d      	ldr	r3, [pc, #180]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003da2:	4a2c      	ldr	r2, [pc, #176]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fd fdfc 	bl	80019a8 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003db4:	f7fd fdf8 	bl	80019a8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0fa      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dc6:	4b23      	ldr	r3, [pc, #140]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ef      	beq.n	8003db4 <HAL_RCC_OscConfig+0x418>
 8003dd4:	e01b      	b.n	8003e0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dd6:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ddc:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fd fddf 	bl	80019a8 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dee:	f7fd fddb 	bl	80019a8 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e0dd      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e00:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ef      	bne.n	8003dee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80d1 	beq.w	8003fba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e18:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
 8003e20:	2b0c      	cmp	r3, #12
 8003e22:	f000 808b 	beq.w	8003f3c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d15e      	bne.n	8003eec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2e:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a08      	ldr	r2, [pc, #32]	; (8003e54 <HAL_RCC_OscConfig+0x4b8>)
 8003e34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fd fdb5 	bl	80019a8 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e40:	e00c      	b.n	8003e5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fd fdb1 	bl	80019a8 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d905      	bls.n	8003e5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e0b3      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e5c:	4b59      	ldr	r3, [pc, #356]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1ec      	bne.n	8003e42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e68:	4b56      	ldr	r3, [pc, #344]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	4b56      	ldr	r3, [pc, #344]	; (8003fc8 <HAL_RCC_OscConfig+0x62c>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6a11      	ldr	r1, [r2, #32]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e78:	3a01      	subs	r2, #1
 8003e7a:	0112      	lsls	r2, r2, #4
 8003e7c:	4311      	orrs	r1, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e82:	0212      	lsls	r2, r2, #8
 8003e84:	4311      	orrs	r1, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e8a:	0852      	lsrs	r2, r2, #1
 8003e8c:	3a01      	subs	r2, #1
 8003e8e:	0552      	lsls	r2, r2, #21
 8003e90:	4311      	orrs	r1, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e96:	0852      	lsrs	r2, r2, #1
 8003e98:	3a01      	subs	r2, #1
 8003e9a:	0652      	lsls	r2, r2, #25
 8003e9c:	4311      	orrs	r1, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ea2:	06d2      	lsls	r2, r2, #27
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	4947      	ldr	r1, [pc, #284]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eac:	4b45      	ldr	r3, [pc, #276]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a44      	ldr	r2, [pc, #272]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003eb8:	4b42      	ldr	r3, [pc, #264]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a41      	ldr	r2, [pc, #260]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fd fd70 	bl	80019a8 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fd fd6c 	bl	80019a8 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e06e      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ede:	4b39      	ldr	r3, [pc, #228]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x530>
 8003eea:	e066      	b.n	8003fba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eec:	4b35      	ldr	r3, [pc, #212]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a34      	ldr	r2, [pc, #208]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ef8:	4b32      	ldr	r3, [pc, #200]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a31      	ldr	r2, [pc, #196]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f04:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4a2e      	ldr	r2, [pc, #184]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003f0a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd fd48 	bl	80019a8 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fd fd44 	bl	80019a8 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e046      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f2e:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x580>
 8003f3a:	e03e      	b.n	8003fba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e039      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f48:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <HAL_RCC_OscConfig+0x628>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f003 0203 	and.w	r2, r3, #3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d12c      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	3b01      	subs	r3, #1
 8003f68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d123      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d11b      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d113      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d109      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d001      	beq.n	8003fba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3720      	adds	r7, #32
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	019f800c 	.word	0x019f800c

08003fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e11e      	b.n	8004222 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b91      	ldr	r3, [pc, #580]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d910      	bls.n	8004014 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b8e      	ldr	r3, [pc, #568]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 020f 	bic.w	r2, r3, #15
 8003ffa:	498c      	ldr	r1, [pc, #560]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004002:	4b8a      	ldr	r3, [pc, #552]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e106      	b.n	8004222 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d073      	beq.n	8004108 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b03      	cmp	r3, #3
 8004026:	d129      	bne.n	800407c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004028:	4b81      	ldr	r3, [pc, #516]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0f4      	b.n	8004222 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004038:	f000 f9d0 	bl	80043dc <RCC_GetSysClockFreqFromPLLSource>
 800403c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4a7c      	ldr	r2, [pc, #496]	; (8004234 <HAL_RCC_ClockConfig+0x268>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d93f      	bls.n	80040c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004046:	4b7a      	ldr	r3, [pc, #488]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800405a:	2b00      	cmp	r3, #0
 800405c:	d033      	beq.n	80040c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004062:	2b00      	cmp	r3, #0
 8004064:	d12f      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004066:	4b72      	ldr	r3, [pc, #456]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800406e:	4a70      	ldr	r2, [pc, #448]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 8004070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004074:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	e024      	b.n	80040c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d107      	bne.n	8004094 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004084:	4b6a      	ldr	r3, [pc, #424]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0c6      	b.n	8004222 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004094:	4b66      	ldr	r3, [pc, #408]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0be      	b.n	8004222 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80040a4:	f000 f8ce 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 80040a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4a61      	ldr	r2, [pc, #388]	; (8004234 <HAL_RCC_ClockConfig+0x268>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d909      	bls.n	80040c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040b2:	4b5f      	ldr	r3, [pc, #380]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ba:	4a5d      	ldr	r2, [pc, #372]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 80040bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040c6:	4b5a      	ldr	r3, [pc, #360]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f023 0203 	bic.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4957      	ldr	r1, [pc, #348]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d8:	f7fd fc66 	bl	80019a8 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	e00a      	b.n	80040f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e0:	f7fd fc62 	bl	80019a8 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e095      	b.n	8004222 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	4b4e      	ldr	r3, [pc, #312]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 020c 	and.w	r2, r3, #12
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	429a      	cmp	r2, r3
 8004106:	d1eb      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d023      	beq.n	800415c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004120:	4b43      	ldr	r3, [pc, #268]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a42      	ldr	r2, [pc, #264]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 8004126:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800412a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004138:	4b3d      	ldr	r3, [pc, #244]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004140:	4a3b      	ldr	r2, [pc, #236]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 8004142:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004146:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004148:	4b39      	ldr	r3, [pc, #228]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4936      	ldr	r1, [pc, #216]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
 800415a:	e008      	b.n	800416e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b80      	cmp	r3, #128	; 0x80
 8004160:	d105      	bne.n	800416e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004162:	4b33      	ldr	r3, [pc, #204]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	4a32      	ldr	r2, [pc, #200]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 8004168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800416c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800416e:	4b2f      	ldr	r3, [pc, #188]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d21d      	bcs.n	80041b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417c:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f023 020f 	bic.w	r2, r3, #15
 8004184:	4929      	ldr	r1, [pc, #164]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	4313      	orrs	r3, r2
 800418a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800418c:	f7fd fc0c 	bl	80019a8 <HAL_GetTick>
 8004190:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004192:	e00a      	b.n	80041aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004194:	f7fd fc08 	bl	80019a8 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e03b      	b.n	8004222 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_RCC_ClockConfig+0x260>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d1ed      	bne.n	8004194 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c4:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4917      	ldr	r1, [pc, #92]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	490f      	ldr	r1, [pc, #60]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041f6:	f000 f825 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <HAL_RCC_ClockConfig+0x264>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	490c      	ldr	r1, [pc, #48]	; (8004238 <HAL_RCC_ClockConfig+0x26c>)
 8004208:	5ccb      	ldrb	r3, [r1, r3]
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	fa22 f303 	lsr.w	r3, r2, r3
 8004212:	4a0a      	ldr	r2, [pc, #40]	; (800423c <HAL_RCC_ClockConfig+0x270>)
 8004214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004216:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <HAL_RCC_ClockConfig+0x274>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fc ff58 	bl	80010d0 <HAL_InitTick>
 8004220:	4603      	mov	r3, r0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40022000 	.word	0x40022000
 8004230:	40021000 	.word	0x40021000
 8004234:	04c4b400 	.word	0x04c4b400
 8004238:	08009064 	.word	0x08009064
 800423c:	20000000 	.word	0x20000000
 8004240:	20000004 	.word	0x20000004

08004244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800424a:	4b2c      	ldr	r3, [pc, #176]	; (80042fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	2b04      	cmp	r3, #4
 8004254:	d102      	bne.n	800425c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004256:	4b2a      	ldr	r3, [pc, #168]	; (8004300 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	e047      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800425c:	4b27      	ldr	r3, [pc, #156]	; (80042fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b08      	cmp	r3, #8
 8004266:	d102      	bne.n	800426e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004268:	4b26      	ldr	r3, [pc, #152]	; (8004304 <HAL_RCC_GetSysClockFreq+0xc0>)
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	e03e      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800426e:	4b23      	ldr	r3, [pc, #140]	; (80042fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b0c      	cmp	r3, #12
 8004278:	d136      	bne.n	80042e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004284:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	091b      	lsrs	r3, r3, #4
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	3301      	adds	r3, #1
 8004290:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d10c      	bne.n	80042b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004298:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <HAL_RCC_GetSysClockFreq+0xc0>)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	4a16      	ldr	r2, [pc, #88]	; (80042fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80042a2:	68d2      	ldr	r2, [r2, #12]
 80042a4:	0a12      	lsrs	r2, r2, #8
 80042a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	617b      	str	r3, [r7, #20]
      break;
 80042b0:	e00c      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042b2:	4a13      	ldr	r2, [pc, #76]	; (8004300 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	4a10      	ldr	r2, [pc, #64]	; (80042fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80042bc:	68d2      	ldr	r2, [r2, #12]
 80042be:	0a12      	lsrs	r2, r2, #8
 80042c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042c4:	fb02 f303 	mul.w	r3, r2, r3
 80042c8:	617b      	str	r3, [r7, #20]
      break;
 80042ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	0e5b      	lsrs	r3, r3, #25
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	3301      	adds	r3, #1
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	e001      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042ec:	693b      	ldr	r3, [r7, #16]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000
 8004300:	00f42400 	.word	0x00f42400
 8004304:	016e3600 	.word	0x016e3600

08004308 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800430c:	4b03      	ldr	r3, [pc, #12]	; (800431c <HAL_RCC_GetHCLKFreq+0x14>)
 800430e:	681b      	ldr	r3, [r3, #0]
}
 8004310:	4618      	mov	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000000 	.word	0x20000000

08004320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004324:	f7ff fff0 	bl	8004308 <HAL_RCC_GetHCLKFreq>
 8004328:	4602      	mov	r2, r0
 800432a:	4b06      	ldr	r3, [pc, #24]	; (8004344 <HAL_RCC_GetPCLK1Freq+0x24>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	4904      	ldr	r1, [pc, #16]	; (8004348 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004336:	5ccb      	ldrb	r3, [r1, r3]
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40021000 	.word	0x40021000
 8004348:	08009074 	.word	0x08009074

0800434c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004350:	f7ff ffda 	bl	8004308 <HAL_RCC_GetHCLKFreq>
 8004354:	4602      	mov	r2, r0
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	0adb      	lsrs	r3, r3, #11
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	4904      	ldr	r1, [pc, #16]	; (8004374 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004362:	5ccb      	ldrb	r3, [r1, r3]
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40021000 	.word	0x40021000
 8004374:	08009074 	.word	0x08009074

08004378 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	220f      	movs	r2, #15
 8004386:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004388:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <HAL_RCC_GetClockConfig+0x5c>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 0203 	and.w	r2, r3, #3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004394:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <HAL_RCC_GetClockConfig+0x5c>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <HAL_RCC_GetClockConfig+0x5c>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_GetClockConfig+0x5c>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	08db      	lsrs	r3, r3, #3
 80043b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80043ba:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <HAL_RCC_GetClockConfig+0x60>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 020f 	and.w	r2, r3, #15
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	601a      	str	r2, [r3, #0]
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40022000 	.word	0x40022000

080043dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043e2:	4b1e      	ldr	r3, [pc, #120]	; (800445c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	3301      	adds	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d10c      	bne.n	800441a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004400:	4a17      	ldr	r2, [pc, #92]	; (8004460 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	4a14      	ldr	r2, [pc, #80]	; (800445c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800440a:	68d2      	ldr	r2, [r2, #12]
 800440c:	0a12      	lsrs	r2, r2, #8
 800440e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	617b      	str	r3, [r7, #20]
    break;
 8004418:	e00c      	b.n	8004434 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	4a0e      	ldr	r2, [pc, #56]	; (800445c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004424:	68d2      	ldr	r2, [r2, #12]
 8004426:	0a12      	lsrs	r2, r2, #8
 8004428:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800442c:	fb02 f303 	mul.w	r3, r2, r3
 8004430:	617b      	str	r3, [r7, #20]
    break;
 8004432:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004434:	4b09      	ldr	r3, [pc, #36]	; (800445c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	0e5b      	lsrs	r3, r3, #25
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	3301      	adds	r3, #1
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800444e:	687b      	ldr	r3, [r7, #4]
}
 8004450:	4618      	mov	r0, r3
 8004452:	371c      	adds	r7, #28
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	40021000 	.word	0x40021000
 8004460:	016e3600 	.word	0x016e3600
 8004464:	00f42400 	.word	0x00f42400

08004468 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004470:	2300      	movs	r3, #0
 8004472:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004474:	2300      	movs	r3, #0
 8004476:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8098 	beq.w	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004486:	2300      	movs	r3, #0
 8004488:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448a:	4b43      	ldr	r3, [pc, #268]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10d      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004496:	4b40      	ldr	r3, [pc, #256]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	4a3f      	ldr	r2, [pc, #252]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6593      	str	r3, [r2, #88]	; 0x58
 80044a2:	4b3d      	ldr	r3, [pc, #244]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ae:	2301      	movs	r3, #1
 80044b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044b2:	4b3a      	ldr	r3, [pc, #232]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a39      	ldr	r2, [pc, #228]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044be:	f7fd fa73 	bl	80019a8 <HAL_GetTick>
 80044c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044c4:	e009      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c6:	f7fd fa6f 	bl	80019a8 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d902      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	74fb      	strb	r3, [r7, #19]
        break;
 80044d8:	e005      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044da:	4b30      	ldr	r3, [pc, #192]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0ef      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d159      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044ec:	4b2a      	ldr	r3, [pc, #168]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01e      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	429a      	cmp	r2, r3
 8004506:	d019      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004508:	4b23      	ldr	r3, [pc, #140]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004512:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004514:	4b20      	ldr	r3, [pc, #128]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004524:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452a:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800452c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004534:	4a18      	ldr	r2, [pc, #96]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004546:	f7fd fa2f 	bl	80019a8 <HAL_GetTick>
 800454a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454c:	e00b      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454e:	f7fd fa2b 	bl	80019a8 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	f241 3288 	movw	r2, #5000	; 0x1388
 800455c:	4293      	cmp	r3, r2
 800455e:	d902      	bls.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	74fb      	strb	r3, [r7, #19]
            break;
 8004564:	e006      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ec      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004574:	7cfb      	ldrb	r3, [r7, #19]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10b      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004588:	4903      	ldr	r1, [pc, #12]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004590:	e008      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	74bb      	strb	r3, [r7, #18]
 8004596:	e005      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004598:	40021000 	.word	0x40021000
 800459c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a0:	7cfb      	ldrb	r3, [r7, #19]
 80045a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a4:	7c7b      	ldrb	r3, [r7, #17]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d105      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045aa:	4ba7      	ldr	r3, [pc, #668]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ae:	4aa6      	ldr	r2, [pc, #664]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045c2:	4ba1      	ldr	r3, [pc, #644]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	f023 0203 	bic.w	r2, r3, #3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	499d      	ldr	r1, [pc, #628]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045e4:	4b98      	ldr	r3, [pc, #608]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f023 020c 	bic.w	r2, r3, #12
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	4995      	ldr	r1, [pc, #596]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004606:	4b90      	ldr	r3, [pc, #576]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	498c      	ldr	r1, [pc, #560]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004628:	4b87      	ldr	r3, [pc, #540]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	4984      	ldr	r1, [pc, #528]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800464a:	4b7f      	ldr	r3, [pc, #508]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	497b      	ldr	r1, [pc, #492]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800466c:	4b76      	ldr	r3, [pc, #472]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	4973      	ldr	r1, [pc, #460]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800468e:	4b6e      	ldr	r3, [pc, #440]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	496a      	ldr	r1, [pc, #424]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046b0:	4b65      	ldr	r3, [pc, #404]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	4962      	ldr	r1, [pc, #392]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046d2:	4b5d      	ldr	r3, [pc, #372]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	4959      	ldr	r1, [pc, #356]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046f4:	4b54      	ldr	r3, [pc, #336]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046fa:	f023 0203 	bic.w	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	4951      	ldr	r1, [pc, #324]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004716:	4b4c      	ldr	r3, [pc, #304]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	4948      	ldr	r1, [pc, #288]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004734:	2b00      	cmp	r3, #0
 8004736:	d015      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004738:	4b43      	ldr	r3, [pc, #268]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	4940      	ldr	r1, [pc, #256]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004756:	d105      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004758:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4a3a      	ldr	r2, [pc, #232]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004762:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476c:	2b00      	cmp	r3, #0
 800476e:	d015      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004770:	4b35      	ldr	r3, [pc, #212]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477e:	4932      	ldr	r1, [pc, #200]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478e:	d105      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004790:	4b2d      	ldr	r3, [pc, #180]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a2c      	ldr	r2, [pc, #176]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800479a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d015      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047a8:	4b27      	ldr	r3, [pc, #156]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	4924      	ldr	r1, [pc, #144]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047c6:	d105      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c8:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d015      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ee:	4916      	ldr	r1, [pc, #88]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047fe:	d105      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004800:	4b11      	ldr	r3, [pc, #68]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a10      	ldr	r2, [pc, #64]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800480a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d019      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	4908      	ldr	r1, [pc, #32]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004836:	d109      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004838:	4b03      	ldr	r3, [pc, #12]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4a02      	ldr	r2, [pc, #8]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800483e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004842:	60d3      	str	r3, [r2, #12]
 8004844:	e002      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d015      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004858:	4b29      	ldr	r3, [pc, #164]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	4926      	ldr	r1, [pc, #152]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004876:	d105      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004878:	4b21      	ldr	r3, [pc, #132]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4a20      	ldr	r2, [pc, #128]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800487e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004882:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004890:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489e:	4918      	ldr	r1, [pc, #96]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ae:	d105      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048b0:	4b13      	ldr	r3, [pc, #76]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a12      	ldr	r2, [pc, #72]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d015      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80048c8:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d6:	490a      	ldr	r1, [pc, #40]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048e6:	d105      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	4a04      	ldr	r2, [pc, #16]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80048f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40021000 	.word	0x40021000

08004904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e049      	b.n	80049aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f841 	bl	80049b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f000 fd7a 	bl	800543c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d001      	beq.n	80049e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e054      	b.n	8004a8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a26      	ldr	r2, [pc, #152]	; (8004a98 <HAL_TIM_Base_Start_IT+0xd0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d022      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a0a:	d01d      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a22      	ldr	r2, [pc, #136]	; (8004a9c <HAL_TIM_Base_Start_IT+0xd4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d018      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a21      	ldr	r2, [pc, #132]	; (8004aa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d013      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a1f      	ldr	r2, [pc, #124]	; (8004aa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00e      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a1e      	ldr	r2, [pc, #120]	; (8004aa8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d009      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1c      	ldr	r2, [pc, #112]	; (8004aac <HAL_TIM_Base_Start_IT+0xe4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d004      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x80>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1b      	ldr	r2, [pc, #108]	; (8004ab0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d115      	bne.n	8004a74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	4b19      	ldr	r3, [pc, #100]	; (8004ab4 <HAL_TIM_Base_Start_IT+0xec>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b06      	cmp	r3, #6
 8004a58:	d015      	beq.n	8004a86 <HAL_TIM_Base_Start_IT+0xbe>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a60:	d011      	beq.n	8004a86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0201 	orr.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a72:	e008      	b.n	8004a86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	e000      	b.n	8004a88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40000400 	.word	0x40000400
 8004aa0:	40000800 	.word	0x40000800
 8004aa4:	40000c00 	.word	0x40000c00
 8004aa8:	40013400 	.word	0x40013400
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40015000 	.word	0x40015000
 8004ab4:	00010007 	.word	0x00010007

08004ab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e049      	b.n	8004b5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc fcec 	bl	80014bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3304      	adds	r3, #4
 8004af4:	4619      	mov	r1, r3
 8004af6:	4610      	mov	r0, r2
 8004af8:	f000 fca0 	bl	800543c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_TIM_PWM_Start+0x24>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	e03c      	b.n	8004c06 <HAL_TIM_PWM_Start+0x9e>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d109      	bne.n	8004ba6 <HAL_TIM_PWM_Start+0x3e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	bf14      	ite	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	2300      	moveq	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	e02f      	b.n	8004c06 <HAL_TIM_PWM_Start+0x9e>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d109      	bne.n	8004bc0 <HAL_TIM_PWM_Start+0x58>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	bf14      	ite	ne
 8004bb8:	2301      	movne	r3, #1
 8004bba:	2300      	moveq	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	e022      	b.n	8004c06 <HAL_TIM_PWM_Start+0x9e>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b0c      	cmp	r3, #12
 8004bc4:	d109      	bne.n	8004bda <HAL_TIM_PWM_Start+0x72>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	bf14      	ite	ne
 8004bd2:	2301      	movne	r3, #1
 8004bd4:	2300      	moveq	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	e015      	b.n	8004c06 <HAL_TIM_PWM_Start+0x9e>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d109      	bne.n	8004bf4 <HAL_TIM_PWM_Start+0x8c>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	bf14      	ite	ne
 8004bec:	2301      	movne	r3, #1
 8004bee:	2300      	moveq	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	e008      	b.n	8004c06 <HAL_TIM_PWM_Start+0x9e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e0a6      	b.n	8004d5c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Start+0xb6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c1c:	e023      	b.n	8004c66 <HAL_TIM_PWM_Start+0xfe>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_PWM_Start+0xc6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c2c:	e01b      	b.n	8004c66 <HAL_TIM_PWM_Start+0xfe>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d104      	bne.n	8004c3e <HAL_TIM_PWM_Start+0xd6>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c3c:	e013      	b.n	8004c66 <HAL_TIM_PWM_Start+0xfe>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b0c      	cmp	r3, #12
 8004c42:	d104      	bne.n	8004c4e <HAL_TIM_PWM_Start+0xe6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c4c:	e00b      	b.n	8004c66 <HAL_TIM_PWM_Start+0xfe>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d104      	bne.n	8004c5e <HAL_TIM_PWM_Start+0xf6>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c5c:	e003      	b.n	8004c66 <HAL_TIM_PWM_Start+0xfe>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	6839      	ldr	r1, [r7, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f001 f82a 	bl	8005cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a3a      	ldr	r2, [pc, #232]	; (8004d64 <HAL_TIM_PWM_Start+0x1fc>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d018      	beq.n	8004cb0 <HAL_TIM_PWM_Start+0x148>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a39      	ldr	r2, [pc, #228]	; (8004d68 <HAL_TIM_PWM_Start+0x200>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <HAL_TIM_PWM_Start+0x148>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a37      	ldr	r2, [pc, #220]	; (8004d6c <HAL_TIM_PWM_Start+0x204>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <HAL_TIM_PWM_Start+0x148>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a36      	ldr	r2, [pc, #216]	; (8004d70 <HAL_TIM_PWM_Start+0x208>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_TIM_PWM_Start+0x148>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a34      	ldr	r2, [pc, #208]	; (8004d74 <HAL_TIM_PWM_Start+0x20c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_TIM_PWM_Start+0x148>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a33      	ldr	r2, [pc, #204]	; (8004d78 <HAL_TIM_PWM_Start+0x210>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIM_PWM_Start+0x14c>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x14e>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a25      	ldr	r2, [pc, #148]	; (8004d64 <HAL_TIM_PWM_Start+0x1fc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d022      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x1b2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cdc:	d01d      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x1b2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a26      	ldr	r2, [pc, #152]	; (8004d7c <HAL_TIM_PWM_Start+0x214>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d018      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x1b2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a24      	ldr	r2, [pc, #144]	; (8004d80 <HAL_TIM_PWM_Start+0x218>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x1b2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a23      	ldr	r2, [pc, #140]	; (8004d84 <HAL_TIM_PWM_Start+0x21c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x1b2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a19      	ldr	r2, [pc, #100]	; (8004d68 <HAL_TIM_PWM_Start+0x200>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x1b2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <HAL_TIM_PWM_Start+0x204>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x1b2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a18      	ldr	r2, [pc, #96]	; (8004d78 <HAL_TIM_PWM_Start+0x210>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d115      	bne.n	8004d46 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <HAL_TIM_PWM_Start+0x220>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b06      	cmp	r3, #6
 8004d2a:	d015      	beq.n	8004d58 <HAL_TIM_PWM_Start+0x1f0>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d32:	d011      	beq.n	8004d58 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d44:	e008      	b.n	8004d58 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0201 	orr.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e000      	b.n	8004d5a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	40013400 	.word	0x40013400
 8004d6c:	40014000 	.word	0x40014000
 8004d70:	40014400 	.word	0x40014400
 8004d74:	40014800 	.word	0x40014800
 8004d78:	40015000 	.word	0x40015000
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800
 8004d84:	40000c00 	.word	0x40000c00
 8004d88:	00010007 	.word	0x00010007

08004d8c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	6839      	ldr	r1, [r7, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 ff92 	bl	8005cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a40      	ldr	r2, [pc, #256]	; (8004eac <HAL_TIM_PWM_Stop+0x120>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d018      	beq.n	8004de0 <HAL_TIM_PWM_Stop+0x54>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a3f      	ldr	r2, [pc, #252]	; (8004eb0 <HAL_TIM_PWM_Stop+0x124>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d013      	beq.n	8004de0 <HAL_TIM_PWM_Stop+0x54>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a3d      	ldr	r2, [pc, #244]	; (8004eb4 <HAL_TIM_PWM_Stop+0x128>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00e      	beq.n	8004de0 <HAL_TIM_PWM_Stop+0x54>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a3c      	ldr	r2, [pc, #240]	; (8004eb8 <HAL_TIM_PWM_Stop+0x12c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d009      	beq.n	8004de0 <HAL_TIM_PWM_Stop+0x54>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a3a      	ldr	r2, [pc, #232]	; (8004ebc <HAL_TIM_PWM_Stop+0x130>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d004      	beq.n	8004de0 <HAL_TIM_PWM_Stop+0x54>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a39      	ldr	r2, [pc, #228]	; (8004ec0 <HAL_TIM_PWM_Stop+0x134>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d101      	bne.n	8004de4 <HAL_TIM_PWM_Stop+0x58>
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <HAL_TIM_PWM_Stop+0x5a>
 8004de4:	2300      	movs	r3, #0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d017      	beq.n	8004e1a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10f      	bne.n	8004e1a <HAL_TIM_PWM_Stop+0x8e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6a1a      	ldr	r2, [r3, #32]
 8004e00:	f244 4344 	movw	r3, #17476	; 0x4444
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d107      	bne.n	8004e1a <HAL_TIM_PWM_Stop+0x8e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6a1a      	ldr	r2, [r3, #32]
 8004e20:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e24:	4013      	ands	r3, r2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10f      	bne.n	8004e4a <HAL_TIM_PWM_Stop+0xbe>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
 8004e30:	f244 4344 	movw	r3, #17476	; 0x4444
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d107      	bne.n	8004e4a <HAL_TIM_PWM_Stop+0xbe>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0201 	bic.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_PWM_Stop+0xce>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e58:	e023      	b.n	8004ea2 <HAL_TIM_PWM_Stop+0x116>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_PWM_Stop+0xde>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e68:	e01b      	b.n	8004ea2 <HAL_TIM_PWM_Stop+0x116>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_PWM_Stop+0xee>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e78:	e013      	b.n	8004ea2 <HAL_TIM_PWM_Stop+0x116>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b0c      	cmp	r3, #12
 8004e7e:	d104      	bne.n	8004e8a <HAL_TIM_PWM_Stop+0xfe>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e88:	e00b      	b.n	8004ea2 <HAL_TIM_PWM_Stop+0x116>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d104      	bne.n	8004e9a <HAL_TIM_PWM_Stop+0x10e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e98:	e003      	b.n	8004ea2 <HAL_TIM_PWM_Stop+0x116>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40013400 	.word	0x40013400
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	40014400 	.word	0x40014400
 8004ebc:	40014800 	.word	0x40014800
 8004ec0:	40015000 	.word	0x40015000

08004ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d122      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d11b      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0202 	mvn.w	r2, #2
 8004ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fa7a 	bl	8005400 <HAL_TIM_IC_CaptureCallback>
 8004f0c:	e005      	b.n	8004f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fa6c 	bl	80053ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fa7d 	bl	8005414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d122      	bne.n	8004f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d11b      	bne.n	8004f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0204 	mvn.w	r2, #4
 8004f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa50 	bl	8005400 <HAL_TIM_IC_CaptureCallback>
 8004f60:	e005      	b.n	8004f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fa42 	bl	80053ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fa53 	bl	8005414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d122      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d11b      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0208 	mvn.w	r2, #8
 8004f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fa26 	bl	8005400 <HAL_TIM_IC_CaptureCallback>
 8004fb4:	e005      	b.n	8004fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fa18 	bl	80053ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fa29 	bl	8005414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d122      	bne.n	800501c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	2b10      	cmp	r3, #16
 8004fe2:	d11b      	bne.n	800501c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0210 	mvn.w	r2, #16
 8004fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2208      	movs	r2, #8
 8004ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f9fc 	bl	8005400 <HAL_TIM_IC_CaptureCallback>
 8005008:	e005      	b.n	8005016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f9ee 	bl	80053ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f9ff 	bl	8005414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b01      	cmp	r3, #1
 8005028:	d10e      	bne.n	8005048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b01      	cmp	r3, #1
 8005036:	d107      	bne.n	8005048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0201 	mvn.w	r2, #1
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fb fe36 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005052:	2b80      	cmp	r3, #128	; 0x80
 8005054:	d10e      	bne.n	8005074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005060:	2b80      	cmp	r3, #128	; 0x80
 8005062:	d107      	bne.n	8005074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f001 f970 	bl	8006354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005082:	d10e      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508e:	2b80      	cmp	r3, #128	; 0x80
 8005090:	d107      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800509a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f001 f963 	bl	8006368 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	d10e      	bne.n	80050ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d107      	bne.n	80050ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f9ad 	bl	8005428 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d10e      	bne.n	80050fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d107      	bne.n	80050fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f06f 0220 	mvn.w	r2, #32
 80050f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f001 f923 	bl	8006340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005108:	d10f      	bne.n	800512a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005118:	d107      	bne.n	800512a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f001 f929 	bl	800637c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005138:	d10f      	bne.n	800515a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005148:	d107      	bne.n	800515a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f001 f91b 	bl	8006390 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005168:	d10f      	bne.n	800518a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005178:	d107      	bne.n	800518a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f001 f90d 	bl	80063a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005194:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005198:	d10f      	bne.n	80051ba <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051a8:	d107      	bne.n	80051ba <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80051b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f001 f8ff 	bl	80063b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051de:	2302      	movs	r3, #2
 80051e0:	e0ff      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b14      	cmp	r3, #20
 80051ee:	f200 80f0 	bhi.w	80053d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051f2:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	0800524d 	.word	0x0800524d
 80051fc:	080053d3 	.word	0x080053d3
 8005200:	080053d3 	.word	0x080053d3
 8005204:	080053d3 	.word	0x080053d3
 8005208:	0800528d 	.word	0x0800528d
 800520c:	080053d3 	.word	0x080053d3
 8005210:	080053d3 	.word	0x080053d3
 8005214:	080053d3 	.word	0x080053d3
 8005218:	080052cf 	.word	0x080052cf
 800521c:	080053d3 	.word	0x080053d3
 8005220:	080053d3 	.word	0x080053d3
 8005224:	080053d3 	.word	0x080053d3
 8005228:	0800530f 	.word	0x0800530f
 800522c:	080053d3 	.word	0x080053d3
 8005230:	080053d3 	.word	0x080053d3
 8005234:	080053d3 	.word	0x080053d3
 8005238:	08005351 	.word	0x08005351
 800523c:	080053d3 	.word	0x080053d3
 8005240:	080053d3 	.word	0x080053d3
 8005244:	080053d3 	.word	0x080053d3
 8005248:	08005391 	.word	0x08005391
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	4618      	mov	r0, r3
 8005254:	f000 f99a 	bl	800558c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0208 	orr.w	r2, r2, #8
 8005266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0204 	bic.w	r2, r2, #4
 8005276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6999      	ldr	r1, [r3, #24]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	619a      	str	r2, [r3, #24]
      break;
 800528a:	e0a5      	b.n	80053d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68b9      	ldr	r1, [r7, #8]
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fa14 	bl	80056c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6999      	ldr	r1, [r3, #24]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	021a      	lsls	r2, r3, #8
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	619a      	str	r2, [r3, #24]
      break;
 80052cc:	e084      	b.n	80053d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fa87 	bl	80057e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0208 	orr.w	r2, r2, #8
 80052e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0204 	bic.w	r2, r2, #4
 80052f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69d9      	ldr	r1, [r3, #28]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	61da      	str	r2, [r3, #28]
      break;
 800530c:	e064      	b.n	80053d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	4618      	mov	r0, r3
 8005316:	f000 faf9 	bl	800590c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69d9      	ldr	r1, [r3, #28]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	021a      	lsls	r2, r3, #8
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	61da      	str	r2, [r3, #28]
      break;
 800534e:	e043      	b.n	80053d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fb6c 	bl	8005a34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0208 	orr.w	r2, r2, #8
 800536a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0204 	bic.w	r2, r2, #4
 800537a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800538e:	e023      	b.n	80053d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fbb6 	bl	8005b08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	021a      	lsls	r2, r3, #8
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80053d0:	e002      	b.n	80053d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	75fb      	strb	r3, [r7, #23]
      break;
 80053d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop

080053ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a46      	ldr	r2, [pc, #280]	; (8005568 <TIM_Base_SetConfig+0x12c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d017      	beq.n	8005484 <TIM_Base_SetConfig+0x48>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d013      	beq.n	8005484 <TIM_Base_SetConfig+0x48>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a43      	ldr	r2, [pc, #268]	; (800556c <TIM_Base_SetConfig+0x130>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00f      	beq.n	8005484 <TIM_Base_SetConfig+0x48>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a42      	ldr	r2, [pc, #264]	; (8005570 <TIM_Base_SetConfig+0x134>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <TIM_Base_SetConfig+0x48>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a41      	ldr	r2, [pc, #260]	; (8005574 <TIM_Base_SetConfig+0x138>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d007      	beq.n	8005484 <TIM_Base_SetConfig+0x48>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a40      	ldr	r2, [pc, #256]	; (8005578 <TIM_Base_SetConfig+0x13c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_Base_SetConfig+0x48>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a3f      	ldr	r2, [pc, #252]	; (800557c <TIM_Base_SetConfig+0x140>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d108      	bne.n	8005496 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a33      	ldr	r2, [pc, #204]	; (8005568 <TIM_Base_SetConfig+0x12c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d023      	beq.n	80054e6 <TIM_Base_SetConfig+0xaa>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d01f      	beq.n	80054e6 <TIM_Base_SetConfig+0xaa>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a30      	ldr	r2, [pc, #192]	; (800556c <TIM_Base_SetConfig+0x130>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d01b      	beq.n	80054e6 <TIM_Base_SetConfig+0xaa>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2f      	ldr	r2, [pc, #188]	; (8005570 <TIM_Base_SetConfig+0x134>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d017      	beq.n	80054e6 <TIM_Base_SetConfig+0xaa>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2e      	ldr	r2, [pc, #184]	; (8005574 <TIM_Base_SetConfig+0x138>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <TIM_Base_SetConfig+0xaa>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2d      	ldr	r2, [pc, #180]	; (8005578 <TIM_Base_SetConfig+0x13c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00f      	beq.n	80054e6 <TIM_Base_SetConfig+0xaa>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <TIM_Base_SetConfig+0x144>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <TIM_Base_SetConfig+0xaa>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a2c      	ldr	r2, [pc, #176]	; (8005584 <TIM_Base_SetConfig+0x148>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <TIM_Base_SetConfig+0xaa>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a2b      	ldr	r2, [pc, #172]	; (8005588 <TIM_Base_SetConfig+0x14c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_Base_SetConfig+0xaa>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a26      	ldr	r2, [pc, #152]	; (800557c <TIM_Base_SetConfig+0x140>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d108      	bne.n	80054f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a12      	ldr	r2, [pc, #72]	; (8005568 <TIM_Base_SetConfig+0x12c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <TIM_Base_SetConfig+0x110>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a14      	ldr	r2, [pc, #80]	; (8005578 <TIM_Base_SetConfig+0x13c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00f      	beq.n	800554c <TIM_Base_SetConfig+0x110>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a14      	ldr	r2, [pc, #80]	; (8005580 <TIM_Base_SetConfig+0x144>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00b      	beq.n	800554c <TIM_Base_SetConfig+0x110>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a13      	ldr	r2, [pc, #76]	; (8005584 <TIM_Base_SetConfig+0x148>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d007      	beq.n	800554c <TIM_Base_SetConfig+0x110>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a12      	ldr	r2, [pc, #72]	; (8005588 <TIM_Base_SetConfig+0x14c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <TIM_Base_SetConfig+0x110>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a0d      	ldr	r2, [pc, #52]	; (800557c <TIM_Base_SetConfig+0x140>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d103      	bne.n	8005554 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	615a      	str	r2, [r3, #20]
}
 800555a:	bf00      	nop
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40012c00 	.word	0x40012c00
 800556c:	40000400 	.word	0x40000400
 8005570:	40000800 	.word	0x40000800
 8005574:	40000c00 	.word	0x40000c00
 8005578:	40013400 	.word	0x40013400
 800557c:	40015000 	.word	0x40015000
 8005580:	40014000 	.word	0x40014000
 8005584:	40014400 	.word	0x40014400
 8005588:	40014800 	.word	0x40014800

0800558c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f023 0302 	bic.w	r3, r3, #2
 80055d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a30      	ldr	r2, [pc, #192]	; (80056a8 <TIM_OC1_SetConfig+0x11c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d013      	beq.n	8005614 <TIM_OC1_SetConfig+0x88>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a2f      	ldr	r2, [pc, #188]	; (80056ac <TIM_OC1_SetConfig+0x120>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00f      	beq.n	8005614 <TIM_OC1_SetConfig+0x88>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a2e      	ldr	r2, [pc, #184]	; (80056b0 <TIM_OC1_SetConfig+0x124>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00b      	beq.n	8005614 <TIM_OC1_SetConfig+0x88>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a2d      	ldr	r2, [pc, #180]	; (80056b4 <TIM_OC1_SetConfig+0x128>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d007      	beq.n	8005614 <TIM_OC1_SetConfig+0x88>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a2c      	ldr	r2, [pc, #176]	; (80056b8 <TIM_OC1_SetConfig+0x12c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_OC1_SetConfig+0x88>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a2b      	ldr	r2, [pc, #172]	; (80056bc <TIM_OC1_SetConfig+0x130>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d10c      	bne.n	800562e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0308 	bic.w	r3, r3, #8
 800561a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f023 0304 	bic.w	r3, r3, #4
 800562c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a1d      	ldr	r2, [pc, #116]	; (80056a8 <TIM_OC1_SetConfig+0x11c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <TIM_OC1_SetConfig+0xd2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a1c      	ldr	r2, [pc, #112]	; (80056ac <TIM_OC1_SetConfig+0x120>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00f      	beq.n	800565e <TIM_OC1_SetConfig+0xd2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a1b      	ldr	r2, [pc, #108]	; (80056b0 <TIM_OC1_SetConfig+0x124>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00b      	beq.n	800565e <TIM_OC1_SetConfig+0xd2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a1a      	ldr	r2, [pc, #104]	; (80056b4 <TIM_OC1_SetConfig+0x128>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d007      	beq.n	800565e <TIM_OC1_SetConfig+0xd2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a19      	ldr	r2, [pc, #100]	; (80056b8 <TIM_OC1_SetConfig+0x12c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d003      	beq.n	800565e <TIM_OC1_SetConfig+0xd2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a18      	ldr	r2, [pc, #96]	; (80056bc <TIM_OC1_SetConfig+0x130>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d111      	bne.n	8005682 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800566c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	621a      	str	r2, [r3, #32]
}
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	40012c00 	.word	0x40012c00
 80056ac:	40013400 	.word	0x40013400
 80056b0:	40014000 	.word	0x40014000
 80056b4:	40014400 	.word	0x40014400
 80056b8:	40014800 	.word	0x40014800
 80056bc:	40015000 	.word	0x40015000

080056c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f023 0210 	bic.w	r2, r3, #16
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f023 0320 	bic.w	r3, r3, #32
 800570e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a2c      	ldr	r2, [pc, #176]	; (80057d0 <TIM_OC2_SetConfig+0x110>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_OC2_SetConfig+0x74>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a2b      	ldr	r2, [pc, #172]	; (80057d4 <TIM_OC2_SetConfig+0x114>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_OC2_SetConfig+0x74>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a2a      	ldr	r2, [pc, #168]	; (80057d8 <TIM_OC2_SetConfig+0x118>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d10d      	bne.n	8005750 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800574e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a1f      	ldr	r2, [pc, #124]	; (80057d0 <TIM_OC2_SetConfig+0x110>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <TIM_OC2_SetConfig+0xc0>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a1e      	ldr	r2, [pc, #120]	; (80057d4 <TIM_OC2_SetConfig+0x114>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00f      	beq.n	8005780 <TIM_OC2_SetConfig+0xc0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a1e      	ldr	r2, [pc, #120]	; (80057dc <TIM_OC2_SetConfig+0x11c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00b      	beq.n	8005780 <TIM_OC2_SetConfig+0xc0>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a1d      	ldr	r2, [pc, #116]	; (80057e0 <TIM_OC2_SetConfig+0x120>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d007      	beq.n	8005780 <TIM_OC2_SetConfig+0xc0>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a1c      	ldr	r2, [pc, #112]	; (80057e4 <TIM_OC2_SetConfig+0x124>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_OC2_SetConfig+0xc0>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a17      	ldr	r2, [pc, #92]	; (80057d8 <TIM_OC2_SetConfig+0x118>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d113      	bne.n	80057a8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800578e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40012c00 	.word	0x40012c00
 80057d4:	40013400 	.word	0x40013400
 80057d8:	40015000 	.word	0x40015000
 80057dc:	40014000 	.word	0x40014000
 80057e0:	40014400 	.word	0x40014400
 80057e4:	40014800 	.word	0x40014800

080057e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a2b      	ldr	r2, [pc, #172]	; (80058f4 <TIM_OC3_SetConfig+0x10c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d007      	beq.n	800585a <TIM_OC3_SetConfig+0x72>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2a      	ldr	r2, [pc, #168]	; (80058f8 <TIM_OC3_SetConfig+0x110>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d003      	beq.n	800585a <TIM_OC3_SetConfig+0x72>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a29      	ldr	r2, [pc, #164]	; (80058fc <TIM_OC3_SetConfig+0x114>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d10d      	bne.n	8005876 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005860:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a1e      	ldr	r2, [pc, #120]	; (80058f4 <TIM_OC3_SetConfig+0x10c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d013      	beq.n	80058a6 <TIM_OC3_SetConfig+0xbe>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a1d      	ldr	r2, [pc, #116]	; (80058f8 <TIM_OC3_SetConfig+0x110>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00f      	beq.n	80058a6 <TIM_OC3_SetConfig+0xbe>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a1d      	ldr	r2, [pc, #116]	; (8005900 <TIM_OC3_SetConfig+0x118>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00b      	beq.n	80058a6 <TIM_OC3_SetConfig+0xbe>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a1c      	ldr	r2, [pc, #112]	; (8005904 <TIM_OC3_SetConfig+0x11c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d007      	beq.n	80058a6 <TIM_OC3_SetConfig+0xbe>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <TIM_OC3_SetConfig+0x120>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <TIM_OC3_SetConfig+0xbe>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a16      	ldr	r2, [pc, #88]	; (80058fc <TIM_OC3_SetConfig+0x114>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d113      	bne.n	80058ce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	621a      	str	r2, [r3, #32]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	40012c00 	.word	0x40012c00
 80058f8:	40013400 	.word	0x40013400
 80058fc:	40015000 	.word	0x40015000
 8005900:	40014000 	.word	0x40014000
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800

0800590c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800595a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	031b      	lsls	r3, r3, #12
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a2c      	ldr	r2, [pc, #176]	; (8005a1c <TIM_OC4_SetConfig+0x110>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d007      	beq.n	8005980 <TIM_OC4_SetConfig+0x74>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a2b      	ldr	r2, [pc, #172]	; (8005a20 <TIM_OC4_SetConfig+0x114>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d003      	beq.n	8005980 <TIM_OC4_SetConfig+0x74>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a2a      	ldr	r2, [pc, #168]	; (8005a24 <TIM_OC4_SetConfig+0x118>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d10d      	bne.n	800599c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	031b      	lsls	r3, r3, #12
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800599a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <TIM_OC4_SetConfig+0x110>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d013      	beq.n	80059cc <TIM_OC4_SetConfig+0xc0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a1e      	ldr	r2, [pc, #120]	; (8005a20 <TIM_OC4_SetConfig+0x114>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00f      	beq.n	80059cc <TIM_OC4_SetConfig+0xc0>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a1e      	ldr	r2, [pc, #120]	; (8005a28 <TIM_OC4_SetConfig+0x11c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00b      	beq.n	80059cc <TIM_OC4_SetConfig+0xc0>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <TIM_OC4_SetConfig+0x120>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d007      	beq.n	80059cc <TIM_OC4_SetConfig+0xc0>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a1c      	ldr	r2, [pc, #112]	; (8005a30 <TIM_OC4_SetConfig+0x124>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_OC4_SetConfig+0xc0>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a17      	ldr	r2, [pc, #92]	; (8005a24 <TIM_OC4_SetConfig+0x118>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d113      	bne.n	80059f4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059d2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059da:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	019b      	lsls	r3, r3, #6
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	019b      	lsls	r3, r3, #6
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40013400 	.word	0x40013400
 8005a24:	40015000 	.word	0x40015000
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40014400 	.word	0x40014400
 8005a30:	40014800 	.word	0x40014800

08005a34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	041b      	lsls	r3, r3, #16
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a19      	ldr	r2, [pc, #100]	; (8005af0 <TIM_OC5_SetConfig+0xbc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <TIM_OC5_SetConfig+0x82>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a18      	ldr	r2, [pc, #96]	; (8005af4 <TIM_OC5_SetConfig+0xc0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00f      	beq.n	8005ab6 <TIM_OC5_SetConfig+0x82>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <TIM_OC5_SetConfig+0xc4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00b      	beq.n	8005ab6 <TIM_OC5_SetConfig+0x82>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a16      	ldr	r2, [pc, #88]	; (8005afc <TIM_OC5_SetConfig+0xc8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <TIM_OC5_SetConfig+0x82>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a15      	ldr	r2, [pc, #84]	; (8005b00 <TIM_OC5_SetConfig+0xcc>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d003      	beq.n	8005ab6 <TIM_OC5_SetConfig+0x82>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a14      	ldr	r2, [pc, #80]	; (8005b04 <TIM_OC5_SetConfig+0xd0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d109      	bne.n	8005aca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005abc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	621a      	str	r2, [r3, #32]
}
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	40012c00 	.word	0x40012c00
 8005af4:	40013400 	.word	0x40013400
 8005af8:	40014000 	.word	0x40014000
 8005afc:	40014400 	.word	0x40014400
 8005b00:	40014800 	.word	0x40014800
 8005b04:	40015000 	.word	0x40015000

08005b08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	051b      	lsls	r3, r3, #20
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a1a      	ldr	r2, [pc, #104]	; (8005bc8 <TIM_OC6_SetConfig+0xc0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d013      	beq.n	8005b8c <TIM_OC6_SetConfig+0x84>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <TIM_OC6_SetConfig+0xc4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00f      	beq.n	8005b8c <TIM_OC6_SetConfig+0x84>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a18      	ldr	r2, [pc, #96]	; (8005bd0 <TIM_OC6_SetConfig+0xc8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <TIM_OC6_SetConfig+0x84>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <TIM_OC6_SetConfig+0xcc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_OC6_SetConfig+0x84>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a16      	ldr	r2, [pc, #88]	; (8005bd8 <TIM_OC6_SetConfig+0xd0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_OC6_SetConfig+0x84>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <TIM_OC6_SetConfig+0xd4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d109      	bne.n	8005ba0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	029b      	lsls	r3, r3, #10
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40013400 	.word	0x40013400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40014400 	.word	0x40014400
 8005bd8:	40014800 	.word	0x40014800
 8005bdc:	40015000 	.word	0x40015000

08005be0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f023 0201 	bic.w	r2, r3, #1
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4a28      	ldr	r2, [pc, #160]	; (8005cac <TIM_TI1_SetConfig+0xcc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d01b      	beq.n	8005c46 <TIM_TI1_SetConfig+0x66>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c14:	d017      	beq.n	8005c46 <TIM_TI1_SetConfig+0x66>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4a25      	ldr	r2, [pc, #148]	; (8005cb0 <TIM_TI1_SetConfig+0xd0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <TIM_TI1_SetConfig+0x66>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4a24      	ldr	r2, [pc, #144]	; (8005cb4 <TIM_TI1_SetConfig+0xd4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00f      	beq.n	8005c46 <TIM_TI1_SetConfig+0x66>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4a23      	ldr	r2, [pc, #140]	; (8005cb8 <TIM_TI1_SetConfig+0xd8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00b      	beq.n	8005c46 <TIM_TI1_SetConfig+0x66>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4a22      	ldr	r2, [pc, #136]	; (8005cbc <TIM_TI1_SetConfig+0xdc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d007      	beq.n	8005c46 <TIM_TI1_SetConfig+0x66>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4a21      	ldr	r2, [pc, #132]	; (8005cc0 <TIM_TI1_SetConfig+0xe0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d003      	beq.n	8005c46 <TIM_TI1_SetConfig+0x66>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4a20      	ldr	r2, [pc, #128]	; (8005cc4 <TIM_TI1_SetConfig+0xe4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d101      	bne.n	8005c4a <TIM_TI1_SetConfig+0x6a>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <TIM_TI1_SetConfig+0x6c>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d008      	beq.n	8005c62 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e003      	b.n	8005c6a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f043 0301 	orr.w	r3, r3, #1
 8005c68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f023 030a 	bic.w	r3, r3, #10
 8005c84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f003 030a 	and.w	r3, r3, #10
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40000400 	.word	0x40000400
 8005cb4:	40000800 	.word	0x40000800
 8005cb8:	40000c00 	.word	0x40000c00
 8005cbc:	40013400 	.word	0x40013400
 8005cc0:	40014000 	.word	0x40014000
 8005cc4:	40015000 	.word	0x40015000

08005cc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	2201      	movs	r2, #1
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1a      	ldr	r2, [r3, #32]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	401a      	ands	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005d00:	431a      	orrs	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	621a      	str	r2, [r3, #32]
}
 8005d06:	bf00      	nop
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b08a      	sub	sp, #40	; 0x28
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e0a0      	b.n	8005e68 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7fb fbde 	bl	80014fc <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f7ff fb72 	bl	800543c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2203      	movs	r2, #3
 8005d66:	f7ff ff3b 	bl	8005be0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699a      	ldr	r2, [r3, #24]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 020c 	bic.w	r2, r2, #12
 8005d78:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6999      	ldr	r1, [r3, #24]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d9a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6812      	ldr	r2, [r2, #0]
 8005da6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dbe:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dce:	f023 0307 	bic.w	r3, r3, #7
 8005dd2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0204 	orr.w	r2, r2, #4
 8005de2:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005de4:	2300      	movs	r3, #0
 8005de6:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005de8:	2300      	movs	r3, #0
 8005dea:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005dec:	2370      	movs	r3, #112	; 0x70
 8005dee:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005df0:	2300      	movs	r3, #0
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f107 020c 	add.w	r2, r7, #12
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fc57 	bl	80056c0 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6812      	ldr	r2, [r2, #0]
 8005e1c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e24:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8005e34:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3728      	adds	r7, #40	; 0x28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d109      	bne.n	8005e94 <HAL_TIMEx_PWMN_Start+0x24>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	bf14      	ite	ne
 8005e8c:	2301      	movne	r3, #1
 8005e8e:	2300      	moveq	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e022      	b.n	8005eda <HAL_TIMEx_PWMN_Start+0x6a>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d109      	bne.n	8005eae <HAL_TIMEx_PWMN_Start+0x3e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	bf14      	ite	ne
 8005ea6:	2301      	movne	r3, #1
 8005ea8:	2300      	moveq	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	e015      	b.n	8005eda <HAL_TIMEx_PWMN_Start+0x6a>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d109      	bne.n	8005ec8 <HAL_TIMEx_PWMN_Start+0x58>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	bf14      	ite	ne
 8005ec0:	2301      	movne	r3, #1
 8005ec2:	2300      	moveq	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	e008      	b.n	8005eda <HAL_TIMEx_PWMN_Start+0x6a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	bf14      	ite	ne
 8005ed4:	2301      	movne	r3, #1
 8005ed6:	2300      	moveq	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e073      	b.n	8005fca <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <HAL_TIMEx_PWMN_Start+0x82>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ef0:	e013      	b.n	8005f1a <HAL_TIMEx_PWMN_Start+0xaa>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d104      	bne.n	8005f02 <HAL_TIMEx_PWMN_Start+0x92>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f00:	e00b      	b.n	8005f1a <HAL_TIMEx_PWMN_Start+0xaa>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d104      	bne.n	8005f12 <HAL_TIMEx_PWMN_Start+0xa2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f10:	e003      	b.n	8005f1a <HAL_TIMEx_PWMN_Start+0xaa>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2204      	movs	r2, #4
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fa52 	bl	80063cc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <HAL_TIMEx_PWMN_Start+0x164>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d022      	beq.n	8005f88 <HAL_TIMEx_PWMN_Start+0x118>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d01d      	beq.n	8005f88 <HAL_TIMEx_PWMN_Start+0x118>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a21      	ldr	r2, [pc, #132]	; (8005fd8 <HAL_TIMEx_PWMN_Start+0x168>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d018      	beq.n	8005f88 <HAL_TIMEx_PWMN_Start+0x118>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <HAL_TIMEx_PWMN_Start+0x16c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d013      	beq.n	8005f88 <HAL_TIMEx_PWMN_Start+0x118>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <HAL_TIMEx_PWMN_Start+0x170>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00e      	beq.n	8005f88 <HAL_TIMEx_PWMN_Start+0x118>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a1d      	ldr	r2, [pc, #116]	; (8005fe4 <HAL_TIMEx_PWMN_Start+0x174>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d009      	beq.n	8005f88 <HAL_TIMEx_PWMN_Start+0x118>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1b      	ldr	r2, [pc, #108]	; (8005fe8 <HAL_TIMEx_PWMN_Start+0x178>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d004      	beq.n	8005f88 <HAL_TIMEx_PWMN_Start+0x118>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <HAL_TIMEx_PWMN_Start+0x17c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d115      	bne.n	8005fb4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	4b18      	ldr	r3, [pc, #96]	; (8005ff0 <HAL_TIMEx_PWMN_Start+0x180>)
 8005f90:	4013      	ands	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b06      	cmp	r3, #6
 8005f98:	d015      	beq.n	8005fc6 <HAL_TIMEx_PWMN_Start+0x156>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa0:	d011      	beq.n	8005fc6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f042 0201 	orr.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb2:	e008      	b.n	8005fc6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	e000      	b.n	8005fc8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	40012c00 	.word	0x40012c00
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40000800 	.word	0x40000800
 8005fe0:	40000c00 	.word	0x40000c00
 8005fe4:	40013400 	.word	0x40013400
 8005fe8:	40014000 	.word	0x40014000
 8005fec:	40015000 	.word	0x40015000
 8005ff0:	00010007 	.word	0x00010007

08005ff4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2200      	movs	r2, #0
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f000 f9e0 	bl	80063cc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a1a      	ldr	r2, [r3, #32]
 8006012:	f241 1311 	movw	r3, #4369	; 0x1111
 8006016:	4013      	ands	r3, r2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10f      	bne.n	800603c <HAL_TIMEx_PWMN_Stop+0x48>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6a1a      	ldr	r2, [r3, #32]
 8006022:	f244 4344 	movw	r3, #17476	; 0x4444
 8006026:	4013      	ands	r3, r2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d107      	bne.n	800603c <HAL_TIMEx_PWMN_Stop+0x48>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800603a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6a1a      	ldr	r2, [r3, #32]
 8006042:	f241 1311 	movw	r3, #4369	; 0x1111
 8006046:	4013      	ands	r3, r2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10f      	bne.n	800606c <HAL_TIMEx_PWMN_Stop+0x78>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6a1a      	ldr	r2, [r3, #32]
 8006052:	f244 4344 	movw	r3, #17476	; 0x4444
 8006056:	4013      	ands	r3, r2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d107      	bne.n	800606c <HAL_TIMEx_PWMN_Stop+0x78>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0201 	bic.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d104      	bne.n	800607c <HAL_TIMEx_PWMN_Stop+0x88>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800607a:	e013      	b.n	80060a4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b04      	cmp	r3, #4
 8006080:	d104      	bne.n	800608c <HAL_TIMEx_PWMN_Stop+0x98>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800608a:	e00b      	b.n	80060a4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b08      	cmp	r3, #8
 8006090:	d104      	bne.n	800609c <HAL_TIMEx_PWMN_Stop+0xa8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800609a:	e003      	b.n	80060a4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e074      	b.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a34      	ldr	r2, [pc, #208]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d009      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a33      	ldr	r2, [pc, #204]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d004      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a31      	ldr	r2, [pc, #196]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d108      	bne.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800610c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800611e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a21      	ldr	r2, [pc, #132]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d022      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006148:	d01d      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1f      	ldr	r2, [pc, #124]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d018      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1d      	ldr	r2, [pc, #116]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d013      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1c      	ldr	r2, [pc, #112]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00e      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a15      	ldr	r2, [pc, #84]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d009      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a18      	ldr	r2, [pc, #96]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a11      	ldr	r2, [pc, #68]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d10c      	bne.n	80061a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800618c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	4313      	orrs	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40013400 	.word	0x40013400
 80061c8:	40015000 	.word	0x40015000
 80061cc:	40000400 	.word	0x40000400
 80061d0:	40000800 	.word	0x40000800
 80061d4:	40000c00 	.word	0x40000c00
 80061d8:	40014000 	.word	0x40014000

080061dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e096      	b.n	8006326 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4313      	orrs	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	041b      	lsls	r3, r3, #16
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2f      	ldr	r2, [pc, #188]	; (8006334 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d009      	beq.n	8006290 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a2d      	ldr	r2, [pc, #180]	; (8006338 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a2c      	ldr	r2, [pc, #176]	; (800633c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d106      	bne.n	800629e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a24      	ldr	r2, [pc, #144]	; (8006334 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d009      	beq.n	80062bc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a22      	ldr	r2, [pc, #136]	; (8006338 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d004      	beq.n	80062bc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a21      	ldr	r2, [pc, #132]	; (800633c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d12b      	bne.n	8006314 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	051b      	lsls	r3, r3, #20
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a11      	ldr	r2, [pc, #68]	; (8006334 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a10      	ldr	r2, [pc, #64]	; (8006338 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0e      	ldr	r2, [pc, #56]	; (800633c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d106      	bne.n	8006314 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	40012c00 	.word	0x40012c00
 8006338:	40013400 	.word	0x40013400
 800633c:	40015000 	.word	0x40015000

08006340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	2204      	movs	r2, #4
 80063e0:	fa02 f303 	lsl.w	r3, r2, r3
 80063e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a1a      	ldr	r2, [r3, #32]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	43db      	mvns	r3, r3
 80063ee:	401a      	ands	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a1a      	ldr	r2, [r3, #32]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	fa01 f303 	lsl.w	r3, r1, r3
 8006404:	431a      	orrs	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e042      	b.n	80064ae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800642e:	2b00      	cmp	r3, #0
 8006430:	d106      	bne.n	8006440 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7fb f9c0 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2224      	movs	r2, #36	; 0x24
 8006444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0201 	bic.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fc51 	bl	8006d00 <UART_SetConfig>
 800645e:	4603      	mov	r3, r0
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e022      	b.n	80064ae <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 ff41 	bl	80072f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006484:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006494:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0201 	orr.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 ffc8 	bl	800743c <UART_CheckIdleState>
 80064ac:	4603      	mov	r3, r0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b08a      	sub	sp, #40	; 0x28
 80064ba:	af02      	add	r7, sp, #8
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	603b      	str	r3, [r7, #0]
 80064c2:	4613      	mov	r3, r2
 80064c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	f040 8083 	bne.w	80065d8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <HAL_UART_Transmit+0x28>
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e07b      	b.n	80065da <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_UART_Transmit+0x3a>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e074      	b.n	80065da <HAL_UART_Transmit+0x124>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2221      	movs	r2, #33	; 0x21
 8006504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006508:	f7fb fa4e 	bl	80019a8 <HAL_GetTick>
 800650c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	88fa      	ldrh	r2, [r7, #6]
 8006512:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	88fa      	ldrh	r2, [r7, #6]
 800651a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006526:	d108      	bne.n	800653a <HAL_UART_Transmit+0x84>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d104      	bne.n	800653a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006530:	2300      	movs	r3, #0
 8006532:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	e003      	b.n	8006542 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800654a:	e02c      	b.n	80065a6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2200      	movs	r2, #0
 8006554:	2180      	movs	r1, #128	; 0x80
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 ffbb 	bl	80074d2 <UART_WaitOnFlagUntilTimeout>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e039      	b.n	80065da <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10b      	bne.n	8006584 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800657a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	3302      	adds	r3, #2
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	e007      	b.n	8006594 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	3301      	adds	r3, #1
 8006592:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800659a:	b29b      	uxth	r3, r3
 800659c:	3b01      	subs	r3, #1
 800659e:	b29a      	uxth	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1cc      	bne.n	800654c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2200      	movs	r2, #0
 80065ba:	2140      	movs	r1, #64	; 0x40
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 ff88 	bl	80074d2 <UART_WaitOnFlagUntilTimeout>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e006      	b.n	80065da <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	e000      	b.n	80065da <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80065d8:	2302      	movs	r3, #2
  }
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3720      	adds	r7, #32
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08a      	sub	sp, #40	; 0x28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d142      	bne.n	8006682 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <HAL_UART_Receive_IT+0x24>
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e03b      	b.n	8006684 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_UART_Receive_IT+0x36>
 8006616:	2302      	movs	r3, #2
 8006618:	e034      	b.n	8006684 <HAL_UART_Receive_IT+0xa0>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a17      	ldr	r2, [pc, #92]	; (800668c <HAL_UART_Receive_IT+0xa8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d01f      	beq.n	8006672 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d018      	beq.n	8006672 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	613b      	str	r3, [r7, #16]
   return(result);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	623b      	str	r3, [r7, #32]
 8006660:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	69f9      	ldr	r1, [r7, #28]
 8006664:	6a3a      	ldr	r2, [r7, #32]
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	61bb      	str	r3, [r7, #24]
   return(result);
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e6      	bne.n	8006640 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006672:	88fb      	ldrh	r3, [r7, #6]
 8006674:	461a      	mov	r2, r3
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 fff3 	bl	8007664 <UART_Start_Receive_IT>
 800667e:	4603      	mov	r3, r0
 8006680:	e000      	b.n	8006684 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006682:	2302      	movs	r3, #2
  }
}
 8006684:	4618      	mov	r0, r3
 8006686:	3728      	adds	r7, #40	; 0x28
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40008000 	.word	0x40008000

08006690 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b0ba      	sub	sp, #232	; 0xe8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80066ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80066be:	4013      	ands	r3, r2
 80066c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80066c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d11b      	bne.n	8006704 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d015      	beq.n	8006704 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d105      	bne.n	80066f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d009      	beq.n	8006704 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 82d6 	beq.w	8006ca6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
      }
      return;
 8006702:	e2d0      	b.n	8006ca6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 811f 	beq.w	800694c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800670e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006712:	4b8b      	ldr	r3, [pc, #556]	; (8006940 <HAL_UART_IRQHandler+0x2b0>)
 8006714:	4013      	ands	r3, r2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800671a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800671e:	4b89      	ldr	r3, [pc, #548]	; (8006944 <HAL_UART_IRQHandler+0x2b4>)
 8006720:	4013      	ands	r3, r2
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 8112 	beq.w	800694c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d011      	beq.n	8006758 <HAL_UART_IRQHandler+0xc8>
 8006734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00b      	beq.n	8006758 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800674e:	f043 0201 	orr.w	r2, r3, #1
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d011      	beq.n	8006788 <HAL_UART_IRQHandler+0xf8>
 8006764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2202      	movs	r2, #2
 8006776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800677e:	f043 0204 	orr.w	r2, r3, #4
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d011      	beq.n	80067b8 <HAL_UART_IRQHandler+0x128>
 8006794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2204      	movs	r2, #4
 80067a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ae:	f043 0202 	orr.w	r2, r3, #2
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d017      	beq.n	80067f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d105      	bne.n	80067dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80067d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80067d4:	4b5a      	ldr	r3, [pc, #360]	; (8006940 <HAL_UART_IRQHandler+0x2b0>)
 80067d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00b      	beq.n	80067f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2208      	movs	r2, #8
 80067e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ea:	f043 0208 	orr.w	r2, r3, #8
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d012      	beq.n	8006826 <HAL_UART_IRQHandler+0x196>
 8006800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00c      	beq.n	8006826 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006814:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800681c:	f043 0220 	orr.w	r2, r3, #32
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 823c 	beq.w	8006caa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	d013      	beq.n	8006866 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800683e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d105      	bne.n	8006856 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800684a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800684e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800686c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687a:	2b40      	cmp	r3, #64	; 0x40
 800687c:	d005      	beq.n	800688a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800687e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006882:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006886:	2b00      	cmp	r3, #0
 8006888:	d04f      	beq.n	800692a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 f814 	bl	80078b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	d141      	bne.n	8006922 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3308      	adds	r3, #8
 80068a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3308      	adds	r3, #8
 80068c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1d9      	bne.n	800689e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d013      	beq.n	800691a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068f6:	4a14      	ldr	r2, [pc, #80]	; (8006948 <HAL_UART_IRQHandler+0x2b8>)
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fc fd73 	bl	80033ea <HAL_DMA_Abort_IT>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d017      	beq.n	800693a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006914:	4610      	mov	r0, r2
 8006916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006918:	e00f      	b.n	800693a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f9da 	bl	8006cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006920:	e00b      	b.n	800693a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f9d6 	bl	8006cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006928:	e007      	b.n	800693a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f9d2 	bl	8006cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006938:	e1b7      	b.n	8006caa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800693a:	bf00      	nop
    return;
 800693c:	e1b5      	b.n	8006caa <HAL_UART_IRQHandler+0x61a>
 800693e:	bf00      	nop
 8006940:	10000001 	.word	0x10000001
 8006944:	04000120 	.word	0x04000120
 8006948:	08007985 	.word	0x08007985

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006950:	2b01      	cmp	r3, #1
 8006952:	f040 814a 	bne.w	8006bea <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695a:	f003 0310 	and.w	r3, r3, #16
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 8143 	beq.w	8006bea <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 813c 	beq.w	8006bea <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2210      	movs	r2, #16
 8006978:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	f040 80b5 	bne.w	8006af4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006996:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 8187 	beq.w	8006cae <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069aa:	429a      	cmp	r2, r3
 80069ac:	f080 817f 	bcs.w	8006cae <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f040 8086 	bne.w	8006ad8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	461a      	mov	r2, r3
 80069f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1da      	bne.n	80069cc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a20:	e853 3f00 	ldrex	r3, [r3]
 8006a24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3308      	adds	r3, #8
 8006a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e1      	bne.n	8006a16 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3308      	adds	r3, #8
 8006a72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e3      	bne.n	8006a52 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa8:	f023 0310 	bic.w	r3, r3, #16
 8006aac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006aba:	65bb      	str	r3, [r7, #88]	; 0x58
 8006abc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ac0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e4      	bne.n	8006a98 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fc fc30 	bl	8003338 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f8fb 	bl	8006ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006af2:	e0dc      	b.n	8006cae <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80ce 	beq.w	8006cb2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006b16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80c9 	beq.w	8006cb2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b42:	647b      	str	r3, [r7, #68]	; 0x44
 8006b44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e4      	bne.n	8006b20 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	623b      	str	r3, [r7, #32]
   return(result);
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b7e:	633a      	str	r2, [r7, #48]	; 0x30
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e1      	bne.n	8006b56 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0310 	bic.w	r3, r3, #16
 8006bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bc8:	61fb      	str	r3, [r7, #28]
 8006bca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	69b9      	ldr	r1, [r7, #24]
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e4      	bne.n	8006ba6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f880 	bl	8006ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006be8:	e063      	b.n	8006cb2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00e      	beq.n	8006c14 <HAL_UART_IRQHandler+0x584>
 8006bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d008      	beq.n	8006c14 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 fb57 	bl	80082c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c12:	e051      	b.n	8006cb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d014      	beq.n	8006c4a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d105      	bne.n	8006c38 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d008      	beq.n	8006c4a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d03a      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	4798      	blx	r3
    }
    return;
 8006c48:	e035      	b.n	8006cb6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d009      	beq.n	8006c6a <HAL_UART_IRQHandler+0x5da>
 8006c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fea4 	bl	80079b0 <UART_EndTransmit_IT>
    return;
 8006c68:	e026      	b.n	8006cb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d009      	beq.n	8006c8a <HAL_UART_IRQHandler+0x5fa>
 8006c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fb30 	bl	80082e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c88:	e016      	b.n	8006cb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d010      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x628>
 8006c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	da0c      	bge.n	8006cb8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f001 fb18 	bl	80082d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ca4:	e008      	b.n	8006cb8 <HAL_UART_IRQHandler+0x628>
      return;
 8006ca6:	bf00      	nop
 8006ca8:	e006      	b.n	8006cb8 <HAL_UART_IRQHandler+0x628>
    return;
 8006caa:	bf00      	nop
 8006cac:	e004      	b.n	8006cb8 <HAL_UART_IRQHandler+0x628>
      return;
 8006cae:	bf00      	nop
 8006cb0:	e002      	b.n	8006cb8 <HAL_UART_IRQHandler+0x628>
      return;
 8006cb2:	bf00      	nop
 8006cb4:	e000      	b.n	8006cb8 <HAL_UART_IRQHandler+0x628>
    return;
 8006cb6:	bf00      	nop
  }
}
 8006cb8:	37e8      	adds	r7, #232	; 0xe8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop

08006cc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d04:	b08c      	sub	sp, #48	; 0x30
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	689a      	ldr	r2, [r3, #8]
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	4baa      	ldr	r3, [pc, #680]	; (8006fd8 <UART_SetConfig+0x2d8>)
 8006d30:	4013      	ands	r3, r2
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	6812      	ldr	r2, [r2, #0]
 8006d36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a9f      	ldr	r2, [pc, #636]	; (8006fdc <UART_SetConfig+0x2dc>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d004      	beq.n	8006d6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	6812      	ldr	r2, [r2, #0]
 8006d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d80:	430b      	orrs	r3, r1
 8006d82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	f023 010f 	bic.w	r1, r3, #15
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a90      	ldr	r2, [pc, #576]	; (8006fe0 <UART_SetConfig+0x2e0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d125      	bne.n	8006df0 <UART_SetConfig+0xf0>
 8006da4:	4b8f      	ldr	r3, [pc, #572]	; (8006fe4 <UART_SetConfig+0x2e4>)
 8006da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006daa:	f003 0303 	and.w	r3, r3, #3
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d81a      	bhi.n	8006de8 <UART_SetConfig+0xe8>
 8006db2:	a201      	add	r2, pc, #4	; (adr r2, 8006db8 <UART_SetConfig+0xb8>)
 8006db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db8:	08006dc9 	.word	0x08006dc9
 8006dbc:	08006dd9 	.word	0x08006dd9
 8006dc0:	08006dd1 	.word	0x08006dd1
 8006dc4:	08006de1 	.word	0x08006de1
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dce:	e116      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dd6:	e112      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006dd8:	2304      	movs	r3, #4
 8006dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dde:	e10e      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006de0:	2308      	movs	r3, #8
 8006de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006de6:	e10a      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006de8:	2310      	movs	r3, #16
 8006dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dee:	e106      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a7c      	ldr	r2, [pc, #496]	; (8006fe8 <UART_SetConfig+0x2e8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d138      	bne.n	8006e6c <UART_SetConfig+0x16c>
 8006dfa:	4b7a      	ldr	r3, [pc, #488]	; (8006fe4 <UART_SetConfig+0x2e4>)
 8006dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e00:	f003 030c 	and.w	r3, r3, #12
 8006e04:	2b0c      	cmp	r3, #12
 8006e06:	d82d      	bhi.n	8006e64 <UART_SetConfig+0x164>
 8006e08:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <UART_SetConfig+0x110>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e45 	.word	0x08006e45
 8006e14:	08006e65 	.word	0x08006e65
 8006e18:	08006e65 	.word	0x08006e65
 8006e1c:	08006e65 	.word	0x08006e65
 8006e20:	08006e55 	.word	0x08006e55
 8006e24:	08006e65 	.word	0x08006e65
 8006e28:	08006e65 	.word	0x08006e65
 8006e2c:	08006e65 	.word	0x08006e65
 8006e30:	08006e4d 	.word	0x08006e4d
 8006e34:	08006e65 	.word	0x08006e65
 8006e38:	08006e65 	.word	0x08006e65
 8006e3c:	08006e65 	.word	0x08006e65
 8006e40:	08006e5d 	.word	0x08006e5d
 8006e44:	2300      	movs	r3, #0
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e4a:	e0d8      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e52:	e0d4      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006e54:	2304      	movs	r3, #4
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e5a:	e0d0      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e62:	e0cc      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006e64:	2310      	movs	r3, #16
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e6a:	e0c8      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a5e      	ldr	r2, [pc, #376]	; (8006fec <UART_SetConfig+0x2ec>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d125      	bne.n	8006ec2 <UART_SetConfig+0x1c2>
 8006e76:	4b5b      	ldr	r3, [pc, #364]	; (8006fe4 <UART_SetConfig+0x2e4>)
 8006e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e80:	2b30      	cmp	r3, #48	; 0x30
 8006e82:	d016      	beq.n	8006eb2 <UART_SetConfig+0x1b2>
 8006e84:	2b30      	cmp	r3, #48	; 0x30
 8006e86:	d818      	bhi.n	8006eba <UART_SetConfig+0x1ba>
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d00a      	beq.n	8006ea2 <UART_SetConfig+0x1a2>
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	d814      	bhi.n	8006eba <UART_SetConfig+0x1ba>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <UART_SetConfig+0x19a>
 8006e94:	2b10      	cmp	r3, #16
 8006e96:	d008      	beq.n	8006eaa <UART_SetConfig+0x1aa>
 8006e98:	e00f      	b.n	8006eba <UART_SetConfig+0x1ba>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ea0:	e0ad      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ea8:	e0a9      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006eaa:	2304      	movs	r3, #4
 8006eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb0:	e0a5      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006eb2:	2308      	movs	r3, #8
 8006eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb8:	e0a1      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006eba:	2310      	movs	r3, #16
 8006ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec0:	e09d      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a4a      	ldr	r2, [pc, #296]	; (8006ff0 <UART_SetConfig+0x2f0>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d125      	bne.n	8006f18 <UART_SetConfig+0x218>
 8006ecc:	4b45      	ldr	r3, [pc, #276]	; (8006fe4 <UART_SetConfig+0x2e4>)
 8006ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ed8:	d016      	beq.n	8006f08 <UART_SetConfig+0x208>
 8006eda:	2bc0      	cmp	r3, #192	; 0xc0
 8006edc:	d818      	bhi.n	8006f10 <UART_SetConfig+0x210>
 8006ede:	2b80      	cmp	r3, #128	; 0x80
 8006ee0:	d00a      	beq.n	8006ef8 <UART_SetConfig+0x1f8>
 8006ee2:	2b80      	cmp	r3, #128	; 0x80
 8006ee4:	d814      	bhi.n	8006f10 <UART_SetConfig+0x210>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <UART_SetConfig+0x1f0>
 8006eea:	2b40      	cmp	r3, #64	; 0x40
 8006eec:	d008      	beq.n	8006f00 <UART_SetConfig+0x200>
 8006eee:	e00f      	b.n	8006f10 <UART_SetConfig+0x210>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ef6:	e082      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006efe:	e07e      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006f00:	2304      	movs	r3, #4
 8006f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f06:	e07a      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006f08:	2308      	movs	r3, #8
 8006f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f0e:	e076      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006f10:	2310      	movs	r3, #16
 8006f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f16:	e072      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a35      	ldr	r2, [pc, #212]	; (8006ff4 <UART_SetConfig+0x2f4>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d12a      	bne.n	8006f78 <UART_SetConfig+0x278>
 8006f22:	4b30      	ldr	r3, [pc, #192]	; (8006fe4 <UART_SetConfig+0x2e4>)
 8006f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f30:	d01a      	beq.n	8006f68 <UART_SetConfig+0x268>
 8006f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f36:	d81b      	bhi.n	8006f70 <UART_SetConfig+0x270>
 8006f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f3c:	d00c      	beq.n	8006f58 <UART_SetConfig+0x258>
 8006f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f42:	d815      	bhi.n	8006f70 <UART_SetConfig+0x270>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <UART_SetConfig+0x250>
 8006f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4c:	d008      	beq.n	8006f60 <UART_SetConfig+0x260>
 8006f4e:	e00f      	b.n	8006f70 <UART_SetConfig+0x270>
 8006f50:	2300      	movs	r3, #0
 8006f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f56:	e052      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f5e:	e04e      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006f60:	2304      	movs	r3, #4
 8006f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f66:	e04a      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006f68:	2308      	movs	r3, #8
 8006f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f6e:	e046      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006f70:	2310      	movs	r3, #16
 8006f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f76:	e042      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a17      	ldr	r2, [pc, #92]	; (8006fdc <UART_SetConfig+0x2dc>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d13a      	bne.n	8006ff8 <UART_SetConfig+0x2f8>
 8006f82:	4b18      	ldr	r3, [pc, #96]	; (8006fe4 <UART_SetConfig+0x2e4>)
 8006f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f90:	d01a      	beq.n	8006fc8 <UART_SetConfig+0x2c8>
 8006f92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f96:	d81b      	bhi.n	8006fd0 <UART_SetConfig+0x2d0>
 8006f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f9c:	d00c      	beq.n	8006fb8 <UART_SetConfig+0x2b8>
 8006f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fa2:	d815      	bhi.n	8006fd0 <UART_SetConfig+0x2d0>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <UART_SetConfig+0x2b0>
 8006fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fac:	d008      	beq.n	8006fc0 <UART_SetConfig+0x2c0>
 8006fae:	e00f      	b.n	8006fd0 <UART_SetConfig+0x2d0>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fb6:	e022      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fbe:	e01e      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fc6:	e01a      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006fc8:	2308      	movs	r3, #8
 8006fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fce:	e016      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fd6:	e012      	b.n	8006ffe <UART_SetConfig+0x2fe>
 8006fd8:	cfff69f3 	.word	0xcfff69f3
 8006fdc:	40008000 	.word	0x40008000
 8006fe0:	40013800 	.word	0x40013800
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	40004400 	.word	0x40004400
 8006fec:	40004800 	.word	0x40004800
 8006ff0:	40004c00 	.word	0x40004c00
 8006ff4:	40005000 	.word	0x40005000
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4aae      	ldr	r2, [pc, #696]	; (80072bc <UART_SetConfig+0x5bc>)
 8007004:	4293      	cmp	r3, r2
 8007006:	f040 8097 	bne.w	8007138 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800700a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800700e:	2b08      	cmp	r3, #8
 8007010:	d823      	bhi.n	800705a <UART_SetConfig+0x35a>
 8007012:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <UART_SetConfig+0x318>)
 8007014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007018:	0800703d 	.word	0x0800703d
 800701c:	0800705b 	.word	0x0800705b
 8007020:	08007045 	.word	0x08007045
 8007024:	0800705b 	.word	0x0800705b
 8007028:	0800704b 	.word	0x0800704b
 800702c:	0800705b 	.word	0x0800705b
 8007030:	0800705b 	.word	0x0800705b
 8007034:	0800705b 	.word	0x0800705b
 8007038:	08007053 	.word	0x08007053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800703c:	f7fd f970 	bl	8004320 <HAL_RCC_GetPCLK1Freq>
 8007040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007042:	e010      	b.n	8007066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007044:	4b9e      	ldr	r3, [pc, #632]	; (80072c0 <UART_SetConfig+0x5c0>)
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007048:	e00d      	b.n	8007066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800704a:	f7fd f8fb 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 800704e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007050:	e009      	b.n	8007066 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007058:	e005      	b.n	8007066 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 8130 	beq.w	80072ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	4a94      	ldr	r2, [pc, #592]	; (80072c4 <UART_SetConfig+0x5c4>)
 8007074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007078:	461a      	mov	r2, r3
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007080:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	4613      	mov	r3, r2
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	4413      	add	r3, r2
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	429a      	cmp	r2, r3
 8007090:	d305      	bcc.n	800709e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	429a      	cmp	r2, r3
 800709c:	d903      	bls.n	80070a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070a4:	e113      	b.n	80072ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	2200      	movs	r2, #0
 80070aa:	60bb      	str	r3, [r7, #8]
 80070ac:	60fa      	str	r2, [r7, #12]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	4a84      	ldr	r2, [pc, #528]	; (80072c4 <UART_SetConfig+0x5c4>)
 80070b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2200      	movs	r2, #0
 80070bc:	603b      	str	r3, [r7, #0]
 80070be:	607a      	str	r2, [r7, #4]
 80070c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070c8:	f7f9 f8fa 	bl	80002c0 <__aeabi_uldivmod>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4610      	mov	r0, r2
 80070d2:	4619      	mov	r1, r3
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	f04f 0300 	mov.w	r3, #0
 80070dc:	020b      	lsls	r3, r1, #8
 80070de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070e2:	0202      	lsls	r2, r0, #8
 80070e4:	6979      	ldr	r1, [r7, #20]
 80070e6:	6849      	ldr	r1, [r1, #4]
 80070e8:	0849      	lsrs	r1, r1, #1
 80070ea:	2000      	movs	r0, #0
 80070ec:	460c      	mov	r4, r1
 80070ee:	4605      	mov	r5, r0
 80070f0:	eb12 0804 	adds.w	r8, r2, r4
 80070f4:	eb43 0905 	adc.w	r9, r3, r5
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	469a      	mov	sl, r3
 8007100:	4693      	mov	fp, r2
 8007102:	4652      	mov	r2, sl
 8007104:	465b      	mov	r3, fp
 8007106:	4640      	mov	r0, r8
 8007108:	4649      	mov	r1, r9
 800710a:	f7f9 f8d9 	bl	80002c0 <__aeabi_uldivmod>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4613      	mov	r3, r2
 8007114:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800711c:	d308      	bcc.n	8007130 <UART_SetConfig+0x430>
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007124:	d204      	bcs.n	8007130 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6a3a      	ldr	r2, [r7, #32]
 800712c:	60da      	str	r2, [r3, #12]
 800712e:	e0ce      	b.n	80072ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007136:	e0ca      	b.n	80072ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007140:	d166      	bne.n	8007210 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007142:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007146:	2b08      	cmp	r3, #8
 8007148:	d827      	bhi.n	800719a <UART_SetConfig+0x49a>
 800714a:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <UART_SetConfig+0x450>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	08007175 	.word	0x08007175
 8007154:	0800717d 	.word	0x0800717d
 8007158:	08007185 	.word	0x08007185
 800715c:	0800719b 	.word	0x0800719b
 8007160:	0800718b 	.word	0x0800718b
 8007164:	0800719b 	.word	0x0800719b
 8007168:	0800719b 	.word	0x0800719b
 800716c:	0800719b 	.word	0x0800719b
 8007170:	08007193 	.word	0x08007193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007174:	f7fd f8d4 	bl	8004320 <HAL_RCC_GetPCLK1Freq>
 8007178:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800717a:	e014      	b.n	80071a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800717c:	f7fd f8e6 	bl	800434c <HAL_RCC_GetPCLK2Freq>
 8007180:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007182:	e010      	b.n	80071a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007184:	4b4e      	ldr	r3, [pc, #312]	; (80072c0 <UART_SetConfig+0x5c0>)
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007188:	e00d      	b.n	80071a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800718a:	f7fd f85b 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 800718e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007190:	e009      	b.n	80071a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007198:	e005      	b.n	80071a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 8090 	beq.w	80072ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	4a44      	ldr	r2, [pc, #272]	; (80072c4 <UART_SetConfig+0x5c4>)
 80071b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071b8:	461a      	mov	r2, r3
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80071c0:	005a      	lsls	r2, r3, #1
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	441a      	add	r2, r3
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	2b0f      	cmp	r3, #15
 80071d8:	d916      	bls.n	8007208 <UART_SetConfig+0x508>
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e0:	d212      	bcs.n	8007208 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f023 030f 	bic.w	r3, r3, #15
 80071ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	085b      	lsrs	r3, r3, #1
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	8bfb      	ldrh	r3, [r7, #30]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	8bfa      	ldrh	r2, [r7, #30]
 8007204:	60da      	str	r2, [r3, #12]
 8007206:	e062      	b.n	80072ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800720e:	e05e      	b.n	80072ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007210:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007214:	2b08      	cmp	r3, #8
 8007216:	d828      	bhi.n	800726a <UART_SetConfig+0x56a>
 8007218:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <UART_SetConfig+0x520>)
 800721a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721e:	bf00      	nop
 8007220:	08007245 	.word	0x08007245
 8007224:	0800724d 	.word	0x0800724d
 8007228:	08007255 	.word	0x08007255
 800722c:	0800726b 	.word	0x0800726b
 8007230:	0800725b 	.word	0x0800725b
 8007234:	0800726b 	.word	0x0800726b
 8007238:	0800726b 	.word	0x0800726b
 800723c:	0800726b 	.word	0x0800726b
 8007240:	08007263 	.word	0x08007263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007244:	f7fd f86c 	bl	8004320 <HAL_RCC_GetPCLK1Freq>
 8007248:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800724a:	e014      	b.n	8007276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800724c:	f7fd f87e 	bl	800434c <HAL_RCC_GetPCLK2Freq>
 8007250:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007252:	e010      	b.n	8007276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007254:	4b1a      	ldr	r3, [pc, #104]	; (80072c0 <UART_SetConfig+0x5c0>)
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007258:	e00d      	b.n	8007276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800725a:	f7fc fff3 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 800725e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007260:	e009      	b.n	8007276 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007268:	e005      	b.n	8007276 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007274:	bf00      	nop
    }

    if (pclk != 0U)
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	2b00      	cmp	r3, #0
 800727a:	d028      	beq.n	80072ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	4a10      	ldr	r2, [pc, #64]	; (80072c4 <UART_SetConfig+0x5c4>)
 8007282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007286:	461a      	mov	r2, r3
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	fbb3 f2f2 	udiv	r2, r3, r2
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	085b      	lsrs	r3, r3, #1
 8007294:	441a      	add	r2, r3
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	fbb2 f3f3 	udiv	r3, r2, r3
 800729e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	2b0f      	cmp	r3, #15
 80072a4:	d910      	bls.n	80072c8 <UART_SetConfig+0x5c8>
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ac:	d20c      	bcs.n	80072c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60da      	str	r2, [r3, #12]
 80072b8:	e009      	b.n	80072ce <UART_SetConfig+0x5ce>
 80072ba:	bf00      	nop
 80072bc:	40008000 	.word	0x40008000
 80072c0:	00f42400 	.word	0x00f42400
 80072c4:	0800907c 	.word	0x0800907c
      }
      else
      {
        ret = HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2201      	movs	r2, #1
 80072da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2200      	movs	r2, #0
 80072e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2200      	movs	r2, #0
 80072e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80072ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3730      	adds	r7, #48	; 0x30
 80072f2:	46bd      	mov	sp, r7
 80072f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080072f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00a      	beq.n	8007366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736a:	f003 0308 	and.w	r3, r3, #8
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00a      	beq.n	8007388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738c:	f003 0310 	and.w	r3, r3, #16
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00a      	beq.n	80073aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01a      	beq.n	800740e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073f6:	d10a      	bne.n	800740e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	605a      	str	r2, [r3, #4]
  }
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af02      	add	r7, sp, #8
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800744c:	f7fa faac 	bl	80019a8 <HAL_GetTick>
 8007450:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b08      	cmp	r3, #8
 800745e:	d10e      	bne.n	800747e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f82f 	bl	80074d2 <UART_WaitOnFlagUntilTimeout>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e025      	b.n	80074ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b04      	cmp	r3, #4
 800748a:	d10e      	bne.n	80074aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800748c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f819 	bl	80074d2 <UART_WaitOnFlagUntilTimeout>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e00f      	b.n	80074ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b09c      	sub	sp, #112	; 0x70
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	603b      	str	r3, [r7, #0]
 80074de:	4613      	mov	r3, r2
 80074e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074e2:	e0a9      	b.n	8007638 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ea:	f000 80a5 	beq.w	8007638 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ee:	f7fa fa5b 	bl	80019a8 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d302      	bcc.n	8007504 <UART_WaitOnFlagUntilTimeout+0x32>
 80074fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007500:	2b00      	cmp	r3, #0
 8007502:	d140      	bne.n	8007586 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007514:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007518:	667b      	str	r3, [r7, #100]	; 0x64
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007522:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007524:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007528:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e6      	bne.n	8007504 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3308      	adds	r3, #8
 800753c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007540:	e853 3f00 	ldrex	r3, [r3]
 8007544:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	f023 0301 	bic.w	r3, r3, #1
 800754c:	663b      	str	r3, [r7, #96]	; 0x60
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3308      	adds	r3, #8
 8007554:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007556:	64ba      	str	r2, [r7, #72]	; 0x48
 8007558:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800755c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800755e:	e841 2300 	strex	r3, r2, [r1]
 8007562:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1e5      	bne.n	8007536 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2220      	movs	r2, #32
 800756e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e069      	b.n	800765a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b00      	cmp	r3, #0
 8007592:	d051      	beq.n	8007638 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800759e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a2:	d149      	bne.n	8007638 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34
 80075ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e6      	bne.n	80075ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3308      	adds	r3, #8
 80075e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	e853 3f00 	ldrex	r3, [r3]
 80075ee:	613b      	str	r3, [r7, #16]
   return(result);
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f023 0301 	bic.w	r3, r3, #1
 80075f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3308      	adds	r3, #8
 80075fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007600:	623a      	str	r2, [r7, #32]
 8007602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	69f9      	ldr	r1, [r7, #28]
 8007606:	6a3a      	ldr	r2, [r7, #32]
 8007608:	e841 2300 	strex	r3, r2, [r1]
 800760c:	61bb      	str	r3, [r7, #24]
   return(result);
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1e5      	bne.n	80075e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2220      	movs	r2, #32
 8007620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2220      	movs	r2, #32
 8007628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e010      	b.n	800765a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	69da      	ldr	r2, [r3, #28]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	4013      	ands	r3, r2
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	429a      	cmp	r2, r3
 8007646:	bf0c      	ite	eq
 8007648:	2301      	moveq	r3, #1
 800764a:	2300      	movne	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	429a      	cmp	r2, r3
 8007654:	f43f af46 	beq.w	80074e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3770      	adds	r7, #112	; 0x70
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007664:	b480      	push	{r7}
 8007666:	b0a3      	sub	sp, #140	; 0x8c
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	88fa      	ldrh	r2, [r7, #6]
 800767c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	88fa      	ldrh	r2, [r7, #6]
 8007684:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007696:	d10e      	bne.n	80076b6 <UART_Start_Receive_IT+0x52>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d105      	bne.n	80076ac <UART_Start_Receive_IT+0x48>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80076a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076aa:	e02d      	b.n	8007708 <UART_Start_Receive_IT+0xa4>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	22ff      	movs	r2, #255	; 0xff
 80076b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076b4:	e028      	b.n	8007708 <UART_Start_Receive_IT+0xa4>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10d      	bne.n	80076da <UART_Start_Receive_IT+0x76>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d104      	bne.n	80076d0 <UART_Start_Receive_IT+0x6c>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	22ff      	movs	r2, #255	; 0xff
 80076ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076ce:	e01b      	b.n	8007708 <UART_Start_Receive_IT+0xa4>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	227f      	movs	r2, #127	; 0x7f
 80076d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076d8:	e016      	b.n	8007708 <UART_Start_Receive_IT+0xa4>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076e2:	d10d      	bne.n	8007700 <UART_Start_Receive_IT+0x9c>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <UART_Start_Receive_IT+0x92>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	227f      	movs	r2, #127	; 0x7f
 80076f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076f4:	e008      	b.n	8007708 <UART_Start_Receive_IT+0xa4>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	223f      	movs	r2, #63	; 0x3f
 80076fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076fe:	e003      	b.n	8007708 <UART_Start_Receive_IT+0xa4>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2222      	movs	r2, #34	; 0x22
 8007714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3308      	adds	r3, #8
 800771e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800772a:	f043 0301 	orr.w	r3, r3, #1
 800772e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3308      	adds	r3, #8
 8007738:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800773c:	673a      	str	r2, [r7, #112]	; 0x70
 800773e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007742:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800774a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e3      	bne.n	8007718 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007758:	d153      	bne.n	8007802 <UART_Start_Receive_IT+0x19e>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007760:	88fa      	ldrh	r2, [r7, #6]
 8007762:	429a      	cmp	r2, r3
 8007764:	d34d      	bcc.n	8007802 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776e:	d107      	bne.n	8007780 <UART_Start_Receive_IT+0x11c>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d103      	bne.n	8007780 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4a4b      	ldr	r2, [pc, #300]	; (80078a8 <UART_Start_Receive_IT+0x244>)
 800777c:	671a      	str	r2, [r3, #112]	; 0x70
 800777e:	e002      	b.n	8007786 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4a4a      	ldr	r2, [pc, #296]	; (80078ac <UART_Start_Receive_IT+0x248>)
 8007784:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d01a      	beq.n	80077cc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077ba:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e4      	bne.n	8007796 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3308      	adds	r3, #8
 80077d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d6:	e853 3f00 	ldrex	r3, [r3]
 80077da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3308      	adds	r3, #8
 80077ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80077ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80077ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077f4:	e841 2300 	strex	r3, r2, [r1]
 80077f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e5      	bne.n	80077cc <UART_Start_Receive_IT+0x168>
 8007800:	e04a      	b.n	8007898 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780a:	d107      	bne.n	800781c <UART_Start_Receive_IT+0x1b8>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d103      	bne.n	800781c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4a26      	ldr	r2, [pc, #152]	; (80078b0 <UART_Start_Receive_IT+0x24c>)
 8007818:	671a      	str	r2, [r3, #112]	; 0x70
 800781a:	e002      	b.n	8007822 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4a25      	ldr	r2, [pc, #148]	; (80078b4 <UART_Start_Receive_IT+0x250>)
 8007820:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d019      	beq.n	8007866 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007846:	677b      	str	r3, [r7, #116]	; 0x74
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007850:	637b      	str	r3, [r7, #52]	; 0x34
 8007852:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e6      	bne.n	8007832 <UART_Start_Receive_IT+0x1ce>
 8007864:	e018      	b.n	8007898 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	613b      	str	r3, [r7, #16]
   return(result);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	f043 0320 	orr.w	r3, r3, #32
 800787a:	67bb      	str	r3, [r7, #120]	; 0x78
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007884:	623b      	str	r3, [r7, #32]
 8007886:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	69f9      	ldr	r1, [r7, #28]
 800788a:	6a3a      	ldr	r2, [r7, #32]
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	61bb      	str	r3, [r7, #24]
   return(result);
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e6      	bne.n	8007866 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	378c      	adds	r7, #140	; 0x8c
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	08007fc1 	.word	0x08007fc1
 80078ac:	08007cc9 	.word	0x08007cc9
 80078b0:	08007b67 	.word	0x08007b67
 80078b4:	08007a07 	.word	0x08007a07

080078b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b095      	sub	sp, #84	; 0x54
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078de:	643b      	str	r3, [r7, #64]	; 0x40
 80078e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e6      	bne.n	80078c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3308      	adds	r3, #8
 80078f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	61fb      	str	r3, [r7, #28]
   return(result);
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	64bb      	str	r3, [r7, #72]	; 0x48
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3308      	adds	r3, #8
 8007914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007918:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800791c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e3      	bne.n	80078f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792e:	2b01      	cmp	r3, #1
 8007930:	d118      	bne.n	8007964 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f023 0310 	bic.w	r3, r3, #16
 8007946:	647b      	str	r3, [r7, #68]	; 0x44
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6979      	ldr	r1, [r7, #20]
 8007956:	69ba      	ldr	r2, [r7, #24]
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	613b      	str	r3, [r7, #16]
   return(result);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e6      	bne.n	8007932 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2220      	movs	r2, #32
 8007968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007978:	bf00      	nop
 800797a:	3754      	adds	r7, #84	; 0x54
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f7ff f996 	bl	8006cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079a8:	bf00      	nop
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6979      	ldr	r1, [r7, #20]
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	613b      	str	r3, [r7, #16]
   return(result);
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e6      	bne.n	80079b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff f961 	bl	8006cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079fe:	bf00      	nop
 8007a00:	3720      	adds	r7, #32
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b096      	sub	sp, #88	; 0x58
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a1e:	2b22      	cmp	r3, #34	; 0x22
 8007a20:	f040 8095 	bne.w	8007b4e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a2e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007a32:	b2d9      	uxtb	r1, r3
 8007a34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3e:	400a      	ands	r2, r1
 8007a40:	b2d2      	uxtb	r2, r2
 8007a42:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d178      	bne.n	8007b5e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a80:	653b      	str	r3, [r7, #80]	; 0x50
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	461a      	mov	r2, r3
 8007a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e6      	bne.n	8007a6c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	e853 3f00 	ldrex	r3, [r3]
 8007aac:	623b      	str	r3, [r7, #32]
   return(result);
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	f023 0301 	bic.w	r3, r3, #1
 8007ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3308      	adds	r3, #8
 8007abc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007abe:	633a      	str	r2, [r7, #48]	; 0x30
 8007ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e5      	bne.n	8007a9e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d12e      	bne.n	8007b46 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 0310 	bic.w	r3, r3, #16
 8007b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b0c:	61fb      	str	r3, [r7, #28]
 8007b0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	69b9      	ldr	r1, [r7, #24]
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	617b      	str	r3, [r7, #20]
   return(result);
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e6      	bne.n	8007aee <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f003 0310 	and.w	r3, r3, #16
 8007b2a:	2b10      	cmp	r3, #16
 8007b2c:	d103      	bne.n	8007b36 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2210      	movs	r2, #16
 8007b34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff f8d2 	bl	8006ce8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b44:	e00b      	b.n	8007b5e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7f9 f89e 	bl	8000c88 <HAL_UART_RxCpltCallback>
}
 8007b4c:	e007      	b.n	8007b5e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0208 	orr.w	r2, r2, #8
 8007b5c:	619a      	str	r2, [r3, #24]
}
 8007b5e:	bf00      	nop
 8007b60:	3758      	adds	r7, #88	; 0x58
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b096      	sub	sp, #88	; 0x58
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7e:	2b22      	cmp	r3, #34	; 0x22
 8007b80:	f040 8095 	bne.w	8007cae <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b92:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b94:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007b98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba8:	1c9a      	adds	r2, r3, #2
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d178      	bne.n	8007cbe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007be0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bea:	643b      	str	r3, [r7, #64]	; 0x40
 8007bec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1e6      	bne.n	8007bcc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3308      	adds	r3, #8
 8007c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	f023 0301 	bic.w	r3, r3, #1
 8007c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e5      	bne.n	8007bfe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d12e      	bne.n	8007ca6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	f023 0310 	bic.w	r3, r3, #16
 8007c62:	647b      	str	r3, [r7, #68]	; 0x44
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c6c:	61bb      	str	r3, [r7, #24]
 8007c6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6979      	ldr	r1, [r7, #20]
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	613b      	str	r3, [r7, #16]
   return(result);
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e6      	bne.n	8007c4e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f003 0310 	and.w	r3, r3, #16
 8007c8a:	2b10      	cmp	r3, #16
 8007c8c:	d103      	bne.n	8007c96 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2210      	movs	r2, #16
 8007c94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff f822 	bl	8006ce8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ca4:	e00b      	b.n	8007cbe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7f8 ffee 	bl	8000c88 <HAL_UART_RxCpltCallback>
}
 8007cac:	e007      	b.n	8007cbe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	699a      	ldr	r2, [r3, #24]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f042 0208 	orr.w	r2, r2, #8
 8007cbc:	619a      	str	r2, [r3, #24]
}
 8007cbe:	bf00      	nop
 8007cc0:	3758      	adds	r7, #88	; 0x58
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b0a6      	sub	sp, #152	; 0x98
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007cd6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cfe:	2b22      	cmp	r3, #34	; 0x22
 8007d00:	f040 814f 	bne.w	8007fa2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d0a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d0e:	e0f6      	b.n	8007efe <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d1a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007d1e:	b2d9      	uxtb	r1, r3
 8007d20:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d2a:	400a      	ands	r2, r1
 8007d2c:	b2d2      	uxtb	r2, r2
 8007d2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	3b01      	subs	r3, #1
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d053      	beq.n	8007e0a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d011      	beq.n	8007d92 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00b      	beq.n	8007d92 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d88:	f043 0201 	orr.w	r2, r3, #1
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d011      	beq.n	8007dc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007d9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00b      	beq.n	8007dc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2202      	movs	r2, #2
 8007db0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007db8:	f043 0204 	orr.w	r2, r3, #4
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dc6:	f003 0304 	and.w	r3, r3, #4
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d011      	beq.n	8007df2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2204      	movs	r2, #4
 8007de0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007de8:	f043 0202 	orr.w	r2, r3, #2
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d006      	beq.n	8007e0a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7fe ff69 	bl	8006cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d173      	bne.n	8007efe <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e3a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007e3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e4      	bne.n	8007e16 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3308      	adds	r3, #8
 8007e52:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e62:	f023 0301 	bic.w	r3, r3, #1
 8007e66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3308      	adds	r3, #8
 8007e6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007e70:	657a      	str	r2, [r7, #84]	; 0x54
 8007e72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e3      	bne.n	8007e4c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2220      	movs	r2, #32
 8007e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d12e      	bne.n	8007ef8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea8:	e853 3f00 	ldrex	r3, [r3]
 8007eac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	f023 0310 	bic.w	r3, r3, #16
 8007eb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8007ec0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ec4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e6      	bne.n	8007ea0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	f003 0310 	and.w	r3, r3, #16
 8007edc:	2b10      	cmp	r3, #16
 8007ede:	d103      	bne.n	8007ee8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2210      	movs	r2, #16
 8007ee6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7fe fef9 	bl	8006ce8 <HAL_UARTEx_RxEventCallback>
 8007ef6:	e002      	b.n	8007efe <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7f8 fec5 	bl	8000c88 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007efe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d006      	beq.n	8007f14 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007f06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f47f aefe 	bne.w	8007d10 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f1a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f1e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d045      	beq.n	8007fb2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d23e      	bcs.n	8007fb2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3308      	adds	r3, #8
 8007f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	e853 3f00 	ldrex	r3, [r3]
 8007f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f4a:	673b      	str	r3, [r7, #112]	; 0x70
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3308      	adds	r3, #8
 8007f52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f5c:	e841 2300 	strex	r3, r2, [r1]
 8007f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e5      	bne.n	8007f34 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a14      	ldr	r2, [pc, #80]	; (8007fbc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007f6c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	e853 3f00 	ldrex	r3, [r3]
 8007f7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f043 0320 	orr.w	r3, r3, #32
 8007f82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f8c:	61bb      	str	r3, [r7, #24]
 8007f8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f90:	6979      	ldr	r1, [r7, #20]
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	e841 2300 	strex	r3, r2, [r1]
 8007f98:	613b      	str	r3, [r7, #16]
   return(result);
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e6      	bne.n	8007f6e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fa0:	e007      	b.n	8007fb2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	699a      	ldr	r2, [r3, #24]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0208 	orr.w	r2, r2, #8
 8007fb0:	619a      	str	r2, [r3, #24]
}
 8007fb2:	bf00      	nop
 8007fb4:	3798      	adds	r7, #152	; 0x98
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	08007a07 	.word	0x08007a07

08007fc0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b0a8      	sub	sp, #160	; 0xa0
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007fce:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	69db      	ldr	r3, [r3, #28]
 8007fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff6:	2b22      	cmp	r3, #34	; 0x22
 8007ff8:	f040 8153 	bne.w	80082a2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008002:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008006:	e0fa      	b.n	80081fe <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800801a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800801e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008022:	4013      	ands	r3, r2
 8008024:	b29a      	uxth	r2, r3
 8008026:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800802a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008030:	1c9a      	adds	r2, r3, #2
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	b29a      	uxth	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008052:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008056:	f003 0307 	and.w	r3, r3, #7
 800805a:	2b00      	cmp	r3, #0
 800805c:	d053      	beq.n	8008106 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800805e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d011      	beq.n	800808e <UART_RxISR_16BIT_FIFOEN+0xce>
 800806a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800806e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00b      	beq.n	800808e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2201      	movs	r2, #1
 800807c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008084:	f043 0201 	orr.w	r2, r3, #1
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800808e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d011      	beq.n	80080be <UART_RxISR_16BIT_FIFOEN+0xfe>
 800809a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00b      	beq.n	80080be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2202      	movs	r2, #2
 80080ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080b4:	f043 0204 	orr.w	r2, r3, #4
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d011      	beq.n	80080ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 80080ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00b      	beq.n	80080ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2204      	movs	r2, #4
 80080dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080e4:	f043 0202 	orr.w	r2, r3, #2
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d006      	beq.n	8008106 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7fe fdeb 	bl	8006cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800810c:	b29b      	uxth	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d175      	bne.n	80081fe <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800811a:	e853 3f00 	ldrex	r3, [r3]
 800811e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008126:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008134:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008136:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800813a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e4      	bne.n	8008112 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3308      	adds	r3, #8
 800814e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008152:	e853 3f00 	ldrex	r3, [r3]
 8008156:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800815a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800815e:	f023 0301 	bic.w	r3, r3, #1
 8008162:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3308      	adds	r3, #8
 800816c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008170:	65ba      	str	r2, [r7, #88]	; 0x58
 8008172:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008176:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008178:	e841 2300 	strex	r3, r2, [r1]
 800817c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800817e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e1      	bne.n	8008148 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2220      	movs	r2, #32
 8008188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008196:	2b01      	cmp	r3, #1
 8008198:	d12e      	bne.n	80081f8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b0:	f023 0310 	bic.w	r3, r3, #16
 80081b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081be:	647b      	str	r3, [r7, #68]	; 0x44
 80081c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e6      	bne.n	80081a0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	f003 0310 	and.w	r3, r3, #16
 80081dc:	2b10      	cmp	r3, #16
 80081de:	d103      	bne.n	80081e8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2210      	movs	r2, #16
 80081e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7fe fd79 	bl	8006ce8 <HAL_UARTEx_RxEventCallback>
 80081f6:	e002      	b.n	80081fe <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7f8 fd45 	bl	8000c88 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80081fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008202:	2b00      	cmp	r3, #0
 8008204:	d006      	beq.n	8008214 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008206:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b00      	cmp	r3, #0
 8008210:	f47f aefa 	bne.w	8008008 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800821a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800821e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008222:	2b00      	cmp	r3, #0
 8008224:	d045      	beq.n	80082b2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800822c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008230:	429a      	cmp	r2, r3
 8008232:	d23e      	bcs.n	80082b2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3308      	adds	r3, #8
 800823a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	e853 3f00 	ldrex	r3, [r3]
 8008242:	623b      	str	r3, [r7, #32]
   return(result);
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800824a:	677b      	str	r3, [r7, #116]	; 0x74
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3308      	adds	r3, #8
 8008252:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008254:	633a      	str	r2, [r7, #48]	; 0x30
 8008256:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008258:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800825a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825c:	e841 2300 	strex	r3, r2, [r1]
 8008260:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1e5      	bne.n	8008234 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a14      	ldr	r2, [pc, #80]	; (80082bc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800826c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	e853 3f00 	ldrex	r3, [r3]
 800827a:	60fb      	str	r3, [r7, #12]
   return(result);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f043 0320 	orr.w	r3, r3, #32
 8008282:	673b      	str	r3, [r7, #112]	; 0x70
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	461a      	mov	r2, r3
 800828a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800828c:	61fb      	str	r3, [r7, #28]
 800828e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008290:	69b9      	ldr	r1, [r7, #24]
 8008292:	69fa      	ldr	r2, [r7, #28]
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	617b      	str	r3, [r7, #20]
   return(result);
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e6      	bne.n	800826e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082a0:	e007      	b.n	80082b2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f042 0208 	orr.w	r2, r2, #8
 80082b0:	619a      	str	r2, [r3, #24]
}
 80082b2:	bf00      	nop
 80082b4:	37a0      	adds	r7, #160	; 0xa0
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	08007b67 	.word	0x08007b67

080082c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800830a:	2b01      	cmp	r3, #1
 800830c:	d101      	bne.n	8008312 <HAL_UARTEx_DisableFifoMode+0x16>
 800830e:	2302      	movs	r3, #2
 8008310:	e027      	b.n	8008362 <HAL_UARTEx_DisableFifoMode+0x66>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2224      	movs	r2, #36	; 0x24
 800831e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0201 	bic.w	r2, r2, #1
 8008338:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008340:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2220      	movs	r2, #32
 8008354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800837e:	2b01      	cmp	r3, #1
 8008380:	d101      	bne.n	8008386 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008382:	2302      	movs	r3, #2
 8008384:	e02d      	b.n	80083e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2224      	movs	r2, #36	; 0x24
 8008392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0201 	bic.w	r2, r2, #1
 80083ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f850 	bl	8008468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2220      	movs	r2, #32
 80083d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d101      	bne.n	8008402 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083fe:	2302      	movs	r3, #2
 8008400:	e02d      	b.n	800845e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2224      	movs	r2, #36	; 0x24
 800840e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0201 	bic.w	r2, r2, #1
 8008428:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f812 	bl	8008468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2220      	movs	r2, #32
 8008450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008474:	2b00      	cmp	r3, #0
 8008476:	d108      	bne.n	800848a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008488:	e031      	b.n	80084ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800848a:	2308      	movs	r3, #8
 800848c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800848e:	2308      	movs	r3, #8
 8008490:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	0e5b      	lsrs	r3, r3, #25
 800849a:	b2db      	uxtb	r3, r3
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	0f5b      	lsrs	r3, r3, #29
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	7b3a      	ldrb	r2, [r7, #12]
 80084b6:	4911      	ldr	r1, [pc, #68]	; (80084fc <UARTEx_SetNbDataToProcess+0x94>)
 80084b8:	5c8a      	ldrb	r2, [r1, r2]
 80084ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084be:	7b3a      	ldrb	r2, [r7, #12]
 80084c0:	490f      	ldr	r1, [pc, #60]	; (8008500 <UARTEx_SetNbDataToProcess+0x98>)
 80084c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	7b7a      	ldrb	r2, [r7, #13]
 80084d4:	4909      	ldr	r1, [pc, #36]	; (80084fc <UARTEx_SetNbDataToProcess+0x94>)
 80084d6:	5c8a      	ldrb	r2, [r1, r2]
 80084d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084dc:	7b7a      	ldrb	r2, [r7, #13]
 80084de:	4908      	ldr	r1, [pc, #32]	; (8008500 <UARTEx_SetNbDataToProcess+0x98>)
 80084e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80084ee:	bf00      	nop
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	08009094 	.word	0x08009094
 8008500:	0800909c 	.word	0x0800909c

08008504 <siprintf>:
 8008504:	b40e      	push	{r1, r2, r3}
 8008506:	b500      	push	{lr}
 8008508:	b09c      	sub	sp, #112	; 0x70
 800850a:	ab1d      	add	r3, sp, #116	; 0x74
 800850c:	9002      	str	r0, [sp, #8]
 800850e:	9006      	str	r0, [sp, #24]
 8008510:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008514:	4809      	ldr	r0, [pc, #36]	; (800853c <siprintf+0x38>)
 8008516:	9107      	str	r1, [sp, #28]
 8008518:	9104      	str	r1, [sp, #16]
 800851a:	4909      	ldr	r1, [pc, #36]	; (8008540 <siprintf+0x3c>)
 800851c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008520:	9105      	str	r1, [sp, #20]
 8008522:	6800      	ldr	r0, [r0, #0]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	a902      	add	r1, sp, #8
 8008528:	f000 f9a4 	bl	8008874 <_svfiprintf_r>
 800852c:	9b02      	ldr	r3, [sp, #8]
 800852e:	2200      	movs	r2, #0
 8008530:	701a      	strb	r2, [r3, #0]
 8008532:	b01c      	add	sp, #112	; 0x70
 8008534:	f85d eb04 	ldr.w	lr, [sp], #4
 8008538:	b003      	add	sp, #12
 800853a:	4770      	bx	lr
 800853c:	20000058 	.word	0x20000058
 8008540:	ffff0208 	.word	0xffff0208

08008544 <memset>:
 8008544:	4402      	add	r2, r0
 8008546:	4603      	mov	r3, r0
 8008548:	4293      	cmp	r3, r2
 800854a:	d100      	bne.n	800854e <memset+0xa>
 800854c:	4770      	bx	lr
 800854e:	f803 1b01 	strb.w	r1, [r3], #1
 8008552:	e7f9      	b.n	8008548 <memset+0x4>

08008554 <strncmp>:
 8008554:	b510      	push	{r4, lr}
 8008556:	b16a      	cbz	r2, 8008574 <strncmp+0x20>
 8008558:	3901      	subs	r1, #1
 800855a:	1884      	adds	r4, r0, r2
 800855c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008560:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008564:	429a      	cmp	r2, r3
 8008566:	d103      	bne.n	8008570 <strncmp+0x1c>
 8008568:	42a0      	cmp	r0, r4
 800856a:	d001      	beq.n	8008570 <strncmp+0x1c>
 800856c:	2a00      	cmp	r2, #0
 800856e:	d1f5      	bne.n	800855c <strncmp+0x8>
 8008570:	1ad0      	subs	r0, r2, r3
 8008572:	bd10      	pop	{r4, pc}
 8008574:	4610      	mov	r0, r2
 8008576:	e7fc      	b.n	8008572 <strncmp+0x1e>

08008578 <__errno>:
 8008578:	4b01      	ldr	r3, [pc, #4]	; (8008580 <__errno+0x8>)
 800857a:	6818      	ldr	r0, [r3, #0]
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20000058 	.word	0x20000058

08008584 <__libc_init_array>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	4d0d      	ldr	r5, [pc, #52]	; (80085bc <__libc_init_array+0x38>)
 8008588:	4c0d      	ldr	r4, [pc, #52]	; (80085c0 <__libc_init_array+0x3c>)
 800858a:	1b64      	subs	r4, r4, r5
 800858c:	10a4      	asrs	r4, r4, #2
 800858e:	2600      	movs	r6, #0
 8008590:	42a6      	cmp	r6, r4
 8008592:	d109      	bne.n	80085a8 <__libc_init_array+0x24>
 8008594:	4d0b      	ldr	r5, [pc, #44]	; (80085c4 <__libc_init_array+0x40>)
 8008596:	4c0c      	ldr	r4, [pc, #48]	; (80085c8 <__libc_init_array+0x44>)
 8008598:	f000 fc6a 	bl	8008e70 <_init>
 800859c:	1b64      	subs	r4, r4, r5
 800859e:	10a4      	asrs	r4, r4, #2
 80085a0:	2600      	movs	r6, #0
 80085a2:	42a6      	cmp	r6, r4
 80085a4:	d105      	bne.n	80085b2 <__libc_init_array+0x2e>
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ac:	4798      	blx	r3
 80085ae:	3601      	adds	r6, #1
 80085b0:	e7ee      	b.n	8008590 <__libc_init_array+0xc>
 80085b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b6:	4798      	blx	r3
 80085b8:	3601      	adds	r6, #1
 80085ba:	e7f2      	b.n	80085a2 <__libc_init_array+0x1e>
 80085bc:	080090e0 	.word	0x080090e0
 80085c0:	080090e0 	.word	0x080090e0
 80085c4:	080090e0 	.word	0x080090e0
 80085c8:	080090e4 	.word	0x080090e4

080085cc <__retarget_lock_acquire_recursive>:
 80085cc:	4770      	bx	lr

080085ce <__retarget_lock_release_recursive>:
 80085ce:	4770      	bx	lr

080085d0 <_free_r>:
 80085d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085d2:	2900      	cmp	r1, #0
 80085d4:	d044      	beq.n	8008660 <_free_r+0x90>
 80085d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085da:	9001      	str	r0, [sp, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f1a1 0404 	sub.w	r4, r1, #4
 80085e2:	bfb8      	it	lt
 80085e4:	18e4      	addlt	r4, r4, r3
 80085e6:	f000 f8df 	bl	80087a8 <__malloc_lock>
 80085ea:	4a1e      	ldr	r2, [pc, #120]	; (8008664 <_free_r+0x94>)
 80085ec:	9801      	ldr	r0, [sp, #4]
 80085ee:	6813      	ldr	r3, [r2, #0]
 80085f0:	b933      	cbnz	r3, 8008600 <_free_r+0x30>
 80085f2:	6063      	str	r3, [r4, #4]
 80085f4:	6014      	str	r4, [r2, #0]
 80085f6:	b003      	add	sp, #12
 80085f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085fc:	f000 b8da 	b.w	80087b4 <__malloc_unlock>
 8008600:	42a3      	cmp	r3, r4
 8008602:	d908      	bls.n	8008616 <_free_r+0x46>
 8008604:	6825      	ldr	r5, [r4, #0]
 8008606:	1961      	adds	r1, r4, r5
 8008608:	428b      	cmp	r3, r1
 800860a:	bf01      	itttt	eq
 800860c:	6819      	ldreq	r1, [r3, #0]
 800860e:	685b      	ldreq	r3, [r3, #4]
 8008610:	1949      	addeq	r1, r1, r5
 8008612:	6021      	streq	r1, [r4, #0]
 8008614:	e7ed      	b.n	80085f2 <_free_r+0x22>
 8008616:	461a      	mov	r2, r3
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	b10b      	cbz	r3, 8008620 <_free_r+0x50>
 800861c:	42a3      	cmp	r3, r4
 800861e:	d9fa      	bls.n	8008616 <_free_r+0x46>
 8008620:	6811      	ldr	r1, [r2, #0]
 8008622:	1855      	adds	r5, r2, r1
 8008624:	42a5      	cmp	r5, r4
 8008626:	d10b      	bne.n	8008640 <_free_r+0x70>
 8008628:	6824      	ldr	r4, [r4, #0]
 800862a:	4421      	add	r1, r4
 800862c:	1854      	adds	r4, r2, r1
 800862e:	42a3      	cmp	r3, r4
 8008630:	6011      	str	r1, [r2, #0]
 8008632:	d1e0      	bne.n	80085f6 <_free_r+0x26>
 8008634:	681c      	ldr	r4, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	6053      	str	r3, [r2, #4]
 800863a:	440c      	add	r4, r1
 800863c:	6014      	str	r4, [r2, #0]
 800863e:	e7da      	b.n	80085f6 <_free_r+0x26>
 8008640:	d902      	bls.n	8008648 <_free_r+0x78>
 8008642:	230c      	movs	r3, #12
 8008644:	6003      	str	r3, [r0, #0]
 8008646:	e7d6      	b.n	80085f6 <_free_r+0x26>
 8008648:	6825      	ldr	r5, [r4, #0]
 800864a:	1961      	adds	r1, r4, r5
 800864c:	428b      	cmp	r3, r1
 800864e:	bf04      	itt	eq
 8008650:	6819      	ldreq	r1, [r3, #0]
 8008652:	685b      	ldreq	r3, [r3, #4]
 8008654:	6063      	str	r3, [r4, #4]
 8008656:	bf04      	itt	eq
 8008658:	1949      	addeq	r1, r1, r5
 800865a:	6021      	streq	r1, [r4, #0]
 800865c:	6054      	str	r4, [r2, #4]
 800865e:	e7ca      	b.n	80085f6 <_free_r+0x26>
 8008660:	b003      	add	sp, #12
 8008662:	bd30      	pop	{r4, r5, pc}
 8008664:	200004ec 	.word	0x200004ec

08008668 <sbrk_aligned>:
 8008668:	b570      	push	{r4, r5, r6, lr}
 800866a:	4e0e      	ldr	r6, [pc, #56]	; (80086a4 <sbrk_aligned+0x3c>)
 800866c:	460c      	mov	r4, r1
 800866e:	6831      	ldr	r1, [r6, #0]
 8008670:	4605      	mov	r5, r0
 8008672:	b911      	cbnz	r1, 800867a <sbrk_aligned+0x12>
 8008674:	f000 fba6 	bl	8008dc4 <_sbrk_r>
 8008678:	6030      	str	r0, [r6, #0]
 800867a:	4621      	mov	r1, r4
 800867c:	4628      	mov	r0, r5
 800867e:	f000 fba1 	bl	8008dc4 <_sbrk_r>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	d00a      	beq.n	800869c <sbrk_aligned+0x34>
 8008686:	1cc4      	adds	r4, r0, #3
 8008688:	f024 0403 	bic.w	r4, r4, #3
 800868c:	42a0      	cmp	r0, r4
 800868e:	d007      	beq.n	80086a0 <sbrk_aligned+0x38>
 8008690:	1a21      	subs	r1, r4, r0
 8008692:	4628      	mov	r0, r5
 8008694:	f000 fb96 	bl	8008dc4 <_sbrk_r>
 8008698:	3001      	adds	r0, #1
 800869a:	d101      	bne.n	80086a0 <sbrk_aligned+0x38>
 800869c:	f04f 34ff 	mov.w	r4, #4294967295
 80086a0:	4620      	mov	r0, r4
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
 80086a4:	200004f0 	.word	0x200004f0

080086a8 <_malloc_r>:
 80086a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086ac:	1ccd      	adds	r5, r1, #3
 80086ae:	f025 0503 	bic.w	r5, r5, #3
 80086b2:	3508      	adds	r5, #8
 80086b4:	2d0c      	cmp	r5, #12
 80086b6:	bf38      	it	cc
 80086b8:	250c      	movcc	r5, #12
 80086ba:	2d00      	cmp	r5, #0
 80086bc:	4607      	mov	r7, r0
 80086be:	db01      	blt.n	80086c4 <_malloc_r+0x1c>
 80086c0:	42a9      	cmp	r1, r5
 80086c2:	d905      	bls.n	80086d0 <_malloc_r+0x28>
 80086c4:	230c      	movs	r3, #12
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	2600      	movs	r6, #0
 80086ca:	4630      	mov	r0, r6
 80086cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087a4 <_malloc_r+0xfc>
 80086d4:	f000 f868 	bl	80087a8 <__malloc_lock>
 80086d8:	f8d8 3000 	ldr.w	r3, [r8]
 80086dc:	461c      	mov	r4, r3
 80086de:	bb5c      	cbnz	r4, 8008738 <_malloc_r+0x90>
 80086e0:	4629      	mov	r1, r5
 80086e2:	4638      	mov	r0, r7
 80086e4:	f7ff ffc0 	bl	8008668 <sbrk_aligned>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	4604      	mov	r4, r0
 80086ec:	d155      	bne.n	800879a <_malloc_r+0xf2>
 80086ee:	f8d8 4000 	ldr.w	r4, [r8]
 80086f2:	4626      	mov	r6, r4
 80086f4:	2e00      	cmp	r6, #0
 80086f6:	d145      	bne.n	8008784 <_malloc_r+0xdc>
 80086f8:	2c00      	cmp	r4, #0
 80086fa:	d048      	beq.n	800878e <_malloc_r+0xe6>
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	4631      	mov	r1, r6
 8008700:	4638      	mov	r0, r7
 8008702:	eb04 0903 	add.w	r9, r4, r3
 8008706:	f000 fb5d 	bl	8008dc4 <_sbrk_r>
 800870a:	4581      	cmp	r9, r0
 800870c:	d13f      	bne.n	800878e <_malloc_r+0xe6>
 800870e:	6821      	ldr	r1, [r4, #0]
 8008710:	1a6d      	subs	r5, r5, r1
 8008712:	4629      	mov	r1, r5
 8008714:	4638      	mov	r0, r7
 8008716:	f7ff ffa7 	bl	8008668 <sbrk_aligned>
 800871a:	3001      	adds	r0, #1
 800871c:	d037      	beq.n	800878e <_malloc_r+0xe6>
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	442b      	add	r3, r5
 8008722:	6023      	str	r3, [r4, #0]
 8008724:	f8d8 3000 	ldr.w	r3, [r8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d038      	beq.n	800879e <_malloc_r+0xf6>
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	42a2      	cmp	r2, r4
 8008730:	d12b      	bne.n	800878a <_malloc_r+0xe2>
 8008732:	2200      	movs	r2, #0
 8008734:	605a      	str	r2, [r3, #4]
 8008736:	e00f      	b.n	8008758 <_malloc_r+0xb0>
 8008738:	6822      	ldr	r2, [r4, #0]
 800873a:	1b52      	subs	r2, r2, r5
 800873c:	d41f      	bmi.n	800877e <_malloc_r+0xd6>
 800873e:	2a0b      	cmp	r2, #11
 8008740:	d917      	bls.n	8008772 <_malloc_r+0xca>
 8008742:	1961      	adds	r1, r4, r5
 8008744:	42a3      	cmp	r3, r4
 8008746:	6025      	str	r5, [r4, #0]
 8008748:	bf18      	it	ne
 800874a:	6059      	strne	r1, [r3, #4]
 800874c:	6863      	ldr	r3, [r4, #4]
 800874e:	bf08      	it	eq
 8008750:	f8c8 1000 	streq.w	r1, [r8]
 8008754:	5162      	str	r2, [r4, r5]
 8008756:	604b      	str	r3, [r1, #4]
 8008758:	4638      	mov	r0, r7
 800875a:	f104 060b 	add.w	r6, r4, #11
 800875e:	f000 f829 	bl	80087b4 <__malloc_unlock>
 8008762:	f026 0607 	bic.w	r6, r6, #7
 8008766:	1d23      	adds	r3, r4, #4
 8008768:	1af2      	subs	r2, r6, r3
 800876a:	d0ae      	beq.n	80086ca <_malloc_r+0x22>
 800876c:	1b9b      	subs	r3, r3, r6
 800876e:	50a3      	str	r3, [r4, r2]
 8008770:	e7ab      	b.n	80086ca <_malloc_r+0x22>
 8008772:	42a3      	cmp	r3, r4
 8008774:	6862      	ldr	r2, [r4, #4]
 8008776:	d1dd      	bne.n	8008734 <_malloc_r+0x8c>
 8008778:	f8c8 2000 	str.w	r2, [r8]
 800877c:	e7ec      	b.n	8008758 <_malloc_r+0xb0>
 800877e:	4623      	mov	r3, r4
 8008780:	6864      	ldr	r4, [r4, #4]
 8008782:	e7ac      	b.n	80086de <_malloc_r+0x36>
 8008784:	4634      	mov	r4, r6
 8008786:	6876      	ldr	r6, [r6, #4]
 8008788:	e7b4      	b.n	80086f4 <_malloc_r+0x4c>
 800878a:	4613      	mov	r3, r2
 800878c:	e7cc      	b.n	8008728 <_malloc_r+0x80>
 800878e:	230c      	movs	r3, #12
 8008790:	603b      	str	r3, [r7, #0]
 8008792:	4638      	mov	r0, r7
 8008794:	f000 f80e 	bl	80087b4 <__malloc_unlock>
 8008798:	e797      	b.n	80086ca <_malloc_r+0x22>
 800879a:	6025      	str	r5, [r4, #0]
 800879c:	e7dc      	b.n	8008758 <_malloc_r+0xb0>
 800879e:	605b      	str	r3, [r3, #4]
 80087a0:	deff      	udf	#255	; 0xff
 80087a2:	bf00      	nop
 80087a4:	200004ec 	.word	0x200004ec

080087a8 <__malloc_lock>:
 80087a8:	4801      	ldr	r0, [pc, #4]	; (80087b0 <__malloc_lock+0x8>)
 80087aa:	f7ff bf0f 	b.w	80085cc <__retarget_lock_acquire_recursive>
 80087ae:	bf00      	nop
 80087b0:	200004e8 	.word	0x200004e8

080087b4 <__malloc_unlock>:
 80087b4:	4801      	ldr	r0, [pc, #4]	; (80087bc <__malloc_unlock+0x8>)
 80087b6:	f7ff bf0a 	b.w	80085ce <__retarget_lock_release_recursive>
 80087ba:	bf00      	nop
 80087bc:	200004e8 	.word	0x200004e8

080087c0 <__ssputs_r>:
 80087c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c4:	688e      	ldr	r6, [r1, #8]
 80087c6:	461f      	mov	r7, r3
 80087c8:	42be      	cmp	r6, r7
 80087ca:	680b      	ldr	r3, [r1, #0]
 80087cc:	4682      	mov	sl, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	4690      	mov	r8, r2
 80087d2:	d82c      	bhi.n	800882e <__ssputs_r+0x6e>
 80087d4:	898a      	ldrh	r2, [r1, #12]
 80087d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087da:	d026      	beq.n	800882a <__ssputs_r+0x6a>
 80087dc:	6965      	ldr	r5, [r4, #20]
 80087de:	6909      	ldr	r1, [r1, #16]
 80087e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087e4:	eba3 0901 	sub.w	r9, r3, r1
 80087e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087ec:	1c7b      	adds	r3, r7, #1
 80087ee:	444b      	add	r3, r9
 80087f0:	106d      	asrs	r5, r5, #1
 80087f2:	429d      	cmp	r5, r3
 80087f4:	bf38      	it	cc
 80087f6:	461d      	movcc	r5, r3
 80087f8:	0553      	lsls	r3, r2, #21
 80087fa:	d527      	bpl.n	800884c <__ssputs_r+0x8c>
 80087fc:	4629      	mov	r1, r5
 80087fe:	f7ff ff53 	bl	80086a8 <_malloc_r>
 8008802:	4606      	mov	r6, r0
 8008804:	b360      	cbz	r0, 8008860 <__ssputs_r+0xa0>
 8008806:	6921      	ldr	r1, [r4, #16]
 8008808:	464a      	mov	r2, r9
 800880a:	f000 faeb 	bl	8008de4 <memcpy>
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	6126      	str	r6, [r4, #16]
 800881c:	6165      	str	r5, [r4, #20]
 800881e:	444e      	add	r6, r9
 8008820:	eba5 0509 	sub.w	r5, r5, r9
 8008824:	6026      	str	r6, [r4, #0]
 8008826:	60a5      	str	r5, [r4, #8]
 8008828:	463e      	mov	r6, r7
 800882a:	42be      	cmp	r6, r7
 800882c:	d900      	bls.n	8008830 <__ssputs_r+0x70>
 800882e:	463e      	mov	r6, r7
 8008830:	6820      	ldr	r0, [r4, #0]
 8008832:	4632      	mov	r2, r6
 8008834:	4641      	mov	r1, r8
 8008836:	f000 faab 	bl	8008d90 <memmove>
 800883a:	68a3      	ldr	r3, [r4, #8]
 800883c:	1b9b      	subs	r3, r3, r6
 800883e:	60a3      	str	r3, [r4, #8]
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	4433      	add	r3, r6
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	2000      	movs	r0, #0
 8008848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884c:	462a      	mov	r2, r5
 800884e:	f000 fad7 	bl	8008e00 <_realloc_r>
 8008852:	4606      	mov	r6, r0
 8008854:	2800      	cmp	r0, #0
 8008856:	d1e0      	bne.n	800881a <__ssputs_r+0x5a>
 8008858:	6921      	ldr	r1, [r4, #16]
 800885a:	4650      	mov	r0, sl
 800885c:	f7ff feb8 	bl	80085d0 <_free_r>
 8008860:	230c      	movs	r3, #12
 8008862:	f8ca 3000 	str.w	r3, [sl]
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800886c:	81a3      	strh	r3, [r4, #12]
 800886e:	f04f 30ff 	mov.w	r0, #4294967295
 8008872:	e7e9      	b.n	8008848 <__ssputs_r+0x88>

08008874 <_svfiprintf_r>:
 8008874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008878:	4698      	mov	r8, r3
 800887a:	898b      	ldrh	r3, [r1, #12]
 800887c:	061b      	lsls	r3, r3, #24
 800887e:	b09d      	sub	sp, #116	; 0x74
 8008880:	4607      	mov	r7, r0
 8008882:	460d      	mov	r5, r1
 8008884:	4614      	mov	r4, r2
 8008886:	d50e      	bpl.n	80088a6 <_svfiprintf_r+0x32>
 8008888:	690b      	ldr	r3, [r1, #16]
 800888a:	b963      	cbnz	r3, 80088a6 <_svfiprintf_r+0x32>
 800888c:	2140      	movs	r1, #64	; 0x40
 800888e:	f7ff ff0b 	bl	80086a8 <_malloc_r>
 8008892:	6028      	str	r0, [r5, #0]
 8008894:	6128      	str	r0, [r5, #16]
 8008896:	b920      	cbnz	r0, 80088a2 <_svfiprintf_r+0x2e>
 8008898:	230c      	movs	r3, #12
 800889a:	603b      	str	r3, [r7, #0]
 800889c:	f04f 30ff 	mov.w	r0, #4294967295
 80088a0:	e0d0      	b.n	8008a44 <_svfiprintf_r+0x1d0>
 80088a2:	2340      	movs	r3, #64	; 0x40
 80088a4:	616b      	str	r3, [r5, #20]
 80088a6:	2300      	movs	r3, #0
 80088a8:	9309      	str	r3, [sp, #36]	; 0x24
 80088aa:	2320      	movs	r3, #32
 80088ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80088b4:	2330      	movs	r3, #48	; 0x30
 80088b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a5c <_svfiprintf_r+0x1e8>
 80088ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088be:	f04f 0901 	mov.w	r9, #1
 80088c2:	4623      	mov	r3, r4
 80088c4:	469a      	mov	sl, r3
 80088c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ca:	b10a      	cbz	r2, 80088d0 <_svfiprintf_r+0x5c>
 80088cc:	2a25      	cmp	r2, #37	; 0x25
 80088ce:	d1f9      	bne.n	80088c4 <_svfiprintf_r+0x50>
 80088d0:	ebba 0b04 	subs.w	fp, sl, r4
 80088d4:	d00b      	beq.n	80088ee <_svfiprintf_r+0x7a>
 80088d6:	465b      	mov	r3, fp
 80088d8:	4622      	mov	r2, r4
 80088da:	4629      	mov	r1, r5
 80088dc:	4638      	mov	r0, r7
 80088de:	f7ff ff6f 	bl	80087c0 <__ssputs_r>
 80088e2:	3001      	adds	r0, #1
 80088e4:	f000 80a9 	beq.w	8008a3a <_svfiprintf_r+0x1c6>
 80088e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ea:	445a      	add	r2, fp
 80088ec:	9209      	str	r2, [sp, #36]	; 0x24
 80088ee:	f89a 3000 	ldrb.w	r3, [sl]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 80a1 	beq.w	8008a3a <_svfiprintf_r+0x1c6>
 80088f8:	2300      	movs	r3, #0
 80088fa:	f04f 32ff 	mov.w	r2, #4294967295
 80088fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008902:	f10a 0a01 	add.w	sl, sl, #1
 8008906:	9304      	str	r3, [sp, #16]
 8008908:	9307      	str	r3, [sp, #28]
 800890a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800890e:	931a      	str	r3, [sp, #104]	; 0x68
 8008910:	4654      	mov	r4, sl
 8008912:	2205      	movs	r2, #5
 8008914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008918:	4850      	ldr	r0, [pc, #320]	; (8008a5c <_svfiprintf_r+0x1e8>)
 800891a:	f7f7 fc81 	bl	8000220 <memchr>
 800891e:	9a04      	ldr	r2, [sp, #16]
 8008920:	b9d8      	cbnz	r0, 800895a <_svfiprintf_r+0xe6>
 8008922:	06d0      	lsls	r0, r2, #27
 8008924:	bf44      	itt	mi
 8008926:	2320      	movmi	r3, #32
 8008928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800892c:	0711      	lsls	r1, r2, #28
 800892e:	bf44      	itt	mi
 8008930:	232b      	movmi	r3, #43	; 0x2b
 8008932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008936:	f89a 3000 	ldrb.w	r3, [sl]
 800893a:	2b2a      	cmp	r3, #42	; 0x2a
 800893c:	d015      	beq.n	800896a <_svfiprintf_r+0xf6>
 800893e:	9a07      	ldr	r2, [sp, #28]
 8008940:	4654      	mov	r4, sl
 8008942:	2000      	movs	r0, #0
 8008944:	f04f 0c0a 	mov.w	ip, #10
 8008948:	4621      	mov	r1, r4
 800894a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800894e:	3b30      	subs	r3, #48	; 0x30
 8008950:	2b09      	cmp	r3, #9
 8008952:	d94d      	bls.n	80089f0 <_svfiprintf_r+0x17c>
 8008954:	b1b0      	cbz	r0, 8008984 <_svfiprintf_r+0x110>
 8008956:	9207      	str	r2, [sp, #28]
 8008958:	e014      	b.n	8008984 <_svfiprintf_r+0x110>
 800895a:	eba0 0308 	sub.w	r3, r0, r8
 800895e:	fa09 f303 	lsl.w	r3, r9, r3
 8008962:	4313      	orrs	r3, r2
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	46a2      	mov	sl, r4
 8008968:	e7d2      	b.n	8008910 <_svfiprintf_r+0x9c>
 800896a:	9b03      	ldr	r3, [sp, #12]
 800896c:	1d19      	adds	r1, r3, #4
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	9103      	str	r1, [sp, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	bfbb      	ittet	lt
 8008976:	425b      	neglt	r3, r3
 8008978:	f042 0202 	orrlt.w	r2, r2, #2
 800897c:	9307      	strge	r3, [sp, #28]
 800897e:	9307      	strlt	r3, [sp, #28]
 8008980:	bfb8      	it	lt
 8008982:	9204      	strlt	r2, [sp, #16]
 8008984:	7823      	ldrb	r3, [r4, #0]
 8008986:	2b2e      	cmp	r3, #46	; 0x2e
 8008988:	d10c      	bne.n	80089a4 <_svfiprintf_r+0x130>
 800898a:	7863      	ldrb	r3, [r4, #1]
 800898c:	2b2a      	cmp	r3, #42	; 0x2a
 800898e:	d134      	bne.n	80089fa <_svfiprintf_r+0x186>
 8008990:	9b03      	ldr	r3, [sp, #12]
 8008992:	1d1a      	adds	r2, r3, #4
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	9203      	str	r2, [sp, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	bfb8      	it	lt
 800899c:	f04f 33ff 	movlt.w	r3, #4294967295
 80089a0:	3402      	adds	r4, #2
 80089a2:	9305      	str	r3, [sp, #20]
 80089a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008a6c <_svfiprintf_r+0x1f8>
 80089a8:	7821      	ldrb	r1, [r4, #0]
 80089aa:	2203      	movs	r2, #3
 80089ac:	4650      	mov	r0, sl
 80089ae:	f7f7 fc37 	bl	8000220 <memchr>
 80089b2:	b138      	cbz	r0, 80089c4 <_svfiprintf_r+0x150>
 80089b4:	9b04      	ldr	r3, [sp, #16]
 80089b6:	eba0 000a 	sub.w	r0, r0, sl
 80089ba:	2240      	movs	r2, #64	; 0x40
 80089bc:	4082      	lsls	r2, r0
 80089be:	4313      	orrs	r3, r2
 80089c0:	3401      	adds	r4, #1
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c8:	4825      	ldr	r0, [pc, #148]	; (8008a60 <_svfiprintf_r+0x1ec>)
 80089ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089ce:	2206      	movs	r2, #6
 80089d0:	f7f7 fc26 	bl	8000220 <memchr>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d038      	beq.n	8008a4a <_svfiprintf_r+0x1d6>
 80089d8:	4b22      	ldr	r3, [pc, #136]	; (8008a64 <_svfiprintf_r+0x1f0>)
 80089da:	bb1b      	cbnz	r3, 8008a24 <_svfiprintf_r+0x1b0>
 80089dc:	9b03      	ldr	r3, [sp, #12]
 80089de:	3307      	adds	r3, #7
 80089e0:	f023 0307 	bic.w	r3, r3, #7
 80089e4:	3308      	adds	r3, #8
 80089e6:	9303      	str	r3, [sp, #12]
 80089e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ea:	4433      	add	r3, r6
 80089ec:	9309      	str	r3, [sp, #36]	; 0x24
 80089ee:	e768      	b.n	80088c2 <_svfiprintf_r+0x4e>
 80089f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80089f4:	460c      	mov	r4, r1
 80089f6:	2001      	movs	r0, #1
 80089f8:	e7a6      	b.n	8008948 <_svfiprintf_r+0xd4>
 80089fa:	2300      	movs	r3, #0
 80089fc:	3401      	adds	r4, #1
 80089fe:	9305      	str	r3, [sp, #20]
 8008a00:	4619      	mov	r1, r3
 8008a02:	f04f 0c0a 	mov.w	ip, #10
 8008a06:	4620      	mov	r0, r4
 8008a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a0c:	3a30      	subs	r2, #48	; 0x30
 8008a0e:	2a09      	cmp	r2, #9
 8008a10:	d903      	bls.n	8008a1a <_svfiprintf_r+0x1a6>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0c6      	beq.n	80089a4 <_svfiprintf_r+0x130>
 8008a16:	9105      	str	r1, [sp, #20]
 8008a18:	e7c4      	b.n	80089a4 <_svfiprintf_r+0x130>
 8008a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a1e:	4604      	mov	r4, r0
 8008a20:	2301      	movs	r3, #1
 8008a22:	e7f0      	b.n	8008a06 <_svfiprintf_r+0x192>
 8008a24:	ab03      	add	r3, sp, #12
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	462a      	mov	r2, r5
 8008a2a:	4b0f      	ldr	r3, [pc, #60]	; (8008a68 <_svfiprintf_r+0x1f4>)
 8008a2c:	a904      	add	r1, sp, #16
 8008a2e:	4638      	mov	r0, r7
 8008a30:	f3af 8000 	nop.w
 8008a34:	1c42      	adds	r2, r0, #1
 8008a36:	4606      	mov	r6, r0
 8008a38:	d1d6      	bne.n	80089e8 <_svfiprintf_r+0x174>
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	065b      	lsls	r3, r3, #25
 8008a3e:	f53f af2d 	bmi.w	800889c <_svfiprintf_r+0x28>
 8008a42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a44:	b01d      	add	sp, #116	; 0x74
 8008a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4a:	ab03      	add	r3, sp, #12
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	462a      	mov	r2, r5
 8008a50:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <_svfiprintf_r+0x1f4>)
 8008a52:	a904      	add	r1, sp, #16
 8008a54:	4638      	mov	r0, r7
 8008a56:	f000 f879 	bl	8008b4c <_printf_i>
 8008a5a:	e7eb      	b.n	8008a34 <_svfiprintf_r+0x1c0>
 8008a5c:	080090a4 	.word	0x080090a4
 8008a60:	080090ae 	.word	0x080090ae
 8008a64:	00000000 	.word	0x00000000
 8008a68:	080087c1 	.word	0x080087c1
 8008a6c:	080090aa 	.word	0x080090aa

08008a70 <_printf_common>:
 8008a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a74:	4616      	mov	r6, r2
 8008a76:	4699      	mov	r9, r3
 8008a78:	688a      	ldr	r2, [r1, #8]
 8008a7a:	690b      	ldr	r3, [r1, #16]
 8008a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a80:	4293      	cmp	r3, r2
 8008a82:	bfb8      	it	lt
 8008a84:	4613      	movlt	r3, r2
 8008a86:	6033      	str	r3, [r6, #0]
 8008a88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a8c:	4607      	mov	r7, r0
 8008a8e:	460c      	mov	r4, r1
 8008a90:	b10a      	cbz	r2, 8008a96 <_printf_common+0x26>
 8008a92:	3301      	adds	r3, #1
 8008a94:	6033      	str	r3, [r6, #0]
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	0699      	lsls	r1, r3, #26
 8008a9a:	bf42      	ittt	mi
 8008a9c:	6833      	ldrmi	r3, [r6, #0]
 8008a9e:	3302      	addmi	r3, #2
 8008aa0:	6033      	strmi	r3, [r6, #0]
 8008aa2:	6825      	ldr	r5, [r4, #0]
 8008aa4:	f015 0506 	ands.w	r5, r5, #6
 8008aa8:	d106      	bne.n	8008ab8 <_printf_common+0x48>
 8008aaa:	f104 0a19 	add.w	sl, r4, #25
 8008aae:	68e3      	ldr	r3, [r4, #12]
 8008ab0:	6832      	ldr	r2, [r6, #0]
 8008ab2:	1a9b      	subs	r3, r3, r2
 8008ab4:	42ab      	cmp	r3, r5
 8008ab6:	dc26      	bgt.n	8008b06 <_printf_common+0x96>
 8008ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008abc:	1e13      	subs	r3, r2, #0
 8008abe:	6822      	ldr	r2, [r4, #0]
 8008ac0:	bf18      	it	ne
 8008ac2:	2301      	movne	r3, #1
 8008ac4:	0692      	lsls	r2, r2, #26
 8008ac6:	d42b      	bmi.n	8008b20 <_printf_common+0xb0>
 8008ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008acc:	4649      	mov	r1, r9
 8008ace:	4638      	mov	r0, r7
 8008ad0:	47c0      	blx	r8
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d01e      	beq.n	8008b14 <_printf_common+0xa4>
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	6922      	ldr	r2, [r4, #16]
 8008ada:	f003 0306 	and.w	r3, r3, #6
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	bf02      	ittt	eq
 8008ae2:	68e5      	ldreq	r5, [r4, #12]
 8008ae4:	6833      	ldreq	r3, [r6, #0]
 8008ae6:	1aed      	subeq	r5, r5, r3
 8008ae8:	68a3      	ldr	r3, [r4, #8]
 8008aea:	bf0c      	ite	eq
 8008aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008af0:	2500      	movne	r5, #0
 8008af2:	4293      	cmp	r3, r2
 8008af4:	bfc4      	itt	gt
 8008af6:	1a9b      	subgt	r3, r3, r2
 8008af8:	18ed      	addgt	r5, r5, r3
 8008afa:	2600      	movs	r6, #0
 8008afc:	341a      	adds	r4, #26
 8008afe:	42b5      	cmp	r5, r6
 8008b00:	d11a      	bne.n	8008b38 <_printf_common+0xc8>
 8008b02:	2000      	movs	r0, #0
 8008b04:	e008      	b.n	8008b18 <_printf_common+0xa8>
 8008b06:	2301      	movs	r3, #1
 8008b08:	4652      	mov	r2, sl
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	47c0      	blx	r8
 8008b10:	3001      	adds	r0, #1
 8008b12:	d103      	bne.n	8008b1c <_printf_common+0xac>
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295
 8008b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1c:	3501      	adds	r5, #1
 8008b1e:	e7c6      	b.n	8008aae <_printf_common+0x3e>
 8008b20:	18e1      	adds	r1, r4, r3
 8008b22:	1c5a      	adds	r2, r3, #1
 8008b24:	2030      	movs	r0, #48	; 0x30
 8008b26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b2a:	4422      	add	r2, r4
 8008b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b34:	3302      	adds	r3, #2
 8008b36:	e7c7      	b.n	8008ac8 <_printf_common+0x58>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	4638      	mov	r0, r7
 8008b40:	47c0      	blx	r8
 8008b42:	3001      	adds	r0, #1
 8008b44:	d0e6      	beq.n	8008b14 <_printf_common+0xa4>
 8008b46:	3601      	adds	r6, #1
 8008b48:	e7d9      	b.n	8008afe <_printf_common+0x8e>
	...

08008b4c <_printf_i>:
 8008b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b50:	7e0f      	ldrb	r7, [r1, #24]
 8008b52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b54:	2f78      	cmp	r7, #120	; 0x78
 8008b56:	4691      	mov	r9, r2
 8008b58:	4680      	mov	r8, r0
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	469a      	mov	sl, r3
 8008b5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b62:	d807      	bhi.n	8008b74 <_printf_i+0x28>
 8008b64:	2f62      	cmp	r7, #98	; 0x62
 8008b66:	d80a      	bhi.n	8008b7e <_printf_i+0x32>
 8008b68:	2f00      	cmp	r7, #0
 8008b6a:	f000 80d4 	beq.w	8008d16 <_printf_i+0x1ca>
 8008b6e:	2f58      	cmp	r7, #88	; 0x58
 8008b70:	f000 80c0 	beq.w	8008cf4 <_printf_i+0x1a8>
 8008b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b7c:	e03a      	b.n	8008bf4 <_printf_i+0xa8>
 8008b7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b82:	2b15      	cmp	r3, #21
 8008b84:	d8f6      	bhi.n	8008b74 <_printf_i+0x28>
 8008b86:	a101      	add	r1, pc, #4	; (adr r1, 8008b8c <_printf_i+0x40>)
 8008b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b8c:	08008be5 	.word	0x08008be5
 8008b90:	08008bf9 	.word	0x08008bf9
 8008b94:	08008b75 	.word	0x08008b75
 8008b98:	08008b75 	.word	0x08008b75
 8008b9c:	08008b75 	.word	0x08008b75
 8008ba0:	08008b75 	.word	0x08008b75
 8008ba4:	08008bf9 	.word	0x08008bf9
 8008ba8:	08008b75 	.word	0x08008b75
 8008bac:	08008b75 	.word	0x08008b75
 8008bb0:	08008b75 	.word	0x08008b75
 8008bb4:	08008b75 	.word	0x08008b75
 8008bb8:	08008cfd 	.word	0x08008cfd
 8008bbc:	08008c25 	.word	0x08008c25
 8008bc0:	08008cb7 	.word	0x08008cb7
 8008bc4:	08008b75 	.word	0x08008b75
 8008bc8:	08008b75 	.word	0x08008b75
 8008bcc:	08008d1f 	.word	0x08008d1f
 8008bd0:	08008b75 	.word	0x08008b75
 8008bd4:	08008c25 	.word	0x08008c25
 8008bd8:	08008b75 	.word	0x08008b75
 8008bdc:	08008b75 	.word	0x08008b75
 8008be0:	08008cbf 	.word	0x08008cbf
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	1d1a      	adds	r2, r3, #4
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	602a      	str	r2, [r5, #0]
 8008bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e09f      	b.n	8008d38 <_printf_i+0x1ec>
 8008bf8:	6820      	ldr	r0, [r4, #0]
 8008bfa:	682b      	ldr	r3, [r5, #0]
 8008bfc:	0607      	lsls	r7, r0, #24
 8008bfe:	f103 0104 	add.w	r1, r3, #4
 8008c02:	6029      	str	r1, [r5, #0]
 8008c04:	d501      	bpl.n	8008c0a <_printf_i+0xbe>
 8008c06:	681e      	ldr	r6, [r3, #0]
 8008c08:	e003      	b.n	8008c12 <_printf_i+0xc6>
 8008c0a:	0646      	lsls	r6, r0, #25
 8008c0c:	d5fb      	bpl.n	8008c06 <_printf_i+0xba>
 8008c0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c12:	2e00      	cmp	r6, #0
 8008c14:	da03      	bge.n	8008c1e <_printf_i+0xd2>
 8008c16:	232d      	movs	r3, #45	; 0x2d
 8008c18:	4276      	negs	r6, r6
 8008c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c1e:	485a      	ldr	r0, [pc, #360]	; (8008d88 <_printf_i+0x23c>)
 8008c20:	230a      	movs	r3, #10
 8008c22:	e012      	b.n	8008c4a <_printf_i+0xfe>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	6820      	ldr	r0, [r4, #0]
 8008c28:	1d19      	adds	r1, r3, #4
 8008c2a:	6029      	str	r1, [r5, #0]
 8008c2c:	0605      	lsls	r5, r0, #24
 8008c2e:	d501      	bpl.n	8008c34 <_printf_i+0xe8>
 8008c30:	681e      	ldr	r6, [r3, #0]
 8008c32:	e002      	b.n	8008c3a <_printf_i+0xee>
 8008c34:	0641      	lsls	r1, r0, #25
 8008c36:	d5fb      	bpl.n	8008c30 <_printf_i+0xe4>
 8008c38:	881e      	ldrh	r6, [r3, #0]
 8008c3a:	4853      	ldr	r0, [pc, #332]	; (8008d88 <_printf_i+0x23c>)
 8008c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c3e:	bf0c      	ite	eq
 8008c40:	2308      	moveq	r3, #8
 8008c42:	230a      	movne	r3, #10
 8008c44:	2100      	movs	r1, #0
 8008c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c4a:	6865      	ldr	r5, [r4, #4]
 8008c4c:	60a5      	str	r5, [r4, #8]
 8008c4e:	2d00      	cmp	r5, #0
 8008c50:	bfa2      	ittt	ge
 8008c52:	6821      	ldrge	r1, [r4, #0]
 8008c54:	f021 0104 	bicge.w	r1, r1, #4
 8008c58:	6021      	strge	r1, [r4, #0]
 8008c5a:	b90e      	cbnz	r6, 8008c60 <_printf_i+0x114>
 8008c5c:	2d00      	cmp	r5, #0
 8008c5e:	d04b      	beq.n	8008cf8 <_printf_i+0x1ac>
 8008c60:	4615      	mov	r5, r2
 8008c62:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c66:	fb03 6711 	mls	r7, r3, r1, r6
 8008c6a:	5dc7      	ldrb	r7, [r0, r7]
 8008c6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c70:	4637      	mov	r7, r6
 8008c72:	42bb      	cmp	r3, r7
 8008c74:	460e      	mov	r6, r1
 8008c76:	d9f4      	bls.n	8008c62 <_printf_i+0x116>
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	d10b      	bne.n	8008c94 <_printf_i+0x148>
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	07de      	lsls	r6, r3, #31
 8008c80:	d508      	bpl.n	8008c94 <_printf_i+0x148>
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	6861      	ldr	r1, [r4, #4]
 8008c86:	4299      	cmp	r1, r3
 8008c88:	bfde      	ittt	le
 8008c8a:	2330      	movle	r3, #48	; 0x30
 8008c8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c94:	1b52      	subs	r2, r2, r5
 8008c96:	6122      	str	r2, [r4, #16]
 8008c98:	f8cd a000 	str.w	sl, [sp]
 8008c9c:	464b      	mov	r3, r9
 8008c9e:	aa03      	add	r2, sp, #12
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	f7ff fee4 	bl	8008a70 <_printf_common>
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d14a      	bne.n	8008d42 <_printf_i+0x1f6>
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb0:	b004      	add	sp, #16
 8008cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	f043 0320 	orr.w	r3, r3, #32
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	4833      	ldr	r0, [pc, #204]	; (8008d8c <_printf_i+0x240>)
 8008cc0:	2778      	movs	r7, #120	; 0x78
 8008cc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	6829      	ldr	r1, [r5, #0]
 8008cca:	061f      	lsls	r7, r3, #24
 8008ccc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cd0:	d402      	bmi.n	8008cd8 <_printf_i+0x18c>
 8008cd2:	065f      	lsls	r7, r3, #25
 8008cd4:	bf48      	it	mi
 8008cd6:	b2b6      	uxthmi	r6, r6
 8008cd8:	07df      	lsls	r7, r3, #31
 8008cda:	bf48      	it	mi
 8008cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8008ce0:	6029      	str	r1, [r5, #0]
 8008ce2:	bf48      	it	mi
 8008ce4:	6023      	strmi	r3, [r4, #0]
 8008ce6:	b91e      	cbnz	r6, 8008cf0 <_printf_i+0x1a4>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	f023 0320 	bic.w	r3, r3, #32
 8008cee:	6023      	str	r3, [r4, #0]
 8008cf0:	2310      	movs	r3, #16
 8008cf2:	e7a7      	b.n	8008c44 <_printf_i+0xf8>
 8008cf4:	4824      	ldr	r0, [pc, #144]	; (8008d88 <_printf_i+0x23c>)
 8008cf6:	e7e4      	b.n	8008cc2 <_printf_i+0x176>
 8008cf8:	4615      	mov	r5, r2
 8008cfa:	e7bd      	b.n	8008c78 <_printf_i+0x12c>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	6826      	ldr	r6, [r4, #0]
 8008d00:	6961      	ldr	r1, [r4, #20]
 8008d02:	1d18      	adds	r0, r3, #4
 8008d04:	6028      	str	r0, [r5, #0]
 8008d06:	0635      	lsls	r5, r6, #24
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	d501      	bpl.n	8008d10 <_printf_i+0x1c4>
 8008d0c:	6019      	str	r1, [r3, #0]
 8008d0e:	e002      	b.n	8008d16 <_printf_i+0x1ca>
 8008d10:	0670      	lsls	r0, r6, #25
 8008d12:	d5fb      	bpl.n	8008d0c <_printf_i+0x1c0>
 8008d14:	8019      	strh	r1, [r3, #0]
 8008d16:	2300      	movs	r3, #0
 8008d18:	6123      	str	r3, [r4, #16]
 8008d1a:	4615      	mov	r5, r2
 8008d1c:	e7bc      	b.n	8008c98 <_printf_i+0x14c>
 8008d1e:	682b      	ldr	r3, [r5, #0]
 8008d20:	1d1a      	adds	r2, r3, #4
 8008d22:	602a      	str	r2, [r5, #0]
 8008d24:	681d      	ldr	r5, [r3, #0]
 8008d26:	6862      	ldr	r2, [r4, #4]
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	f7f7 fa78 	bl	8000220 <memchr>
 8008d30:	b108      	cbz	r0, 8008d36 <_printf_i+0x1ea>
 8008d32:	1b40      	subs	r0, r0, r5
 8008d34:	6060      	str	r0, [r4, #4]
 8008d36:	6863      	ldr	r3, [r4, #4]
 8008d38:	6123      	str	r3, [r4, #16]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d40:	e7aa      	b.n	8008c98 <_printf_i+0x14c>
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	462a      	mov	r2, r5
 8008d46:	4649      	mov	r1, r9
 8008d48:	4640      	mov	r0, r8
 8008d4a:	47d0      	blx	sl
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d0ad      	beq.n	8008cac <_printf_i+0x160>
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	079b      	lsls	r3, r3, #30
 8008d54:	d413      	bmi.n	8008d7e <_printf_i+0x232>
 8008d56:	68e0      	ldr	r0, [r4, #12]
 8008d58:	9b03      	ldr	r3, [sp, #12]
 8008d5a:	4298      	cmp	r0, r3
 8008d5c:	bfb8      	it	lt
 8008d5e:	4618      	movlt	r0, r3
 8008d60:	e7a6      	b.n	8008cb0 <_printf_i+0x164>
 8008d62:	2301      	movs	r3, #1
 8008d64:	4632      	mov	r2, r6
 8008d66:	4649      	mov	r1, r9
 8008d68:	4640      	mov	r0, r8
 8008d6a:	47d0      	blx	sl
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d09d      	beq.n	8008cac <_printf_i+0x160>
 8008d70:	3501      	adds	r5, #1
 8008d72:	68e3      	ldr	r3, [r4, #12]
 8008d74:	9903      	ldr	r1, [sp, #12]
 8008d76:	1a5b      	subs	r3, r3, r1
 8008d78:	42ab      	cmp	r3, r5
 8008d7a:	dcf2      	bgt.n	8008d62 <_printf_i+0x216>
 8008d7c:	e7eb      	b.n	8008d56 <_printf_i+0x20a>
 8008d7e:	2500      	movs	r5, #0
 8008d80:	f104 0619 	add.w	r6, r4, #25
 8008d84:	e7f5      	b.n	8008d72 <_printf_i+0x226>
 8008d86:	bf00      	nop
 8008d88:	080090b5 	.word	0x080090b5
 8008d8c:	080090c6 	.word	0x080090c6

08008d90 <memmove>:
 8008d90:	4288      	cmp	r0, r1
 8008d92:	b510      	push	{r4, lr}
 8008d94:	eb01 0402 	add.w	r4, r1, r2
 8008d98:	d902      	bls.n	8008da0 <memmove+0x10>
 8008d9a:	4284      	cmp	r4, r0
 8008d9c:	4623      	mov	r3, r4
 8008d9e:	d807      	bhi.n	8008db0 <memmove+0x20>
 8008da0:	1e43      	subs	r3, r0, #1
 8008da2:	42a1      	cmp	r1, r4
 8008da4:	d008      	beq.n	8008db8 <memmove+0x28>
 8008da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dae:	e7f8      	b.n	8008da2 <memmove+0x12>
 8008db0:	4402      	add	r2, r0
 8008db2:	4601      	mov	r1, r0
 8008db4:	428a      	cmp	r2, r1
 8008db6:	d100      	bne.n	8008dba <memmove+0x2a>
 8008db8:	bd10      	pop	{r4, pc}
 8008dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dc2:	e7f7      	b.n	8008db4 <memmove+0x24>

08008dc4 <_sbrk_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4d06      	ldr	r5, [pc, #24]	; (8008de0 <_sbrk_r+0x1c>)
 8008dc8:	2300      	movs	r3, #0
 8008dca:	4604      	mov	r4, r0
 8008dcc:	4608      	mov	r0, r1
 8008dce:	602b      	str	r3, [r5, #0]
 8008dd0:	f7f8 fa32 	bl	8001238 <_sbrk>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_sbrk_r+0x1a>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_sbrk_r+0x1a>
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	200004e4 	.word	0x200004e4

08008de4 <memcpy>:
 8008de4:	440a      	add	r2, r1
 8008de6:	4291      	cmp	r1, r2
 8008de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dec:	d100      	bne.n	8008df0 <memcpy+0xc>
 8008dee:	4770      	bx	lr
 8008df0:	b510      	push	{r4, lr}
 8008df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dfa:	4291      	cmp	r1, r2
 8008dfc:	d1f9      	bne.n	8008df2 <memcpy+0xe>
 8008dfe:	bd10      	pop	{r4, pc}

08008e00 <_realloc_r>:
 8008e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e04:	4680      	mov	r8, r0
 8008e06:	4614      	mov	r4, r2
 8008e08:	460e      	mov	r6, r1
 8008e0a:	b921      	cbnz	r1, 8008e16 <_realloc_r+0x16>
 8008e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e10:	4611      	mov	r1, r2
 8008e12:	f7ff bc49 	b.w	80086a8 <_malloc_r>
 8008e16:	b92a      	cbnz	r2, 8008e24 <_realloc_r+0x24>
 8008e18:	f7ff fbda 	bl	80085d0 <_free_r>
 8008e1c:	4625      	mov	r5, r4
 8008e1e:	4628      	mov	r0, r5
 8008e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e24:	f000 f81b 	bl	8008e5e <_malloc_usable_size_r>
 8008e28:	4284      	cmp	r4, r0
 8008e2a:	4607      	mov	r7, r0
 8008e2c:	d802      	bhi.n	8008e34 <_realloc_r+0x34>
 8008e2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e32:	d812      	bhi.n	8008e5a <_realloc_r+0x5a>
 8008e34:	4621      	mov	r1, r4
 8008e36:	4640      	mov	r0, r8
 8008e38:	f7ff fc36 	bl	80086a8 <_malloc_r>
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d0ed      	beq.n	8008e1e <_realloc_r+0x1e>
 8008e42:	42bc      	cmp	r4, r7
 8008e44:	4622      	mov	r2, r4
 8008e46:	4631      	mov	r1, r6
 8008e48:	bf28      	it	cs
 8008e4a:	463a      	movcs	r2, r7
 8008e4c:	f7ff ffca 	bl	8008de4 <memcpy>
 8008e50:	4631      	mov	r1, r6
 8008e52:	4640      	mov	r0, r8
 8008e54:	f7ff fbbc 	bl	80085d0 <_free_r>
 8008e58:	e7e1      	b.n	8008e1e <_realloc_r+0x1e>
 8008e5a:	4635      	mov	r5, r6
 8008e5c:	e7df      	b.n	8008e1e <_realloc_r+0x1e>

08008e5e <_malloc_usable_size_r>:
 8008e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e62:	1f18      	subs	r0, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bfbc      	itt	lt
 8008e68:	580b      	ldrlt	r3, [r1, r0]
 8008e6a:	18c0      	addlt	r0, r0, r3
 8008e6c:	4770      	bx	lr
	...

08008e70 <_init>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	bf00      	nop
 8008e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e76:	bc08      	pop	{r3}
 8008e78:	469e      	mov	lr, r3
 8008e7a:	4770      	bx	lr

08008e7c <_fini>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	bf00      	nop
 8008e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e82:	bc08      	pop	{r3}
 8008e84:	469e      	mov	lr, r3
 8008e86:	4770      	bx	lr
