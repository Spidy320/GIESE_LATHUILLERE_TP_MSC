
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000783c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007a14  08007a14  00017a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b9c  08007b9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ba4  08007ba4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  2000000c  08007bb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08007bb8  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001848d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c89  00000000  00000000  0003850c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  0003b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001029  00000000  00000000  0003c648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027cd0  00000000  00000000  0003d671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017aa8  00000000  00000000  00065341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ebcd  00000000  00000000  0007cde9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059b8  00000000  00000000  0018b9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  00191370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080079fc 	.word	0x080079fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080079fc 	.word	0x080079fc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 f825 	bl	8001566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f854 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fb0c 	bl	8000b3c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000524:	f000 f912 	bl	800074c <MX_ADC2_Init>
  MX_ADC1_Init();
 8000528:	f000 f898 	bl	800065c <MX_ADC1_Init>
  MX_TIM1_Init();
 800052c:	f000 f974 	bl	8000818 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000530:	f000 fa20 	bl	8000974 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000534:	f000 fa6a 	bl	8000a0c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000538:	f000 fab4 	bl	8000aa4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, started, 31, HAL_MAX_DELAY);
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
 8000540:	221f      	movs	r2, #31
 8000542:	491b      	ldr	r1, [pc, #108]	; (80005b0 <main+0x9c>)
 8000544:	481b      	ldr	r0, [pc, #108]	; (80005b4 <main+0xa0>)
 8000546:	f005 f9f4 	bl	8005932 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	2205      	movs	r2, #5
 8000550:	4919      	ldr	r1, [pc, #100]	; (80005b8 <main+0xa4>)
 8000552:	4818      	ldr	r0, [pc, #96]	; (80005b4 <main+0xa0>)
 8000554:	f005 f9ed 	bl	8005932 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 8000558:	2201      	movs	r2, #1
 800055a:	4918      	ldr	r1, [pc, #96]	; (80005bc <main+0xa8>)
 800055c:	4815      	ldr	r0, [pc, #84]	; (80005b4 <main+0xa0>)
 800055e:	f005 fa7f 	bl	8005a60 <HAL_UART_Receive_IT>
  /* PWM */
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,600);
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <main+0xac>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f44f 7216 	mov.w	r2, #600	; 0x258
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,400);
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <main+0xac>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000574:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000576:	2100      	movs	r1, #0
 8000578:	4811      	ldr	r0, [pc, #68]	; (80005c0 <main+0xac>)
 800057a:	f003 fe2d 	bl	80041d8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800057e:	2100      	movs	r1, #0
 8000580:	480f      	ldr	r0, [pc, #60]	; (80005c0 <main+0xac>)
 8000582:	f004 ff11 	bl	80053a8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000586:	2104      	movs	r1, #4
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <main+0xac>)
 800058a:	f003 fe25 	bl	80041d8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800058e:	2104      	movs	r1, #4
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <main+0xac>)
 8000592:	f004 ff09 	bl	80053a8 <HAL_TIMEx_PWMN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (it_uart){
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <main+0xb0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0fb      	beq.n	8000596 <main+0x82>
		  UART_Echo();
 800059e:	f000 fc11 	bl	8000dc4 <UART_Echo>
		  UART_Create_Cmd();
 80005a2:	f000 fb6b 	bl	8000c7c <UART_Create_Cmd>
		  it_uart = 0;
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <main+0xb0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
	  if (it_uart){
 80005ac:	e7f3      	b.n	8000596 <main+0x82>
 80005ae:	bf00      	nop
 80005b0:	08007a34 	.word	0x08007a34
 80005b4:	20000198 	.word	0x20000198
 80005b8:	08007a54 	.word	0x08007a54
 80005bc:	200002b8 	.word	0x200002b8
 80005c0:	20000100 	.word	0x20000100
 80005c4:	200002e0 	.word	0x200002e0

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	2238      	movs	r2, #56	; 0x38
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f007 f9d2 	bl	8007980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f002 fc5a 	bl	8002ea4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	2303      	movs	r3, #3
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000602:	2306      	movs	r3, #6
 8000604:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000606:	2355      	movs	r3, #85	; 0x55
 8000608:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fcf6 	bl	800300c <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000626:	f000 fc01 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2303      	movs	r3, #3
 8000630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fffa 	bl	800363c <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800064e:	f000 fbed 	bl	8000e2c <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	; 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2220      	movs	r2, #32
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f007 f983 	bl	8007980 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800067a:	4b32      	ldr	r3, [pc, #200]	; (8000744 <MX_ADC1_Init+0xe8>)
 800067c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000680:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000682:	4b30      	ldr	r3, [pc, #192]	; (8000744 <MX_ADC1_Init+0xe8>)
 8000684:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000688:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <MX_ADC1_Init+0xe8>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000690:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <MX_ADC1_Init+0xe8>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000696:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <MX_ADC1_Init+0xe8>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800069c:	4b29      	ldr	r3, [pc, #164]	; (8000744 <MX_ADC1_Init+0xe8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a2:	4b28      	ldr	r3, [pc, #160]	; (8000744 <MX_ADC1_Init+0xe8>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <MX_ADC1_Init+0xe8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ae:	4b25      	ldr	r3, [pc, #148]	; (8000744 <MX_ADC1_Init+0xe8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <MX_ADC1_Init+0xe8>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ba:	4b22      	ldr	r3, [pc, #136]	; (8000744 <MX_ADC1_Init+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <MX_ADC1_Init+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_ADC1_Init+0xe8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <MX_ADC1_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_ADC1_Init+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_ADC1_Init+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e4:	4817      	ldr	r0, [pc, #92]	; (8000744 <MX_ADC1_Init+0xe8>)
 80006e6:	f001 f94f 	bl	8001988 <HAL_ADC_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006f0:	f000 fb9c 	bl	8000e2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fc:	4619      	mov	r1, r3
 80006fe:	4811      	ldr	r0, [pc, #68]	; (8000744 <MX_ADC1_Init+0xe8>)
 8000700:	f001 ff6a 	bl	80025d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800070a:	f000 fb8f 	bl	8000e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_ADC1_Init+0xec>)
 8000710:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000712:	2306      	movs	r3, #6
 8000714:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800071a:	237f      	movs	r3, #127	; 0x7f
 800071c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071e:	2304      	movs	r3, #4
 8000720:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <MX_ADC1_Init+0xe8>)
 800072c:	f001 faee 	bl	8001d0c <HAL_ADC_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000736:	f000 fb79 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	3730      	adds	r7, #48	; 0x30
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000028 	.word	0x20000028
 8000748:	21800100 	.word	0x21800100

0800074c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2220      	movs	r2, #32
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f007 f911 	bl	8007980 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_ADC2_Init+0xc0>)
 8000760:	4a2b      	ldr	r2, [pc, #172]	; (8000810 <MX_ADC2_Init+0xc4>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <MX_ADC2_Init+0xc0>)
 8000766:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800076a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_ADC2_Init+0xc0>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_ADC2_Init+0xc0>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_ADC2_Init+0xc0>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_ADC2_Init+0xc0>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_ADC2_Init+0xc0>)
 8000786:	2204      	movs	r2, #4
 8000788:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_ADC2_Init+0xc0>)
 800078c:	2200      	movs	r2, #0
 800078e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_ADC2_Init+0xc0>)
 8000792:	2200      	movs	r2, #0
 8000794:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_ADC2_Init+0xc0>)
 8000798:	2201      	movs	r2, #1
 800079a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_ADC2_Init+0xc0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADC2_Init+0xc0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_ADC2_Init+0xc0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_ADC2_Init+0xc0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_ADC2_Init+0xc0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_ADC2_Init+0xc0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007c6:	4811      	ldr	r0, [pc, #68]	; (800080c <MX_ADC2_Init+0xc0>)
 80007c8:	f001 f8de 	bl	8001988 <HAL_ADC_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80007d2:	f000 fb2b 	bl	8000e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_ADC2_Init+0xc8>)
 80007d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007da:	2306      	movs	r3, #6
 80007dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007e2:	237f      	movs	r3, #127	; 0x7f
 80007e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e6:	2304      	movs	r3, #4
 80007e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_ADC2_Init+0xc0>)
 80007f4:	f001 fa8a 	bl	8001d0c <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007fe:	f000 fb15 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000094 	.word	0x20000094
 8000810:	50000100 	.word	0x50000100
 8000814:	19200040 	.word	0x19200040

08000818 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b098      	sub	sp, #96	; 0x60
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	615a      	str	r2, [r3, #20]
 800083c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2234      	movs	r2, #52	; 0x34
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f007 f89b 	bl	8007980 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800084a:	4b48      	ldr	r3, [pc, #288]	; (800096c <MX_TIM1_Init+0x154>)
 800084c:	4a48      	ldr	r2, [pc, #288]	; (8000970 <MX_TIM1_Init+0x158>)
 800084e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000850:	4b46      	ldr	r3, [pc, #280]	; (800096c <MX_TIM1_Init+0x154>)
 8000852:	2207      	movs	r2, #7
 8000854:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000856:	4b45      	ldr	r3, [pc, #276]	; (800096c <MX_TIM1_Init+0x154>)
 8000858:	2220      	movs	r2, #32
 800085a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800085c:	4b43      	ldr	r3, [pc, #268]	; (800096c <MX_TIM1_Init+0x154>)
 800085e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000862:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b41      	ldr	r3, [pc, #260]	; (800096c <MX_TIM1_Init+0x154>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800086a:	4b40      	ldr	r3, [pc, #256]	; (800096c <MX_TIM1_Init+0x154>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000870:	4b3e      	ldr	r3, [pc, #248]	; (800096c <MX_TIM1_Init+0x154>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000876:	483d      	ldr	r0, [pc, #244]	; (800096c <MX_TIM1_Init+0x154>)
 8000878:	f003 fc56 	bl	8004128 <HAL_TIM_PWM_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000882:	f000 fad3 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000892:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000896:	4619      	mov	r1, r3
 8000898:	4834      	ldr	r0, [pc, #208]	; (800096c <MX_TIM1_Init+0x154>)
 800089a:	f004 fe47 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008a4:	f000 fac2 	bl	8000e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a8:	2360      	movs	r3, #96	; 0x60
 80008aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 400;
 80008ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80008b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b2:	2300      	movs	r3, #0
 80008b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008b6:	2300      	movs	r3, #0
 80008b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ca:	2200      	movs	r2, #0
 80008cc:	4619      	mov	r1, r3
 80008ce:	4827      	ldr	r0, [pc, #156]	; (800096c <MX_TIM1_Init+0x154>)
 80008d0:	f003 ff14 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80008da:	f000 faa7 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008e2:	2204      	movs	r2, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4821      	ldr	r0, [pc, #132]	; (800096c <MX_TIM1_Init+0x154>)
 80008e8:	f003 ff08 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80008f2:	f000 fa9b 	bl	8000e2c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008fe:	2208      	movs	r2, #8
 8000900:	4619      	mov	r1, r3
 8000902:	481a      	ldr	r0, [pc, #104]	; (800096c <MX_TIM1_Init+0x154>)
 8000904:	f003 fefa 	bl	80046fc <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800090e:	f000 fa8d 	bl	8000e2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 44;
 800091e:	232c      	movs	r3, #44	; 0x2c
 8000920:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000938:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4807      	ldr	r0, [pc, #28]	; (800096c <MX_TIM1_Init+0x154>)
 8000950:	f004 fe82 	bl	8005658 <HAL_TIMEx_ConfigBreakDeadTime>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800095a:	f000 fa67 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <MX_TIM1_Init+0x154>)
 8000960:	f000 fc0a 	bl	8001178 <HAL_TIM_MspPostInit>

}
 8000964:	bf00      	nop
 8000966:	3760      	adds	r7, #96	; 0x60
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000100 	.word	0x20000100
 8000970:	40012c00 	.word	0x40012c00

08000974 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_TIM3_Init+0x90>)
 8000994:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <MX_TIM3_Init+0x94>)
 8000996:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_TIM3_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_TIM3_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_TIM3_Init+0x90>)
 80009a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_TIM3_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_TIM3_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_TIM3_Init+0x90>)
 80009d0:	f004 fc3b 	bl	800524a <HAL_TIMEx_HallSensor_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80009da:	f000 fa27 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80009de:	2350      	movs	r3, #80	; 0x50
 80009e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	; (8000a04 <MX_TIM3_Init+0x90>)
 80009ec:	f004 fd9e 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80009f6:	f000 fa19 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000014c 	.word	0x2000014c
 8000a08:	40000400 	.word	0x40000400

08000a0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a56:	f004 ff1c 	bl	8005892 <HAL_UART_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 f9e4 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a68:	f006 febf 	bl	80077ea <HAL_UARTEx_SetTxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 f9db 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4808      	ldr	r0, [pc, #32]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a7a:	f006 fef4 	bl	8007866 <HAL_UARTEx_SetRxFifoThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 f9d2 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a8a:	f006 fe75 	bl	8007778 <HAL_UARTEx_DisableFifoMode>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 f9ca 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000198 	.word	0x20000198
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000aaa:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aec:	4811      	ldr	r0, [pc, #68]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000aee:	f004 fed0 	bl	8005892 <HAL_UART_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000af8:	f000 f998 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000b00:	f006 fe73 	bl	80077ea <HAL_UARTEx_SetTxFifoThreshold>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b0a:	f000 f98f 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4808      	ldr	r0, [pc, #32]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000b12:	f006 fea8 	bl	8007866 <HAL_UARTEx_SetRxFifoThreshold>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b1c:	f000 f986 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000b22:	f006 fe29 	bl	8007778 <HAL_UARTEx_DisableFifoMode>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b2c:	f000 f97e 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000228 	.word	0x20000228
 8000b38:	40004800 	.word	0x40004800

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4a3e      	ldr	r2, [pc, #248]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4b3c      	ldr	r3, [pc, #240]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6a:	4b39      	ldr	r3, [pc, #228]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4a38      	ldr	r2, [pc, #224]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000b70:	f043 0320 	orr.w	r3, r3, #32
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0320 	and.w	r3, r3, #32
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b33      	ldr	r3, [pc, #204]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4a32      	ldr	r2, [pc, #200]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a2c      	ldr	r2, [pc, #176]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <MX_GPIO_Init+0x114>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2120      	movs	r1, #32
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f002 f92b 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2104      	movs	r1, #4
 8000bda:	481e      	ldr	r0, [pc, #120]	; (8000c54 <MX_GPIO_Init+0x118>)
 8000bdc:	f002 f926 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4818      	ldr	r0, [pc, #96]	; (8000c58 <MX_GPIO_Init+0x11c>)
 8000bf8:	f001 ff96 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c16:	f001 ff87 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_SafetyUC_Pin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <MX_GPIO_Init+0x118>)
 8000c32:	f001 ff79 	bl	8002b28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2028      	movs	r0, #40	; 0x28
 8000c3c:	f001 fe8c 	bl	8002958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c40:	2028      	movs	r0, #40	; 0x28
 8000c42:	f001 fea3 	bl	800298c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000
 8000c54:	48000c00 	.word	0x48000c00
 8000c58:	48000800 	.word	0x48000800

08000c5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	it_uart = 1;
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <HAL_UART_RxCpltCallback+0x1c>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	200002e0 	.word	0x200002e0

08000c7c <UART_Create_Cmd>:

void UART_Create_Cmd(void){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	if (buffer_cmd[0] == '\r'){
 8000c80:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <UART_Create_Cmd+0x110>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b0d      	cmp	r3, #13
 8000c86:	d16d      	bne.n	8000d64 <UART_Create_Cmd+0xe8>
		if (!(strncmp(cmd,"help",4))){
 8000c88:	2204      	movs	r2, #4
 8000c8a:	4941      	ldr	r1, [pc, #260]	; (8000d90 <UART_Create_Cmd+0x114>)
 8000c8c:	4841      	ldr	r0, [pc, #260]	; (8000d94 <UART_Create_Cmd+0x118>)
 8000c8e:	f006 fe7f 	bl	8007990 <strncmp>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d10e      	bne.n	8000cb6 <UART_Create_Cmd+0x3a>
			HAL_UART_Transmit(&huart2, help, 157, HAL_MAX_DELAY);
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	229d      	movs	r2, #157	; 0x9d
 8000c9e:	493e      	ldr	r1, [pc, #248]	; (8000d98 <UART_Create_Cmd+0x11c>)
 8000ca0:	483e      	ldr	r0, [pc, #248]	; (8000d9c <UART_Create_Cmd+0x120>)
 8000ca2:	f004 fe46 	bl	8005932 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	2205      	movs	r2, #5
 8000cac:	493c      	ldr	r1, [pc, #240]	; (8000da0 <UART_Create_Cmd+0x124>)
 8000cae:	483b      	ldr	r0, [pc, #236]	; (8000d9c <UART_Create_Cmd+0x120>)
 8000cb0:	f004 fe3f 	bl	8005932 <HAL_UART_Transmit>
 8000cb4:	e052      	b.n	8000d5c <UART_Create_Cmd+0xe0>
		}else if(!(strncmp(cmd,"pinout",6))){
 8000cb6:	2206      	movs	r2, #6
 8000cb8:	493a      	ldr	r1, [pc, #232]	; (8000da4 <UART_Create_Cmd+0x128>)
 8000cba:	4836      	ldr	r0, [pc, #216]	; (8000d94 <UART_Create_Cmd+0x118>)
 8000cbc:	f006 fe68 	bl	8007990 <strncmp>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10e      	bne.n	8000ce4 <UART_Create_Cmd+0x68>
			HAL_UART_Transmit(&huart2, pinout, 24, HAL_MAX_DELAY);
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	2218      	movs	r2, #24
 8000ccc:	4936      	ldr	r1, [pc, #216]	; (8000da8 <UART_Create_Cmd+0x12c>)
 8000cce:	4833      	ldr	r0, [pc, #204]	; (8000d9c <UART_Create_Cmd+0x120>)
 8000cd0:	f004 fe2f 	bl	8005932 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	2205      	movs	r2, #5
 8000cda:	4931      	ldr	r1, [pc, #196]	; (8000da0 <UART_Create_Cmd+0x124>)
 8000cdc:	482f      	ldr	r0, [pc, #188]	; (8000d9c <UART_Create_Cmd+0x120>)
 8000cde:	f004 fe28 	bl	8005932 <HAL_UART_Transmit>
 8000ce2:	e03b      	b.n	8000d5c <UART_Create_Cmd+0xe0>
		}else if(!(strncmp(cmd,"start",5))){
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4931      	ldr	r1, [pc, #196]	; (8000dac <UART_Create_Cmd+0x130>)
 8000ce8:	482a      	ldr	r0, [pc, #168]	; (8000d94 <UART_Create_Cmd+0x118>)
 8000cea:	f006 fe51 	bl	8007990 <strncmp>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10e      	bne.n	8000d12 <UART_Create_Cmd+0x96>
			HAL_UART_Transmit(&huart2, powerOn, 23, HAL_MAX_DELAY);
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf8:	2217      	movs	r2, #23
 8000cfa:	492d      	ldr	r1, [pc, #180]	; (8000db0 <UART_Create_Cmd+0x134>)
 8000cfc:	4827      	ldr	r0, [pc, #156]	; (8000d9c <UART_Create_Cmd+0x120>)
 8000cfe:	f004 fe18 	bl	8005932 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	2205      	movs	r2, #5
 8000d08:	4925      	ldr	r1, [pc, #148]	; (8000da0 <UART_Create_Cmd+0x124>)
 8000d0a:	4824      	ldr	r0, [pc, #144]	; (8000d9c <UART_Create_Cmd+0x120>)
 8000d0c:	f004 fe11 	bl	8005932 <HAL_UART_Transmit>
 8000d10:	e024      	b.n	8000d5c <UART_Create_Cmd+0xe0>
		}else if(!(strncmp(cmd,"stop",4))){
 8000d12:	2204      	movs	r2, #4
 8000d14:	4927      	ldr	r1, [pc, #156]	; (8000db4 <UART_Create_Cmd+0x138>)
 8000d16:	481f      	ldr	r0, [pc, #124]	; (8000d94 <UART_Create_Cmd+0x118>)
 8000d18:	f006 fe3a 	bl	8007990 <strncmp>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10e      	bne.n	8000d40 <UART_Create_Cmd+0xc4>
			HAL_UART_Transmit(&huart2, powerOff, 23, HAL_MAX_DELAY);
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	2217      	movs	r2, #23
 8000d28:	4923      	ldr	r1, [pc, #140]	; (8000db8 <UART_Create_Cmd+0x13c>)
 8000d2a:	481c      	ldr	r0, [pc, #112]	; (8000d9c <UART_Create_Cmd+0x120>)
 8000d2c:	f004 fe01 	bl	8005932 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	2205      	movs	r2, #5
 8000d36:	491a      	ldr	r1, [pc, #104]	; (8000da0 <UART_Create_Cmd+0x124>)
 8000d38:	4818      	ldr	r0, [pc, #96]	; (8000d9c <UART_Create_Cmd+0x120>)
 8000d3a:	f004 fdfa 	bl	8005932 <HAL_UART_Transmit>
 8000d3e:	e00d      	b.n	8000d5c <UART_Create_Cmd+0xe0>
		}else{
			HAL_UART_Transmit(&huart2, cmdNotFound, 17, HAL_MAX_DELAY);
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	2211      	movs	r2, #17
 8000d46:	491d      	ldr	r1, [pc, #116]	; (8000dbc <UART_Create_Cmd+0x140>)
 8000d48:	4814      	ldr	r0, [pc, #80]	; (8000d9c <UART_Create_Cmd+0x120>)
 8000d4a:	f004 fdf2 	bl	8005932 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	2205      	movs	r2, #5
 8000d54:	4912      	ldr	r1, [pc, #72]	; (8000da0 <UART_Create_Cmd+0x124>)
 8000d56:	4811      	ldr	r0, [pc, #68]	; (8000d9c <UART_Create_Cmd+0x120>)
 8000d58:	f004 fdeb 	bl	8005932 <HAL_UART_Transmit>
		}
		idxCmd = 0;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <UART_Create_Cmd+0x144>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
			idxCmd = 0;
		}
	}


}
 8000d62:	e011      	b.n	8000d88 <UART_Create_Cmd+0x10c>
		cmd[idxCmd] = buffer_cmd[0];
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <UART_Create_Cmd+0x144>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <UART_Create_Cmd+0x110>)
 8000d6a:	7811      	ldrb	r1, [r2, #0]
 8000d6c:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <UART_Create_Cmd+0x118>)
 8000d6e:	54d1      	strb	r1, [r2, r3]
		idxCmd += 1;
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <UART_Create_Cmd+0x144>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <UART_Create_Cmd+0x144>)
 8000d78:	6013      	str	r3, [r2, #0]
		if (idxCmd > CMD_BUFFER_SIZE){
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <UART_Create_Cmd+0x144>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b20      	cmp	r3, #32
 8000d80:	dd02      	ble.n	8000d88 <UART_Create_Cmd+0x10c>
			idxCmd = 0;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <UART_Create_Cmd+0x144>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200002b8 	.word	0x200002b8
 8000d90:	08007a14 	.word	0x08007a14
 8000d94:	200002bc 	.word	0x200002bc
 8000d98:	08007a5c 	.word	0x08007a5c
 8000d9c:	20000198 	.word	0x20000198
 8000da0:	08007a54 	.word	0x08007a54
 8000da4:	08007a1c 	.word	0x08007a1c
 8000da8:	08007afc 	.word	0x08007afc
 8000dac:	08007a24 	.word	0x08007a24
 8000db0:	08007b18 	.word	0x08007b18
 8000db4:	08007a2c 	.word	0x08007a2c
 8000db8:	08007b30 	.word	0x08007b30
 8000dbc:	08007b48 	.word	0x08007b48
 8000dc0:	200002dc 	.word	0x200002dc

08000dc4 <UART_Echo>:

void UART_Echo(void){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	if (buffer_cmd[0] == '\r'){
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <UART_Echo+0x38>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b0d      	cmp	r3, #13
 8000dce:	d107      	bne.n	8000de0 <UART_Echo+0x1c>
	  HAL_UART_Transmit(&huart2, newLine, 2, HAL_MAX_DELAY);
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	490a      	ldr	r1, [pc, #40]	; (8000e00 <UART_Echo+0x3c>)
 8000dd8:	480a      	ldr	r0, [pc, #40]	; (8000e04 <UART_Echo+0x40>)
 8000dda:	f004 fdaa 	bl	8005932 <HAL_UART_Transmit>
 8000dde:	e006      	b.n	8000dee <UART_Echo+0x2a>
	}else{
	  HAL_UART_Transmit(&huart2, buffer_cmd, 1, HAL_MAX_DELAY);
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	2201      	movs	r2, #1
 8000de6:	4905      	ldr	r1, [pc, #20]	; (8000dfc <UART_Echo+0x38>)
 8000de8:	4806      	ldr	r0, [pc, #24]	; (8000e04 <UART_Echo+0x40>)
 8000dea:	f004 fda2 	bl	8005932 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 8000dee:	2201      	movs	r2, #1
 8000df0:	4902      	ldr	r1, [pc, #8]	; (8000dfc <UART_Echo+0x38>)
 8000df2:	4804      	ldr	r0, [pc, #16]	; (8000e04 <UART_Echo+0x40>)
 8000df4:	f004 fe34 	bl	8005a60 <HAL_UART_Receive_IT>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200002b8 	.word	0x200002b8
 8000e00:	08007a54 	.word	0x08007a54
 8000e04:	20000198 	.word	0x20000198

08000e08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e1a:	f000 fbbd 	bl	8001598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40001000 	.word	0x40001000

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_MspInit+0x44>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_MspInit+0x44>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_MspInit+0x44>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_MspInit+0x44>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_MspInit+0x44>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	6593      	str	r3, [r2, #88]	; 0x58
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_MspInit+0x44>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e6e:	f002 f8bd 	bl	8002fec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0a4      	sub	sp, #144	; 0x90
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e9c:	2254      	movs	r2, #84	; 0x54
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 fd6d 	bl	8007980 <memset>
  if(hadc->Instance==ADC1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eae:	d174      	bne.n	8000f9a <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000eb6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000eba:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fe09 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ecc:	f7ff ffae 	bl	8000e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ed0:	4b63      	ldr	r3, [pc, #396]	; (8001060 <HAL_ADC_MspInit+0x1e0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a62      	ldr	r2, [pc, #392]	; (8001060 <HAL_ADC_MspInit+0x1e0>)
 8000ed8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eda:	4b61      	ldr	r3, [pc, #388]	; (8001060 <HAL_ADC_MspInit+0x1e0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d10b      	bne.n	8000efa <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ee2:	4b60      	ldr	r3, [pc, #384]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a5f      	ldr	r2, [pc, #380]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000ee8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b5d      	ldr	r3, [pc, #372]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	4b5a      	ldr	r3, [pc, #360]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	4a59      	ldr	r2, [pc, #356]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f06:	4b57      	ldr	r3, [pc, #348]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	623b      	str	r3, [r7, #32]
 8000f10:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b54      	ldr	r3, [pc, #336]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4a53      	ldr	r2, [pc, #332]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4b51      	ldr	r3, [pc, #324]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
 8000f28:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	4b4e      	ldr	r3, [pc, #312]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	4a4d      	ldr	r2, [pc, #308]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f36:	4b4b      	ldr	r3, [pc, #300]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
 8000f40:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000f42:	2304      	movs	r3, #4
 8000f44:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f46:	2303      	movs	r3, #3
 8000f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f56:	4619      	mov	r1, r3
 8000f58:	4843      	ldr	r0, [pc, #268]	; (8001068 <HAL_ADC_MspInit+0x1e8>)
 8000f5a:	f001 fde5 	bl	8002b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f62:	2303      	movs	r3, #3
 8000f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f72:	4619      	mov	r1, r3
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f001 fdd6 	bl	8002b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f80:	2303      	movs	r3, #3
 8000f82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f90:	4619      	mov	r1, r3
 8000f92:	4836      	ldr	r0, [pc, #216]	; (800106c <HAL_ADC_MspInit+0x1ec>)
 8000f94:	f001 fdc8 	bl	8002b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f98:	e05e      	b.n	8001058 <HAL_ADC_MspInit+0x1d8>
  else if(hadc->Instance==ADC2)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a34      	ldr	r2, [pc, #208]	; (8001070 <HAL_ADC_MspInit+0x1f0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d159      	bne.n	8001058 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000faa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fae:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fd8f 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000fc0:	f7ff ff34 	bl	8000e2c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <HAL_ADC_MspInit+0x1e0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a25      	ldr	r2, [pc, #148]	; (8001060 <HAL_ADC_MspInit+0x1e0>)
 8000fcc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fce:	4b24      	ldr	r3, [pc, #144]	; (8001060 <HAL_ADC_MspInit+0x1e0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10b      	bne.n	8000fee <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a22      	ldr	r2, [pc, #136]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000fdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_ADC_MspInit+0x1e4>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800101e:	230b      	movs	r3, #11
 8001020:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001022:	2303      	movs	r3, #3
 8001024:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <HAL_ADC_MspInit+0x1e8>)
 8001036:	f001 fd77 	bl	8002b28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800103a:	2301      	movs	r3, #1
 800103c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800103e:	2303      	movs	r3, #3
 8001040:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f001 fd68 	bl	8002b28 <HAL_GPIO_Init>
}
 8001058:	bf00      	nop
 800105a:	3790      	adds	r7, #144	; 0x90
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200002e4 	.word	0x200002e4
 8001064:	40021000 	.word	0x40021000
 8001068:	48000800 	.word	0x48000800
 800106c:	48000400 	.word	0x48000400
 8001070:	50000100 	.word	0x50000100

08001074 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_TIM_PWM_MspInit+0x38>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10b      	bne.n	800109e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800108c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001090:	6613      	str	r3, [r2, #96]	; 0x60
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40012c00 	.word	0x40012c00
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM3)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a26      	ldr	r2, [pc, #152]	; (800116c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d145      	bne.n	8001162 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	4a25      	ldr	r2, [pc, #148]	; (8001170 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6593      	str	r3, [r2, #88]	; 0x58
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a1f      	ldr	r2, [pc, #124]	; (8001170 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800111e:	2350      	movs	r3, #80	; 0x50
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800112e:	2302      	movs	r3, #2
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113c:	f001 fcf4 	bl	8002b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001152:	2302      	movs	r3, #2
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800115e:	f001 fce3 	bl	8002b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40000400 	.word	0x40000400
 8001170:	40021000 	.word	0x40021000
 8001174:	48000800 	.word	0x48000800

08001178 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a29      	ldr	r2, [pc, #164]	; (800123c <HAL_TIM_MspPostInit+0xc4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d14b      	bne.n	8001232 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <HAL_TIM_MspPostInit+0xc8>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4a28      	ldr	r2, [pc, #160]	; (8001240 <HAL_TIM_MspPostInit+0xc8>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <HAL_TIM_MspPostInit+0xc8>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <HAL_TIM_MspPostInit+0xc8>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a22      	ldr	r2, [pc, #136]	; (8001240 <HAL_TIM_MspPostInit+0xc8>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_TIM_MspPostInit+0xc8>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80011ca:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80011dc:	2306      	movs	r3, #6
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4817      	ldr	r0, [pc, #92]	; (8001244 <HAL_TIM_MspPostInit+0xcc>)
 80011e8:	f001 fc9e 	bl	8002b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80011ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80011fe:	2304      	movs	r3, #4
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	480e      	ldr	r0, [pc, #56]	; (8001244 <HAL_TIM_MspPostInit+0xcc>)
 800120a:	f001 fc8d 	bl	8002b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800120e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001220:	2306      	movs	r3, #6
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f001 fc7b 	bl	8002b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40012c00 	.word	0x40012c00
 8001240:	40021000 	.word	0x40021000
 8001244:	48000400 	.word	0x48000400

08001248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0a0      	sub	sp, #128	; 0x80
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	2254      	movs	r2, #84	; 0x54
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f006 fb89 	bl	8007980 <memset>
  if(huart->Instance==USART2)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a41      	ldr	r2, [pc, #260]	; (8001378 <HAL_UART_MspInit+0x130>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d13f      	bne.n	80012f8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001278:	2302      	movs	r3, #2
 800127a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001280:	f107 0318 	add.w	r3, r7, #24
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fc27 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001290:	f7ff fdcc 	bl	8000e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001294:	4b39      	ldr	r3, [pc, #228]	; (800137c <HAL_UART_MspInit+0x134>)
 8001296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001298:	4a38      	ldr	r2, [pc, #224]	; (800137c <HAL_UART_MspInit+0x134>)
 800129a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129e:	6593      	str	r3, [r2, #88]	; 0x58
 80012a0:	4b36      	ldr	r3, [pc, #216]	; (800137c <HAL_UART_MspInit+0x134>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b33      	ldr	r3, [pc, #204]	; (800137c <HAL_UART_MspInit+0x134>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b0:	4a32      	ldr	r2, [pc, #200]	; (800137c <HAL_UART_MspInit+0x134>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b8:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_UART_MspInit+0x134>)
 80012ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012c4:	230c      	movs	r3, #12
 80012c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d4:	2307      	movs	r3, #7
 80012d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012dc:	4619      	mov	r1, r3
 80012de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e2:	f001 fc21 	bl	8002b28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2026      	movs	r0, #38	; 0x26
 80012ec:	f001 fb34 	bl	8002958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012f0:	2026      	movs	r0, #38	; 0x26
 80012f2:	f001 fb4b 	bl	800298c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012f6:	e03b      	b.n	8001370 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a20      	ldr	r2, [pc, #128]	; (8001380 <HAL_UART_MspInit+0x138>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d136      	bne.n	8001370 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001302:	2304      	movs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	4618      	mov	r0, r3
 8001310:	f002 fbe2 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800131a:	f7ff fd87 	bl	8000e2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_UART_MspInit+0x134>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <HAL_UART_MspInit+0x134>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001328:	6593      	str	r3, [r2, #88]	; 0x58
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <HAL_UART_MspInit+0x134>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_UART_MspInit+0x134>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <HAL_UART_MspInit+0x134>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_UART_MspInit+0x134>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800134e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001352:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001360:	2307      	movs	r3, #7
 8001362:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001364:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <HAL_UART_MspInit+0x13c>)
 800136c:	f001 fbdc 	bl	8002b28 <HAL_GPIO_Init>
}
 8001370:	bf00      	nop
 8001372:	3780      	adds	r7, #128	; 0x80
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40004400 	.word	0x40004400
 800137c:	40021000 	.word	0x40021000
 8001380:	40004800 	.word	0x40004800
 8001384:	48000800 	.word	0x48000800

08001388 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001398:	4b2c      	ldr	r3, [pc, #176]	; (800144c <HAL_InitTick+0xc4>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	4a2b      	ldr	r2, [pc, #172]	; (800144c <HAL_InitTick+0xc4>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6593      	str	r3, [r2, #88]	; 0x58
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <HAL_InitTick+0xc4>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013b0:	f107 020c 	add.w	r2, r7, #12
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 fb14 	bl	80039e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013c0:	f002 fae6 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80013c4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c8:	4a21      	ldr	r2, [pc, #132]	; (8001450 <HAL_InitTick+0xc8>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0c9b      	lsrs	r3, r3, #18
 80013d0:	3b01      	subs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_InitTick+0xcc>)
 80013d6:	4a20      	ldr	r2, [pc, #128]	; (8001458 <HAL_InitTick+0xd0>)
 80013d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_InitTick+0xcc>)
 80013dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013e2:	4a1c      	ldr	r2, [pc, #112]	; (8001454 <HAL_InitTick+0xcc>)
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <HAL_InitTick+0xcc>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_InitTick+0xcc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80013f4:	4817      	ldr	r0, [pc, #92]	; (8001454 <HAL_InitTick+0xcc>)
 80013f6:	f002 fdbd 	bl	8003f74 <HAL_TIM_Base_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001404:	2b00      	cmp	r3, #0
 8001406:	d11b      	bne.n	8001440 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001408:	4812      	ldr	r0, [pc, #72]	; (8001454 <HAL_InitTick+0xcc>)
 800140a:	f002 fe15 	bl	8004038 <HAL_TIM_Base_Start_IT>
 800140e:	4603      	mov	r3, r0
 8001410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001414:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001418:	2b00      	cmp	r3, #0
 800141a:	d111      	bne.n	8001440 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800141c:	2036      	movs	r0, #54	; 0x36
 800141e:	f001 fab5 	bl	800298c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d808      	bhi.n	800143a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	2036      	movs	r0, #54	; 0x36
 800142e:	f001 fa93 	bl	8002958 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_InitTick+0xd4>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	e002      	b.n	8001440 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001444:	4618      	mov	r0, r3
 8001446:	3730      	adds	r7, #48	; 0x30
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	431bde83 	.word	0x431bde83
 8001454:	200002e8 	.word	0x200002e8
 8001458:	40001000 	.word	0x40001000
 800145c:	20000004 	.word	0x20000004

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <MemManage_Handler+0x4>

08001472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler+0x4>

0800147e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <USART2_IRQHandler+0x10>)
 80014be:	f004 fb25 	bl	8005b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000198 	.word	0x20000198

080014cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80014d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014d4:	f001 fcc2 	bl	8002e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <TIM6_DAC_IRQHandler+0x10>)
 80014e2:	f002 ff8b 	bl	80043fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200002e8 	.word	0x200002e8

080014f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <SystemInit+0x20>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <SystemInit+0x20>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001516:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <LoopForever+0x6>)
  ldr r1, =_edata
 800151a:	490e      	ldr	r1, [pc, #56]	; (8001554 <LoopForever+0xa>)
  ldr r2, =_sidata
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <LoopForever+0xe>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001530:	4c0b      	ldr	r4, [pc, #44]	; (8001560 <LoopForever+0x16>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800153e:	f7ff ffd7 	bl	80014f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001542:	f006 fa37 	bl	80079b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001546:	f7fe ffe5 	bl	8000514 <main>

0800154a <LoopForever>:

LoopForever:
    b LoopForever
 800154a:	e7fe      	b.n	800154a <LoopForever>
  ldr   r0, =_estack
 800154c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001558:	08007bac 	.word	0x08007bac
  ldr r2, =_sbss
 800155c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001560:	20000338 	.word	0x20000338

08001564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC1_2_IRQHandler>

08001566 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f001 f9e6 	bl	8002942 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001576:	200f      	movs	r0, #15
 8001578:	f7ff ff06 	bl	8001388 <HAL_InitTick>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	71fb      	strb	r3, [r7, #7]
 8001586:	e001      	b.n	800158c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001588:	f7ff fc56 	bl	8000e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800158c:	79fb      	ldrb	r3, [r7, #7]

}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_IncTick+0x1c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_IncTick+0x20>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <HAL_IncTick+0x1c>)
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	20000334 	.word	0x20000334
 80015b8:	20000008 	.word	0x20000008

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000334 	.word	0x20000334

080015d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	609a      	str	r2, [r3, #8]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	609a      	str	r2, [r3, #8]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3360      	adds	r3, #96	; 0x60
 800164e:	461a      	mov	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <LL_ADC_SetOffset+0x44>)
 800165e:	4013      	ands	r3, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	4313      	orrs	r3, r2
 800166c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001674:	bf00      	nop
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	03fff000 	.word	0x03fff000

08001684 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3360      	adds	r3, #96	; 0x60
 8001692:	461a      	mov	r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3360      	adds	r3, #96	; 0x60
 80016c0:	461a      	mov	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016da:	bf00      	nop
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b087      	sub	sp, #28
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3360      	adds	r3, #96	; 0x60
 80016f6:	461a      	mov	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	431a      	orrs	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3360      	adds	r3, #96	; 0x60
 800172c:	461a      	mov	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	431a      	orrs	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001746:	bf00      	nop
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	615a      	str	r2, [r3, #20]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3330      	adds	r3, #48	; 0x30
 8001788:	461a      	mov	r2, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	4413      	add	r3, r2
 8001796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	211f      	movs	r1, #31
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	401a      	ands	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	0e9b      	lsrs	r3, r3, #26
 80017b0:	f003 011f 	and.w	r1, r3, #31
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	431a      	orrs	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017c4:	bf00      	nop
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3314      	adds	r3, #20
 80017e0:	461a      	mov	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	0e5b      	lsrs	r3, r3, #25
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	0d1b      	lsrs	r3, r3, #20
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	2107      	movs	r1, #7
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	401a      	ands	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	0d1b      	lsrs	r3, r3, #20
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	431a      	orrs	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d10a      	bne.n	8001852 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001848:	431a      	orrs	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001850:	e00a      	b.n	8001868 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185e:	43db      	mvns	r3, r3
 8001860:	401a      	ands	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	407f0000 	.word	0x407f0000

08001878 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6093      	str	r3, [r2, #8]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018b0:	d101      	bne.n	80018b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001900:	d101      	bne.n	8001906 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <LL_ADC_IsEnabled+0x18>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <LL_ADC_IsEnabled+0x1a>
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	2b04      	cmp	r3, #4
 800194c:	d101      	bne.n	8001952 <LL_ADC_REG_IsConversionOngoing+0x18>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b08      	cmp	r3, #8
 8001972:	d101      	bne.n	8001978 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e1af      	b.n	8001d02 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d109      	bne.n	80019c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fa65 	bl	8000e80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff67 	bl	800189c <LL_ADC_IsDeepPowerDownEnabled>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff4d 	bl	8001878 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff82 	bl	80018ec <LL_ADC_IsInternalRegulatorEnabled>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d115      	bne.n	8001a1a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff66 	bl	80018c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019f8:	4b9f      	ldr	r3, [pc, #636]	; (8001c78 <HAL_ADC_Init+0x2f0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	099b      	lsrs	r3, r3, #6
 80019fe:	4a9f      	ldr	r2, [pc, #636]	; (8001c7c <HAL_ADC_Init+0x2f4>)
 8001a00:	fba2 2303 	umull	r2, r3, r2, r3
 8001a04:	099b      	lsrs	r3, r3, #6
 8001a06:	3301      	adds	r3, #1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a0c:	e002      	b.n	8001a14 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f9      	bne.n	8001a0e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff64 	bl	80018ec <LL_ADC_IsInternalRegulatorEnabled>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10d      	bne.n	8001a46 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	f043 0210 	orr.w	r2, r3, #16
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3a:	f043 0201 	orr.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff75 	bl	800193a <LL_ADC_REG_IsConversionOngoing>
 8001a50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 8148 	bne.w	8001cf0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f040 8144 	bne.w	8001cf0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a70:	f043 0202 	orr.w	r2, r3, #2
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff49 	bl	8001914 <LL_ADC_IsEnabled>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d141      	bne.n	8001b0c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a90:	d004      	beq.n	8001a9c <HAL_ADC_Init+0x114>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a7a      	ldr	r2, [pc, #488]	; (8001c80 <HAL_ADC_Init+0x2f8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d10f      	bne.n	8001abc <HAL_ADC_Init+0x134>
 8001a9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001aa0:	f7ff ff38 	bl	8001914 <LL_ADC_IsEnabled>
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	4876      	ldr	r0, [pc, #472]	; (8001c80 <HAL_ADC_Init+0x2f8>)
 8001aa8:	f7ff ff34 	bl	8001914 <LL_ADC_IsEnabled>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4323      	orrs	r3, r4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf0c      	ite	eq
 8001ab4:	2301      	moveq	r3, #1
 8001ab6:	2300      	movne	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	e012      	b.n	8001ae2 <HAL_ADC_Init+0x15a>
 8001abc:	4871      	ldr	r0, [pc, #452]	; (8001c84 <HAL_ADC_Init+0x2fc>)
 8001abe:	f7ff ff29 	bl	8001914 <LL_ADC_IsEnabled>
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	4870      	ldr	r0, [pc, #448]	; (8001c88 <HAL_ADC_Init+0x300>)
 8001ac6:	f7ff ff25 	bl	8001914 <LL_ADC_IsEnabled>
 8001aca:	4603      	mov	r3, r0
 8001acc:	431c      	orrs	r4, r3
 8001ace:	486f      	ldr	r0, [pc, #444]	; (8001c8c <HAL_ADC_Init+0x304>)
 8001ad0:	f7ff ff20 	bl	8001914 <LL_ADC_IsEnabled>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4323      	orrs	r3, r4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d012      	beq.n	8001b0c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aee:	d004      	beq.n	8001afa <HAL_ADC_Init+0x172>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a62      	ldr	r2, [pc, #392]	; (8001c80 <HAL_ADC_Init+0x2f8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_Init+0x176>
 8001afa:	4a65      	ldr	r2, [pc, #404]	; (8001c90 <HAL_ADC_Init+0x308>)
 8001afc:	e000      	b.n	8001b00 <HAL_ADC_Init+0x178>
 8001afe:	4a65      	ldr	r2, [pc, #404]	; (8001c94 <HAL_ADC_Init+0x30c>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f7ff fd64 	bl	80015d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	7f5b      	ldrb	r3, [r3, #29]
 8001b10:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b16:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b1c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b22:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b2a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d106      	bne.n	8001b48 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	045b      	lsls	r3, r3, #17
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d009      	beq.n	8001b64 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	4b4b      	ldr	r3, [pc, #300]	; (8001c98 <HAL_ADC_Init+0x310>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	69b9      	ldr	r1, [r7, #24]
 8001b74:	430b      	orrs	r3, r1
 8001b76:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fed1 	bl	800193a <LL_ADC_REG_IsConversionOngoing>
 8001b98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fede 	bl	8001960 <LL_ADC_INJ_IsConversionOngoing>
 8001ba4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d17f      	bne.n	8001cac <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d17c      	bne.n	8001cac <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bb6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bbe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bce:	f023 0302 	bic.w	r3, r3, #2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	69b9      	ldr	r1, [r7, #24]
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d017      	beq.n	8001c14 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bf2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bfc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6911      	ldr	r1, [r2, #16]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001c12:	e013      	b.n	8001c3c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c38:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d12a      	bne.n	8001c9c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c50:	f023 0304 	bic.w	r3, r3, #4
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c5c:	4311      	orrs	r1, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c62:	4311      	orrs	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	e019      	b.n	8001cac <HAL_ADC_Init+0x324>
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	053e2d63 	.word	0x053e2d63
 8001c80:	50000100 	.word	0x50000100
 8001c84:	50000400 	.word	0x50000400
 8001c88:	50000500 	.word	0x50000500
 8001c8c:	50000600 	.word	0x50000600
 8001c90:	50000300 	.word	0x50000300
 8001c94:	50000700 	.word	0x50000700
 8001c98:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d10c      	bne.n	8001cce <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f023 010f 	bic.w	r1, r3, #15
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	1e5a      	subs	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
 8001ccc:	e007      	b.n	8001cde <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 020f 	bic.w	r2, r2, #15
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	f023 0303 	bic.w	r3, r3, #3
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cee:	e007      	b.n	8001d00 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	f043 0210 	orr.w	r2, r3, #16
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}
 8001d0a:	bf00      	nop

08001d0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0b6      	sub	sp, #216	; 0xd8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d102      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x24>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f000 bc13 	b.w	8002556 <HAL_ADC_ConfigChannel+0x84a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fdfc 	bl	800193a <LL_ADC_REG_IsConversionOngoing>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f040 83f3 	bne.w	8002530 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6859      	ldr	r1, [r3, #4]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	f7ff fd0e 	bl	8001778 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fdea 	bl	800193a <LL_ADC_REG_IsConversionOngoing>
 8001d66:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fdf6 	bl	8001960 <LL_ADC_INJ_IsConversionOngoing>
 8001d74:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 81d9 	bne.w	8002134 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 81d4 	bne.w	8002134 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d94:	d10f      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7ff fd15 	bl	80017d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fccf 	bl	8001752 <LL_ADC_SetSamplingTimeCommonConfig>
 8001db4:	e00e      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6819      	ldr	r1, [r3, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f7ff fd04 	bl	80017d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fcbf 	bl	8001752 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d022      	beq.n	8001e3c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6919      	ldr	r1, [r3, #16]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e06:	f7ff fc19 	bl	800163c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6919      	ldr	r1, [r3, #16]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f7ff fc65 	bl	80016e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6919      	ldr	r1, [r3, #16]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	7f1b      	ldrb	r3, [r3, #28]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d102      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x126>
 8001e2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e30:	e000      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x128>
 8001e32:	2300      	movs	r3, #0
 8001e34:	461a      	mov	r2, r3
 8001e36:	f7ff fc71 	bl	800171c <LL_ADC_SetOffsetSaturation>
 8001e3a:	e17b      	b.n	8002134 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fc1e 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10a      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x15c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fc13 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	0e9b      	lsrs	r3, r3, #26
 8001e62:	f003 021f 	and.w	r2, r3, #31
 8001e66:	e01e      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x19a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fc08 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001e96:	2320      	movs	r3, #32
 8001e98:	e004      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x1b2>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0e9b      	lsrs	r3, r3, #26
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	e018      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x1e4>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001eda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	e004      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001ee6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d106      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fbd7 	bl	80016b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2101      	movs	r1, #1
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fbbb 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10a      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x222>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fbb0 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001f24:	4603      	mov	r3, r0
 8001f26:	0e9b      	lsrs	r3, r3, #26
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	e01e      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x260>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2101      	movs	r1, #1
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fba5 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e004      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001f60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x278>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0e9b      	lsrs	r3, r3, #26
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	e018      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x2aa>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e004      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d106      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fb74 	bl	80016b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2102      	movs	r1, #2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fb58 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10a      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x2e8>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fb4d 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8001fea:	4603      	mov	r3, r0
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	f003 021f 	and.w	r2, r3, #31
 8001ff2:	e01e      	b.n	8002032 <HAL_ADC_ConfigChannel+0x326>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fb42 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8002000:	4603      	mov	r3, r0
 8002002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002012:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800201a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002022:	2320      	movs	r3, #32
 8002024:	e004      	b.n	8002030 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002026:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <HAL_ADC_ConfigChannel+0x33e>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	0e9b      	lsrs	r3, r3, #26
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	e016      	b.n	8002078 <HAL_ADC_ConfigChannel+0x36c>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800205c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800205e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002062:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800206a:	2320      	movs	r3, #32
 800206c:	e004      	b.n	8002078 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800206e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002078:	429a      	cmp	r2, r3
 800207a:	d106      	bne.n	800208a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2200      	movs	r2, #0
 8002082:	2102      	movs	r1, #2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fb13 	bl	80016b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2103      	movs	r1, #3
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff faf7 	bl	8001684 <LL_ADC_GetOffsetChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10a      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x3aa>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2103      	movs	r1, #3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff faec 	bl	8001684 <LL_ADC_GetOffsetChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	0e9b      	lsrs	r3, r3, #26
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	e017      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x3da>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2103      	movs	r1, #3
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fae1 	bl	8001684 <LL_ADC_GetOffsetChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80020ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80020d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80020d8:	2320      	movs	r3, #32
 80020da:	e003      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80020dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x3f2>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	0e9b      	lsrs	r3, r3, #26
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	e011      	b.n	8002122 <HAL_ADC_ConfigChannel+0x416>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800210c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800210e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002116:	2320      	movs	r3, #32
 8002118:	e003      	b.n	8002122 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800211a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002122:	429a      	cmp	r2, r3
 8002124:	d106      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	2103      	movs	r1, #3
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fabe 	bl	80016b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fbeb 	bl	8001914 <LL_ADC_IsEnabled>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 813d 	bne.w	80023c0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6819      	ldr	r1, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	461a      	mov	r2, r3
 8002154:	f7ff fb68 	bl	8001828 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4aa2      	ldr	r2, [pc, #648]	; (80023e8 <HAL_ADC_ConfigChannel+0x6dc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	f040 812e 	bne.w	80023c0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10b      	bne.n	800218c <HAL_ADC_ConfigChannel+0x480>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0e9b      	lsrs	r3, r3, #26
 800217a:	3301      	adds	r3, #1
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2b09      	cmp	r3, #9
 8002182:	bf94      	ite	ls
 8002184:	2301      	movls	r3, #1
 8002186:	2300      	movhi	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	e019      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x4b4>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800219a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800219c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800219e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80021a4:	2320      	movs	r3, #32
 80021a6:	e003      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80021a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	2b09      	cmp	r3, #9
 80021b8:	bf94      	ite	ls
 80021ba:	2301      	movls	r3, #1
 80021bc:	2300      	movhi	r3, #0
 80021be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d079      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d107      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x4d4>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0e9b      	lsrs	r3, r3, #26
 80021d6:	3301      	adds	r3, #1
 80021d8:	069b      	lsls	r3, r3, #26
 80021da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021de:	e015      	b.n	800220c <HAL_ADC_ConfigChannel+0x500>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80021f8:	2320      	movs	r3, #32
 80021fa:	e003      	b.n	8002204 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80021fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	3301      	adds	r3, #1
 8002206:	069b      	lsls	r3, r3, #26
 8002208:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_ADC_ConfigChannel+0x520>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0e9b      	lsrs	r3, r3, #26
 800221e:	3301      	adds	r3, #1
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	2101      	movs	r1, #1
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	e017      	b.n	800225c <HAL_ADC_ConfigChannel+0x550>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800223a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800223c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800223e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002244:	2320      	movs	r3, #32
 8002246:	e003      	b.n	8002250 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	3301      	adds	r3, #1
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	2101      	movs	r1, #1
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	ea42 0103 	orr.w	r1, r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x576>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0e9b      	lsrs	r3, r3, #26
 8002272:	3301      	adds	r3, #1
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	051b      	lsls	r3, r3, #20
 8002280:	e018      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x5a8>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002292:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800229a:	2320      	movs	r3, #32
 800229c:	e003      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800229e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b4:	430b      	orrs	r3, r1
 80022b6:	e07e      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d107      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x5c8>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0e9b      	lsrs	r3, r3, #26
 80022ca:	3301      	adds	r3, #1
 80022cc:	069b      	lsls	r3, r3, #26
 80022ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d2:	e015      	b.n	8002300 <HAL_ADC_ConfigChannel+0x5f4>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80022ec:	2320      	movs	r3, #32
 80022ee:	e003      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80022f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	3301      	adds	r3, #1
 80022fa:	069b      	lsls	r3, r3, #26
 80022fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x614>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	3301      	adds	r3, #1
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	2101      	movs	r1, #1
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	e017      	b.n	8002350 <HAL_ADC_ConfigChannel+0x644>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	61fb      	str	r3, [r7, #28]
  return result;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002338:	2320      	movs	r3, #32
 800233a:	e003      	b.n	8002344 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	3301      	adds	r3, #1
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	ea42 0103 	orr.w	r1, r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10d      	bne.n	800237c <HAL_ADC_ConfigChannel+0x670>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	3301      	adds	r3, #1
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	3b1e      	subs	r3, #30
 8002374:	051b      	lsls	r3, r3, #20
 8002376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800237a:	e01b      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x6a8>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	613b      	str	r3, [r7, #16]
  return result;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002394:	2320      	movs	r3, #32
 8002396:	e003      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	f003 021f 	and.w	r2, r3, #31
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	3b1e      	subs	r3, #30
 80023ae:	051b      	lsls	r3, r3, #20
 80023b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b4:	430b      	orrs	r3, r1
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	6892      	ldr	r2, [r2, #8]
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7ff fa08 	bl	80017d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_ADC_ConfigChannel+0x6e0>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80be 	beq.w	800254a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023d6:	d004      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0x6d6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <HAL_ADC_ConfigChannel+0x6e4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d10a      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x6ec>
 80023e2:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <HAL_ADC_ConfigChannel+0x6e8>)
 80023e4:	e009      	b.n	80023fa <HAL_ADC_ConfigChannel+0x6ee>
 80023e6:	bf00      	nop
 80023e8:	407f0000 	.word	0x407f0000
 80023ec:	80080000 	.word	0x80080000
 80023f0:	50000100 	.word	0x50000100
 80023f4:	50000300 	.word	0x50000300
 80023f8:	4b59      	ldr	r3, [pc, #356]	; (8002560 <HAL_ADC_ConfigChannel+0x854>)
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f910 	bl	8001620 <LL_ADC_GetCommonPathInternalCh>
 8002400:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a56      	ldr	r2, [pc, #344]	; (8002564 <HAL_ADC_ConfigChannel+0x858>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d004      	beq.n	8002418 <HAL_ADC_ConfigChannel+0x70c>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a55      	ldr	r2, [pc, #340]	; (8002568 <HAL_ADC_ConfigChannel+0x85c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d13a      	bne.n	800248e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800241c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d134      	bne.n	800248e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800242c:	d005      	beq.n	800243a <HAL_ADC_ConfigChannel+0x72e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a4e      	ldr	r2, [pc, #312]	; (800256c <HAL_ADC_ConfigChannel+0x860>)
 8002434:	4293      	cmp	r3, r2
 8002436:	f040 8085 	bne.w	8002544 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002442:	d004      	beq.n	800244e <HAL_ADC_ConfigChannel+0x742>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a49      	ldr	r2, [pc, #292]	; (8002570 <HAL_ADC_ConfigChannel+0x864>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x746>
 800244e:	4a49      	ldr	r2, [pc, #292]	; (8002574 <HAL_ADC_ConfigChannel+0x868>)
 8002450:	e000      	b.n	8002454 <HAL_ADC_ConfigChannel+0x748>
 8002452:	4a43      	ldr	r2, [pc, #268]	; (8002560 <HAL_ADC_ConfigChannel+0x854>)
 8002454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002458:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f7ff f8cb 	bl	80015fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002464:	4b44      	ldr	r3, [pc, #272]	; (8002578 <HAL_ADC_ConfigChannel+0x86c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	099b      	lsrs	r3, r3, #6
 800246a:	4a44      	ldr	r2, [pc, #272]	; (800257c <HAL_ADC_ConfigChannel+0x870>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800247e:	e002      	b.n	8002486 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3b01      	subs	r3, #1
 8002484:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f9      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800248c:	e05a      	b.n	8002544 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a3b      	ldr	r2, [pc, #236]	; (8002580 <HAL_ADC_ConfigChannel+0x874>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d125      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x7d8>
 8002498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800249c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d11f      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a31      	ldr	r2, [pc, #196]	; (8002570 <HAL_ADC_ConfigChannel+0x864>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d104      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x7ac>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a34      	ldr	r2, [pc, #208]	; (8002584 <HAL_ADC_ConfigChannel+0x878>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d047      	beq.n	8002548 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024c0:	d004      	beq.n	80024cc <HAL_ADC_ConfigChannel+0x7c0>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a2a      	ldr	r2, [pc, #168]	; (8002570 <HAL_ADC_ConfigChannel+0x864>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x7c4>
 80024cc:	4a29      	ldr	r2, [pc, #164]	; (8002574 <HAL_ADC_ConfigChannel+0x868>)
 80024ce:	e000      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x7c6>
 80024d0:	4a23      	ldr	r2, [pc, #140]	; (8002560 <HAL_ADC_ConfigChannel+0x854>)
 80024d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f7ff f88c 	bl	80015fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024e2:	e031      	b.n	8002548 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a27      	ldr	r2, [pc, #156]	; (8002588 <HAL_ADC_ConfigChannel+0x87c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d12d      	bne.n	800254a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d127      	bne.n	800254a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <HAL_ADC_ConfigChannel+0x864>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d022      	beq.n	800254a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800250c:	d004      	beq.n	8002518 <HAL_ADC_ConfigChannel+0x80c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HAL_ADC_ConfigChannel+0x864>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x810>
 8002518:	4a16      	ldr	r2, [pc, #88]	; (8002574 <HAL_ADC_ConfigChannel+0x868>)
 800251a:	e000      	b.n	800251e <HAL_ADC_ConfigChannel+0x812>
 800251c:	4a10      	ldr	r2, [pc, #64]	; (8002560 <HAL_ADC_ConfigChannel+0x854>)
 800251e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002522:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002526:	4619      	mov	r1, r3
 8002528:	4610      	mov	r0, r2
 800252a:	f7ff f866 	bl	80015fa <LL_ADC_SetCommonPathInternalCh>
 800252e:	e00c      	b.n	800254a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002542:	e002      	b.n	800254a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002544:	bf00      	nop
 8002546:	e000      	b.n	800254a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002548:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002552:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002556:	4618      	mov	r0, r3
 8002558:	37d8      	adds	r7, #216	; 0xd8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	50000700 	.word	0x50000700
 8002564:	c3210000 	.word	0xc3210000
 8002568:	90c00010 	.word	0x90c00010
 800256c:	50000600 	.word	0x50000600
 8002570:	50000100 	.word	0x50000100
 8002574:	50000300 	.word	0x50000300
 8002578:	20000000 	.word	0x20000000
 800257c:	053e2d63 	.word	0x053e2d63
 8002580:	c7520000 	.word	0xc7520000
 8002584:	50000500 	.word	0x50000500
 8002588:	cb840000 	.word	0xcb840000

0800258c <LL_ADC_IsEnabled>:
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <LL_ADC_IsEnabled+0x18>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <LL_ADC_IsEnabled+0x1a>
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d101      	bne.n	80025ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b0a1      	sub	sp, #132	; 0x84
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e0e7      	b.n	80027c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80025fe:	2300      	movs	r3, #0
 8002600:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002602:	2300      	movs	r3, #0
 8002604:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800260e:	d102      	bne.n	8002616 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002610:	4b6f      	ldr	r3, [pc, #444]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	e009      	b.n	800262a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6e      	ldr	r2, [pc, #440]	; (80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d102      	bne.n	8002626 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002620:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	e001      	b.n	800262a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10b      	bne.n	8002648 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0be      	b.n	80027c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ffb1 	bl	80025b2 <LL_ADC_REG_IsConversionOngoing>
 8002650:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ffab 	bl	80025b2 <LL_ADC_REG_IsConversionOngoing>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 80a0 	bne.w	80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 809c 	bne.w	80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002674:	d004      	beq.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a55      	ldr	r2, [pc, #340]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002680:	4b56      	ldr	r3, [pc, #344]	; (80027dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002682:	e000      	b.n	8002686 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002684:	4b56      	ldr	r3, [pc, #344]	; (80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002686:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d04b      	beq.n	8002728 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026a2:	035b      	lsls	r3, r3, #13
 80026a4:	430b      	orrs	r3, r1
 80026a6:	431a      	orrs	r2, r3
 80026a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b4:	d004      	beq.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a45      	ldr	r2, [pc, #276]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d10f      	bne.n	80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80026c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80026c4:	f7ff ff62 	bl	800258c <LL_ADC_IsEnabled>
 80026c8:	4604      	mov	r4, r0
 80026ca:	4841      	ldr	r0, [pc, #260]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026cc:	f7ff ff5e 	bl	800258c <LL_ADC_IsEnabled>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4323      	orrs	r3, r4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e012      	b.n	8002706 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80026e0:	483c      	ldr	r0, [pc, #240]	; (80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80026e2:	f7ff ff53 	bl	800258c <LL_ADC_IsEnabled>
 80026e6:	4604      	mov	r4, r0
 80026e8:	483b      	ldr	r0, [pc, #236]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80026ea:	f7ff ff4f 	bl	800258c <LL_ADC_IsEnabled>
 80026ee:	4603      	mov	r3, r0
 80026f0:	431c      	orrs	r4, r3
 80026f2:	483c      	ldr	r0, [pc, #240]	; (80027e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80026f4:	f7ff ff4a 	bl	800258c <LL_ADC_IsEnabled>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4323      	orrs	r3, r4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d056      	beq.n	80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800270a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002712:	f023 030f 	bic.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	6811      	ldr	r1, [r2, #0]
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	6892      	ldr	r2, [r2, #8]
 800271e:	430a      	orrs	r2, r1
 8002720:	431a      	orrs	r2, r3
 8002722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002724:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002726:	e047      	b.n	80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002732:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800273c:	d004      	beq.n	8002748 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d10f      	bne.n	8002768 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002748:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800274c:	f7ff ff1e 	bl	800258c <LL_ADC_IsEnabled>
 8002750:	4604      	mov	r4, r0
 8002752:	481f      	ldr	r0, [pc, #124]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002754:	f7ff ff1a 	bl	800258c <LL_ADC_IsEnabled>
 8002758:	4603      	mov	r3, r0
 800275a:	4323      	orrs	r3, r4
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	e012      	b.n	800278e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002768:	481a      	ldr	r0, [pc, #104]	; (80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800276a:	f7ff ff0f 	bl	800258c <LL_ADC_IsEnabled>
 800276e:	4604      	mov	r4, r0
 8002770:	4819      	ldr	r0, [pc, #100]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002772:	f7ff ff0b 	bl	800258c <LL_ADC_IsEnabled>
 8002776:	4603      	mov	r3, r0
 8002778:	431c      	orrs	r4, r3
 800277a:	481a      	ldr	r0, [pc, #104]	; (80027e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800277c:	f7ff ff06 	bl	800258c <LL_ADC_IsEnabled>
 8002780:	4603      	mov	r3, r0
 8002782:	4323      	orrs	r3, r4
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d012      	beq.n	80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800279a:	f023 030f 	bic.w	r3, r3, #15
 800279e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027a0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027a2:	e009      	b.n	80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80027b6:	e000      	b.n	80027ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80027c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3784      	adds	r7, #132	; 0x84
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd90      	pop	{r4, r7, pc}
 80027ce:	bf00      	nop
 80027d0:	50000100 	.word	0x50000100
 80027d4:	50000400 	.word	0x50000400
 80027d8:	50000500 	.word	0x50000500
 80027dc:	50000300 	.word	0x50000300
 80027e0:	50000700 	.word	0x50000700
 80027e4:	50000600 	.word	0x50000600

080027e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <__NVIC_SetPriorityGrouping+0x44>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002804:	4013      	ands	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281a:	4a04      	ldr	r2, [pc, #16]	; (800282c <__NVIC_SetPriorityGrouping+0x44>)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	60d3      	str	r3, [r2, #12]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <__NVIC_GetPriorityGrouping+0x18>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 0307 	and.w	r3, r3, #7
}
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	2b00      	cmp	r3, #0
 800285c:	db0b      	blt.n	8002876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	4907      	ldr	r1, [pc, #28]	; (8002884 <__NVIC_EnableIRQ+0x38>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	2001      	movs	r0, #1
 800286e:	fa00 f202 	lsl.w	r2, r0, r2
 8002872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000e100 	.word	0xe000e100

08002888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db0a      	blt.n	80028b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	490c      	ldr	r1, [pc, #48]	; (80028d4 <__NVIC_SetPriority+0x4c>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b0:	e00a      	b.n	80028c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4908      	ldr	r1, [pc, #32]	; (80028d8 <__NVIC_SetPriority+0x50>)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b04      	subs	r3, #4
 80028c0:	0112      	lsls	r2, r2, #4
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	440b      	add	r3, r1
 80028c6:	761a      	strb	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000e100 	.word	0xe000e100
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf28      	it	cs
 80028fa:	2304      	movcs	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3304      	adds	r3, #4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d902      	bls.n	800290c <NVIC_EncodePriority+0x30>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3b03      	subs	r3, #3
 800290a:	e000      	b.n	800290e <NVIC_EncodePriority+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43d9      	mvns	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	4313      	orrs	r3, r2
         );
}
 8002936:	4618      	mov	r0, r3
 8002938:	3724      	adds	r7, #36	; 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ff4c 	bl	80027e8 <__NVIC_SetPriorityGrouping>
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002966:	f7ff ff63 	bl	8002830 <__NVIC_GetPriorityGrouping>
 800296a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	6978      	ldr	r0, [r7, #20]
 8002972:	f7ff ffb3 	bl	80028dc <NVIC_EncodePriority>
 8002976:	4602      	mov	r2, r0
 8002978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff ff82 	bl	8002888 <__NVIC_SetPriority>
}
 8002984:	bf00      	nop
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ff56 	bl	800284c <__NVIC_EnableIRQ>
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d005      	beq.n	80029cc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2204      	movs	r2, #4
 80029c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	e037      	b.n	8002a3c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 020e 	bic.w	r2, r2, #14
 80029da:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ea:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a18:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00c      	beq.n	8002a3c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a30:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a3a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d00d      	beq.n	8002a8e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2204      	movs	r2, #4
 8002a76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
 8002a8c:	e047      	b.n	8002b1e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 020e 	bic.w	r2, r2, #14
 8002a9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002abc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f003 021f 	and.w	r2, r3, #31
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	2101      	movs	r1, #1
 8002acc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ada:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00c      	beq.n	8002afe <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002af2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002afc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
    }
  }
  return status;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b36:	e15a      	b.n	8002dee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 814c 	beq.w	8002de8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d005      	beq.n	8002b68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d130      	bne.n	8002bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	f003 0201 	and.w	r2, r3, #1
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d017      	beq.n	8002c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	2203      	movs	r2, #3
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d123      	bne.n	8002c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	220f      	movs	r2, #15
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3208      	adds	r2, #8
 8002c54:	6939      	ldr	r1, [r7, #16]
 8002c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	2203      	movs	r2, #3
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0203 	and.w	r2, r3, #3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80a6 	beq.w	8002de8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9c:	4b5b      	ldr	r3, [pc, #364]	; (8002e0c <HAL_GPIO_Init+0x2e4>)
 8002c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca0:	4a5a      	ldr	r2, [pc, #360]	; (8002e0c <HAL_GPIO_Init+0x2e4>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6613      	str	r3, [r2, #96]	; 0x60
 8002ca8:	4b58      	ldr	r3, [pc, #352]	; (8002e0c <HAL_GPIO_Init+0x2e4>)
 8002caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb4:	4a56      	ldr	r2, [pc, #344]	; (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	089b      	lsrs	r3, r3, #2
 8002cba:	3302      	adds	r3, #2
 8002cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	220f      	movs	r2, #15
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cde:	d01f      	beq.n	8002d20 <HAL_GPIO_Init+0x1f8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a4c      	ldr	r2, [pc, #304]	; (8002e14 <HAL_GPIO_Init+0x2ec>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d019      	beq.n	8002d1c <HAL_GPIO_Init+0x1f4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a4b      	ldr	r2, [pc, #300]	; (8002e18 <HAL_GPIO_Init+0x2f0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d013      	beq.n	8002d18 <HAL_GPIO_Init+0x1f0>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a4a      	ldr	r2, [pc, #296]	; (8002e1c <HAL_GPIO_Init+0x2f4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00d      	beq.n	8002d14 <HAL_GPIO_Init+0x1ec>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a49      	ldr	r2, [pc, #292]	; (8002e20 <HAL_GPIO_Init+0x2f8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d007      	beq.n	8002d10 <HAL_GPIO_Init+0x1e8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a48      	ldr	r2, [pc, #288]	; (8002e24 <HAL_GPIO_Init+0x2fc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d101      	bne.n	8002d0c <HAL_GPIO_Init+0x1e4>
 8002d08:	2305      	movs	r3, #5
 8002d0a:	e00a      	b.n	8002d22 <HAL_GPIO_Init+0x1fa>
 8002d0c:	2306      	movs	r3, #6
 8002d0e:	e008      	b.n	8002d22 <HAL_GPIO_Init+0x1fa>
 8002d10:	2304      	movs	r3, #4
 8002d12:	e006      	b.n	8002d22 <HAL_GPIO_Init+0x1fa>
 8002d14:	2303      	movs	r3, #3
 8002d16:	e004      	b.n	8002d22 <HAL_GPIO_Init+0x1fa>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e002      	b.n	8002d22 <HAL_GPIO_Init+0x1fa>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_GPIO_Init+0x1fa>
 8002d20:	2300      	movs	r3, #0
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	f002 0203 	and.w	r2, r2, #3
 8002d28:	0092      	lsls	r2, r2, #2
 8002d2a:	4093      	lsls	r3, r2
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d32:	4937      	ldr	r1, [pc, #220]	; (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d40:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d64:	4a30      	ldr	r2, [pc, #192]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d8e:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d94:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002db8:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002de2:	4a11      	ldr	r2, [pc, #68]	; (8002e28 <HAL_GPIO_Init+0x300>)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3301      	adds	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f47f ae9d 	bne.w	8002b38 <HAL_GPIO_Init+0x10>
  }
}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40010000 	.word	0x40010000
 8002e14:	48000400 	.word	0x48000400
 8002e18:	48000800 	.word	0x48000800
 8002e1c:	48000c00 	.word	0x48000c00
 8002e20:	48001000 	.word	0x48001000
 8002e24:	48001400 	.word	0x48001400
 8002e28:	40010400 	.word	0x40010400

08002e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e3c:	787b      	ldrb	r3, [r7, #1]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e48:	e002      	b.n	8002e50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d006      	beq.n	8002e80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e72:	4a05      	ldr	r2, [pc, #20]	; (8002e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f806 	bl	8002e8c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40010400 	.word	0x40010400

08002e8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d141      	bne.n	8002f36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eb2:	4b4b      	ldr	r3, [pc, #300]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebe:	d131      	bne.n	8002f24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ec0:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec6:	4a46      	ldr	r2, [pc, #280]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ecc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed0:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ed8:	4a41      	ldr	r2, [pc, #260]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ede:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ee0:	4b40      	ldr	r3, [pc, #256]	; (8002fe4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2232      	movs	r2, #50	; 0x32
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	4a3f      	ldr	r2, [pc, #252]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002eec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef0:	0c9b      	lsrs	r3, r3, #18
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef6:	e002      	b.n	8002efe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002efe:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0a:	d102      	bne.n	8002f12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f2      	bne.n	8002ef8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f12:	4b33      	ldr	r3, [pc, #204]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1e:	d158      	bne.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e057      	b.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f24:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2a:	4a2d      	ldr	r2, [pc, #180]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f34:	e04d      	b.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3c:	d141      	bne.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f3e:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4a:	d131      	bne.n	8002fb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f4c:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f52:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f5c:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f64:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2232      	movs	r2, #50	; 0x32
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	0c9b      	lsrs	r3, r3, #18
 8002f7e:	3301      	adds	r3, #1
 8002f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f82:	e002      	b.n	8002f8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f96:	d102      	bne.n	8002f9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f2      	bne.n	8002f84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002faa:	d112      	bne.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e011      	b.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fc0:	e007      	b.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40007000 	.word	0x40007000
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	431bde83 	.word	0x431bde83

08002fec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a04      	ldr	r2, [pc, #16]	; (8003008 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffa:	6093      	str	r3, [r2, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40007000 	.word	0x40007000

0800300c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e306      	b.n	800362c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d075      	beq.n	8003116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800302a:	4b97      	ldr	r3, [pc, #604]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003034:	4b94      	ldr	r3, [pc, #592]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b0c      	cmp	r3, #12
 8003042:	d102      	bne.n	800304a <HAL_RCC_OscConfig+0x3e>
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d002      	beq.n	8003050 <HAL_RCC_OscConfig+0x44>
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b8d      	ldr	r3, [pc, #564]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05b      	beq.n	8003114 <HAL_RCC_OscConfig+0x108>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d157      	bne.n	8003114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e2e1      	b.n	800362c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x74>
 8003072:	4b85      	ldr	r3, [pc, #532]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a84      	ldr	r2, [pc, #528]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b7f      	ldr	r3, [pc, #508]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7e      	ldr	r2, [pc, #504]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b7c      	ldr	r3, [pc, #496]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a7b      	ldr	r2, [pc, #492]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 80030a4:	4b78      	ldr	r3, [pc, #480]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a77      	ldr	r2, [pc, #476]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b75      	ldr	r3, [pc, #468]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a74      	ldr	r2, [pc, #464]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fe fa7a 	bl	80015bc <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fe fa76 	bl	80015bc <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e2a6      	b.n	800362c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030de:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xc0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe fa66 	bl	80015bc <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fe fa62 	bl	80015bc <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e292      	b.n	800362c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003106:	4b60      	ldr	r3, [pc, #384]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0xe8>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d075      	beq.n	800320e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003122:	4b59      	ldr	r3, [pc, #356]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800312c:	4b56      	ldr	r3, [pc, #344]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d102      	bne.n	8003142 <HAL_RCC_OscConfig+0x136>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d002      	beq.n	8003148 <HAL_RCC_OscConfig+0x13c>
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b04      	cmp	r3, #4
 8003146:	d11f      	bne.n	8003188 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003148:	4b4f      	ldr	r3, [pc, #316]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_OscConfig+0x154>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e265      	b.n	800362c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003160:	4b49      	ldr	r3, [pc, #292]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	4946      	ldr	r1, [pc, #280]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003174:	4b45      	ldr	r3, [pc, #276]	; (800328c <HAL_RCC_OscConfig+0x280>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe f905 	bl	8001388 <HAL_InitTick>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d043      	beq.n	800320c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e251      	b.n	800362c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d023      	beq.n	80031d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003190:	4b3d      	ldr	r3, [pc, #244]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a3c      	ldr	r2, [pc, #240]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe fa0e 	bl	80015bc <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a4:	f7fe fa0a 	bl	80015bc <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e23a      	b.n	800362c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b6:	4b34      	ldr	r3, [pc, #208]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c2:	4b31      	ldr	r3, [pc, #196]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	061b      	lsls	r3, r3, #24
 80031d0:	492d      	ldr	r1, [pc, #180]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	604b      	str	r3, [r1, #4]
 80031d6:	e01a      	b.n	800320e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d8:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a2a      	ldr	r2, [pc, #168]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 80031de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe f9ea 	bl	80015bc <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ec:	f7fe f9e6 	bl	80015bc <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e216      	b.n	800362c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031fe:	4b22      	ldr	r3, [pc, #136]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x1e0>
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800320c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d041      	beq.n	800329e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01c      	beq.n	800325c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003222:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003228:	4a17      	ldr	r2, [pc, #92]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fe f9c3 	bl	80015bc <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323a:	f7fe f9bf 	bl	80015bc <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e1ef      	b.n	800362c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 800324e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0ef      	beq.n	800323a <HAL_RCC_OscConfig+0x22e>
 800325a:	e020      	b.n	800329e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 800325e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003262:	4a09      	ldr	r2, [pc, #36]	; (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326c:	f7fe f9a6 	bl	80015bc <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003272:	e00d      	b.n	8003290 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003274:	f7fe f9a2 	bl	80015bc <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d906      	bls.n	8003290 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1d2      	b.n	800362c <HAL_RCC_OscConfig+0x620>
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
 800328c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003290:	4b8c      	ldr	r3, [pc, #560]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1ea      	bne.n	8003274 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80a6 	beq.w	80033f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ac:	2300      	movs	r3, #0
 80032ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032b0:	4b84      	ldr	r3, [pc, #528]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_OscConfig+0x2b4>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <HAL_RCC_OscConfig+0x2b6>
 80032c0:	2300      	movs	r3, #0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	4b7f      	ldr	r3, [pc, #508]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80032c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ca:	4a7e      	ldr	r2, [pc, #504]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6593      	str	r3, [r2, #88]	; 0x58
 80032d2:	4b7c      	ldr	r3, [pc, #496]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80032d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032de:	2301      	movs	r3, #1
 80032e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e2:	4b79      	ldr	r3, [pc, #484]	; (80034c8 <HAL_RCC_OscConfig+0x4bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d118      	bne.n	8003320 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ee:	4b76      	ldr	r3, [pc, #472]	; (80034c8 <HAL_RCC_OscConfig+0x4bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a75      	ldr	r2, [pc, #468]	; (80034c8 <HAL_RCC_OscConfig+0x4bc>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fa:	f7fe f95f 	bl	80015bc <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003302:	f7fe f95b 	bl	80015bc <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e18b      	b.n	800362c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003314:	4b6c      	ldr	r3, [pc, #432]	; (80034c8 <HAL_RCC_OscConfig+0x4bc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d108      	bne.n	800333a <HAL_RCC_OscConfig+0x32e>
 8003328:	4b66      	ldr	r3, [pc, #408]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	4a65      	ldr	r2, [pc, #404]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003338:	e024      	b.n	8003384 <HAL_RCC_OscConfig+0x378>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b05      	cmp	r3, #5
 8003340:	d110      	bne.n	8003364 <HAL_RCC_OscConfig+0x358>
 8003342:	4b60      	ldr	r3, [pc, #384]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003348:	4a5e      	ldr	r2, [pc, #376]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800334a:	f043 0304 	orr.w	r3, r3, #4
 800334e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003352:	4b5c      	ldr	r3, [pc, #368]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	4a5a      	ldr	r2, [pc, #360]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003362:	e00f      	b.n	8003384 <HAL_RCC_OscConfig+0x378>
 8003364:	4b57      	ldr	r3, [pc, #348]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003374:	4b53      	ldr	r3, [pc, #332]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	4a52      	ldr	r2, [pc, #328]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800337c:	f023 0304 	bic.w	r3, r3, #4
 8003380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d016      	beq.n	80033ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7fe f916 	bl	80015bc <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003394:	f7fe f912 	bl	80015bc <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e140      	b.n	800362c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033aa:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ed      	beq.n	8003394 <HAL_RCC_OscConfig+0x388>
 80033b8:	e015      	b.n	80033e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe f8ff 	bl	80015bc <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe f8fb 	bl	80015bc <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e129      	b.n	800362c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033d8:	4b3a      	ldr	r3, [pc, #232]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1ed      	bne.n	80033c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033e6:	7ffb      	ldrb	r3, [r7, #31]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d105      	bne.n	80033f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ec:	4b35      	ldr	r3, [pc, #212]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	4a34      	ldr	r2, [pc, #208]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80033f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d03c      	beq.n	800347e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01c      	beq.n	8003446 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800340c:	4b2d      	ldr	r3, [pc, #180]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800340e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003412:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fe f8ce 	bl	80015bc <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003424:	f7fe f8ca 	bl	80015bc <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e0fa      	b.n	800362c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003436:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003438:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ef      	beq.n	8003424 <HAL_RCC_OscConfig+0x418>
 8003444:	e01b      	b.n	800347e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003446:	4b1f      	ldr	r3, [pc, #124]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003448:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800344c:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003456:	f7fe f8b1 	bl	80015bc <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800345e:	f7fe f8ad 	bl	80015bc <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0dd      	b.n	800362c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003470:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1ef      	bne.n	800345e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80d1 	beq.w	800362a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003488:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b0c      	cmp	r3, #12
 8003492:	f000 808b 	beq.w	80035ac <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d15e      	bne.n	800355c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80034a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fe f887 	bl	80015bc <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b0:	e00c      	b.n	80034cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fe f883 	bl	80015bc <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d905      	bls.n	80034cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e0b3      	b.n	800362c <HAL_RCC_OscConfig+0x620>
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034cc:	4b59      	ldr	r3, [pc, #356]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ec      	bne.n	80034b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034d8:	4b56      	ldr	r3, [pc, #344]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	4b56      	ldr	r3, [pc, #344]	; (8003638 <HAL_RCC_OscConfig+0x62c>)
 80034de:	4013      	ands	r3, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6a11      	ldr	r1, [r2, #32]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034e8:	3a01      	subs	r2, #1
 80034ea:	0112      	lsls	r2, r2, #4
 80034ec:	4311      	orrs	r1, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80034f2:	0212      	lsls	r2, r2, #8
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034fa:	0852      	lsrs	r2, r2, #1
 80034fc:	3a01      	subs	r2, #1
 80034fe:	0552      	lsls	r2, r2, #21
 8003500:	4311      	orrs	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003506:	0852      	lsrs	r2, r2, #1
 8003508:	3a01      	subs	r2, #1
 800350a:	0652      	lsls	r2, r2, #25
 800350c:	4311      	orrs	r1, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003512:	06d2      	lsls	r2, r2, #27
 8003514:	430a      	orrs	r2, r1
 8003516:	4947      	ldr	r1, [pc, #284]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 8003518:	4313      	orrs	r3, r2
 800351a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351c:	4b45      	ldr	r3, [pc, #276]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a44      	ldr	r2, [pc, #272]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003526:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003528:	4b42      	ldr	r3, [pc, #264]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a41      	ldr	r2, [pc, #260]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 800352e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003532:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe f842 	bl	80015bc <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353c:	f7fe f83e 	bl	80015bc <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e06e      	b.n	800362c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354e:	4b39      	ldr	r3, [pc, #228]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0x530>
 800355a:	e066      	b.n	800362a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a34      	ldr	r2, [pc, #208]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 8003562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003566:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003568:	4b32      	ldr	r3, [pc, #200]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4a31      	ldr	r2, [pc, #196]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 800356e:	f023 0303 	bic.w	r3, r3, #3
 8003572:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003574:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 800357a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800357e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003582:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe f81a 	bl	80015bc <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358c:	f7fe f816 	bl	80015bc <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e046      	b.n	800362c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359e:	4b25      	ldr	r3, [pc, #148]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x580>
 80035aa:	e03e      	b.n	800362a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e039      	b.n	800362c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80035b8:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <HAL_RCC_OscConfig+0x628>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f003 0203 	and.w	r2, r3, #3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d12c      	bne.n	8003626 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	3b01      	subs	r3, #1
 80035d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d123      	bne.n	8003626 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d11b      	bne.n	8003626 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d113      	bne.n	8003626 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	3b01      	subs	r3, #1
 800360c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d109      	bne.n	8003626 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361c:	085b      	lsrs	r3, r3, #1
 800361e:	3b01      	subs	r3, #1
 8003620:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3720      	adds	r7, #32
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	019f800c 	.word	0x019f800c

0800363c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e11e      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b91      	ldr	r3, [pc, #580]	; (800389c <HAL_RCC_ClockConfig+0x260>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b8e      	ldr	r3, [pc, #568]	; (800389c <HAL_RCC_ClockConfig+0x260>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 020f 	bic.w	r2, r3, #15
 800366a:	498c      	ldr	r1, [pc, #560]	; (800389c <HAL_RCC_ClockConfig+0x260>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b8a      	ldr	r3, [pc, #552]	; (800389c <HAL_RCC_ClockConfig+0x260>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e106      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d073      	beq.n	8003778 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d129      	bne.n	80036ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003698:	4b81      	ldr	r3, [pc, #516]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0f4      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80036a8:	f000 f9d0 	bl	8003a4c <RCC_GetSysClockFreqFromPLLSource>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4a7c      	ldr	r2, [pc, #496]	; (80038a4 <HAL_RCC_ClockConfig+0x268>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d93f      	bls.n	8003736 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036b6:	4b7a      	ldr	r3, [pc, #488]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d033      	beq.n	8003736 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d12f      	bne.n	8003736 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036d6:	4b72      	ldr	r3, [pc, #456]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036de:	4a70      	ldr	r2, [pc, #448]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80036e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e024      	b.n	8003736 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f4:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0c6      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003704:	4b66      	ldr	r3, [pc, #408]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0be      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003714:	f000 f8ce 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8003718:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4a61      	ldr	r2, [pc, #388]	; (80038a4 <HAL_RCC_ClockConfig+0x268>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d909      	bls.n	8003736 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003722:	4b5f      	ldr	r3, [pc, #380]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372a:	4a5d      	ldr	r2, [pc, #372]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 800372c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003730:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003736:	4b5a      	ldr	r3, [pc, #360]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f023 0203 	bic.w	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4957      	ldr	r1, [pc, #348]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003748:	f7fd ff38 	bl	80015bc <HAL_GetTick>
 800374c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	e00a      	b.n	8003766 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003750:	f7fd ff34 	bl	80015bc <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e095      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	4b4e      	ldr	r3, [pc, #312]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 020c 	and.w	r2, r3, #12
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	429a      	cmp	r2, r3
 8003776:	d1eb      	bne.n	8003750 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d023      	beq.n	80037cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003790:	4b43      	ldr	r3, [pc, #268]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a42      	ldr	r2, [pc, #264]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003796:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800379a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80037a8:	4b3d      	ldr	r3, [pc, #244]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037b0:	4a3b      	ldr	r2, [pc, #236]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b39      	ldr	r3, [pc, #228]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4936      	ldr	r1, [pc, #216]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
 80037ca:	e008      	b.n	80037de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b80      	cmp	r3, #128	; 0x80
 80037d0:	d105      	bne.n	80037de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037d2:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	4a32      	ldr	r2, [pc, #200]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037de:	4b2f      	ldr	r3, [pc, #188]	; (800389c <HAL_RCC_ClockConfig+0x260>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d21d      	bcs.n	8003828 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ec:	4b2b      	ldr	r3, [pc, #172]	; (800389c <HAL_RCC_ClockConfig+0x260>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f023 020f 	bic.w	r2, r3, #15
 80037f4:	4929      	ldr	r1, [pc, #164]	; (800389c <HAL_RCC_ClockConfig+0x260>)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037fc:	f7fd fede 	bl	80015bc <HAL_GetTick>
 8003800:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	e00a      	b.n	800381a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003804:	f7fd feda 	bl	80015bc <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e03b      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <HAL_RCC_ClockConfig+0x260>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d1ed      	bne.n	8003804 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003834:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4917      	ldr	r1, [pc, #92]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	490f      	ldr	r1, [pc, #60]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003866:	f000 f825 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800386a:	4602      	mov	r2, r0
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_RCC_ClockConfig+0x264>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	490c      	ldr	r1, [pc, #48]	; (80038a8 <HAL_RCC_ClockConfig+0x26c>)
 8003878:	5ccb      	ldrb	r3, [r1, r3]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <HAL_RCC_ClockConfig+0x270>)
 8003884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003886:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_RCC_ClockConfig+0x274>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd fd7c 	bl	8001388 <HAL_InitTick>
 8003890:	4603      	mov	r3, r0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40022000 	.word	0x40022000
 80038a0:	40021000 	.word	0x40021000
 80038a4:	04c4b400 	.word	0x04c4b400
 80038a8:	08007b5c 	.word	0x08007b5c
 80038ac:	20000000 	.word	0x20000000
 80038b0:	20000004 	.word	0x20000004

080038b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038ba:	4b2c      	ldr	r3, [pc, #176]	; (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d102      	bne.n	80038cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038c6:	4b2a      	ldr	r3, [pc, #168]	; (8003970 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	e047      	b.n	800395c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038cc:	4b27      	ldr	r3, [pc, #156]	; (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d102      	bne.n	80038de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038d8:	4b26      	ldr	r3, [pc, #152]	; (8003974 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	e03e      	b.n	800395c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80038de:	4b23      	ldr	r3, [pc, #140]	; (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d136      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ea:	4b20      	ldr	r3, [pc, #128]	; (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	3301      	adds	r3, #1
 8003900:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b03      	cmp	r3, #3
 8003906:	d10c      	bne.n	8003922 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003908:	4a1a      	ldr	r2, [pc, #104]	; (8003974 <HAL_RCC_GetSysClockFreq+0xc0>)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	4a16      	ldr	r2, [pc, #88]	; (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003912:	68d2      	ldr	r2, [r2, #12]
 8003914:	0a12      	lsrs	r2, r2, #8
 8003916:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	617b      	str	r3, [r7, #20]
      break;
 8003920:	e00c      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003922:	4a13      	ldr	r2, [pc, #76]	; (8003970 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	4a10      	ldr	r2, [pc, #64]	; (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 800392c:	68d2      	ldr	r2, [r2, #12]
 800392e:	0a12      	lsrs	r2, r2, #8
 8003930:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003934:	fb02 f303 	mul.w	r3, r2, r3
 8003938:	617b      	str	r3, [r7, #20]
      break;
 800393a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	0e5b      	lsrs	r3, r3, #25
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	3301      	adds	r3, #1
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	e001      	b.n	800395c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800395c:	693b      	ldr	r3, [r7, #16]
}
 800395e:	4618      	mov	r0, r3
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	00f42400 	.word	0x00f42400
 8003974:	016e3600 	.word	0x016e3600

08003978 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <HAL_RCC_GetHCLKFreq+0x14>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000000 	.word	0x20000000

08003990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003994:	f7ff fff0 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0a1b      	lsrs	r3, r3, #8
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4904      	ldr	r1, [pc, #16]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000
 80039b8:	08007b6c 	.word	0x08007b6c

080039bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039c0:	f7ff ffda 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	0adb      	lsrs	r3, r3, #11
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4904      	ldr	r1, [pc, #16]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	08007b6c 	.word	0x08007b6c

080039e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	220f      	movs	r2, #15
 80039f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80039f8:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <HAL_RCC_GetClockConfig+0x5c>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0203 	and.w	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a04:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <HAL_RCC_GetClockConfig+0x5c>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RCC_GetClockConfig+0x5c>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_GetClockConfig+0x5c>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	08db      	lsrs	r3, r3, #3
 8003a22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <HAL_RCC_GetClockConfig+0x60>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 020f 	and.w	r2, r3, #15
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	601a      	str	r2, [r3, #0]
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40022000 	.word	0x40022000

08003a4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a52:	4b1e      	ldr	r3, [pc, #120]	; (8003acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	3301      	adds	r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d10c      	bne.n	8003a8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a70:	4a17      	ldr	r2, [pc, #92]	; (8003ad0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	4a14      	ldr	r2, [pc, #80]	; (8003acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a7a:	68d2      	ldr	r2, [r2, #12]
 8003a7c:	0a12      	lsrs	r2, r2, #8
 8003a7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	617b      	str	r3, [r7, #20]
    break;
 8003a88:	e00c      	b.n	8003aa4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a8a:	4a12      	ldr	r2, [pc, #72]	; (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a92:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a94:	68d2      	ldr	r2, [r2, #12]
 8003a96:	0a12      	lsrs	r2, r2, #8
 8003a98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
    break;
 8003aa2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	0e5b      	lsrs	r3, r3, #25
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003abe:	687b      	ldr	r3, [r7, #4]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	016e3600 	.word	0x016e3600
 8003ad4:	00f42400 	.word	0x00f42400

08003ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8098 	beq.w	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af6:	2300      	movs	r3, #0
 8003af8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afa:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10d      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b06:	4b40      	ldr	r3, [pc, #256]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	4a3f      	ldr	r2, [pc, #252]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b10:	6593      	str	r3, [r2, #88]	; 0x58
 8003b12:	4b3d      	ldr	r3, [pc, #244]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b22:	4b3a      	ldr	r3, [pc, #232]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a39      	ldr	r2, [pc, #228]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b2e:	f7fd fd45 	bl	80015bc <HAL_GetTick>
 8003b32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b34:	e009      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b36:	f7fd fd41 	bl	80015bc <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d902      	bls.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	74fb      	strb	r3, [r7, #19]
        break;
 8003b48:	e005      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b4a:	4b30      	ldr	r3, [pc, #192]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0ef      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b56:	7cfb      	ldrb	r3, [r7, #19]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d159      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b5c:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01e      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d019      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b78:	4b23      	ldr	r3, [pc, #140]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b84:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	4a1f      	ldr	r2, [pc, #124]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b94:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ba4:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d016      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb6:	f7fd fd01 	bl	80015bc <HAL_GetTick>
 8003bba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bbc:	e00b      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fd fcfd 	bl	80015bc <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d902      	bls.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	74fb      	strb	r3, [r7, #19]
            break;
 8003bd4:	e006      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ec      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003be4:	7cfb      	ldrb	r3, [r7, #19]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bea:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf8:	4903      	ldr	r1, [pc, #12]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c00:	e008      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	74bb      	strb	r3, [r7, #18]
 8003c06:	e005      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c14:	7c7b      	ldrb	r3, [r7, #17]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1a:	4ba7      	ldr	r3, [pc, #668]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	4aa6      	ldr	r2, [pc, #664]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c32:	4ba1      	ldr	r3, [pc, #644]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c38:	f023 0203 	bic.w	r2, r3, #3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	499d      	ldr	r1, [pc, #628]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c54:	4b98      	ldr	r3, [pc, #608]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	f023 020c 	bic.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	4995      	ldr	r1, [pc, #596]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c76:	4b90      	ldr	r3, [pc, #576]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	498c      	ldr	r1, [pc, #560]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c98:	4b87      	ldr	r3, [pc, #540]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	4984      	ldr	r1, [pc, #528]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cba:	4b7f      	ldr	r3, [pc, #508]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	497b      	ldr	r1, [pc, #492]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cdc:	4b76      	ldr	r3, [pc, #472]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	4973      	ldr	r1, [pc, #460]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cfe:	4b6e      	ldr	r3, [pc, #440]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	496a      	ldr	r1, [pc, #424]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d20:	4b65      	ldr	r3, [pc, #404]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	4962      	ldr	r1, [pc, #392]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d42:	4b5d      	ldr	r3, [pc, #372]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	4959      	ldr	r1, [pc, #356]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d64:	4b54      	ldr	r3, [pc, #336]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	4951      	ldr	r1, [pc, #324]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d86:	4b4c      	ldr	r3, [pc, #304]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	4948      	ldr	r1, [pc, #288]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d015      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003da8:	4b43      	ldr	r3, [pc, #268]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	4940      	ldr	r1, [pc, #256]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc8:	4b3b      	ldr	r3, [pc, #236]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4a3a      	ldr	r2, [pc, #232]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003de0:	4b35      	ldr	r3, [pc, #212]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dee:	4932      	ldr	r1, [pc, #200]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e00:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e18:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	4924      	ldr	r1, [pc, #144]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e36:	d105      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e38:	4b1f      	ldr	r3, [pc, #124]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e50:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	4916      	ldr	r1, [pc, #88]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e70:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d019      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4908      	ldr	r1, [pc, #32]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ea6:	d109      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a02      	ldr	r2, [pc, #8]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eb2:	60d3      	str	r3, [r2, #12]
 8003eb4:	e002      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d015      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ec8:	4b29      	ldr	r3, [pc, #164]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	4926      	ldr	r1, [pc, #152]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ee6:	d105      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ee8:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	4a20      	ldr	r2, [pc, #128]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d015      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f06:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f0e:	4918      	ldr	r1, [pc, #96]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f20:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d015      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f38:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f46:	490a      	ldr	r1, [pc, #40]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f56:	d105      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f64:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000

08003f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e049      	b.n	800401a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f841 	bl	8004022 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f000 fcde 	bl	8004974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	d001      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e054      	b.n	80040fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a26      	ldr	r2, [pc, #152]	; (8004108 <HAL_TIM_Base_Start_IT+0xd0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d022      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407a:	d01d      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a22      	ldr	r2, [pc, #136]	; (800410c <HAL_TIM_Base_Start_IT+0xd4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d018      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a21      	ldr	r2, [pc, #132]	; (8004110 <HAL_TIM_Base_Start_IT+0xd8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d013      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1f      	ldr	r2, [pc, #124]	; (8004114 <HAL_TIM_Base_Start_IT+0xdc>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00e      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1e      	ldr	r2, [pc, #120]	; (8004118 <HAL_TIM_Base_Start_IT+0xe0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d009      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1c      	ldr	r2, [pc, #112]	; (800411c <HAL_TIM_Base_Start_IT+0xe4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d004      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x80>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1b      	ldr	r2, [pc, #108]	; (8004120 <HAL_TIM_Base_Start_IT+0xe8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d115      	bne.n	80040e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	4b19      	ldr	r3, [pc, #100]	; (8004124 <HAL_TIM_Base_Start_IT+0xec>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b06      	cmp	r3, #6
 80040c8:	d015      	beq.n	80040f6 <HAL_TIM_Base_Start_IT+0xbe>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d0:	d011      	beq.n	80040f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	e008      	b.n	80040f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	e000      	b.n	80040f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40012c00 	.word	0x40012c00
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	40000c00 	.word	0x40000c00
 8004118:	40013400 	.word	0x40013400
 800411c:	40014000 	.word	0x40014000
 8004120:	40015000 	.word	0x40015000
 8004124:	00010007 	.word	0x00010007

08004128 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e049      	b.n	80041ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fc ff90 	bl	8001074 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	4619      	mov	r1, r3
 8004166:	4610      	mov	r0, r2
 8004168:	f000 fc04 	bl	8004974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_TIM_PWM_Start+0x24>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e03c      	b.n	8004276 <HAL_TIM_PWM_Start+0x9e>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d109      	bne.n	8004216 <HAL_TIM_PWM_Start+0x3e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	bf14      	ite	ne
 800420e:	2301      	movne	r3, #1
 8004210:	2300      	moveq	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	e02f      	b.n	8004276 <HAL_TIM_PWM_Start+0x9e>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d109      	bne.n	8004230 <HAL_TIM_PWM_Start+0x58>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e022      	b.n	8004276 <HAL_TIM_PWM_Start+0x9e>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b0c      	cmp	r3, #12
 8004234:	d109      	bne.n	800424a <HAL_TIM_PWM_Start+0x72>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	bf14      	ite	ne
 8004242:	2301      	movne	r3, #1
 8004244:	2300      	moveq	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	e015      	b.n	8004276 <HAL_TIM_PWM_Start+0x9e>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b10      	cmp	r3, #16
 800424e:	d109      	bne.n	8004264 <HAL_TIM_PWM_Start+0x8c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e008      	b.n	8004276 <HAL_TIM_PWM_Start+0x9e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0a6      	b.n	80043cc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d104      	bne.n	800428e <HAL_TIM_PWM_Start+0xb6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800428c:	e023      	b.n	80042d6 <HAL_TIM_PWM_Start+0xfe>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b04      	cmp	r3, #4
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Start+0xc6>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429c:	e01b      	b.n	80042d6 <HAL_TIM_PWM_Start+0xfe>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start+0xd6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ac:	e013      	b.n	80042d6 <HAL_TIM_PWM_Start+0xfe>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b0c      	cmp	r3, #12
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start+0xe6>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042bc:	e00b      	b.n	80042d6 <HAL_TIM_PWM_Start+0xfe>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start+0xf6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042cc:	e003      	b.n	80042d6 <HAL_TIM_PWM_Start+0xfe>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2202      	movs	r2, #2
 80042d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2201      	movs	r2, #1
 80042dc:	6839      	ldr	r1, [r7, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 ff8e 	bl	8005200 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a3a      	ldr	r2, [pc, #232]	; (80043d4 <HAL_TIM_PWM_Start+0x1fc>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d018      	beq.n	8004320 <HAL_TIM_PWM_Start+0x148>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a39      	ldr	r2, [pc, #228]	; (80043d8 <HAL_TIM_PWM_Start+0x200>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d013      	beq.n	8004320 <HAL_TIM_PWM_Start+0x148>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a37      	ldr	r2, [pc, #220]	; (80043dc <HAL_TIM_PWM_Start+0x204>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00e      	beq.n	8004320 <HAL_TIM_PWM_Start+0x148>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a36      	ldr	r2, [pc, #216]	; (80043e0 <HAL_TIM_PWM_Start+0x208>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d009      	beq.n	8004320 <HAL_TIM_PWM_Start+0x148>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a34      	ldr	r2, [pc, #208]	; (80043e4 <HAL_TIM_PWM_Start+0x20c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_TIM_PWM_Start+0x148>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a33      	ldr	r2, [pc, #204]	; (80043e8 <HAL_TIM_PWM_Start+0x210>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d101      	bne.n	8004324 <HAL_TIM_PWM_Start+0x14c>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <HAL_TIM_PWM_Start+0x14e>
 8004324:	2300      	movs	r3, #0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004338:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a25      	ldr	r2, [pc, #148]	; (80043d4 <HAL_TIM_PWM_Start+0x1fc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d022      	beq.n	800438a <HAL_TIM_PWM_Start+0x1b2>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d01d      	beq.n	800438a <HAL_TIM_PWM_Start+0x1b2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a26      	ldr	r2, [pc, #152]	; (80043ec <HAL_TIM_PWM_Start+0x214>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d018      	beq.n	800438a <HAL_TIM_PWM_Start+0x1b2>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a24      	ldr	r2, [pc, #144]	; (80043f0 <HAL_TIM_PWM_Start+0x218>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <HAL_TIM_PWM_Start+0x1b2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a23      	ldr	r2, [pc, #140]	; (80043f4 <HAL_TIM_PWM_Start+0x21c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_TIM_PWM_Start+0x1b2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a19      	ldr	r2, [pc, #100]	; (80043d8 <HAL_TIM_PWM_Start+0x200>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_TIM_PWM_Start+0x1b2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a18      	ldr	r2, [pc, #96]	; (80043dc <HAL_TIM_PWM_Start+0x204>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_TIM_PWM_Start+0x1b2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <HAL_TIM_PWM_Start+0x210>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d115      	bne.n	80043b6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <HAL_TIM_PWM_Start+0x220>)
 8004392:	4013      	ands	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b06      	cmp	r3, #6
 800439a:	d015      	beq.n	80043c8 <HAL_TIM_PWM_Start+0x1f0>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a2:	d011      	beq.n	80043c8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b4:	e008      	b.n	80043c8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	e000      	b.n	80043ca <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	40013400 	.word	0x40013400
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40014400 	.word	0x40014400
 80043e4:	40014800 	.word	0x40014800
 80043e8:	40015000 	.word	0x40015000
 80043ec:	40000400 	.word	0x40000400
 80043f0:	40000800 	.word	0x40000800
 80043f4:	40000c00 	.word	0x40000c00
 80043f8:	00010007 	.word	0x00010007

080043fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b02      	cmp	r3, #2
 8004410:	d122      	bne.n	8004458 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b02      	cmp	r3, #2
 800441e:	d11b      	bne.n	8004458 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0202 	mvn.w	r2, #2
 8004428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa7a 	bl	8004938 <HAL_TIM_IC_CaptureCallback>
 8004444:	e005      	b.n	8004452 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa6c 	bl	8004924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fa7d 	bl	800494c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b04      	cmp	r3, #4
 8004464:	d122      	bne.n	80044ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b04      	cmp	r3, #4
 8004472:	d11b      	bne.n	80044ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0204 	mvn.w	r2, #4
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2202      	movs	r2, #2
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fa50 	bl	8004938 <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fa42 	bl	8004924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fa53 	bl	800494c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d122      	bne.n	8004500 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d11b      	bne.n	8004500 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0208 	mvn.w	r2, #8
 80044d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2204      	movs	r2, #4
 80044d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa26 	bl	8004938 <HAL_TIM_IC_CaptureCallback>
 80044ec:	e005      	b.n	80044fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa18 	bl	8004924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fa29 	bl	800494c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b10      	cmp	r3, #16
 800450c:	d122      	bne.n	8004554 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b10      	cmp	r3, #16
 800451a:	d11b      	bne.n	8004554 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0210 	mvn.w	r2, #16
 8004524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2208      	movs	r2, #8
 800452a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f9fc 	bl	8004938 <HAL_TIM_IC_CaptureCallback>
 8004540:	e005      	b.n	800454e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f9ee 	bl	8004924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f9ff 	bl	800494c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b01      	cmp	r3, #1
 8004560:	d10e      	bne.n	8004580 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	d107      	bne.n	8004580 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0201 	mvn.w	r2, #1
 8004578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fc fc44 	bl	8000e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458a:	2b80      	cmp	r3, #128	; 0x80
 800458c:	d10e      	bne.n	80045ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004598:	2b80      	cmp	r3, #128	; 0x80
 800459a:	d107      	bne.n	80045ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f001 f912 	bl	80057d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ba:	d10e      	bne.n	80045da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d107      	bne.n	80045da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f001 f905 	bl	80057e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d10e      	bne.n	8004606 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d107      	bne.n	8004606 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f9ad 	bl	8004960 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b20      	cmp	r3, #32
 8004612:	d10e      	bne.n	8004632 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b20      	cmp	r3, #32
 8004620:	d107      	bne.n	8004632 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f06f 0220 	mvn.w	r2, #32
 800462a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f001 f8c5 	bl	80057bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800463c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004640:	d10f      	bne.n	8004662 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800464c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004650:	d107      	bne.n	8004662 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800465a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f001 f8cb 	bl	80057f8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800466c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004670:	d10f      	bne.n	8004692 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800467c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004680:	d107      	bne.n	8004692 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800468a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f001 f8bd 	bl	800580c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a0:	d10f      	bne.n	80046c2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b0:	d107      	bne.n	80046c2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80046ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f001 f8af 	bl	8005820 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046d0:	d10f      	bne.n	80046f2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046e0:	d107      	bne.n	80046f2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80046ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f001 f8a1 	bl	8005834 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004716:	2302      	movs	r3, #2
 8004718:	e0ff      	b.n	800491a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b14      	cmp	r3, #20
 8004726:	f200 80f0 	bhi.w	800490a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800472a:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004785 	.word	0x08004785
 8004734:	0800490b 	.word	0x0800490b
 8004738:	0800490b 	.word	0x0800490b
 800473c:	0800490b 	.word	0x0800490b
 8004740:	080047c5 	.word	0x080047c5
 8004744:	0800490b 	.word	0x0800490b
 8004748:	0800490b 	.word	0x0800490b
 800474c:	0800490b 	.word	0x0800490b
 8004750:	08004807 	.word	0x08004807
 8004754:	0800490b 	.word	0x0800490b
 8004758:	0800490b 	.word	0x0800490b
 800475c:	0800490b 	.word	0x0800490b
 8004760:	08004847 	.word	0x08004847
 8004764:	0800490b 	.word	0x0800490b
 8004768:	0800490b 	.word	0x0800490b
 800476c:	0800490b 	.word	0x0800490b
 8004770:	08004889 	.word	0x08004889
 8004774:	0800490b 	.word	0x0800490b
 8004778:	0800490b 	.word	0x0800490b
 800477c:	0800490b 	.word	0x0800490b
 8004780:	080048c9 	.word	0x080048c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f99a 	bl	8004ac4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0208 	orr.w	r2, r2, #8
 800479e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0204 	bic.w	r2, r2, #4
 80047ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6999      	ldr	r1, [r3, #24]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	619a      	str	r2, [r3, #24]
      break;
 80047c2:	e0a5      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fa14 	bl	8004bf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6999      	ldr	r1, [r3, #24]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	021a      	lsls	r2, r3, #8
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	619a      	str	r2, [r3, #24]
      break;
 8004804:	e084      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fa87 	bl	8004d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0208 	orr.w	r2, r2, #8
 8004820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0204 	bic.w	r2, r2, #4
 8004830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69d9      	ldr	r1, [r3, #28]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	61da      	str	r2, [r3, #28]
      break;
 8004844:	e064      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 faf9 	bl	8004e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69d9      	ldr	r1, [r3, #28]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	021a      	lsls	r2, r3, #8
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	61da      	str	r2, [r3, #28]
      break;
 8004886:	e043      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fb6c 	bl	8004f6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0208 	orr.w	r2, r2, #8
 80048a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0204 	bic.w	r2, r2, #4
 80048b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80048c6:	e023      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fbb6 	bl	8005040 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	021a      	lsls	r2, r3, #8
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004908:	e002      	b.n	8004910 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
      break;
 800490e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004918:	7dfb      	ldrb	r3, [r7, #23]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop

08004924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a46      	ldr	r2, [pc, #280]	; (8004aa0 <TIM_Base_SetConfig+0x12c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d017      	beq.n	80049bc <TIM_Base_SetConfig+0x48>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004992:	d013      	beq.n	80049bc <TIM_Base_SetConfig+0x48>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a43      	ldr	r2, [pc, #268]	; (8004aa4 <TIM_Base_SetConfig+0x130>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00f      	beq.n	80049bc <TIM_Base_SetConfig+0x48>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a42      	ldr	r2, [pc, #264]	; (8004aa8 <TIM_Base_SetConfig+0x134>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00b      	beq.n	80049bc <TIM_Base_SetConfig+0x48>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a41      	ldr	r2, [pc, #260]	; (8004aac <TIM_Base_SetConfig+0x138>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d007      	beq.n	80049bc <TIM_Base_SetConfig+0x48>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a40      	ldr	r2, [pc, #256]	; (8004ab0 <TIM_Base_SetConfig+0x13c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_Base_SetConfig+0x48>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a3f      	ldr	r2, [pc, #252]	; (8004ab4 <TIM_Base_SetConfig+0x140>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d108      	bne.n	80049ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a33      	ldr	r2, [pc, #204]	; (8004aa0 <TIM_Base_SetConfig+0x12c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d023      	beq.n	8004a1e <TIM_Base_SetConfig+0xaa>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049dc:	d01f      	beq.n	8004a1e <TIM_Base_SetConfig+0xaa>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a30      	ldr	r2, [pc, #192]	; (8004aa4 <TIM_Base_SetConfig+0x130>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01b      	beq.n	8004a1e <TIM_Base_SetConfig+0xaa>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a2f      	ldr	r2, [pc, #188]	; (8004aa8 <TIM_Base_SetConfig+0x134>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d017      	beq.n	8004a1e <TIM_Base_SetConfig+0xaa>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a2e      	ldr	r2, [pc, #184]	; (8004aac <TIM_Base_SetConfig+0x138>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d013      	beq.n	8004a1e <TIM_Base_SetConfig+0xaa>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a2d      	ldr	r2, [pc, #180]	; (8004ab0 <TIM_Base_SetConfig+0x13c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00f      	beq.n	8004a1e <TIM_Base_SetConfig+0xaa>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a2d      	ldr	r2, [pc, #180]	; (8004ab8 <TIM_Base_SetConfig+0x144>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <TIM_Base_SetConfig+0xaa>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2c      	ldr	r2, [pc, #176]	; (8004abc <TIM_Base_SetConfig+0x148>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d007      	beq.n	8004a1e <TIM_Base_SetConfig+0xaa>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a2b      	ldr	r2, [pc, #172]	; (8004ac0 <TIM_Base_SetConfig+0x14c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_Base_SetConfig+0xaa>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a26      	ldr	r2, [pc, #152]	; (8004ab4 <TIM_Base_SetConfig+0x140>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d108      	bne.n	8004a30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <TIM_Base_SetConfig+0x12c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d013      	beq.n	8004a84 <TIM_Base_SetConfig+0x110>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <TIM_Base_SetConfig+0x13c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00f      	beq.n	8004a84 <TIM_Base_SetConfig+0x110>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <TIM_Base_SetConfig+0x144>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00b      	beq.n	8004a84 <TIM_Base_SetConfig+0x110>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a13      	ldr	r2, [pc, #76]	; (8004abc <TIM_Base_SetConfig+0x148>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d007      	beq.n	8004a84 <TIM_Base_SetConfig+0x110>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a12      	ldr	r2, [pc, #72]	; (8004ac0 <TIM_Base_SetConfig+0x14c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_Base_SetConfig+0x110>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a0d      	ldr	r2, [pc, #52]	; (8004ab4 <TIM_Base_SetConfig+0x140>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d103      	bne.n	8004a8c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	615a      	str	r2, [r3, #20]
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40012c00 	.word	0x40012c00
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000800 	.word	0x40000800
 8004aac:	40000c00 	.word	0x40000c00
 8004ab0:	40013400 	.word	0x40013400
 8004ab4:	40015000 	.word	0x40015000
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40014400 	.word	0x40014400
 8004ac0:	40014800 	.word	0x40014800

08004ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f023 0201 	bic.w	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0303 	bic.w	r3, r3, #3
 8004afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f023 0302 	bic.w	r3, r3, #2
 8004b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a30      	ldr	r2, [pc, #192]	; (8004be0 <TIM_OC1_SetConfig+0x11c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d013      	beq.n	8004b4c <TIM_OC1_SetConfig+0x88>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a2f      	ldr	r2, [pc, #188]	; (8004be4 <TIM_OC1_SetConfig+0x120>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00f      	beq.n	8004b4c <TIM_OC1_SetConfig+0x88>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <TIM_OC1_SetConfig+0x124>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00b      	beq.n	8004b4c <TIM_OC1_SetConfig+0x88>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a2d      	ldr	r2, [pc, #180]	; (8004bec <TIM_OC1_SetConfig+0x128>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d007      	beq.n	8004b4c <TIM_OC1_SetConfig+0x88>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a2c      	ldr	r2, [pc, #176]	; (8004bf0 <TIM_OC1_SetConfig+0x12c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d003      	beq.n	8004b4c <TIM_OC1_SetConfig+0x88>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a2b      	ldr	r2, [pc, #172]	; (8004bf4 <TIM_OC1_SetConfig+0x130>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d10c      	bne.n	8004b66 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f023 0308 	bic.w	r3, r3, #8
 8004b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a1d      	ldr	r2, [pc, #116]	; (8004be0 <TIM_OC1_SetConfig+0x11c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <TIM_OC1_SetConfig+0xd2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <TIM_OC1_SetConfig+0x120>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00f      	beq.n	8004b96 <TIM_OC1_SetConfig+0xd2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <TIM_OC1_SetConfig+0x124>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00b      	beq.n	8004b96 <TIM_OC1_SetConfig+0xd2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a1a      	ldr	r2, [pc, #104]	; (8004bec <TIM_OC1_SetConfig+0x128>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d007      	beq.n	8004b96 <TIM_OC1_SetConfig+0xd2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <TIM_OC1_SetConfig+0x12c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d003      	beq.n	8004b96 <TIM_OC1_SetConfig+0xd2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <TIM_OC1_SetConfig+0x130>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d111      	bne.n	8004bba <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	621a      	str	r2, [r3, #32]
}
 8004bd4:	bf00      	nop
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40012c00 	.word	0x40012c00
 8004be4:	40013400 	.word	0x40013400
 8004be8:	40014000 	.word	0x40014000
 8004bec:	40014400 	.word	0x40014400
 8004bf0:	40014800 	.word	0x40014800
 8004bf4:	40015000 	.word	0x40015000

08004bf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f023 0210 	bic.w	r2, r3, #16
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0320 	bic.w	r3, r3, #32
 8004c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a2c      	ldr	r2, [pc, #176]	; (8004d08 <TIM_OC2_SetConfig+0x110>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d007      	beq.n	8004c6c <TIM_OC2_SetConfig+0x74>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a2b      	ldr	r2, [pc, #172]	; (8004d0c <TIM_OC2_SetConfig+0x114>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_OC2_SetConfig+0x74>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a2a      	ldr	r2, [pc, #168]	; (8004d10 <TIM_OC2_SetConfig+0x118>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d10d      	bne.n	8004c88 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a1f      	ldr	r2, [pc, #124]	; (8004d08 <TIM_OC2_SetConfig+0x110>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d013      	beq.n	8004cb8 <TIM_OC2_SetConfig+0xc0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <TIM_OC2_SetConfig+0x114>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00f      	beq.n	8004cb8 <TIM_OC2_SetConfig+0xc0>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a1e      	ldr	r2, [pc, #120]	; (8004d14 <TIM_OC2_SetConfig+0x11c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00b      	beq.n	8004cb8 <TIM_OC2_SetConfig+0xc0>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a1d      	ldr	r2, [pc, #116]	; (8004d18 <TIM_OC2_SetConfig+0x120>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d007      	beq.n	8004cb8 <TIM_OC2_SetConfig+0xc0>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <TIM_OC2_SetConfig+0x124>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_OC2_SetConfig+0xc0>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <TIM_OC2_SetConfig+0x118>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d113      	bne.n	8004ce0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	621a      	str	r2, [r3, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40013400 	.word	0x40013400
 8004d10:	40015000 	.word	0x40015000
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40014400 	.word	0x40014400
 8004d1c:	40014800 	.word	0x40014800

08004d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0303 	bic.w	r3, r3, #3
 8004d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2b      	ldr	r2, [pc, #172]	; (8004e2c <TIM_OC3_SetConfig+0x10c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d007      	beq.n	8004d92 <TIM_OC3_SetConfig+0x72>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2a      	ldr	r2, [pc, #168]	; (8004e30 <TIM_OC3_SetConfig+0x110>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d003      	beq.n	8004d92 <TIM_OC3_SetConfig+0x72>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a29      	ldr	r2, [pc, #164]	; (8004e34 <TIM_OC3_SetConfig+0x114>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d10d      	bne.n	8004dae <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <TIM_OC3_SetConfig+0x10c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <TIM_OC3_SetConfig+0xbe>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <TIM_OC3_SetConfig+0x110>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00f      	beq.n	8004dde <TIM_OC3_SetConfig+0xbe>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1d      	ldr	r2, [pc, #116]	; (8004e38 <TIM_OC3_SetConfig+0x118>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_OC3_SetConfig+0xbe>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <TIM_OC3_SetConfig+0x11c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_OC3_SetConfig+0xbe>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <TIM_OC3_SetConfig+0x120>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_OC3_SetConfig+0xbe>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <TIM_OC3_SetConfig+0x114>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d113      	bne.n	8004e06 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	621a      	str	r2, [r3, #32]
}
 8004e20:	bf00      	nop
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	40012c00 	.word	0x40012c00
 8004e30:	40013400 	.word	0x40013400
 8004e34:	40015000 	.word	0x40015000
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800

08004e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	031b      	lsls	r3, r3, #12
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a2c      	ldr	r2, [pc, #176]	; (8004f54 <TIM_OC4_SetConfig+0x110>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d007      	beq.n	8004eb8 <TIM_OC4_SetConfig+0x74>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a2b      	ldr	r2, [pc, #172]	; (8004f58 <TIM_OC4_SetConfig+0x114>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d003      	beq.n	8004eb8 <TIM_OC4_SetConfig+0x74>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a2a      	ldr	r2, [pc, #168]	; (8004f5c <TIM_OC4_SetConfig+0x118>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d10d      	bne.n	8004ed4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	031b      	lsls	r3, r3, #12
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <TIM_OC4_SetConfig+0x110>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <TIM_OC4_SetConfig+0xc0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a1e      	ldr	r2, [pc, #120]	; (8004f58 <TIM_OC4_SetConfig+0x114>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00f      	beq.n	8004f04 <TIM_OC4_SetConfig+0xc0>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a1e      	ldr	r2, [pc, #120]	; (8004f60 <TIM_OC4_SetConfig+0x11c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00b      	beq.n	8004f04 <TIM_OC4_SetConfig+0xc0>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a1d      	ldr	r2, [pc, #116]	; (8004f64 <TIM_OC4_SetConfig+0x120>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d007      	beq.n	8004f04 <TIM_OC4_SetConfig+0xc0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <TIM_OC4_SetConfig+0x124>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <TIM_OC4_SetConfig+0xc0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a17      	ldr	r2, [pc, #92]	; (8004f5c <TIM_OC4_SetConfig+0x118>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d113      	bne.n	8004f2c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f0a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f12:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	019b      	lsls	r3, r3, #6
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	019b      	lsls	r3, r3, #6
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40013400 	.word	0x40013400
 8004f5c:	40015000 	.word	0x40015000
 8004f60:	40014000 	.word	0x40014000
 8004f64:	40014400 	.word	0x40014400
 8004f68:	40014800 	.word	0x40014800

08004f6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004fb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	041b      	lsls	r3, r3, #16
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a19      	ldr	r2, [pc, #100]	; (8005028 <TIM_OC5_SetConfig+0xbc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <TIM_OC5_SetConfig+0x82>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a18      	ldr	r2, [pc, #96]	; (800502c <TIM_OC5_SetConfig+0xc0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00f      	beq.n	8004fee <TIM_OC5_SetConfig+0x82>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a17      	ldr	r2, [pc, #92]	; (8005030 <TIM_OC5_SetConfig+0xc4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00b      	beq.n	8004fee <TIM_OC5_SetConfig+0x82>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a16      	ldr	r2, [pc, #88]	; (8005034 <TIM_OC5_SetConfig+0xc8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d007      	beq.n	8004fee <TIM_OC5_SetConfig+0x82>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a15      	ldr	r2, [pc, #84]	; (8005038 <TIM_OC5_SetConfig+0xcc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <TIM_OC5_SetConfig+0x82>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a14      	ldr	r2, [pc, #80]	; (800503c <TIM_OC5_SetConfig+0xd0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d109      	bne.n	8005002 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	621a      	str	r2, [r3, #32]
}
 800501c:	bf00      	nop
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	40012c00 	.word	0x40012c00
 800502c:	40013400 	.word	0x40013400
 8005030:	40014000 	.word	0x40014000
 8005034:	40014400 	.word	0x40014400
 8005038:	40014800 	.word	0x40014800
 800503c:	40015000 	.word	0x40015000

08005040 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800506e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	051b      	lsls	r3, r3, #20
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a1a      	ldr	r2, [pc, #104]	; (8005100 <TIM_OC6_SetConfig+0xc0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <TIM_OC6_SetConfig+0x84>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a19      	ldr	r2, [pc, #100]	; (8005104 <TIM_OC6_SetConfig+0xc4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00f      	beq.n	80050c4 <TIM_OC6_SetConfig+0x84>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a18      	ldr	r2, [pc, #96]	; (8005108 <TIM_OC6_SetConfig+0xc8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00b      	beq.n	80050c4 <TIM_OC6_SetConfig+0x84>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a17      	ldr	r2, [pc, #92]	; (800510c <TIM_OC6_SetConfig+0xcc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d007      	beq.n	80050c4 <TIM_OC6_SetConfig+0x84>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a16      	ldr	r2, [pc, #88]	; (8005110 <TIM_OC6_SetConfig+0xd0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_OC6_SetConfig+0x84>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a15      	ldr	r2, [pc, #84]	; (8005114 <TIM_OC6_SetConfig+0xd4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d109      	bne.n	80050d8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	029b      	lsls	r3, r3, #10
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40013400 	.word	0x40013400
 8005108:	40014000 	.word	0x40014000
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800
 8005114:	40015000 	.word	0x40015000

08005118 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	f023 0201 	bic.w	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4a28      	ldr	r2, [pc, #160]	; (80051e4 <TIM_TI1_SetConfig+0xcc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01b      	beq.n	800517e <TIM_TI1_SetConfig+0x66>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514c:	d017      	beq.n	800517e <TIM_TI1_SetConfig+0x66>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4a25      	ldr	r2, [pc, #148]	; (80051e8 <TIM_TI1_SetConfig+0xd0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d013      	beq.n	800517e <TIM_TI1_SetConfig+0x66>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a24      	ldr	r2, [pc, #144]	; (80051ec <TIM_TI1_SetConfig+0xd4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00f      	beq.n	800517e <TIM_TI1_SetConfig+0x66>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4a23      	ldr	r2, [pc, #140]	; (80051f0 <TIM_TI1_SetConfig+0xd8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00b      	beq.n	800517e <TIM_TI1_SetConfig+0x66>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4a22      	ldr	r2, [pc, #136]	; (80051f4 <TIM_TI1_SetConfig+0xdc>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <TIM_TI1_SetConfig+0x66>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4a21      	ldr	r2, [pc, #132]	; (80051f8 <TIM_TI1_SetConfig+0xe0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_TI1_SetConfig+0x66>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4a20      	ldr	r2, [pc, #128]	; (80051fc <TIM_TI1_SetConfig+0xe4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d101      	bne.n	8005182 <TIM_TI1_SetConfig+0x6a>
 800517e:	2301      	movs	r3, #1
 8005180:	e000      	b.n	8005184 <TIM_TI1_SetConfig+0x6c>
 8005182:	2300      	movs	r3, #0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e003      	b.n	80051a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f023 030a 	bic.w	r3, r3, #10
 80051bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f003 030a 	and.w	r3, r3, #10
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40013400 	.word	0x40013400
 80051f8:	40014000 	.word	0x40014000
 80051fc:	40015000 	.word	0x40015000

08005200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 031f 	and.w	r3, r3, #31
 8005212:	2201      	movs	r2, #1
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a1a      	ldr	r2, [r3, #32]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	43db      	mvns	r3, r3
 8005222:	401a      	ands	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a1a      	ldr	r2, [r3, #32]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f003 031f 	and.w	r3, r3, #31
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	fa01 f303 	lsl.w	r3, r1, r3
 8005238:	431a      	orrs	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b08a      	sub	sp, #40	; 0x28
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e0a0      	b.n	80053a0 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fb ff1e 	bl	80010b4 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	4619      	mov	r1, r3
 800528a:	4610      	mov	r0, r2
 800528c:	f7ff fb72 	bl	8004974 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	6819      	ldr	r1, [r3, #0]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2203      	movs	r2, #3
 800529e:	f7ff ff3b 	bl	8005118 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699a      	ldr	r2, [r3, #24]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 020c 	bic.w	r2, r2, #12
 80052b0:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6999      	ldr	r1, [r3, #24]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052d2:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f6:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005306:	f023 0307 	bic.w	r3, r3, #7
 800530a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0204 	orr.w	r2, r2, #4
 800531a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800531c:	2300      	movs	r3, #0
 800531e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005320:	2300      	movs	r3, #0
 8005322:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005324:	2370      	movs	r3, #112	; 0x70
 8005326:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005328:	2300      	movs	r3, #0
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800532c:	2300      	movs	r3, #0
 800532e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f107 020c 	add.w	r2, r7, #12
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fc57 	bl	8004bf8 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800536c:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3728      	adds	r7, #40	; 0x28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d109      	bne.n	80053cc <HAL_TIMEx_PWMN_Start+0x24>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	bf14      	ite	ne
 80053c4:	2301      	movne	r3, #1
 80053c6:	2300      	moveq	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	e022      	b.n	8005412 <HAL_TIMEx_PWMN_Start+0x6a>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d109      	bne.n	80053e6 <HAL_TIMEx_PWMN_Start+0x3e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b01      	cmp	r3, #1
 80053dc:	bf14      	ite	ne
 80053de:	2301      	movne	r3, #1
 80053e0:	2300      	moveq	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	e015      	b.n	8005412 <HAL_TIMEx_PWMN_Start+0x6a>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d109      	bne.n	8005400 <HAL_TIMEx_PWMN_Start+0x58>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	bf14      	ite	ne
 80053f8:	2301      	movne	r3, #1
 80053fa:	2300      	moveq	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	e008      	b.n	8005412 <HAL_TIMEx_PWMN_Start+0x6a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e073      	b.n	8005502 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d104      	bne.n	800542a <HAL_TIMEx_PWMN_Start+0x82>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005428:	e013      	b.n	8005452 <HAL_TIMEx_PWMN_Start+0xaa>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b04      	cmp	r3, #4
 800542e:	d104      	bne.n	800543a <HAL_TIMEx_PWMN_Start+0x92>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005438:	e00b      	b.n	8005452 <HAL_TIMEx_PWMN_Start+0xaa>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d104      	bne.n	800544a <HAL_TIMEx_PWMN_Start+0xa2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005448:	e003      	b.n	8005452 <HAL_TIMEx_PWMN_Start+0xaa>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2202      	movs	r2, #2
 800544e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2204      	movs	r2, #4
 8005458:	6839      	ldr	r1, [r7, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f9f4 	bl	8005848 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800546e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a25      	ldr	r2, [pc, #148]	; (800550c <HAL_TIMEx_PWMN_Start+0x164>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d022      	beq.n	80054c0 <HAL_TIMEx_PWMN_Start+0x118>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005482:	d01d      	beq.n	80054c0 <HAL_TIMEx_PWMN_Start+0x118>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a21      	ldr	r2, [pc, #132]	; (8005510 <HAL_TIMEx_PWMN_Start+0x168>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d018      	beq.n	80054c0 <HAL_TIMEx_PWMN_Start+0x118>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a20      	ldr	r2, [pc, #128]	; (8005514 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <HAL_TIMEx_PWMN_Start+0x118>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <HAL_TIMEx_PWMN_Start+0x170>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00e      	beq.n	80054c0 <HAL_TIMEx_PWMN_Start+0x118>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1d      	ldr	r2, [pc, #116]	; (800551c <HAL_TIMEx_PWMN_Start+0x174>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d009      	beq.n	80054c0 <HAL_TIMEx_PWMN_Start+0x118>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <HAL_TIMEx_PWMN_Start+0x178>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d004      	beq.n	80054c0 <HAL_TIMEx_PWMN_Start+0x118>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <HAL_TIMEx_PWMN_Start+0x17c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d115      	bne.n	80054ec <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	4b18      	ldr	r3, [pc, #96]	; (8005528 <HAL_TIMEx_PWMN_Start+0x180>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b06      	cmp	r3, #6
 80054d0:	d015      	beq.n	80054fe <HAL_TIMEx_PWMN_Start+0x156>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d8:	d011      	beq.n	80054fe <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0201 	orr.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ea:	e008      	b.n	80054fe <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e000      	b.n	8005500 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40000400 	.word	0x40000400
 8005514:	40000800 	.word	0x40000800
 8005518:	40000c00 	.word	0x40000c00
 800551c:	40013400 	.word	0x40013400
 8005520:	40014000 	.word	0x40014000
 8005524:	40015000 	.word	0x40015000
 8005528:	00010007 	.word	0x00010007

0800552c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005540:	2302      	movs	r3, #2
 8005542:	e074      	b.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a34      	ldr	r2, [pc, #208]	; (800563c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d009      	beq.n	8005582 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a33      	ldr	r2, [pc, #204]	; (8005640 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d004      	beq.n	8005582 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a31      	ldr	r2, [pc, #196]	; (8005644 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d108      	bne.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005588:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800559a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a21      	ldr	r2, [pc, #132]	; (800563c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d022      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c4:	d01d      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1f      	ldr	r2, [pc, #124]	; (8005648 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d018      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1d      	ldr	r2, [pc, #116]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1c      	ldr	r2, [pc, #112]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00e      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a15      	ldr	r2, [pc, #84]	; (8005640 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d009      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a18      	ldr	r2, [pc, #96]	; (8005654 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d004      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a11      	ldr	r2, [pc, #68]	; (8005644 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d10c      	bne.n	800561c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	4313      	orrs	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40013400 	.word	0x40013400
 8005644:	40015000 	.word	0x40015000
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	40014000 	.word	0x40014000

08005658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005670:	2302      	movs	r3, #2
 8005672:	e096      	b.n	80057a2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a2f      	ldr	r2, [pc, #188]	; (80057b0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a2d      	ldr	r2, [pc, #180]	; (80057b4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a2c      	ldr	r2, [pc, #176]	; (80057b8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d106      	bne.n	800571a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a24      	ldr	r2, [pc, #144]	; (80057b0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d009      	beq.n	8005738 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d004      	beq.n	8005738 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a21      	ldr	r2, [pc, #132]	; (80057b8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d12b      	bne.n	8005790 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	051b      	lsls	r3, r3, #20
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a10      	ldr	r2, [pc, #64]	; (80057b4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a0e      	ldr	r2, [pc, #56]	; (80057b8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d106      	bne.n	8005790 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40012c00 	.word	0x40012c00
 80057b4:	40013400 	.word	0x40013400
 80057b8:	40015000 	.word	0x40015000

080057bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	2204      	movs	r2, #4
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	43db      	mvns	r3, r3
 800586a:	401a      	ands	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1a      	ldr	r2, [r3, #32]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	fa01 f303 	lsl.w	r3, r1, r3
 8005880:	431a      	orrs	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e042      	b.n	800592a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fb fcc6 	bl	8001248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2224      	movs	r2, #36	; 0x24
 80058c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0201 	bic.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fc51 	bl	800617c <UART_SetConfig>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e022      	b.n	800592a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 ff41 	bl	8006774 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005900:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005910:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0201 	orr.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 ffc8 	bl	80068b8 <UART_CheckIdleState>
 8005928:	4603      	mov	r3, r0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b08a      	sub	sp, #40	; 0x28
 8005936:	af02      	add	r7, sp, #8
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	603b      	str	r3, [r7, #0]
 800593e:	4613      	mov	r3, r2
 8005940:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005948:	2b20      	cmp	r3, #32
 800594a:	f040 8083 	bne.w	8005a54 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <HAL_UART_Transmit+0x28>
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e07b      	b.n	8005a56 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_UART_Transmit+0x3a>
 8005968:	2302      	movs	r3, #2
 800596a:	e074      	b.n	8005a56 <HAL_UART_Transmit+0x124>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2221      	movs	r2, #33	; 0x21
 8005980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005984:	f7fb fe1a 	bl	80015bc <HAL_GetTick>
 8005988:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	88fa      	ldrh	r2, [r7, #6]
 800598e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	88fa      	ldrh	r2, [r7, #6]
 8005996:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a2:	d108      	bne.n	80059b6 <HAL_UART_Transmit+0x84>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d104      	bne.n	80059b6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	e003      	b.n	80059be <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80059c6:	e02c      	b.n	8005a22 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2200      	movs	r2, #0
 80059d0:	2180      	movs	r1, #128	; 0x80
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 ffbb 	bl	800694e <UART_WaitOnFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e039      	b.n	8005a56 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10b      	bne.n	8005a00 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	461a      	mov	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	3302      	adds	r3, #2
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	e007      	b.n	8005a10 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1cc      	bne.n	80059c8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2200      	movs	r2, #0
 8005a36:	2140      	movs	r1, #64	; 0x40
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 ff88 	bl	800694e <UART_WaitOnFlagUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e006      	b.n	8005a56 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	e000      	b.n	8005a56 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005a54:	2302      	movs	r3, #2
  }
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3720      	adds	r7, #32
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d142      	bne.n	8005afe <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <HAL_UART_Receive_IT+0x24>
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e03b      	b.n	8005b00 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_UART_Receive_IT+0x36>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e034      	b.n	8005b00 <HAL_UART_Receive_IT+0xa0>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a17      	ldr	r2, [pc, #92]	; (8005b08 <HAL_UART_Receive_IT+0xa8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d01f      	beq.n	8005aee <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d018      	beq.n	8005aee <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	623b      	str	r3, [r7, #32]
 8005adc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	69f9      	ldr	r1, [r7, #28]
 8005ae0:	6a3a      	ldr	r2, [r7, #32]
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e6      	bne.n	8005abc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	461a      	mov	r2, r3
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 fff3 	bl	8006ae0 <UART_Start_Receive_IT>
 8005afa:	4603      	mov	r3, r0
 8005afc:	e000      	b.n	8005b00 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005afe:	2302      	movs	r3, #2
  }
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3728      	adds	r7, #40	; 0x28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	40008000 	.word	0x40008000

08005b0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b0ba      	sub	sp, #232	; 0xe8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b36:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d11b      	bne.n	8005b80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d015      	beq.n	8005b80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d105      	bne.n	8005b6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d009      	beq.n	8005b80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 82d6 	beq.w	8006122 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
      }
      return;
 8005b7e:	e2d0      	b.n	8006122 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 811f 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b8e:	4b8b      	ldr	r3, [pc, #556]	; (8005dbc <HAL_UART_IRQHandler+0x2b0>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b9a:	4b89      	ldr	r3, [pc, #548]	; (8005dc0 <HAL_UART_IRQHandler+0x2b4>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 8112 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d011      	beq.n	8005bd4 <HAL_UART_IRQHandler+0xc8>
 8005bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00b      	beq.n	8005bd4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bca:	f043 0201 	orr.w	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d011      	beq.n	8005c04 <HAL_UART_IRQHandler+0xf8>
 8005be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00b      	beq.n	8005c04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bfa:	f043 0204 	orr.w	r2, r3, #4
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d011      	beq.n	8005c34 <HAL_UART_IRQHandler+0x128>
 8005c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00b      	beq.n	8005c34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2204      	movs	r2, #4
 8005c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c2a:	f043 0202 	orr.w	r2, r3, #2
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d017      	beq.n	8005c70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c44:	f003 0320 	and.w	r3, r3, #32
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d105      	bne.n	8005c58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005c50:	4b5a      	ldr	r3, [pc, #360]	; (8005dbc <HAL_UART_IRQHandler+0x2b0>)
 8005c52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2208      	movs	r2, #8
 8005c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c66:	f043 0208 	orr.w	r2, r3, #8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d012      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x196>
 8005c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00c      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c98:	f043 0220 	orr.w	r2, r3, #32
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 823c 	beq.w	8006126 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d013      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d105      	bne.n	8005cd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d007      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ce8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf6:	2b40      	cmp	r3, #64	; 0x40
 8005cf8:	d005      	beq.n	8005d06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d04f      	beq.n	8005da6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 f814 	bl	8006d34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d141      	bne.n	8005d9e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3308      	adds	r3, #8
 8005d42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1d9      	bne.n	8005d1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d013      	beq.n	8005d96 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d72:	4a14      	ldr	r2, [pc, #80]	; (8005dc4 <HAL_UART_IRQHandler+0x2b8>)
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fc fe6d 	bl	8002a5a <HAL_DMA_Abort_IT>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d017      	beq.n	8005db6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005d90:	4610      	mov	r0, r2
 8005d92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d94:	e00f      	b.n	8005db6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f9da 	bl	8006150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9c:	e00b      	b.n	8005db6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f9d6 	bl	8006150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da4:	e007      	b.n	8005db6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f9d2 	bl	8006150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005db4:	e1b7      	b.n	8006126 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db6:	bf00      	nop
    return;
 8005db8:	e1b5      	b.n	8006126 <HAL_UART_IRQHandler+0x61a>
 8005dba:	bf00      	nop
 8005dbc:	10000001 	.word	0x10000001
 8005dc0:	04000120 	.word	0x04000120
 8005dc4:	08006e01 	.word	0x08006e01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	f040 814a 	bne.w	8006066 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 8143 	beq.w	8006066 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 813c 	beq.w	8006066 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2210      	movs	r2, #16
 8005df4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e00:	2b40      	cmp	r3, #64	; 0x40
 8005e02:	f040 80b5 	bne.w	8005f70 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 8187 	beq.w	800612a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e26:	429a      	cmp	r2, r3
 8005e28:	f080 817f 	bcs.w	800612a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f040 8086 	bne.w	8005f54 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1da      	bne.n	8005e48 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005eb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ebe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e1      	bne.n	8005e92 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3308      	adds	r3, #8
 8005eee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ef2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ef4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ef8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e3      	bne.n	8005ece <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f24:	f023 0310 	bic.w	r3, r3, #16
 8005f28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f36:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e4      	bne.n	8005f14 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fc fd2a 	bl	80029a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f8fb 	bl	8006164 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f6e:	e0dc      	b.n	800612a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80ce 	beq.w	800612e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005f92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 80c9 	beq.w	800612e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e4      	bne.n	8005f9c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	623b      	str	r3, [r7, #32]
   return(result);
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ffa:	633a      	str	r2, [r7, #48]	; 0x30
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e1      	bne.n	8005fd2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0310 	bic.w	r3, r3, #16
 8006036:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006044:	61fb      	str	r3, [r7, #28]
 8006046:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	69b9      	ldr	r1, [r7, #24]
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	617b      	str	r3, [r7, #20]
   return(result);
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e4      	bne.n	8006022 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006058:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f880 	bl	8006164 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006064:	e063      	b.n	800612e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00e      	beq.n	8006090 <HAL_UART_IRQHandler+0x584>
 8006072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d008      	beq.n	8006090 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006086:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 fb57 	bl	800773c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800608e:	e051      	b.n	8006134 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006098:	2b00      	cmp	r3, #0
 800609a:	d014      	beq.n	80060c6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800609c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d105      	bne.n	80060b4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80060a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d03a      	beq.n	8006132 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	4798      	blx	r3
    }
    return;
 80060c4:	e035      	b.n	8006132 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d009      	beq.n	80060e6 <HAL_UART_IRQHandler+0x5da>
 80060d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fea4 	bl	8006e2c <UART_EndTransmit_IT>
    return;
 80060e4:	e026      	b.n	8006134 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80060e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d009      	beq.n	8006106 <HAL_UART_IRQHandler+0x5fa>
 80060f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 fb30 	bl	8007764 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006104:	e016      	b.n	8006134 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d010      	beq.n	8006134 <HAL_UART_IRQHandler+0x628>
 8006112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006116:	2b00      	cmp	r3, #0
 8006118:	da0c      	bge.n	8006134 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fb18 	bl	8007750 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006120:	e008      	b.n	8006134 <HAL_UART_IRQHandler+0x628>
      return;
 8006122:	bf00      	nop
 8006124:	e006      	b.n	8006134 <HAL_UART_IRQHandler+0x628>
    return;
 8006126:	bf00      	nop
 8006128:	e004      	b.n	8006134 <HAL_UART_IRQHandler+0x628>
      return;
 800612a:	bf00      	nop
 800612c:	e002      	b.n	8006134 <HAL_UART_IRQHandler+0x628>
      return;
 800612e:	bf00      	nop
 8006130:	e000      	b.n	8006134 <HAL_UART_IRQHandler+0x628>
    return;
 8006132:	bf00      	nop
  }
}
 8006134:	37e8      	adds	r7, #232	; 0xe8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop

0800613c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800617c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006180:	b08c      	sub	sp, #48	; 0x30
 8006182:	af00      	add	r7, sp, #0
 8006184:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	431a      	orrs	r2, r3
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	431a      	orrs	r2, r3
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4baa      	ldr	r3, [pc, #680]	; (8006454 <UART_SetConfig+0x2d8>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061b4:	430b      	orrs	r3, r1
 80061b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a9f      	ldr	r2, [pc, #636]	; (8006458 <UART_SetConfig+0x2dc>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d004      	beq.n	80061e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061e4:	4313      	orrs	r3, r2
 80061e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80061f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061fc:	430b      	orrs	r3, r1
 80061fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006206:	f023 010f 	bic.w	r1, r3, #15
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a90      	ldr	r2, [pc, #576]	; (800645c <UART_SetConfig+0x2e0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d125      	bne.n	800626c <UART_SetConfig+0xf0>
 8006220:	4b8f      	ldr	r3, [pc, #572]	; (8006460 <UART_SetConfig+0x2e4>)
 8006222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	2b03      	cmp	r3, #3
 800622c:	d81a      	bhi.n	8006264 <UART_SetConfig+0xe8>
 800622e:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <UART_SetConfig+0xb8>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	08006245 	.word	0x08006245
 8006238:	08006255 	.word	0x08006255
 800623c:	0800624d 	.word	0x0800624d
 8006240:	0800625d 	.word	0x0800625d
 8006244:	2301      	movs	r3, #1
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800624a:	e116      	b.n	800647a <UART_SetConfig+0x2fe>
 800624c:	2302      	movs	r3, #2
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006252:	e112      	b.n	800647a <UART_SetConfig+0x2fe>
 8006254:	2304      	movs	r3, #4
 8006256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800625a:	e10e      	b.n	800647a <UART_SetConfig+0x2fe>
 800625c:	2308      	movs	r3, #8
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006262:	e10a      	b.n	800647a <UART_SetConfig+0x2fe>
 8006264:	2310      	movs	r3, #16
 8006266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800626a:	e106      	b.n	800647a <UART_SetConfig+0x2fe>
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a7c      	ldr	r2, [pc, #496]	; (8006464 <UART_SetConfig+0x2e8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d138      	bne.n	80062e8 <UART_SetConfig+0x16c>
 8006276:	4b7a      	ldr	r3, [pc, #488]	; (8006460 <UART_SetConfig+0x2e4>)
 8006278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627c:	f003 030c 	and.w	r3, r3, #12
 8006280:	2b0c      	cmp	r3, #12
 8006282:	d82d      	bhi.n	80062e0 <UART_SetConfig+0x164>
 8006284:	a201      	add	r2, pc, #4	; (adr r2, 800628c <UART_SetConfig+0x110>)
 8006286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628a:	bf00      	nop
 800628c:	080062c1 	.word	0x080062c1
 8006290:	080062e1 	.word	0x080062e1
 8006294:	080062e1 	.word	0x080062e1
 8006298:	080062e1 	.word	0x080062e1
 800629c:	080062d1 	.word	0x080062d1
 80062a0:	080062e1 	.word	0x080062e1
 80062a4:	080062e1 	.word	0x080062e1
 80062a8:	080062e1 	.word	0x080062e1
 80062ac:	080062c9 	.word	0x080062c9
 80062b0:	080062e1 	.word	0x080062e1
 80062b4:	080062e1 	.word	0x080062e1
 80062b8:	080062e1 	.word	0x080062e1
 80062bc:	080062d9 	.word	0x080062d9
 80062c0:	2300      	movs	r3, #0
 80062c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062c6:	e0d8      	b.n	800647a <UART_SetConfig+0x2fe>
 80062c8:	2302      	movs	r3, #2
 80062ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ce:	e0d4      	b.n	800647a <UART_SetConfig+0x2fe>
 80062d0:	2304      	movs	r3, #4
 80062d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062d6:	e0d0      	b.n	800647a <UART_SetConfig+0x2fe>
 80062d8:	2308      	movs	r3, #8
 80062da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062de:	e0cc      	b.n	800647a <UART_SetConfig+0x2fe>
 80062e0:	2310      	movs	r3, #16
 80062e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e6:	e0c8      	b.n	800647a <UART_SetConfig+0x2fe>
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a5e      	ldr	r2, [pc, #376]	; (8006468 <UART_SetConfig+0x2ec>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d125      	bne.n	800633e <UART_SetConfig+0x1c2>
 80062f2:	4b5b      	ldr	r3, [pc, #364]	; (8006460 <UART_SetConfig+0x2e4>)
 80062f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062fc:	2b30      	cmp	r3, #48	; 0x30
 80062fe:	d016      	beq.n	800632e <UART_SetConfig+0x1b2>
 8006300:	2b30      	cmp	r3, #48	; 0x30
 8006302:	d818      	bhi.n	8006336 <UART_SetConfig+0x1ba>
 8006304:	2b20      	cmp	r3, #32
 8006306:	d00a      	beq.n	800631e <UART_SetConfig+0x1a2>
 8006308:	2b20      	cmp	r3, #32
 800630a:	d814      	bhi.n	8006336 <UART_SetConfig+0x1ba>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <UART_SetConfig+0x19a>
 8006310:	2b10      	cmp	r3, #16
 8006312:	d008      	beq.n	8006326 <UART_SetConfig+0x1aa>
 8006314:	e00f      	b.n	8006336 <UART_SetConfig+0x1ba>
 8006316:	2300      	movs	r3, #0
 8006318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800631c:	e0ad      	b.n	800647a <UART_SetConfig+0x2fe>
 800631e:	2302      	movs	r3, #2
 8006320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006324:	e0a9      	b.n	800647a <UART_SetConfig+0x2fe>
 8006326:	2304      	movs	r3, #4
 8006328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800632c:	e0a5      	b.n	800647a <UART_SetConfig+0x2fe>
 800632e:	2308      	movs	r3, #8
 8006330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006334:	e0a1      	b.n	800647a <UART_SetConfig+0x2fe>
 8006336:	2310      	movs	r3, #16
 8006338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800633c:	e09d      	b.n	800647a <UART_SetConfig+0x2fe>
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a4a      	ldr	r2, [pc, #296]	; (800646c <UART_SetConfig+0x2f0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d125      	bne.n	8006394 <UART_SetConfig+0x218>
 8006348:	4b45      	ldr	r3, [pc, #276]	; (8006460 <UART_SetConfig+0x2e4>)
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006352:	2bc0      	cmp	r3, #192	; 0xc0
 8006354:	d016      	beq.n	8006384 <UART_SetConfig+0x208>
 8006356:	2bc0      	cmp	r3, #192	; 0xc0
 8006358:	d818      	bhi.n	800638c <UART_SetConfig+0x210>
 800635a:	2b80      	cmp	r3, #128	; 0x80
 800635c:	d00a      	beq.n	8006374 <UART_SetConfig+0x1f8>
 800635e:	2b80      	cmp	r3, #128	; 0x80
 8006360:	d814      	bhi.n	800638c <UART_SetConfig+0x210>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <UART_SetConfig+0x1f0>
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	d008      	beq.n	800637c <UART_SetConfig+0x200>
 800636a:	e00f      	b.n	800638c <UART_SetConfig+0x210>
 800636c:	2300      	movs	r3, #0
 800636e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006372:	e082      	b.n	800647a <UART_SetConfig+0x2fe>
 8006374:	2302      	movs	r3, #2
 8006376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800637a:	e07e      	b.n	800647a <UART_SetConfig+0x2fe>
 800637c:	2304      	movs	r3, #4
 800637e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006382:	e07a      	b.n	800647a <UART_SetConfig+0x2fe>
 8006384:	2308      	movs	r3, #8
 8006386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638a:	e076      	b.n	800647a <UART_SetConfig+0x2fe>
 800638c:	2310      	movs	r3, #16
 800638e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006392:	e072      	b.n	800647a <UART_SetConfig+0x2fe>
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a35      	ldr	r2, [pc, #212]	; (8006470 <UART_SetConfig+0x2f4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d12a      	bne.n	80063f4 <UART_SetConfig+0x278>
 800639e:	4b30      	ldr	r3, [pc, #192]	; (8006460 <UART_SetConfig+0x2e4>)
 80063a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ac:	d01a      	beq.n	80063e4 <UART_SetConfig+0x268>
 80063ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b2:	d81b      	bhi.n	80063ec <UART_SetConfig+0x270>
 80063b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b8:	d00c      	beq.n	80063d4 <UART_SetConfig+0x258>
 80063ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063be:	d815      	bhi.n	80063ec <UART_SetConfig+0x270>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <UART_SetConfig+0x250>
 80063c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c8:	d008      	beq.n	80063dc <UART_SetConfig+0x260>
 80063ca:	e00f      	b.n	80063ec <UART_SetConfig+0x270>
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d2:	e052      	b.n	800647a <UART_SetConfig+0x2fe>
 80063d4:	2302      	movs	r3, #2
 80063d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063da:	e04e      	b.n	800647a <UART_SetConfig+0x2fe>
 80063dc:	2304      	movs	r3, #4
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e2:	e04a      	b.n	800647a <UART_SetConfig+0x2fe>
 80063e4:	2308      	movs	r3, #8
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ea:	e046      	b.n	800647a <UART_SetConfig+0x2fe>
 80063ec:	2310      	movs	r3, #16
 80063ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f2:	e042      	b.n	800647a <UART_SetConfig+0x2fe>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a17      	ldr	r2, [pc, #92]	; (8006458 <UART_SetConfig+0x2dc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d13a      	bne.n	8006474 <UART_SetConfig+0x2f8>
 80063fe:	4b18      	ldr	r3, [pc, #96]	; (8006460 <UART_SetConfig+0x2e4>)
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800640c:	d01a      	beq.n	8006444 <UART_SetConfig+0x2c8>
 800640e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006412:	d81b      	bhi.n	800644c <UART_SetConfig+0x2d0>
 8006414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006418:	d00c      	beq.n	8006434 <UART_SetConfig+0x2b8>
 800641a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800641e:	d815      	bhi.n	800644c <UART_SetConfig+0x2d0>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <UART_SetConfig+0x2b0>
 8006424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006428:	d008      	beq.n	800643c <UART_SetConfig+0x2c0>
 800642a:	e00f      	b.n	800644c <UART_SetConfig+0x2d0>
 800642c:	2300      	movs	r3, #0
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006432:	e022      	b.n	800647a <UART_SetConfig+0x2fe>
 8006434:	2302      	movs	r3, #2
 8006436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800643a:	e01e      	b.n	800647a <UART_SetConfig+0x2fe>
 800643c:	2304      	movs	r3, #4
 800643e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006442:	e01a      	b.n	800647a <UART_SetConfig+0x2fe>
 8006444:	2308      	movs	r3, #8
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800644a:	e016      	b.n	800647a <UART_SetConfig+0x2fe>
 800644c:	2310      	movs	r3, #16
 800644e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006452:	e012      	b.n	800647a <UART_SetConfig+0x2fe>
 8006454:	cfff69f3 	.word	0xcfff69f3
 8006458:	40008000 	.word	0x40008000
 800645c:	40013800 	.word	0x40013800
 8006460:	40021000 	.word	0x40021000
 8006464:	40004400 	.word	0x40004400
 8006468:	40004800 	.word	0x40004800
 800646c:	40004c00 	.word	0x40004c00
 8006470:	40005000 	.word	0x40005000
 8006474:	2310      	movs	r3, #16
 8006476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4aae      	ldr	r2, [pc, #696]	; (8006738 <UART_SetConfig+0x5bc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	f040 8097 	bne.w	80065b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006486:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800648a:	2b08      	cmp	r3, #8
 800648c:	d823      	bhi.n	80064d6 <UART_SetConfig+0x35a>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <UART_SetConfig+0x318>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064b9 	.word	0x080064b9
 8006498:	080064d7 	.word	0x080064d7
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064d7 	.word	0x080064d7
 80064a4:	080064c7 	.word	0x080064c7
 80064a8:	080064d7 	.word	0x080064d7
 80064ac:	080064d7 	.word	0x080064d7
 80064b0:	080064d7 	.word	0x080064d7
 80064b4:	080064cf 	.word	0x080064cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b8:	f7fd fa6a 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80064bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064be:	e010      	b.n	80064e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c0:	4b9e      	ldr	r3, [pc, #632]	; (800673c <UART_SetConfig+0x5c0>)
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064c4:	e00d      	b.n	80064e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064c6:	f7fd f9f5 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 80064ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064cc:	e009      	b.n	80064e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064d4:	e005      	b.n	80064e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 8130 	beq.w	800674a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	4a94      	ldr	r2, [pc, #592]	; (8006740 <UART_SetConfig+0x5c4>)
 80064f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064f4:	461a      	mov	r2, r3
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	4613      	mov	r3, r2
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	4413      	add	r3, r2
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	429a      	cmp	r2, r3
 800650c:	d305      	bcc.n	800651a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	429a      	cmp	r2, r3
 8006518:	d903      	bls.n	8006522 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006520:	e113      	b.n	800674a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	2200      	movs	r2, #0
 8006526:	60bb      	str	r3, [r7, #8]
 8006528:	60fa      	str	r2, [r7, #12]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	4a84      	ldr	r2, [pc, #528]	; (8006740 <UART_SetConfig+0x5c4>)
 8006530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006534:	b29b      	uxth	r3, r3
 8006536:	2200      	movs	r2, #0
 8006538:	603b      	str	r3, [r7, #0]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006540:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006544:	f7f9 fe68 	bl	8000218 <__aeabi_uldivmod>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4610      	mov	r0, r2
 800654e:	4619      	mov	r1, r3
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	020b      	lsls	r3, r1, #8
 800655a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800655e:	0202      	lsls	r2, r0, #8
 8006560:	6979      	ldr	r1, [r7, #20]
 8006562:	6849      	ldr	r1, [r1, #4]
 8006564:	0849      	lsrs	r1, r1, #1
 8006566:	2000      	movs	r0, #0
 8006568:	460c      	mov	r4, r1
 800656a:	4605      	mov	r5, r0
 800656c:	eb12 0804 	adds.w	r8, r2, r4
 8006570:	eb43 0905 	adc.w	r9, r3, r5
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	469a      	mov	sl, r3
 800657c:	4693      	mov	fp, r2
 800657e:	4652      	mov	r2, sl
 8006580:	465b      	mov	r3, fp
 8006582:	4640      	mov	r0, r8
 8006584:	4649      	mov	r1, r9
 8006586:	f7f9 fe47 	bl	8000218 <__aeabi_uldivmod>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4613      	mov	r3, r2
 8006590:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006598:	d308      	bcc.n	80065ac <UART_SetConfig+0x430>
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a0:	d204      	bcs.n	80065ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6a3a      	ldr	r2, [r7, #32]
 80065a8:	60da      	str	r2, [r3, #12]
 80065aa:	e0ce      	b.n	800674a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80065b2:	e0ca      	b.n	800674a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065bc:	d166      	bne.n	800668c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80065be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d827      	bhi.n	8006616 <UART_SetConfig+0x49a>
 80065c6:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <UART_SetConfig+0x450>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	080065f1 	.word	0x080065f1
 80065d0:	080065f9 	.word	0x080065f9
 80065d4:	08006601 	.word	0x08006601
 80065d8:	08006617 	.word	0x08006617
 80065dc:	08006607 	.word	0x08006607
 80065e0:	08006617 	.word	0x08006617
 80065e4:	08006617 	.word	0x08006617
 80065e8:	08006617 	.word	0x08006617
 80065ec:	0800660f 	.word	0x0800660f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065f0:	f7fd f9ce 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80065f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065f6:	e014      	b.n	8006622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f8:	f7fd f9e0 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 80065fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065fe:	e010      	b.n	8006622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006600:	4b4e      	ldr	r3, [pc, #312]	; (800673c <UART_SetConfig+0x5c0>)
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006604:	e00d      	b.n	8006622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006606:	f7fd f955 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800660a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800660c:	e009      	b.n	8006622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800660e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006614:	e005      	b.n	8006622 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 8090 	beq.w	800674a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	4a44      	ldr	r2, [pc, #272]	; (8006740 <UART_SetConfig+0x5c4>)
 8006630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006634:	461a      	mov	r2, r3
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	fbb3 f3f2 	udiv	r3, r3, r2
 800663c:	005a      	lsls	r2, r3, #1
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	085b      	lsrs	r3, r3, #1
 8006644:	441a      	add	r2, r3
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	fbb2 f3f3 	udiv	r3, r2, r3
 800664e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	2b0f      	cmp	r3, #15
 8006654:	d916      	bls.n	8006684 <UART_SetConfig+0x508>
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800665c:	d212      	bcs.n	8006684 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	b29b      	uxth	r3, r3
 8006662:	f023 030f 	bic.w	r3, r3, #15
 8006666:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	b29b      	uxth	r3, r3
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	b29a      	uxth	r2, r3
 8006674:	8bfb      	ldrh	r3, [r7, #30]
 8006676:	4313      	orrs	r3, r2
 8006678:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	8bfa      	ldrh	r2, [r7, #30]
 8006680:	60da      	str	r2, [r3, #12]
 8006682:	e062      	b.n	800674a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800668a:	e05e      	b.n	800674a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800668c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006690:	2b08      	cmp	r3, #8
 8006692:	d828      	bhi.n	80066e6 <UART_SetConfig+0x56a>
 8006694:	a201      	add	r2, pc, #4	; (adr r2, 800669c <UART_SetConfig+0x520>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066c1 	.word	0x080066c1
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	080066d1 	.word	0x080066d1
 80066a8:	080066e7 	.word	0x080066e7
 80066ac:	080066d7 	.word	0x080066d7
 80066b0:	080066e7 	.word	0x080066e7
 80066b4:	080066e7 	.word	0x080066e7
 80066b8:	080066e7 	.word	0x080066e7
 80066bc:	080066df 	.word	0x080066df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c0:	f7fd f966 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80066c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066c6:	e014      	b.n	80066f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c8:	f7fd f978 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 80066cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066ce:	e010      	b.n	80066f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d0:	4b1a      	ldr	r3, [pc, #104]	; (800673c <UART_SetConfig+0x5c0>)
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066d4:	e00d      	b.n	80066f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d6:	f7fd f8ed 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 80066da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066dc:	e009      	b.n	80066f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066e4:	e005      	b.n	80066f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80066f0:	bf00      	nop
    }

    if (pclk != 0U)
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d028      	beq.n	800674a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	4a10      	ldr	r2, [pc, #64]	; (8006740 <UART_SetConfig+0x5c4>)
 80066fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006702:	461a      	mov	r2, r3
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	fbb3 f2f2 	udiv	r2, r3, r2
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	085b      	lsrs	r3, r3, #1
 8006710:	441a      	add	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	fbb2 f3f3 	udiv	r3, r2, r3
 800671a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	2b0f      	cmp	r3, #15
 8006720:	d910      	bls.n	8006744 <UART_SetConfig+0x5c8>
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006728:	d20c      	bcs.n	8006744 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	b29a      	uxth	r2, r3
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60da      	str	r2, [r3, #12]
 8006734:	e009      	b.n	800674a <UART_SetConfig+0x5ce>
 8006736:	bf00      	nop
 8006738:	40008000 	.word	0x40008000
 800673c:	00f42400 	.word	0x00f42400
 8006740:	08007b74 	.word	0x08007b74
      }
      else
      {
        ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2201      	movs	r2, #1
 800674e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2201      	movs	r2, #1
 8006756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2200      	movs	r2, #0
 800675e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2200      	movs	r2, #0
 8006764:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006766:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800676a:	4618      	mov	r0, r3
 800676c:	3730      	adds	r7, #48	; 0x30
 800676e:	46bd      	mov	sp, r7
 8006770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00a      	beq.n	8006826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01a      	beq.n	800688a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006872:	d10a      	bne.n	800688a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	605a      	str	r2, [r3, #4]
  }
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af02      	add	r7, sp, #8
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068c8:	f7fa fe78 	bl	80015bc <HAL_GetTick>
 80068cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d10e      	bne.n	80068fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f82f 	bl	800694e <UART_WaitOnFlagUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e025      	b.n	8006946 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b04      	cmp	r3, #4
 8006906:	d10e      	bne.n	8006926 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006908:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f819 	bl	800694e <UART_WaitOnFlagUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e00f      	b.n	8006946 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2220      	movs	r2, #32
 800692a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b09c      	sub	sp, #112	; 0x70
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	603b      	str	r3, [r7, #0]
 800695a:	4613      	mov	r3, r2
 800695c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800695e:	e0a9      	b.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	f000 80a5 	beq.w	8006ab4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696a:	f7fa fe27 	bl	80015bc <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006976:	429a      	cmp	r2, r3
 8006978:	d302      	bcc.n	8006980 <UART_WaitOnFlagUntilTimeout+0x32>
 800697a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800697c:	2b00      	cmp	r3, #0
 800697e:	d140      	bne.n	8006a02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800698e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006990:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006994:	667b      	str	r3, [r7, #100]	; 0x64
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800699e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e6      	bne.n	8006980 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3308      	adds	r3, #8
 80069b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	f023 0301 	bic.w	r3, r3, #1
 80069c8:	663b      	str	r3, [r7, #96]	; 0x60
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3308      	adds	r3, #8
 80069d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80069d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1e5      	bne.n	80069b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2220      	movs	r2, #32
 80069f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e069      	b.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d051      	beq.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a1e:	d149      	bne.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
 8006a4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e6      	bne.n	8006a2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3308      	adds	r3, #8
 8006a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f023 0301 	bic.w	r3, r3, #1
 8006a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3308      	adds	r3, #8
 8006a7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a7c:	623a      	str	r2, [r7, #32]
 8006a7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	69f9      	ldr	r1, [r7, #28]
 8006a82:	6a3a      	ldr	r2, [r7, #32]
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e5      	bne.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e010      	b.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	69da      	ldr	r2, [r3, #28]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4013      	ands	r3, r2
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2301      	moveq	r3, #1
 8006ac6:	2300      	movne	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	f43f af46 	beq.w	8006960 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3770      	adds	r7, #112	; 0x70
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b0a3      	sub	sp, #140	; 0x8c
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	88fa      	ldrh	r2, [r7, #6]
 8006af8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	88fa      	ldrh	r2, [r7, #6]
 8006b00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b12:	d10e      	bne.n	8006b32 <UART_Start_Receive_IT+0x52>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <UART_Start_Receive_IT+0x48>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b26:	e02d      	b.n	8006b84 <UART_Start_Receive_IT+0xa4>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	22ff      	movs	r2, #255	; 0xff
 8006b2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b30:	e028      	b.n	8006b84 <UART_Start_Receive_IT+0xa4>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10d      	bne.n	8006b56 <UART_Start_Receive_IT+0x76>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d104      	bne.n	8006b4c <UART_Start_Receive_IT+0x6c>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	22ff      	movs	r2, #255	; 0xff
 8006b46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b4a:	e01b      	b.n	8006b84 <UART_Start_Receive_IT+0xa4>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	227f      	movs	r2, #127	; 0x7f
 8006b50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b54:	e016      	b.n	8006b84 <UART_Start_Receive_IT+0xa4>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b5e:	d10d      	bne.n	8006b7c <UART_Start_Receive_IT+0x9c>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d104      	bne.n	8006b72 <UART_Start_Receive_IT+0x92>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	227f      	movs	r2, #127	; 0x7f
 8006b6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b70:	e008      	b.n	8006b84 <UART_Start_Receive_IT+0xa4>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	223f      	movs	r2, #63	; 0x3f
 8006b76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b7a:	e003      	b.n	8006b84 <UART_Start_Receive_IT+0xa4>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2222      	movs	r2, #34	; 0x22
 8006b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3308      	adds	r3, #8
 8006b9a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006ba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ba6:	f043 0301 	orr.w	r3, r3, #1
 8006baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006bb8:	673a      	str	r2, [r7, #112]	; 0x70
 8006bba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006bbe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e3      	bne.n	8006b94 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bd4:	d153      	bne.n	8006c7e <UART_Start_Receive_IT+0x19e>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006bdc:	88fa      	ldrh	r2, [r7, #6]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d34d      	bcc.n	8006c7e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bea:	d107      	bne.n	8006bfc <UART_Start_Receive_IT+0x11c>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d103      	bne.n	8006bfc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4a4b      	ldr	r2, [pc, #300]	; (8006d24 <UART_Start_Receive_IT+0x244>)
 8006bf8:	671a      	str	r2, [r3, #112]	; 0x70
 8006bfa:	e002      	b.n	8006c02 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4a4a      	ldr	r2, [pc, #296]	; (8006d28 <UART_Start_Receive_IT+0x248>)
 8006c00:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01a      	beq.n	8006c48 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c36:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e4      	bne.n	8006c12 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3308      	adds	r3, #8
 8006c66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006c68:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e5      	bne.n	8006c48 <UART_Start_Receive_IT+0x168>
 8006c7c:	e04a      	b.n	8006d14 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c86:	d107      	bne.n	8006c98 <UART_Start_Receive_IT+0x1b8>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d103      	bne.n	8006c98 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a26      	ldr	r2, [pc, #152]	; (8006d2c <UART_Start_Receive_IT+0x24c>)
 8006c94:	671a      	str	r2, [r3, #112]	; 0x70
 8006c96:	e002      	b.n	8006c9e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4a25      	ldr	r2, [pc, #148]	; (8006d30 <UART_Start_Receive_IT+0x250>)
 8006c9c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d019      	beq.n	8006ce2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006cc2:	677b      	str	r3, [r7, #116]	; 0x74
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e6      	bne.n	8006cae <UART_Start_Receive_IT+0x1ce>
 8006ce0:	e018      	b.n	8006d14 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f043 0320 	orr.w	r3, r3, #32
 8006cf6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d00:	623b      	str	r3, [r7, #32]
 8006d02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	69f9      	ldr	r1, [r7, #28]
 8006d06:	6a3a      	ldr	r2, [r7, #32]
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e6      	bne.n	8006ce2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	378c      	adds	r7, #140	; 0x8c
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	0800743d 	.word	0x0800743d
 8006d28:	08007145 	.word	0x08007145
 8006d2c:	08006fe3 	.word	0x08006fe3
 8006d30:	08006e83 	.word	0x08006e83

08006d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b095      	sub	sp, #84	; 0x54
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1e6      	bne.n	8006d3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3308      	adds	r3, #8
 8006d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d84:	f023 0301 	bic.w	r3, r3, #1
 8006d88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3308      	adds	r3, #8
 8006d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e3      	bne.n	8006d6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d118      	bne.n	8006de0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f023 0310 	bic.w	r3, r3, #16
 8006dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6979      	ldr	r1, [r7, #20]
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e6      	bne.n	8006dae <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006df4:	bf00      	nop
 8006df6:	3754      	adds	r7, #84	; 0x54
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7ff f996 	bl	8006150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e24:	bf00      	nop
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e48:	61fb      	str	r3, [r7, #28]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	61bb      	str	r3, [r7, #24]
 8006e54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	6979      	ldr	r1, [r7, #20]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e6      	bne.n	8006e34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff f961 	bl	800613c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e7a:	bf00      	nop
 8006e7c:	3720      	adds	r7, #32
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b096      	sub	sp, #88	; 0x58
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e90:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9a:	2b22      	cmp	r3, #34	; 0x22
 8006e9c:	f040 8095 	bne.w	8006fca <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006eaa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006eae:	b2d9      	uxtb	r1, r3
 8006eb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eba:	400a      	ands	r2, r1
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d178      	bne.n	8006fda <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006efc:	653b      	str	r3, [r7, #80]	; 0x50
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f06:	647b      	str	r3, [r7, #68]	; 0x44
 8006f08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e6      	bne.n	8006ee8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3308      	adds	r3, #8
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	623b      	str	r3, [r7, #32]
   return(result);
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	f023 0301 	bic.w	r3, r3, #1
 8006f30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3308      	adds	r3, #8
 8006f38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f3a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e5      	bne.n	8006f1a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d12e      	bne.n	8006fc2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 0310 	bic.w	r3, r3, #16
 8006f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f88:	61fb      	str	r3, [r7, #28]
 8006f8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	69b9      	ldr	r1, [r7, #24]
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	617b      	str	r3, [r7, #20]
   return(result);
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e6      	bne.n	8006f6a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	2b10      	cmp	r3, #16
 8006fa8:	d103      	bne.n	8006fb2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2210      	movs	r2, #16
 8006fb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff f8d2 	bl	8006164 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fc0:	e00b      	b.n	8006fda <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7f9 fe4a 	bl	8000c5c <HAL_UART_RxCpltCallback>
}
 8006fc8:	e007      	b.n	8006fda <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	699a      	ldr	r2, [r3, #24]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f042 0208 	orr.w	r2, r2, #8
 8006fd8:	619a      	str	r2, [r3, #24]
}
 8006fda:	bf00      	nop
 8006fdc:	3758      	adds	r7, #88	; 0x58
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b096      	sub	sp, #88	; 0x58
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ff0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffa:	2b22      	cmp	r3, #34	; 0x22
 8006ffc:	f040 8095 	bne.w	800712a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007010:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007014:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007018:	4013      	ands	r3, r2
 800701a:	b29a      	uxth	r2, r3
 800701c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800701e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007024:	1c9a      	adds	r2, r3, #2
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d178      	bne.n	800713a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800705c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007066:	643b      	str	r3, [r7, #64]	; 0x40
 8007068:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800706c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e6      	bne.n	8007048 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3308      	adds	r3, #8
 8007080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	61fb      	str	r3, [r7, #28]
   return(result);
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	f023 0301 	bic.w	r3, r3, #1
 8007090:	64bb      	str	r3, [r7, #72]	; 0x48
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3308      	adds	r3, #8
 8007098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800709a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800709c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e5      	bne.n	800707a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d12e      	bne.n	8007122 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f023 0310 	bic.w	r3, r3, #16
 80070de:	647b      	str	r3, [r7, #68]	; 0x44
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6979      	ldr	r1, [r7, #20]
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	613b      	str	r3, [r7, #16]
   return(result);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e6      	bne.n	80070ca <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	f003 0310 	and.w	r3, r3, #16
 8007106:	2b10      	cmp	r3, #16
 8007108:	d103      	bne.n	8007112 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2210      	movs	r2, #16
 8007110:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff f822 	bl	8006164 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007120:	e00b      	b.n	800713a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7f9 fd9a 	bl	8000c5c <HAL_UART_RxCpltCallback>
}
 8007128:	e007      	b.n	800713a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	699a      	ldr	r2, [r3, #24]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0208 	orr.w	r2, r2, #8
 8007138:	619a      	str	r2, [r3, #24]
}
 800713a:	bf00      	nop
 800713c:	3758      	adds	r7, #88	; 0x58
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b0a6      	sub	sp, #152	; 0x98
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007152:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800717a:	2b22      	cmp	r3, #34	; 0x22
 800717c:	f040 814f 	bne.w	800741e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007186:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800718a:	e0f6      	b.n	800737a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007196:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800719a:	b2d9      	uxtb	r1, r3
 800719c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a6:	400a      	ands	r2, r1
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80071d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d053      	beq.n	8007286 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d011      	beq.n	800720e <UART_RxISR_8BIT_FIFOEN+0xca>
 80071ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00b      	beq.n	800720e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2201      	movs	r2, #1
 80071fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007204:	f043 0201 	orr.w	r2, r3, #1
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800720e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d011      	beq.n	800723e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800721a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00b      	beq.n	800723e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2202      	movs	r2, #2
 800722c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007234:	f043 0204 	orr.w	r2, r3, #4
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800723e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d011      	beq.n	800726e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800724a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00b      	beq.n	800726e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2204      	movs	r2, #4
 800725c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007264:	f043 0202 	orr.w	r2, r3, #2
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007274:	2b00      	cmp	r3, #0
 8007276:	d006      	beq.n	8007286 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7fe ff69 	bl	8006150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d173      	bne.n	800737a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80072a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80072b6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80072ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072bc:	e841 2300 	strex	r3, r2, [r1]
 80072c0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80072c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e4      	bne.n	8007292 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3308      	adds	r3, #8
 80072ce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80072d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072de:	f023 0301 	bic.w	r3, r3, #1
 80072e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3308      	adds	r3, #8
 80072ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80072ec:	657a      	str	r2, [r7, #84]	; 0x54
 80072ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80072f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e3      	bne.n	80072c8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2220      	movs	r2, #32
 8007304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007312:	2b01      	cmp	r3, #1
 8007314:	d12e      	bne.n	8007374 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	f023 0310 	bic.w	r3, r3, #16
 8007330:	67bb      	str	r3, [r7, #120]	; 0x78
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800733a:	643b      	str	r3, [r7, #64]	; 0x40
 800733c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e6      	bne.n	800731c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	f003 0310 	and.w	r3, r3, #16
 8007358:	2b10      	cmp	r3, #16
 800735a:	d103      	bne.n	8007364 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2210      	movs	r2, #16
 8007362:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7fe fef9 	bl	8006164 <HAL_UARTEx_RxEventCallback>
 8007372:	e002      	b.n	800737a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7f9 fc71 	bl	8000c5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800737a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800737e:	2b00      	cmp	r3, #0
 8007380:	d006      	beq.n	8007390 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007382:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	f47f aefe 	bne.w	800718c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007396:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800739a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d045      	beq.n	800742e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d23e      	bcs.n	800742e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3308      	adds	r3, #8
 80073b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	61fb      	str	r3, [r7, #28]
   return(result);
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073c6:	673b      	str	r3, [r7, #112]	; 0x70
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3308      	adds	r3, #8
 80073ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80073d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e5      	bne.n	80073b0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a14      	ldr	r2, [pc, #80]	; (8007438 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80073e8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f043 0320 	orr.w	r3, r3, #32
 80073fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007408:	61bb      	str	r3, [r7, #24]
 800740a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	6979      	ldr	r1, [r7, #20]
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	613b      	str	r3, [r7, #16]
   return(result);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e6      	bne.n	80073ea <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800741c:	e007      	b.n	800742e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	699a      	ldr	r2, [r3, #24]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0208 	orr.w	r2, r2, #8
 800742c:	619a      	str	r2, [r3, #24]
}
 800742e:	bf00      	nop
 8007430:	3798      	adds	r7, #152	; 0x98
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	08006e83 	.word	0x08006e83

0800743c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b0a8      	sub	sp, #160	; 0xa0
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800744a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007472:	2b22      	cmp	r3, #34	; 0x22
 8007474:	f040 8153 	bne.w	800771e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800747e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007482:	e0fa      	b.n	800767a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007492:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007496:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800749a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800749e:	4013      	ands	r3, r2
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ac:	1c9a      	adds	r2, r3, #2
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	b29a      	uxth	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80074ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074d2:	f003 0307 	and.w	r3, r3, #7
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d053      	beq.n	8007582 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d011      	beq.n	800750a <UART_RxISR_16BIT_FIFOEN+0xce>
 80074e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00b      	beq.n	800750a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2201      	movs	r2, #1
 80074f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007500:	f043 0201 	orr.w	r2, r3, #1
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800750a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d011      	beq.n	800753a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007516:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00b      	beq.n	800753a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2202      	movs	r2, #2
 8007528:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007530:	f043 0204 	orr.w	r2, r3, #4
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800753a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800753e:	f003 0304 	and.w	r3, r3, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	d011      	beq.n	800756a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007546:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00b      	beq.n	800756a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2204      	movs	r2, #4
 8007558:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007560:	f043 0202 	orr.w	r2, r3, #2
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007570:	2b00      	cmp	r3, #0
 8007572:	d006      	beq.n	8007582 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7fe fdeb 	bl	8006150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d175      	bne.n	800767a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800759c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800759e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075b2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e4      	bne.n	800758e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3308      	adds	r3, #8
 80075ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075da:	f023 0301 	bic.w	r3, r3, #1
 80075de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3308      	adds	r3, #8
 80075e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80075ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e1      	bne.n	80075c4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2220      	movs	r2, #32
 8007604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007612:	2b01      	cmp	r3, #1
 8007614:	d12e      	bne.n	8007674 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800762a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762c:	f023 0310 	bic.w	r3, r3, #16
 8007630:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800763a:	647b      	str	r3, [r7, #68]	; 0x44
 800763c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007640:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e6      	bne.n	800761c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	f003 0310 	and.w	r3, r3, #16
 8007658:	2b10      	cmp	r3, #16
 800765a:	d103      	bne.n	8007664 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2210      	movs	r2, #16
 8007662:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7fe fd79 	bl	8006164 <HAL_UARTEx_RxEventCallback>
 8007672:	e002      	b.n	800767a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7f9 faf1 	bl	8000c5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800767a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800767e:	2b00      	cmp	r3, #0
 8007680:	d006      	beq.n	8007690 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007682:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	f47f aefa 	bne.w	8007484 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007696:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800769a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d045      	beq.n	800772e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076a8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d23e      	bcs.n	800772e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3308      	adds	r3, #8
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	623b      	str	r3, [r7, #32]
   return(result);
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076c6:	677b      	str	r3, [r7, #116]	; 0x74
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3308      	adds	r3, #8
 80076ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80076d0:	633a      	str	r2, [r7, #48]	; 0x30
 80076d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e5      	bne.n	80076b0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a14      	ldr	r2, [pc, #80]	; (8007738 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80076e8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f043 0320 	orr.w	r3, r3, #32
 80076fe:	673b      	str	r3, [r7, #112]	; 0x70
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007708:	61fb      	str	r3, [r7, #28]
 800770a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	69b9      	ldr	r1, [r7, #24]
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	617b      	str	r3, [r7, #20]
   return(result);
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e6      	bne.n	80076ea <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800771c:	e007      	b.n	800772e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f042 0208 	orr.w	r2, r2, #8
 800772c:	619a      	str	r2, [r3, #24]
}
 800772e:	bf00      	nop
 8007730:	37a0      	adds	r7, #160	; 0xa0
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	08006fe3 	.word	0x08006fe3

0800773c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_UARTEx_DisableFifoMode+0x16>
 800778a:	2302      	movs	r3, #2
 800778c:	e027      	b.n	80077de <HAL_UARTEx_DisableFifoMode+0x66>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2224      	movs	r2, #36	; 0x24
 800779a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f022 0201 	bic.w	r2, r2, #1
 80077b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80077bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d101      	bne.n	8007802 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077fe:	2302      	movs	r3, #2
 8007800:	e02d      	b.n	800785e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2224      	movs	r2, #36	; 0x24
 800780e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0201 	bic.w	r2, r2, #1
 8007828:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f850 	bl	80078e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2220      	movs	r2, #32
 8007850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800787a:	2302      	movs	r3, #2
 800787c:	e02d      	b.n	80078da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2224      	movs	r2, #36	; 0x24
 800788a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0201 	bic.w	r2, r2, #1
 80078a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f812 	bl	80078e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d108      	bne.n	8007906 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007904:	e031      	b.n	800796a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007906:	2308      	movs	r3, #8
 8007908:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800790a:	2308      	movs	r3, #8
 800790c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	0e5b      	lsrs	r3, r3, #25
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	0f5b      	lsrs	r3, r3, #29
 8007926:	b2db      	uxtb	r3, r3
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	7b3a      	ldrb	r2, [r7, #12]
 8007932:	4911      	ldr	r1, [pc, #68]	; (8007978 <UARTEx_SetNbDataToProcess+0x94>)
 8007934:	5c8a      	ldrb	r2, [r1, r2]
 8007936:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800793a:	7b3a      	ldrb	r2, [r7, #12]
 800793c:	490f      	ldr	r1, [pc, #60]	; (800797c <UARTEx_SetNbDataToProcess+0x98>)
 800793e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007940:	fb93 f3f2 	sdiv	r3, r3, r2
 8007944:	b29a      	uxth	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	7b7a      	ldrb	r2, [r7, #13]
 8007950:	4909      	ldr	r1, [pc, #36]	; (8007978 <UARTEx_SetNbDataToProcess+0x94>)
 8007952:	5c8a      	ldrb	r2, [r1, r2]
 8007954:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007958:	7b7a      	ldrb	r2, [r7, #13]
 800795a:	4908      	ldr	r1, [pc, #32]	; (800797c <UARTEx_SetNbDataToProcess+0x98>)
 800795c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800795e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007962:	b29a      	uxth	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800796a:	bf00      	nop
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	08007b8c 	.word	0x08007b8c
 800797c:	08007b94 	.word	0x08007b94

08007980 <memset>:
 8007980:	4402      	add	r2, r0
 8007982:	4603      	mov	r3, r0
 8007984:	4293      	cmp	r3, r2
 8007986:	d100      	bne.n	800798a <memset+0xa>
 8007988:	4770      	bx	lr
 800798a:	f803 1b01 	strb.w	r1, [r3], #1
 800798e:	e7f9      	b.n	8007984 <memset+0x4>

08007990 <strncmp>:
 8007990:	b510      	push	{r4, lr}
 8007992:	b16a      	cbz	r2, 80079b0 <strncmp+0x20>
 8007994:	3901      	subs	r1, #1
 8007996:	1884      	adds	r4, r0, r2
 8007998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800799c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d103      	bne.n	80079ac <strncmp+0x1c>
 80079a4:	42a0      	cmp	r0, r4
 80079a6:	d001      	beq.n	80079ac <strncmp+0x1c>
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	d1f5      	bne.n	8007998 <strncmp+0x8>
 80079ac:	1ad0      	subs	r0, r2, r3
 80079ae:	bd10      	pop	{r4, pc}
 80079b0:	4610      	mov	r0, r2
 80079b2:	e7fc      	b.n	80079ae <strncmp+0x1e>

080079b4 <__libc_init_array>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	4d0d      	ldr	r5, [pc, #52]	; (80079ec <__libc_init_array+0x38>)
 80079b8:	4c0d      	ldr	r4, [pc, #52]	; (80079f0 <__libc_init_array+0x3c>)
 80079ba:	1b64      	subs	r4, r4, r5
 80079bc:	10a4      	asrs	r4, r4, #2
 80079be:	2600      	movs	r6, #0
 80079c0:	42a6      	cmp	r6, r4
 80079c2:	d109      	bne.n	80079d8 <__libc_init_array+0x24>
 80079c4:	4d0b      	ldr	r5, [pc, #44]	; (80079f4 <__libc_init_array+0x40>)
 80079c6:	4c0c      	ldr	r4, [pc, #48]	; (80079f8 <__libc_init_array+0x44>)
 80079c8:	f000 f818 	bl	80079fc <_init>
 80079cc:	1b64      	subs	r4, r4, r5
 80079ce:	10a4      	asrs	r4, r4, #2
 80079d0:	2600      	movs	r6, #0
 80079d2:	42a6      	cmp	r6, r4
 80079d4:	d105      	bne.n	80079e2 <__libc_init_array+0x2e>
 80079d6:	bd70      	pop	{r4, r5, r6, pc}
 80079d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079dc:	4798      	blx	r3
 80079de:	3601      	adds	r6, #1
 80079e0:	e7ee      	b.n	80079c0 <__libc_init_array+0xc>
 80079e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e6:	4798      	blx	r3
 80079e8:	3601      	adds	r6, #1
 80079ea:	e7f2      	b.n	80079d2 <__libc_init_array+0x1e>
 80079ec:	08007ba4 	.word	0x08007ba4
 80079f0:	08007ba4 	.word	0x08007ba4
 80079f4:	08007ba4 	.word	0x08007ba4
 80079f8:	08007ba8 	.word	0x08007ba8

080079fc <_init>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	bf00      	nop
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr

08007a08 <_fini>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	bf00      	nop
 8007a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0e:	bc08      	pop	{r3}
 8007a10:	469e      	mov	lr, r3
 8007a12:	4770      	bx	lr
