
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095dc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab8  08009ab8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009ab8  08009ab8  00019ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ac0  08009ac0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ac0  08009ac0  00019ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ac4  08009ac4  00019ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000060  08009b28  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08009b28  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c860  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a45  00000000  00000000  0003c933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  00040378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e8  00000000  00000000  00041950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029ea3  00000000  00000000  00042a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c694  00000000  00000000  0006c8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112b34  00000000  00000000  00088f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060cc  00000000  00000000  0019baa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  001a1b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080097a4 	.word	0x080097a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080097a4 	.word	0x080097a4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	; 0x30
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2220      	movs	r2, #32
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f008 fc47 	bl	8008e78 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ea:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <MX_ADC1_Init+0xec>)
 80005ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f2:	4b31      	ldr	r3, [pc, #196]	; (80006b8 <MX_ADC1_Init+0xec>)
 80005f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fa:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <MX_ADC1_Init+0xec>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000600:	4b2d      	ldr	r3, [pc, #180]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000606:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <MX_ADC1_Init+0xec>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000614:	2204      	movs	r2, #4
 8000616:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <MX_ADC1_Init+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061e:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000626:	2201      	movs	r2, #1
 8000628:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <MX_ADC1_Init+0xec>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000634:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8000638:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_ADC1_Init+0xec>)
 800063c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000640:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000644:	2201      	movs	r2, #1
 8000646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_ADC1_Init+0xec>)
 800064c:	2200      	movs	r2, #0
 800064e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000658:	4817      	ldr	r0, [pc, #92]	; (80006b8 <MX_ADC1_Init+0xec>)
 800065a:	f001 fd37 	bl	80020cc <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000664:	f000 fbda 	bl	8000e1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	4811      	ldr	r0, [pc, #68]	; (80006b8 <MX_ADC1_Init+0xec>)
 8000674:	f002 fe1e 	bl	80032b4 <HAL_ADCEx_MultiModeConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800067e:	f000 fbcd 	bl	8000e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_ADC1_Init+0xf0>)
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2306      	movs	r3, #6
 8000688:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800068a:	2304      	movs	r3, #4
 800068c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068e:	237f      	movs	r3, #127	; 0x7f
 8000690:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000692:	2304      	movs	r3, #4
 8000694:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <MX_ADC1_Init+0xec>)
 80006a0:	f001 ffbe 	bl	8002620 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006aa:	f000 fbb7 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	3730      	adds	r7, #48	; 0x30
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000007c 	.word	0x2000007c
 80006bc:	21800100 	.word	0x21800100

080006c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2220      	movs	r2, #32
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f008 fbd3 	bl	8008e78 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006d4:	4a2b      	ldr	r2, [pc, #172]	; (8000784 <MX_ADC2_Init+0xc4>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006ec:	4b24      	ldr	r3, [pc, #144]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_ADC2_Init+0xc0>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000700:	2200      	movs	r2, #0
 8000702:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000706:	2200      	movs	r2, #0
 8000708:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_ADC2_Init+0xc0>)
 800070c:	2201      	movs	r2, #1
 800070e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800073a:	4811      	ldr	r0, [pc, #68]	; (8000780 <MX_ADC2_Init+0xc0>)
 800073c:	f001 fcc6 	bl	80020cc <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000746:	f000 fb69 	bl	8000e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_ADC2_Init+0xc8>)
 800074c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074e:	2306      	movs	r3, #6
 8000750:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000756:	237f      	movs	r3, #127	; 0x7f
 8000758:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075a:	2304      	movs	r3, #4
 800075c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <MX_ADC2_Init+0xc0>)
 8000768:	f001 ff5a 	bl	8002620 <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000772:	f000 fb53 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000e8 	.word	0x200000e8
 8000784:	50000100 	.word	0x50000100
 8000788:	19200040 	.word	0x19200040

0800078c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0a4      	sub	sp, #144	; 0x90
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a8:	2254      	movs	r2, #84	; 0x54
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f008 fb63 	bl	8008e78 <memset>
  if(adcHandle->Instance==ADC1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007ba:	f040 80a0 	bne.w	80008fe <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007c4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ce:	4618      	mov	r0, r3
 80007d0:	f004 fa62 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80007da:	f000 fb1f 	bl	8000e1c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007de:	4b79      	ldr	r3, [pc, #484]	; (80009c4 <HAL_ADC_MspInit+0x238>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a77      	ldr	r2, [pc, #476]	; (80009c4 <HAL_ADC_MspInit+0x238>)
 80007e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007e8:	4b76      	ldr	r3, [pc, #472]	; (80009c4 <HAL_ADC_MspInit+0x238>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d10b      	bne.n	8000808 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007f0:	4b75      	ldr	r3, [pc, #468]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 80007f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f4:	4a74      	ldr	r2, [pc, #464]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 80007f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fc:	4b72      	ldr	r3, [pc, #456]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 80007fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000808:	4b6f      	ldr	r3, [pc, #444]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080c:	4a6e      	ldr	r2, [pc, #440]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000814:	4b6c      	ldr	r3, [pc, #432]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	623b      	str	r3, [r7, #32]
 800081e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b69      	ldr	r3, [pc, #420]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000824:	4a68      	ldr	r2, [pc, #416]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082c:	4b66      	ldr	r3, [pc, #408]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000838:	4b63      	ldr	r3, [pc, #396]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800083a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083c:	4a62      	ldr	r2, [pc, #392]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800083e:	f043 0302 	orr.w	r3, r3, #2
 8000842:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000844:	4b60      	ldr	r3, [pc, #384]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	f003 0302 	and.w	r3, r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000850:	2304      	movs	r3, #4
 8000852:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000854:	2303      	movs	r3, #3
 8000856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000864:	4619      	mov	r1, r3
 8000866:	4859      	ldr	r0, [pc, #356]	; (80009cc <HAL_ADC_MspInit+0x240>)
 8000868:	f003 fa3e 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800086c:	2302      	movs	r3, #2
 800086e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000870:	2303      	movs	r3, #3
 8000872:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000880:	4619      	mov	r1, r3
 8000882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000886:	f003 fa2f 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_Imes_Pin|V_Imes_Pin;
 800088a:	2303      	movs	r3, #3
 800088c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088e:	2303      	movs	r3, #3
 8000890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800089e:	4619      	mov	r1, r3
 80008a0:	484b      	ldr	r0, [pc, #300]	; (80009d0 <HAL_ADC_MspInit+0x244>)
 80008a2:	f003 fa21 	bl	8003ce8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008a6:	4b4b      	ldr	r3, [pc, #300]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008a8:	4a4b      	ldr	r2, [pc, #300]	; (80009d8 <HAL_ADC_MspInit+0x24c>)
 80008aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008ac:	4b49      	ldr	r3, [pc, #292]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008ae:	2205      	movs	r2, #5
 80008b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b2:	4b48      	ldr	r3, [pc, #288]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b8:	4b46      	ldr	r3, [pc, #280]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008be:	4b45      	ldr	r3, [pc, #276]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008c4:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008cc:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008d4:	4b3f      	ldr	r3, [pc, #252]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008d6:	2220      	movs	r2, #32
 80008d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008da:	4b3e      	ldr	r3, [pc, #248]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008e0:	483c      	ldr	r0, [pc, #240]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008e2:	f002 fecf 	bl	8003684 <HAL_DMA_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 80008ec:	f000 fa96 	bl	8000e1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a38      	ldr	r2, [pc, #224]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008f4:	655a      	str	r2, [r3, #84]	; 0x54
 80008f6:	4a37      	ldr	r2, [pc, #220]	; (80009d4 <HAL_ADC_MspInit+0x248>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008fc:	e05e      	b.n	80009bc <HAL_ADC_MspInit+0x230>
  else if(adcHandle->Instance==ADC2)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a36      	ldr	r2, [pc, #216]	; (80009dc <HAL_ADC_MspInit+0x250>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d159      	bne.n	80009bc <HAL_ADC_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800090e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000912:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000918:	4618      	mov	r0, r3
 800091a:	f004 f9bd 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 8000924:	f000 fa7a 	bl	8000e1c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000928:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <HAL_ADC_MspInit+0x238>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <HAL_ADC_MspInit+0x238>)
 8000930:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000932:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <HAL_ADC_MspInit+0x238>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d10b      	bne.n	8000952 <HAL_ADC_MspInit+0x1c6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800093a:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a22      	ldr	r2, [pc, #136]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000940:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_ADC_MspInit+0x23c>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000982:	230b      	movs	r3, #11
 8000984:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000986:	2303      	movs	r3, #3
 8000988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000992:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <HAL_ADC_MspInit+0x240>)
 800099a:	f003 f9a5 	bl	8003ce8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800099e:	2301      	movs	r3, #1
 80009a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a2:	2303      	movs	r3, #3
 80009a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009b2:	4619      	mov	r1, r3
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f003 f996 	bl	8003ce8 <HAL_GPIO_Init>
}
 80009bc:	bf00      	nop
 80009be:	3790      	adds	r7, #144	; 0x90
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200001b4 	.word	0x200001b4
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000800 	.word	0x48000800
 80009d0:	48000400 	.word	0x48000400
 80009d4:	20000154 	.word	0x20000154
 80009d8:	40020008 	.word	0x40020008
 80009dc:	50000100 	.word	0x50000100

080009e0 <Adc_init>:
uint32_t courant_mes; // endroit ou la valeur du courant est stockée
uint32_t val_vitesse_t0; // permet de mesure la vitesse
uint32_t val_vitesse_t1;
int32_t val_vitesse;

void Adc_init(void){ // initialisation de l'ADC et du DMA
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	if (HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)){
 80009e4:	217f      	movs	r1, #127	; 0x7f
 80009e6:	4810      	ldr	r0, [pc, #64]	; (8000a28 <Adc_init+0x48>)
 80009e8:	f002 fc02 	bl	80031f0 <HAL_ADCEx_Calibration_Start>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d006      	beq.n	8000a00 <Adc_init+0x20>
		HAL_UART_Transmit(&huart2, error_calib, 21, HAL_MAX_DELAY);
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	2215      	movs	r2, #21
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <Adc_init+0x4c>)
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <Adc_init+0x50>)
 80009fc:	f006 f9f5 	bl	8006dea <HAL_UART_Transmit>
	}
	if (HAL_OK != HAL_ADC_Start_DMA(&hadc1, &courant_mes, ADC_BUFFER)){
 8000a00:	2201      	movs	r2, #1
 8000a02:	490c      	ldr	r1, [pc, #48]	; (8000a34 <Adc_init+0x54>)
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <Adc_init+0x48>)
 8000a06:	f001 fd23 	bl	8002450 <HAL_ADC_Start_DMA>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d006      	beq.n	8000a1e <Adc_init+0x3e>
		HAL_UART_Transmit(&huart2, error_start, 17, HAL_MAX_DELAY);
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	2211      	movs	r2, #17
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <Adc_init+0x58>)
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <Adc_init+0x50>)
 8000a1a:	f006 f9e6 	bl	8006dea <HAL_UART_Transmit>
	}
	HAL_TIM_Base_Start(&htim1); // lancement du timer pour la conversion de l'ADC
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <Adc_init+0x5c>)
 8000a20:	f004 fbea 	bl	80051f8 <HAL_TIM_Base_Start>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000007c 	.word	0x2000007c
 8000a2c:	080097fc 	.word	0x080097fc
 8000a30:	200002fc 	.word	0x200002fc
 8000a34:	200001b8 	.word	0x200001b8
 8000a38:	08009814 	.word	0x08009814
 8000a3c:	20000264 	.word	0x20000264

08000a40 <Mes_Courant>:

int32_t Mes_Courant(void){ // mesure du courant
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
	int32_t courant_mA = (1000/50)*((courant_mes)*(3300000/4095) - 1650000); // multiplication par 1000 pour eviter les divisions de floats
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <Mes_Courant+0x38>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f643 62e4 	movw	r2, #16100	; 0x3ee4
 8000a4e:	fb03 f202 	mul.w	r2, r3, r2
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <Mes_Courant+0x3c>)
 8000a54:	4413      	add	r3, r2
 8000a56:	607b      	str	r3, [r7, #4]
	courant_mA = courant_mA / 1000; // division par 1000 pour revenir en mA
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <Mes_Courant+0x40>)
 8000a5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a60:	1192      	asrs	r2, r2, #6
 8000a62:	17db      	asrs	r3, r3, #31
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	607b      	str	r3, [r7, #4]
	return courant_mA;
 8000a68:	687b      	ldr	r3, [r7, #4]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200001b8 	.word	0x200001b8
 8000a7c:	fe0875c0 	.word	0xfe0875c0
 8000a80:	10624dd3 	.word	0x10624dd3

08000a84 <Mesure_Vitesse>:

int32_t Mesure_Vitesse(void){ // mesure de la vitesse
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	val_vitesse_t0 = __HAL_TIM_GET_COUNTER(&htim3);
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <Mesure_Vitesse+0x84>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	; (8000b0c <Mesure_Vitesse+0x88>)
 8000a90:	6013      	str	r3, [r2, #0]
	HAL_Delay(100);
 8000a92:	2064      	movs	r0, #100	; 0x64
 8000a94:	f001 f8b0 	bl	8001bf8 <HAL_Delay>
	val_vitesse_t1 = __HAL_TIM_GET_COUNTER(&htim3);
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <Mesure_Vitesse+0x84>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	; (8000b10 <Mesure_Vitesse+0x8c>)
 8000aa0:	6013      	str	r3, [r2, #0]
	if (sens_rotation == 1){ // permet d'avoir une différence de tick positive (ou on a dépassé le compteur)
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <Mesure_Vitesse+0x90>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d108      	bne.n	8000abc <Mesure_Vitesse+0x38>
		val_vitesse = (val_vitesse_t1 - val_vitesse_t0); // nombre de tick en 0.1 sec
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <Mesure_Vitesse+0x8c>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <Mesure_Vitesse+0x88>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <Mesure_Vitesse+0x94>)
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	e007      	b.n	8000acc <Mesure_Vitesse+0x48>
	}else{
		val_vitesse = (val_vitesse_t0 - val_vitesse_t1); // nombre de tick en 0.1 sec
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <Mesure_Vitesse+0x88>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <Mesure_Vitesse+0x8c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <Mesure_Vitesse+0x94>)
 8000aca:	601a      	str	r2, [r3, #0]
	}
	if (val_vitesse < 0){
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <Mesure_Vitesse+0x94>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	da06      	bge.n	8000ae2 <Mesure_Vitesse+0x5e>
		val_vitesse += 65535; // On a dépassé la valeur max du compteur
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <Mesure_Vitesse+0x94>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000adc:	33ff      	adds	r3, #255	; 0xff
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <Mesure_Vitesse+0x94>)
 8000ae0:	6013      	str	r3, [r2, #0]
	}
	// on mesure 102960 tick/s pour alpha = 0.75
	// donc 1 tr/s =~ 4118 tick/s
	val_vitesse = (val_vitesse * 10 * 60) / 4118; // vitesse en tr/min
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <Mesure_Vitesse+0x94>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000aea:	fb02 f303 	mul.w	r3, r2, r3
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <Mesure_Vitesse+0x98>)
 8000af0:	fb82 1203 	smull	r1, r2, r2, r3
 8000af4:	1292      	asrs	r2, r2, #10
 8000af6:	17db      	asrs	r3, r3, #31
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <Mesure_Vitesse+0x94>)
 8000afc:	6013      	str	r3, [r2, #0]
	return val_vitesse;
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <Mesure_Vitesse+0x94>)
 8000b00:	681b      	ldr	r3, [r3, #0]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200002b0 	.word	0x200002b0
 8000b0c:	200001bc 	.word	0x200001bc
 8000b10:	200001c0 	.word	0x200001c0
 8000b14:	20000000 	.word	0x20000000
 8000b18:	200001c4 	.word	0x200001c4
 8000b1c:	3fa8785b 	.word	0x3fa8785b

08000b20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_DMA_Init+0x50>)
 8000b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <MX_DMA_Init+0x50>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6493      	str	r3, [r2, #72]	; 0x48
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_DMA_Init+0x50>)
 8000b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_DMA_Init+0x50>)
 8000b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <MX_DMA_Init+0x50>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6493      	str	r3, [r2, #72]	; 0x48
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_DMA_Init+0x50>)
 8000b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	200b      	movs	r0, #11
 8000b5c:	f002 fd6a 	bl	8003634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b60:	200b      	movs	r0, #11
 8000b62:	f002 fd81 	bl	8003668 <HAL_NVIC_EnableIRQ>

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b3f      	ldr	r3, [pc, #252]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a3e      	ldr	r2, [pc, #248]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ba2:	4b39      	ldr	r3, [pc, #228]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a38      	ldr	r2, [pc, #224]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000ba8:	f043 0320 	orr.w	r3, r3, #32
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0320 	and.w	r3, r3, #32
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b33      	ldr	r3, [pc, #204]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a32      	ldr	r2, [pc, #200]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a2c      	ldr	r2, [pc, #176]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a26      	ldr	r2, [pc, #152]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000bf0:	f043 0308 	orr.w	r3, r3, #8
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <MX_GPIO_Init+0x114>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2120      	movs	r1, #32
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f003 f9ef 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2104      	movs	r1, #4
 8000c12:	481e      	ldr	r0, [pc, #120]	; (8000c8c <MX_GPIO_Init+0x118>)
 8000c14:	f003 f9ea 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4818      	ldr	r0, [pc, #96]	; (8000c90 <MX_GPIO_Init+0x11c>)
 8000c30:	f003 f85a 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000c34:	2320      	movs	r3, #32
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4e:	f003 f84b 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000c52:	2304      	movs	r3, #4
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <MX_GPIO_Init+0x118>)
 8000c6a:	f003 f83d 	bl	8003ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2028      	movs	r0, #40	; 0x28
 8000c74:	f002 fcde 	bl	8003634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c78:	2028      	movs	r0, #40	; 0x28
 8000c7a:	f002 fcf5 	bl	8003668 <HAL_NVIC_EnableIRQ>

}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	; 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	48000c00 	.word	0x48000c00
 8000c90:	48000800 	.word	0x48000800

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c98:	f000 ff77 	bl	8001b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9c:	f000 f842 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f7ff ff68 	bl	8000b74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ca4:	f7ff ff3c 	bl	8000b20 <MX_DMA_Init>
  MX_ADC2_Init();
 8000ca8:	f7ff fd0a 	bl	80006c0 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000cac:	f7ff fc8e 	bl	80005cc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000cb0:	f000 fc1a 	bl	80014e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000cb4:	f000 fcc8 	bl	8001648 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000cb8:	f000 fe06 	bl	80018c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000cbc:	f000 fe50 	bl	8001960 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Affiche le message de bienvenue
  HAL_UART_Transmit(&huart2, started, 31, HAL_MAX_DELAY);
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc4:	221f      	movs	r2, #31
 8000cc6:	4911      	ldr	r1, [pc, #68]	; (8000d0c <main+0x78>)
 8000cc8:	4811      	ldr	r0, [pc, #68]	; (8000d10 <main+0x7c>)
 8000cca:	f006 f88e 	bl	8006dea <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	2205      	movs	r2, #5
 8000cd4:	490f      	ldr	r1, [pc, #60]	; (8000d14 <main+0x80>)
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <main+0x7c>)
 8000cd8:	f006 f887 	bl	8006dea <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	490e      	ldr	r1, [pc, #56]	; (8000d18 <main+0x84>)
 8000ce0:	480b      	ldr	r0, [pc, #44]	; (8000d10 <main+0x7c>)
 8000ce2:	f006 f919 	bl	8006f18 <HAL_UART_Receive_IT>
  Adc_init();
 8000ce6:	f7ff fe7b 	bl	80009e0 <Adc_init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000cea:	213c      	movs	r1, #60	; 0x3c
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <main+0x88>)
 8000cee:	f004 fe17 	bl	8005920 <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Affiche les commandes entrées par l'utilisateur sur le shell
	  if (it_uart == 1){ // Permet d'afficher chaque caractère une seule fois
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <main+0x8c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d1fb      	bne.n	8000cf2 <main+0x5e>
		  UART_Echo();
 8000cfa:	f000 faa9 	bl	8001250 <UART_Echo>
		  UART_Create_Cmd();
 8000cfe:	f000 f973 	bl	8000fe8 <UART_Create_Cmd>
		  it_uart = 0;
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <main+0x8c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
	  if (it_uart == 1){ // Permet d'afficher chaque caractère une seule fois
 8000d08:	e7f3      	b.n	8000cf2 <main+0x5e>
 8000d0a:	bf00      	nop
 8000d0c:	08009a00 	.word	0x08009a00
 8000d10:	200002fc 	.word	0x200002fc
 8000d14:	08009a3c 	.word	0x08009a3c
 8000d18:	20000200 	.word	0x20000200
 8000d1c:	200002b0 	.word	0x200002b0
 8000d20:	200001c8 	.word	0x200001c8

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	; 0x50
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	2238      	movs	r2, #56	; 0x38
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f008 f8a0 	bl	8008e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f003 f98c 	bl	8004064 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d54:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d56:	2302      	movs	r3, #2
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000d5e:	2306      	movs	r3, #6
 8000d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d62:	2355      	movs	r3, #85	; 0x55
 8000d64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d72:	f107 0318 	add.w	r3, r7, #24
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 fa28 	bl	80041cc <HAL_RCC_OscConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d82:	f000 f84b 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d86:	230f      	movs	r3, #15
 8000d88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 fd2c 	bl	80047fc <HAL_RCC_ClockConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000daa:	f000 f837 	bl	8000e1c <Error_Handler>
  }
}
 8000dae:	bf00      	nop
 8000db0:	3750      	adds	r7, #80	; 0x50
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/* __________________________________________________________________________________________________________________________________________________________________________________________________*/
// Attend qu'un caractère soit entré par l'utilisateur et renvoie vers la fonction d'echo dans
// la boucle du main
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	it_uart = 1;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_UART_RxCpltCallback+0x20>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4904      	ldr	r1, [pc, #16]	; (8000ddc <HAL_UART_RxCpltCallback+0x24>)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_UART_RxCpltCallback+0x28>)
 8000dcc:	f006 f8a4 	bl	8006f18 <HAL_UART_Receive_IT>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200001c8 	.word	0x200001c8
 8000ddc:	20000200 	.word	0x20000200
 8000de0:	200002fc 	.word	0x200002fc

08000de4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	// Fonction d'asservissement du courant
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d101      	bne.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e0a:	f000 fed7 	bl	8001bbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40001000 	.word	0x40001000

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <Change_Speed>:
int speed_buffer[4];
const uint8_t maxSpeed[] = "Too fast my friend, too fast";
const uint8_t speedChangedFin[] = "Speed changed";
int sens_rotation = 1;

void Change_Speed(char cmd[CMD_BUFFER_SIZE]){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	*/

	// La vitesse est entrée dans le shell avec 4 caractères de 0000 à 1000 pour piloter le
	// rapport cyclique. Chaque caractère est converti en entier avec -'0' et il faut faire
	// attention à rentrer uniquement des chiffres.
	speed_buffer[0] = cmd[6] - '0';
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3306      	adds	r3, #6
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	3b30      	subs	r3, #48	; 0x30
 8000e38:	4a40      	ldr	r2, [pc, #256]	; (8000f3c <Change_Speed+0x114>)
 8000e3a:	6013      	str	r3, [r2, #0]
	speed_buffer[1] = cmd[7] - '0';
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3307      	adds	r3, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	3b30      	subs	r3, #48	; 0x30
 8000e44:	4a3d      	ldr	r2, [pc, #244]	; (8000f3c <Change_Speed+0x114>)
 8000e46:	6053      	str	r3, [r2, #4]
	speed_buffer[2] = cmd[8] - '0';
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3308      	adds	r3, #8
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	3b30      	subs	r3, #48	; 0x30
 8000e50:	4a3a      	ldr	r2, [pc, #232]	; (8000f3c <Change_Speed+0x114>)
 8000e52:	6093      	str	r3, [r2, #8]
	speed_buffer[3] = cmd[9] - '0';
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3309      	adds	r3, #9
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	3b30      	subs	r3, #48	; 0x30
 8000e5c:	4a37      	ldr	r2, [pc, #220]	; (8000f3c <Change_Speed+0x114>)
 8000e5e:	60d3      	str	r3, [r2, #12]

	// Les éléments du buffer sont concaténés pour donner la commande du rapport cyclique.
	int speed = speed_buffer[0]*1000 + speed_buffer[1]*100 + speed_buffer[2]*10 + speed_buffer[3];
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <Change_Speed+0x114>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e68:	fb03 f202 	mul.w	r2, r3, r2
 8000e6c:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <Change_Speed+0x114>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2164      	movs	r1, #100	; 0x64
 8000e72:	fb01 f303 	mul.w	r3, r1, r3
 8000e76:	18d1      	adds	r1, r2, r3
 8000e78:	4b30      	ldr	r3, [pc, #192]	; (8000f3c <Change_Speed+0x114>)
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	18ca      	adds	r2, r1, r3
 8000e86:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <Change_Speed+0x114>)
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60bb      	str	r3, [r7, #8]

	// Pilotage du sens de rotation : rapport cyclique > 500 -> sens de rotation positif
	//												   < 500 -> sens de rotation négatif
	if (speed < 500){
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e94:	da03      	bge.n	8000e9e <Change_Speed+0x76>
		sens_rotation = 0;
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <Change_Speed+0x118>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e002      	b.n	8000ea4 <Change_Speed+0x7c>
	}else{
		sens_rotation = 1;
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <Change_Speed+0x118>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
	}

	// Si la commande du rapport cyclique n'est pas correcte, renvoie un message d'erreur
	if (speed > MAX_SPEED || speed < 0){
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eaa:	da02      	bge.n	8000eb2 <Change_Speed+0x8a>
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da0e      	bge.n	8000ed0 <Change_Speed+0xa8>
		HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	4922      	ldr	r1, [pc, #136]	; (8000f44 <Change_Speed+0x11c>)
 8000eba:	4823      	ldr	r0, [pc, #140]	; (8000f48 <Change_Speed+0x120>)
 8000ebc:	f005 ff95 	bl	8006dea <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, maxSpeed, 28, HAL_MAX_DELAY);
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	221c      	movs	r2, #28
 8000ec6:	4921      	ldr	r1, [pc, #132]	; (8000f4c <Change_Speed+0x124>)
 8000ec8:	481f      	ldr	r0, [pc, #124]	; (8000f48 <Change_Speed+0x120>)
 8000eca:	f005 ff8e 	bl	8006dea <HAL_UART_Transmit>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,MAX_SPEED + 1 - speed_actl); // change les PWM du channel 2
				HAL_Delay(25);
			}
		}
	}
}
 8000ece:	e031      	b.n	8000f34 <Change_Speed+0x10c>
		int speed_actl = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1); // rapport cyclique actuel
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <Change_Speed+0x128>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed6:	60fb      	str	r3, [r7, #12]
		if (speed > speed_actl){ // augmente le rapport cyclique envoyé aux PWM
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dd25      	ble.n	8000f2c <Change_Speed+0x104>
			while (speed_actl < speed){
 8000ee0:	e00f      	b.n	8000f02 <Change_Speed+0xda>
				speed_actl++;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed_actl); // change les PWM du channel 1
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <Change_Speed+0x128>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,MAX_SPEED + 1 - speed_actl); // change les PWM du channel 2
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <Change_Speed+0x128>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(25);
 8000efc:	2019      	movs	r0, #25
 8000efe:	f000 fe7b 	bl	8001bf8 <HAL_Delay>
			while (speed_actl < speed){
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dbeb      	blt.n	8000ee2 <Change_Speed+0xba>
}
 8000f0a:	e013      	b.n	8000f34 <Change_Speed+0x10c>
				speed_actl--;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed_actl); // change les PWM du channel 1
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <Change_Speed+0x128>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,MAX_SPEED + 1 - speed_actl); // change les PWM du channel 2
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <Change_Speed+0x128>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(25);
 8000f26:	2019      	movs	r0, #25
 8000f28:	f000 fe66 	bl	8001bf8 <HAL_Delay>
			while (speed_actl > speed){
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	dceb      	bgt.n	8000f0c <Change_Speed+0xe4>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200001cc 	.word	0x200001cc
 8000f40:	20000000 	.word	0x20000000
 8000f44:	080097bc 	.word	0x080097bc
 8000f48:	200002fc 	.word	0x200002fc
 8000f4c:	08009828 	.word	0x08009828
 8000f50:	20000264 	.word	0x20000264

08000f54 <Start_Motor>:


void Start_Motor(char cmd[CMD_BUFFER_SIZE]){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	// Initialisation du rapport cyclique du moteur à 500 pour avoir une vitesse nulle au démarrage
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,500);
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <Start_Motor+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f64:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,500);
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <Start_Motor+0x64>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f6e:	639a      	str	r2, [r3, #56]	; 0x38

	// On initialise le buffer à 0500 pour avoir une valeur de base et éviter les erreurs
	cmd[6] = '0';
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3306      	adds	r3, #6
 8000f74:	2230      	movs	r2, #48	; 0x30
 8000f76:	701a      	strb	r2, [r3, #0]
	cmd[7] = '5';
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3307      	adds	r3, #7
 8000f7c:	2235      	movs	r2, #53	; 0x35
 8000f7e:	701a      	strb	r2, [r3, #0]
	cmd[8] = '0';
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3308      	adds	r3, #8
 8000f84:	2230      	movs	r2, #48	; 0x30
 8000f86:	701a      	strb	r2, [r3, #0]
	cmd[9] = '0';
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3309      	adds	r3, #9
 8000f8c:	2230      	movs	r2, #48	; 0x30
 8000f8e:	701a      	strb	r2, [r3, #0]

	// Démarage des PWM
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f90:	2100      	movs	r1, #0
 8000f92:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <Start_Motor+0x64>)
 8000f94:	f004 fa70 	bl	8005478 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <Start_Motor+0x64>)
 8000f9c:	f005 fc02 	bl	80067a4 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <Start_Motor+0x64>)
 8000fa4:	f004 fa68 	bl	8005478 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <Start_Motor+0x64>)
 8000fac:	f005 fbfa 	bl	80067a4 <HAL_TIMEx_PWMN_Start>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000264 	.word	0x20000264

08000fbc <Stop_Motor>:

void Stop_Motor(void){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	// Arrêt des PWM
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <Stop_Motor+0x28>)
 8000fc4:	f004 fb6a 	bl	800569c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <Stop_Motor+0x28>)
 8000fcc:	f005 fcac 	bl	8006928 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <Stop_Motor+0x28>)
 8000fd4:	f004 fb62 	bl	800569c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000fd8:	2104      	movs	r1, #4
 8000fda:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <Stop_Motor+0x28>)
 8000fdc:	f005 fca4 	bl	8006928 <HAL_TIMEx_PWMN_Stop>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000264 	.word	0x20000264

08000fe8 <UART_Create_Cmd>:
char buffer_cmd[1]; // dernier charactère entré
char vitesse_str[5]; // valeur de la vitesse en texte
char courant_str[5]; // valeur du courant en texte

// Fonctions
char* UART_Create_Cmd(void){ // Création et reconnaissance de la commande entrée dans le shell
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
	if (buffer_cmd[0] == '\r'){ // Retour à la ligne reconnu, reconnaissance de la commande
 8000fee:	4b80      	ldr	r3, [pc, #512]	; (80011f0 <UART_Create_Cmd+0x208>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b0d      	cmp	r3, #13
 8000ff4:	f040 80e5 	bne.w	80011c2 <UART_Create_Cmd+0x1da>
		if (!(strncmp(cmd,"help",4))){
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	497e      	ldr	r1, [pc, #504]	; (80011f4 <UART_Create_Cmd+0x20c>)
 8000ffc:	487e      	ldr	r0, [pc, #504]	; (80011f8 <UART_Create_Cmd+0x210>)
 8000ffe:	f007 ff43 	bl	8008e88 <strncmp>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10f      	bne.n	8001028 <UART_Create_Cmd+0x40>
			HAL_UART_Transmit(&huart2, help, 264, HAL_MAX_DELAY);
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001010:	497a      	ldr	r1, [pc, #488]	; (80011fc <UART_Create_Cmd+0x214>)
 8001012:	487b      	ldr	r0, [pc, #492]	; (8001200 <UART_Create_Cmd+0x218>)
 8001014:	f005 fee9 	bl	8006dea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	2205      	movs	r2, #5
 800101e:	4979      	ldr	r1, [pc, #484]	; (8001204 <UART_Create_Cmd+0x21c>)
 8001020:	4877      	ldr	r0, [pc, #476]	; (8001200 <UART_Create_Cmd+0x218>)
 8001022:	f005 fee2 	bl	8006dea <HAL_UART_Transmit>
 8001026:	e0c8      	b.n	80011ba <UART_Create_Cmd+0x1d2>
		}else if(!(strncmp(cmd,"pinout",6))){
 8001028:	2206      	movs	r2, #6
 800102a:	4977      	ldr	r1, [pc, #476]	; (8001208 <UART_Create_Cmd+0x220>)
 800102c:	4872      	ldr	r0, [pc, #456]	; (80011f8 <UART_Create_Cmd+0x210>)
 800102e:	f007 ff2b 	bl	8008e88 <strncmp>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10e      	bne.n	8001056 <UART_Create_Cmd+0x6e>
			HAL_UART_Transmit(&huart2, pinout, 88, HAL_MAX_DELAY);
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	2258      	movs	r2, #88	; 0x58
 800103e:	4973      	ldr	r1, [pc, #460]	; (800120c <UART_Create_Cmd+0x224>)
 8001040:	486f      	ldr	r0, [pc, #444]	; (8001200 <UART_Create_Cmd+0x218>)
 8001042:	f005 fed2 	bl	8006dea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	2205      	movs	r2, #5
 800104c:	496d      	ldr	r1, [pc, #436]	; (8001204 <UART_Create_Cmd+0x21c>)
 800104e:	486c      	ldr	r0, [pc, #432]	; (8001200 <UART_Create_Cmd+0x218>)
 8001050:	f005 fecb 	bl	8006dea <HAL_UART_Transmit>
 8001054:	e0b1      	b.n	80011ba <UART_Create_Cmd+0x1d2>
		}else if(!(strncmp(cmd,"start",5))){
 8001056:	2205      	movs	r2, #5
 8001058:	496d      	ldr	r1, [pc, #436]	; (8001210 <UART_Create_Cmd+0x228>)
 800105a:	4867      	ldr	r0, [pc, #412]	; (80011f8 <UART_Create_Cmd+0x210>)
 800105c:	f007 ff14 	bl	8008e88 <strncmp>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d111      	bne.n	800108a <UART_Create_Cmd+0xa2>
			Start_Motor(cmd); // lancement du moteur
 8001066:	4864      	ldr	r0, [pc, #400]	; (80011f8 <UART_Create_Cmd+0x210>)
 8001068:	f7ff ff74 	bl	8000f54 <Start_Motor>
			HAL_UART_Transmit(&huart2, powerOn, 23, HAL_MAX_DELAY);
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	2217      	movs	r2, #23
 8001072:	4968      	ldr	r1, [pc, #416]	; (8001214 <UART_Create_Cmd+0x22c>)
 8001074:	4862      	ldr	r0, [pc, #392]	; (8001200 <UART_Create_Cmd+0x218>)
 8001076:	f005 feb8 	bl	8006dea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	2205      	movs	r2, #5
 8001080:	4960      	ldr	r1, [pc, #384]	; (8001204 <UART_Create_Cmd+0x21c>)
 8001082:	485f      	ldr	r0, [pc, #380]	; (8001200 <UART_Create_Cmd+0x218>)
 8001084:	f005 feb1 	bl	8006dea <HAL_UART_Transmit>
 8001088:	e097      	b.n	80011ba <UART_Create_Cmd+0x1d2>
		}else if(!(strncmp(cmd,"stop",4))){
 800108a:	2204      	movs	r2, #4
 800108c:	4962      	ldr	r1, [pc, #392]	; (8001218 <UART_Create_Cmd+0x230>)
 800108e:	485a      	ldr	r0, [pc, #360]	; (80011f8 <UART_Create_Cmd+0x210>)
 8001090:	f007 fefa 	bl	8008e88 <strncmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d110      	bne.n	80010bc <UART_Create_Cmd+0xd4>
			Stop_Motor(); // arret du moteur
 800109a:	f7ff ff8f 	bl	8000fbc <Stop_Motor>
			HAL_UART_Transmit(&huart2, powerOff, 23, HAL_MAX_DELAY);
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	2217      	movs	r2, #23
 80010a4:	495d      	ldr	r1, [pc, #372]	; (800121c <UART_Create_Cmd+0x234>)
 80010a6:	4856      	ldr	r0, [pc, #344]	; (8001200 <UART_Create_Cmd+0x218>)
 80010a8:	f005 fe9f 	bl	8006dea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	2205      	movs	r2, #5
 80010b2:	4954      	ldr	r1, [pc, #336]	; (8001204 <UART_Create_Cmd+0x21c>)
 80010b4:	4852      	ldr	r0, [pc, #328]	; (8001200 <UART_Create_Cmd+0x218>)
 80010b6:	f005 fe98 	bl	8006dea <HAL_UART_Transmit>
 80010ba:	e07e      	b.n	80011ba <UART_Create_Cmd+0x1d2>
		}else if(!(strncmp(cmd,"speed",5))){
 80010bc:	2205      	movs	r2, #5
 80010be:	4958      	ldr	r1, [pc, #352]	; (8001220 <UART_Create_Cmd+0x238>)
 80010c0:	484d      	ldr	r0, [pc, #308]	; (80011f8 <UART_Create_Cmd+0x210>)
 80010c2:	f007 fee1 	bl	8008e88 <strncmp>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d111      	bne.n	80010f0 <UART_Create_Cmd+0x108>
			HAL_UART_Transmit(&huart2, speedChanged, 14, HAL_MAX_DELAY);
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	220e      	movs	r2, #14
 80010d2:	4954      	ldr	r1, [pc, #336]	; (8001224 <UART_Create_Cmd+0x23c>)
 80010d4:	484a      	ldr	r0, [pc, #296]	; (8001200 <UART_Create_Cmd+0x218>)
 80010d6:	f005 fe88 	bl	8006dea <HAL_UART_Transmit>
			Change_Speed(cmd); // modification de la vitesse
 80010da:	4847      	ldr	r0, [pc, #284]	; (80011f8 <UART_Create_Cmd+0x210>)
 80010dc:	f7ff fea4 	bl	8000e28 <Change_Speed>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	2205      	movs	r2, #5
 80010e6:	4947      	ldr	r1, [pc, #284]	; (8001204 <UART_Create_Cmd+0x21c>)
 80010e8:	4845      	ldr	r0, [pc, #276]	; (8001200 <UART_Create_Cmd+0x218>)
 80010ea:	f005 fe7e 	bl	8006dea <HAL_UART_Transmit>
 80010ee:	e064      	b.n	80011ba <UART_Create_Cmd+0x1d2>
		}else if(!(strncmp(cmd,"courant",7))){
 80010f0:	2207      	movs	r2, #7
 80010f2:	494d      	ldr	r1, [pc, #308]	; (8001228 <UART_Create_Cmd+0x240>)
 80010f4:	4840      	ldr	r0, [pc, #256]	; (80011f8 <UART_Create_Cmd+0x210>)
 80010f6:	f007 fec7 	bl	8008e88 <strncmp>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d124      	bne.n	800114a <UART_Create_Cmd+0x162>
			int32_t courant_mA = Mes_Courant();
 8001100:	f7ff fc9e 	bl	8000a40 <Mes_Courant>
 8001104:	6038      	str	r0, [r7, #0]
			sprintf(courant_str, "%ld", courant_mA); // affichage du courant
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	4948      	ldr	r1, [pc, #288]	; (800122c <UART_Create_Cmd+0x244>)
 800110a:	4849      	ldr	r0, [pc, #292]	; (8001230 <UART_Create_Cmd+0x248>)
 800110c:	f007 fe94 	bl	8008e38 <siprintf>
			HAL_UART_Transmit(&huart2, courant, 10, HAL_MAX_DELAY);
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	220a      	movs	r2, #10
 8001116:	4947      	ldr	r1, [pc, #284]	; (8001234 <UART_Create_Cmd+0x24c>)
 8001118:	4839      	ldr	r0, [pc, #228]	; (8001200 <UART_Create_Cmd+0x218>)
 800111a:	f005 fe66 	bl	8006dea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, courant_str, 5, HAL_MAX_DELAY);
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	2205      	movs	r2, #5
 8001124:	4942      	ldr	r1, [pc, #264]	; (8001230 <UART_Create_Cmd+0x248>)
 8001126:	4836      	ldr	r0, [pc, #216]	; (8001200 <UART_Create_Cmd+0x218>)
 8001128:	f005 fe5f 	bl	8006dea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, courant_txt_ma, 3, HAL_MAX_DELAY);
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	2203      	movs	r2, #3
 8001132:	4941      	ldr	r1, [pc, #260]	; (8001238 <UART_Create_Cmd+0x250>)
 8001134:	4832      	ldr	r0, [pc, #200]	; (8001200 <UART_Create_Cmd+0x218>)
 8001136:	f005 fe58 	bl	8006dea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	2205      	movs	r2, #5
 8001140:	4930      	ldr	r1, [pc, #192]	; (8001204 <UART_Create_Cmd+0x21c>)
 8001142:	482f      	ldr	r0, [pc, #188]	; (8001200 <UART_Create_Cmd+0x218>)
 8001144:	f005 fe51 	bl	8006dea <HAL_UART_Transmit>
 8001148:	e037      	b.n	80011ba <UART_Create_Cmd+0x1d2>
		}else if(!(strncmp(cmd,"vitesse",7))){
 800114a:	2207      	movs	r2, #7
 800114c:	493b      	ldr	r1, [pc, #236]	; (800123c <UART_Create_Cmd+0x254>)
 800114e:	482a      	ldr	r0, [pc, #168]	; (80011f8 <UART_Create_Cmd+0x210>)
 8001150:	f007 fe9a 	bl	8008e88 <strncmp>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d121      	bne.n	800119e <UART_Create_Cmd+0x1b6>
			int32_t vitesse = Mesure_Vitesse();
 800115a:	f7ff fc93 	bl	8000a84 <Mesure_Vitesse>
 800115e:	6078      	str	r0, [r7, #4]
			sprintf(vitesse_str, "%ld", vitesse); // affichage de la vitesse
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	4932      	ldr	r1, [pc, #200]	; (800122c <UART_Create_Cmd+0x244>)
 8001164:	4836      	ldr	r0, [pc, #216]	; (8001240 <UART_Create_Cmd+0x258>)
 8001166:	f007 fe67 	bl	8008e38 <siprintf>
			HAL_UART_Transmit(&huart2, vitesse_str, strlen(vitesse_str), HAL_MAX_DELAY);
 800116a:	4835      	ldr	r0, [pc, #212]	; (8001240 <UART_Create_Cmd+0x258>)
 800116c:	f7ff f858 	bl	8000220 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	4931      	ldr	r1, [pc, #196]	; (8001240 <UART_Create_Cmd+0x258>)
 800117a:	4821      	ldr	r0, [pc, #132]	; (8001200 <UART_Create_Cmd+0x218>)
 800117c:	f005 fe35 	bl	8006dea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, vitesse_txt, 9, HAL_MAX_DELAY);
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	2209      	movs	r2, #9
 8001186:	492f      	ldr	r1, [pc, #188]	; (8001244 <UART_Create_Cmd+0x25c>)
 8001188:	481d      	ldr	r0, [pc, #116]	; (8001200 <UART_Create_Cmd+0x218>)
 800118a:	f005 fe2e 	bl	8006dea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	2205      	movs	r2, #5
 8001194:	491b      	ldr	r1, [pc, #108]	; (8001204 <UART_Create_Cmd+0x21c>)
 8001196:	481a      	ldr	r0, [pc, #104]	; (8001200 <UART_Create_Cmd+0x218>)
 8001198:	f005 fe27 	bl	8006dea <HAL_UART_Transmit>
 800119c:	e00d      	b.n	80011ba <UART_Create_Cmd+0x1d2>
		}
		else{ // erreur si la commande n'est pas reconnue
			HAL_UART_Transmit(&huart2, cmdNotFound, 17, HAL_MAX_DELAY);
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	2211      	movs	r2, #17
 80011a4:	4928      	ldr	r1, [pc, #160]	; (8001248 <UART_Create_Cmd+0x260>)
 80011a6:	4816      	ldr	r0, [pc, #88]	; (8001200 <UART_Create_Cmd+0x218>)
 80011a8:	f005 fe1f 	bl	8006dea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, newLine, 5, HAL_MAX_DELAY);
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	2205      	movs	r2, #5
 80011b2:	4914      	ldr	r1, [pc, #80]	; (8001204 <UART_Create_Cmd+0x21c>)
 80011b4:	4812      	ldr	r0, [pc, #72]	; (8001200 <UART_Create_Cmd+0x218>)
 80011b6:	f005 fe18 	bl	8006dea <HAL_UART_Transmit>
		}
		idxCmd = 0;
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <UART_Create_Cmd+0x264>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e011      	b.n	80011e6 <UART_Create_Cmd+0x1fe>
	}else{ // si le caractère n'est pas \r, on ajoute le caractère à la commande en cours de création
		cmd[idxCmd] = buffer_cmd[0];
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <UART_Create_Cmd+0x264>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <UART_Create_Cmd+0x208>)
 80011c8:	7811      	ldrb	r1, [r2, #0]
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <UART_Create_Cmd+0x210>)
 80011cc:	54d1      	strb	r1, [r2, r3]
		idxCmd += 1;
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <UART_Create_Cmd+0x264>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	4a1d      	ldr	r2, [pc, #116]	; (800124c <UART_Create_Cmd+0x264>)
 80011d6:	6013      	str	r3, [r2, #0]
		if (idxCmd > CMD_BUFFER_SIZE){ // gestion de l'erreur si la commande est trop longue
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <UART_Create_Cmd+0x264>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b20      	cmp	r3, #32
 80011de:	dd02      	ble.n	80011e6 <UART_Create_Cmd+0x1fe>
			idxCmd = 0;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <UART_Create_Cmd+0x264>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
		}
	}
	return cmd;
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <UART_Create_Cmd+0x210>)
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000200 	.word	0x20000200
 80011f4:	080097c0 	.word	0x080097c0
 80011f8:	200001e0 	.word	0x200001e0
 80011fc:	08009848 	.word	0x08009848
 8001200:	200002fc 	.word	0x200002fc
 8001204:	08009a3c 	.word	0x08009a3c
 8001208:	080097c8 	.word	0x080097c8
 800120c:	08009950 	.word	0x08009950
 8001210:	080097d0 	.word	0x080097d0
 8001214:	080099ac 	.word	0x080099ac
 8001218:	080097d8 	.word	0x080097d8
 800121c:	080099c4 	.word	0x080099c4
 8001220:	080097e0 	.word	0x080097e0
 8001224:	080099dc 	.word	0x080099dc
 8001228:	080097e8 	.word	0x080097e8
 800122c:	080097f0 	.word	0x080097f0
 8001230:	2000020c 	.word	0x2000020c
 8001234:	08009a20 	.word	0x08009a20
 8001238:	08009a2c 	.word	0x08009a2c
 800123c:	080097f4 	.word	0x080097f4
 8001240:	20000204 	.word	0x20000204
 8001244:	08009a30 	.word	0x08009a30
 8001248:	080099ec 	.word	0x080099ec
 800124c:	200001dc 	.word	0x200001dc

08001250 <UART_Echo>:

void UART_Echo(void){ // affichage dans le shell du caractère tapé au clavier
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	if (buffer_cmd[0] == '\r'){
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <UART_Echo+0x38>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b0d      	cmp	r3, #13
 800125a:	d107      	bne.n	800126c <UART_Echo+0x1c>
	  HAL_UART_Transmit(&huart2, newLine, 2, HAL_MAX_DELAY);
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	2202      	movs	r2, #2
 8001262:	490a      	ldr	r1, [pc, #40]	; (800128c <UART_Echo+0x3c>)
 8001264:	480a      	ldr	r0, [pc, #40]	; (8001290 <UART_Echo+0x40>)
 8001266:	f005 fdc0 	bl	8006dea <HAL_UART_Transmit>
 800126a:	e006      	b.n	800127a <UART_Echo+0x2a>
	}else{
	  HAL_UART_Transmit(&huart2, buffer_cmd, 1, HAL_MAX_DELAY);
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
 8001270:	2201      	movs	r2, #1
 8001272:	4905      	ldr	r1, [pc, #20]	; (8001288 <UART_Echo+0x38>)
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <UART_Echo+0x40>)
 8001276:	f005 fdb8 	bl	8006dea <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart2, buffer_cmd, 1);
 800127a:	2201      	movs	r2, #1
 800127c:	4902      	ldr	r1, [pc, #8]	; (8001288 <UART_Echo+0x38>)
 800127e:	4804      	ldr	r0, [pc, #16]	; (8001290 <UART_Echo+0x40>)
 8001280:	f005 fe4a 	bl	8006f18 <HAL_UART_Receive_IT>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000200 	.word	0x20000200
 800128c:	08009a3c 	.word	0x08009a3c
 8001290:	200002fc 	.word	0x200002fc

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_MspInit+0x44>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_MspInit+0x44>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6613      	str	r3, [r2, #96]	; 0x60
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_MspInit+0x44>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_MspInit+0x44>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_MspInit+0x44>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6593      	str	r3, [r2, #88]	; 0x58
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_MspInit+0x44>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012ca:	f002 ff6f 	bl	80041ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000

080012dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012ec:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <HAL_InitTick+0xc4>)
 80012ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f0:	4a2b      	ldr	r2, [pc, #172]	; (80013a0 <HAL_InitTick+0xc4>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6593      	str	r3, [r2, #88]	; 0x58
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_InitTick+0xc4>)
 80012fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001304:	f107 020c 	add.w	r2, r7, #12
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f003 fc4a 	bl	8004ba8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001314:	f003 fc1c 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 8001318:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800131a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131c:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <HAL_InitTick+0xc8>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	0c9b      	lsrs	r3, r3, #18
 8001324:	3b01      	subs	r3, #1
 8001326:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001328:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <HAL_InitTick+0xcc>)
 800132a:	4a20      	ldr	r2, [pc, #128]	; (80013ac <HAL_InitTick+0xd0>)
 800132c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800132e:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <HAL_InitTick+0xcc>)
 8001330:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001334:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <HAL_InitTick+0xcc>)
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_InitTick+0xcc>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_InitTick+0xcc>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001348:	4817      	ldr	r0, [pc, #92]	; (80013a8 <HAL_InitTick+0xcc>)
 800134a:	f003 fef3 	bl	8005134 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001354:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001358:	2b00      	cmp	r3, #0
 800135a:	d11b      	bne.n	8001394 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800135c:	4812      	ldr	r0, [pc, #72]	; (80013a8 <HAL_InitTick+0xcc>)
 800135e:	f003 ffbb 	bl	80052d8 <HAL_TIM_Base_Start_IT>
 8001362:	4603      	mov	r3, r0
 8001364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800136c:	2b00      	cmp	r3, #0
 800136e:	d111      	bne.n	8001394 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001370:	2036      	movs	r0, #54	; 0x36
 8001372:	f002 f979 	bl	8003668 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d808      	bhi.n	800138e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	2036      	movs	r0, #54	; 0x36
 8001382:	f002 f957 	bl	8003634 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_InitTick+0xd4>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	e002      	b.n	8001394 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001398:	4618      	mov	r0, r3
 800139a:	3730      	adds	r7, #48	; 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000
 80013a4:	431bde83 	.word	0x431bde83
 80013a8:	20000214 	.word	0x20000214
 80013ac:	40001000 	.word	0x40001000
 80013b0:	20000008 	.word	0x20000008

080013b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <NMI_Handler+0x4>

080013ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <MemManage_Handler+0x4>

080013c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA1_Channel1_IRQHandler+0x10>)
 8001412:	f002 fb1a 	bl	8003a4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000154 	.word	0x20000154

08001420 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <USART2_IRQHandler+0x10>)
 8001426:	f005 fdcd 	bl	8006fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200002fc 	.word	0x200002fc

08001434 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001438:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800143c:	f002 fdee 	bl	800401c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <TIM6_DAC_IRQHandler+0x10>)
 800144a:	f004 faf7 	bl	8005a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000214 	.word	0x20000214

08001458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001460:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <_sbrk+0x5c>)
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <_sbrk+0x60>)
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <_sbrk+0x64>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <_sbrk+0x68>)
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	429a      	cmp	r2, r3
 8001486:	d207      	bcs.n	8001498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001488:	f007 fd10 	bl	8008eac <__errno>
 800148c:	4603      	mov	r3, r0
 800148e:	220c      	movs	r2, #12
 8001490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	e009      	b.n	80014ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <_sbrk+0x64>)
 80014a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20020000 	.word	0x20020000
 80014b8:	00000400 	.word	0x00000400
 80014bc:	20000260 	.word	0x20000260
 80014c0:	20000568 	.word	0x20000568

080014c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <SystemInit+0x20>)
 80014ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <SystemInit+0x20>)
 80014d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b098      	sub	sp, #96	; 0x60
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	615a      	str	r2, [r3, #20]
 800150c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2234      	movs	r2, #52	; 0x34
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f007 fcaf 	bl	8008e78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800151a:	4b49      	ldr	r3, [pc, #292]	; (8001640 <MX_TIM1_Init+0x158>)
 800151c:	4a49      	ldr	r2, [pc, #292]	; (8001644 <MX_TIM1_Init+0x15c>)
 800151e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001520:	4b47      	ldr	r3, [pc, #284]	; (8001640 <MX_TIM1_Init+0x158>)
 8001522:	2207      	movs	r2, #7
 8001524:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <MX_TIM1_Init+0x158>)
 8001528:	2220      	movs	r2, #32
 800152a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800152c:	4b44      	ldr	r3, [pc, #272]	; (8001640 <MX_TIM1_Init+0x158>)
 800152e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001532:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b42      	ldr	r3, [pc, #264]	; (8001640 <MX_TIM1_Init+0x158>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <MX_TIM1_Init+0x158>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001540:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <MX_TIM1_Init+0x158>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001546:	483e      	ldr	r0, [pc, #248]	; (8001640 <MX_TIM1_Init+0x158>)
 8001548:	f003 ff3e 	bl	80053c8 <HAL_TIM_PWM_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001552:	f7ff fc63 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800155a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800155e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001564:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001568:	4619      	mov	r1, r3
 800156a:	4835      	ldr	r0, [pc, #212]	; (8001640 <MX_TIM1_Init+0x158>)
 800156c:	f005 fa3a 	bl	80069e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001576:	f7ff fc51 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157a:	2360      	movs	r3, #96	; 0x60
 800157c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 400;
 800157e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001584:	2300      	movs	r3, #0
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001588:	2300      	movs	r3, #0
 800158a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001598:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800159c:	2200      	movs	r2, #0
 800159e:	4619      	mov	r1, r3
 80015a0:	4827      	ldr	r0, [pc, #156]	; (8001640 <MX_TIM1_Init+0x158>)
 80015a2:	f004 fbcb 	bl	8005d3c <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80015ac:	f7ff fc36 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015b4:	2204      	movs	r2, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4821      	ldr	r0, [pc, #132]	; (8001640 <MX_TIM1_Init+0x158>)
 80015ba:	f004 fbbf 	bl	8005d3c <HAL_TIM_PWM_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 80015c4:	f7ff fc2a 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015d0:	2208      	movs	r2, #8
 80015d2:	4619      	mov	r1, r3
 80015d4:	481a      	ldr	r0, [pc, #104]	; (8001640 <MX_TIM1_Init+0x158>)
 80015d6:	f004 fbb1 	bl	8005d3c <HAL_TIM_PWM_ConfigChannel>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80015e0:	f7ff fc1c 	bl	8000e1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 44;
 80015f0:	232c      	movs	r3, #44	; 0x2c
 80015f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800160a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4807      	ldr	r0, [pc, #28]	; (8001640 <MX_TIM1_Init+0x158>)
 8001622:	f005 fa75 	bl	8006b10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800162c:	f7ff fbf6 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <MX_TIM1_Init+0x158>)
 8001632:	f000 f8e1 	bl	80017f8 <HAL_TIM_MspPostInit>

}
 8001636:	bf00      	nop
 8001638:	3760      	adds	r7, #96	; 0x60
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000264 	.word	0x20000264
 8001644:	40012c00 	.word	0x40012c00

08001648 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	2224      	movs	r2, #36	; 0x24
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f007 fc0e 	bl	8008e78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <MX_TIM3_Init+0xa4>)
 8001668:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <MX_TIM3_Init+0xa8>)
 800166a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <MX_TIM3_Init+0xa4>)
 800166e:	2200      	movs	r2, #0
 8001670:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <MX_TIM3_Init+0xa4>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <MX_TIM3_Init+0xa4>)
 800167a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_TIM3_Init+0xa4>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <MX_TIM3_Init+0xa4>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800168c:	2303      	movs	r3, #3
 800168e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001694:	2301      	movs	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016a4:	2301      	movs	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	480d      	ldr	r0, [pc, #52]	; (80016ec <MX_TIM3_Init+0xa4>)
 80016b8:	f004 f88c 	bl	80057d4 <HAL_TIM_Encoder_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80016c2:	f7ff fbab 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ce:	463b      	mov	r3, r7
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <MX_TIM3_Init+0xa4>)
 80016d4:	f005 f986 	bl	80069e4 <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80016de:	f7ff fb9d 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3730      	adds	r7, #48	; 0x30
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200002b0 	.word	0x200002b0
 80016f0:	40000400 	.word	0x40000400

080016f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_TIM_PWM_MspInit+0x38>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10b      	bne.n	800171e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_TIM_PWM_MspInit+0x3c>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_TIM_PWM_MspInit+0x3c>)
 800170c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001710:	6613      	str	r3, [r2, #96]	; 0x60
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_TIM_PWM_MspInit+0x3c>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40012c00 	.word	0x40012c00
 8001730:	40021000 	.word	0x40021000

08001734 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <HAL_TIM_Encoder_MspInit+0xb8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d145      	bne.n	80017e2 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <HAL_TIM_Encoder_MspInit+0xbc>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6593      	str	r3, [r2, #88]	; 0x58
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_TIM_Encoder_MspInit+0xbc>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_TIM_Encoder_MspInit+0xbc>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800179e:	2350      	movs	r3, #80	; 0x50
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ae:	2302      	movs	r3, #2
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f002 fa94 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017d2:	2302      	movs	r3, #2
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017de:	f002 fa83 	bl	8003ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40000400 	.word	0x40000400
 80017f0:	40021000 	.word	0x40021000
 80017f4:	48000800 	.word	0x48000800

080017f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a29      	ldr	r2, [pc, #164]	; (80018bc <HAL_TIM_MspPostInit+0xc4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d14b      	bne.n	80018b2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <HAL_TIM_MspPostInit+0xc8>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a28      	ldr	r2, [pc, #160]	; (80018c0 <HAL_TIM_MspPostInit+0xc8>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <HAL_TIM_MspPostInit+0xc8>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <HAL_TIM_MspPostInit+0xc8>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <HAL_TIM_MspPostInit+0xc8>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_TIM_MspPostInit+0xc8>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800184a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800185c:	2306      	movs	r3, #6
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	4817      	ldr	r0, [pc, #92]	; (80018c4 <HAL_TIM_MspPostInit+0xcc>)
 8001868:	f002 fa3e 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 800186c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800187e:	2304      	movs	r3, #4
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	480e      	ldr	r0, [pc, #56]	; (80018c4 <HAL_TIM_MspPostInit+0xcc>)
 800188a:	f002 fa2d 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800188e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80018a0:	2306      	movs	r3, #6
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ae:	f002 fa1b 	bl	8003ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	; 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40012c00 	.word	0x40012c00
 80018c0:	40021000 	.word	0x40021000
 80018c4:	48000400 	.word	0x48000400

080018c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <MX_USART2_UART_Init+0x90>)
 80018ce:	4a23      	ldr	r2, [pc, #140]	; (800195c <MX_USART2_UART_Init+0x94>)
 80018d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <MX_USART2_UART_Init+0x90>)
 80018d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <MX_USART2_UART_Init+0x90>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <MX_USART2_UART_Init+0x90>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <MX_USART2_UART_Init+0x90>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <MX_USART2_UART_Init+0x90>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b19      	ldr	r3, [pc, #100]	; (8001958 <MX_USART2_UART_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <MX_USART2_UART_Init+0x90>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <MX_USART2_UART_Init+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_USART2_UART_Init+0x90>)
 8001906:	2200      	movs	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <MX_USART2_UART_Init+0x90>)
 800190c:	2200      	movs	r2, #0
 800190e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001910:	4811      	ldr	r0, [pc, #68]	; (8001958 <MX_USART2_UART_Init+0x90>)
 8001912:	f005 fa1a 	bl	8006d4a <HAL_UART_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800191c:	f7ff fa7e 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001920:	2100      	movs	r1, #0
 8001922:	480d      	ldr	r0, [pc, #52]	; (8001958 <MX_USART2_UART_Init+0x90>)
 8001924:	f007 f9bd 	bl	8008ca2 <HAL_UARTEx_SetTxFifoThreshold>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800192e:	f7ff fa75 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001932:	2100      	movs	r1, #0
 8001934:	4808      	ldr	r0, [pc, #32]	; (8001958 <MX_USART2_UART_Init+0x90>)
 8001936:	f007 f9f2 	bl	8008d1e <HAL_UARTEx_SetRxFifoThreshold>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001940:	f7ff fa6c 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001944:	4804      	ldr	r0, [pc, #16]	; (8001958 <MX_USART2_UART_Init+0x90>)
 8001946:	f007 f973 	bl	8008c30 <HAL_UARTEx_DisableFifoMode>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001950:	f7ff fa64 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200002fc 	.word	0x200002fc
 800195c:	40004400 	.word	0x40004400

08001960 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001964:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 8001966:	4a23      	ldr	r2, [pc, #140]	; (80019f4 <MX_USART3_UART_Init+0x94>)
 8001968:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 800196c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001970:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800197e:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 8001986:	220c      	movs	r2, #12
 8001988:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019a8:	4811      	ldr	r0, [pc, #68]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 80019aa:	f005 f9ce 	bl	8006d4a <HAL_UART_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019b4:	f7ff fa32 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b8:	2100      	movs	r1, #0
 80019ba:	480d      	ldr	r0, [pc, #52]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 80019bc:	f007 f971 	bl	8008ca2 <HAL_UARTEx_SetTxFifoThreshold>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019c6:	f7ff fa29 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ca:	2100      	movs	r1, #0
 80019cc:	4808      	ldr	r0, [pc, #32]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 80019ce:	f007 f9a6 	bl	8008d1e <HAL_UARTEx_SetRxFifoThreshold>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019d8:	f7ff fa20 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 80019de:	f007 f927 	bl	8008c30 <HAL_UARTEx_DisableFifoMode>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019e8:	f7ff fa18 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	2000038c 	.word	0x2000038c
 80019f4:	40004800 	.word	0x40004800

080019f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0a0      	sub	sp, #128	; 0x80
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	2254      	movs	r2, #84	; 0x54
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f007 fa2d 	bl	8008e78 <memset>
  if(uartHandle->Instance==USART2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a41      	ldr	r2, [pc, #260]	; (8001b28 <HAL_UART_MspInit+0x130>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d13f      	bne.n	8001aa8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a30:	f107 0318 	add.w	r3, r7, #24
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 f92f 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a40:	f7ff f9ec 	bl	8000e1c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a44:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <HAL_UART_MspInit+0x134>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	4a38      	ldr	r2, [pc, #224]	; (8001b2c <HAL_UART_MspInit+0x134>)
 8001a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a50:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <HAL_UART_MspInit+0x134>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <HAL_UART_MspInit+0x134>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a60:	4a32      	ldr	r2, [pc, #200]	; (8001b2c <HAL_UART_MspInit+0x134>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a68:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <HAL_UART_MspInit+0x134>)
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a74:	230c      	movs	r3, #12
 8001a76:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a84:	2307      	movs	r3, #7
 8001a86:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a92:	f002 f929 	bl	8003ce8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2026      	movs	r0, #38	; 0x26
 8001a9c:	f001 fdca 	bl	8003634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aa0:	2026      	movs	r0, #38	; 0x26
 8001aa2:	f001 fde1 	bl	8003668 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001aa6:	e03b      	b.n	8001b20 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a20      	ldr	r2, [pc, #128]	; (8001b30 <HAL_UART_MspInit+0x138>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d136      	bne.n	8001b20 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 f8ea 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001aca:	f7ff f9a7 	bl	8000e1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_UART_MspInit+0x134>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <HAL_UART_MspInit+0x134>)
 8001ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_UART_MspInit+0x134>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_UART_MspInit+0x134>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <HAL_UART_MspInit+0x134>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_UART_MspInit+0x134>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001afe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b10:	2307      	movs	r3, #7
 8001b12:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <HAL_UART_MspInit+0x13c>)
 8001b1c:	f002 f8e4 	bl	8003ce8 <HAL_GPIO_Init>
}
 8001b20:	bf00      	nop
 8001b22:	3780      	adds	r7, #128	; 0x80
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40004400 	.word	0x40004400
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40004800 	.word	0x40004800
 8001b34:	48000800 	.word	0x48000800

08001b38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b3c:	480d      	ldr	r0, [pc, #52]	; (8001b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b3e:	490e      	ldr	r1, [pc, #56]	; (8001b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b40:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <LoopForever+0xe>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b44:	e002      	b.n	8001b4c <LoopCopyDataInit>

08001b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4a:	3304      	adds	r3, #4

08001b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b50:	d3f9      	bcc.n	8001b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b52:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b54:	4c0b      	ldr	r4, [pc, #44]	; (8001b84 <LoopForever+0x16>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b58:	e001      	b.n	8001b5e <LoopFillZerobss>

08001b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b5c:	3204      	adds	r2, #4

08001b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b60:	d3fb      	bcc.n	8001b5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b62:	f7ff fcaf 	bl	80014c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b66:	f007 f9a7 	bl	8008eb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b6a:	f7ff f893 	bl	8000c94 <main>

08001b6e <LoopForever>:

LoopForever:
    b LoopForever
 8001b6e:	e7fe      	b.n	8001b6e <LoopForever>
  ldr   r0, =_estack
 8001b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001b7c:	08009ac8 	.word	0x08009ac8
  ldr r2, =_sbss
 8001b80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b84:	20000568 	.word	0x20000568

08001b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC1_2_IRQHandler>

08001b8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f001 fd42 	bl	800361e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f7ff fb9e 	bl	80012dc <HAL_InitTick>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	71fb      	strb	r3, [r7, #7]
 8001baa:	e001      	b.n	8001bb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bac:	f7ff fb72 	bl	8001294 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb0:	79fb      	ldrb	r3, [r7, #7]

}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_IncTick+0x1c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4413      	add	r3, r2
 8001bca:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <HAL_IncTick+0x1c>)
 8001bcc:	6013      	str	r3, [r2, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	2000041c 	.word	0x2000041c
 8001bdc:	2000000c 	.word	0x2000000c

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	2000041c 	.word	0x2000041c

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d004      	beq.n	8001c1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_Delay+0x40>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4413      	add	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1c:	bf00      	nop
 8001c1e:	f7ff ffdf 	bl	8001be0 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d8f7      	bhi.n	8001c1e <HAL_Delay+0x26>
  {
  }
}
 8001c2e:	bf00      	nop
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	2000000c 	.word	0x2000000c

08001c3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	609a      	str	r2, [r3, #8]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3360      	adds	r3, #96	; 0x60
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <LL_ADC_SetOffset+0x44>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	03fff000 	.word	0x03fff000

08001cec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3360      	adds	r3, #96	; 0x60
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3360      	adds	r3, #96	; 0x60
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d42:	bf00      	nop
 8001d44:	371c      	adds	r7, #28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b087      	sub	sp, #28
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3360      	adds	r3, #96	; 0x60
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3360      	adds	r3, #96	; 0x60
 8001d94:	461a      	mov	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001dae:	bf00      	nop
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	615a      	str	r2, [r3, #20]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b087      	sub	sp, #28
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3330      	adds	r3, #48	; 0x30
 8001e16:	461a      	mov	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	4413      	add	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	211f      	movs	r1, #31
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	401a      	ands	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	f003 011f 	and.w	r1, r3, #31
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e52:	bf00      	nop
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b087      	sub	sp, #28
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3314      	adds	r3, #20
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	0e5b      	lsrs	r3, r3, #25
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	4413      	add	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	0d1b      	lsrs	r3, r3, #20
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	2107      	movs	r1, #7
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	401a      	ands	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	0d1b      	lsrs	r3, r3, #20
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ea8:	bf00      	nop
 8001eaa:	371c      	adds	r7, #28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d10a      	bne.n	8001ede <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001edc:	e00a      	b.n	8001ef4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eea:	43db      	mvns	r3, r3
 8001eec:	401a      	ands	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	407f0000 	.word	0x407f0000

08001f04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 031f 	and.w	r3, r3, #31
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6093      	str	r3, [r2, #8]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f58:	d101      	bne.n	8001f5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fa8:	d101      	bne.n	8001fae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ff8:	f043 0202 	orr.w	r2, r3, #2
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <LL_ADC_IsEnabled+0x18>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <LL_ADC_IsEnabled+0x1a>
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d101      	bne.n	800204a <LL_ADC_IsDisableOngoing+0x18>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <LL_ADC_IsDisableOngoing+0x1a>
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800206c:	f043 0204 	orr.w	r2, r3, #4
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b04      	cmp	r3, #4
 8002092:	d101      	bne.n	8002098 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d101      	bne.n	80020be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e1af      	b.n	8002446 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7fe fb49 	bl	800078c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff19 	bl	8001f44 <LL_ADC_IsDeepPowerDownEnabled>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff feff 	bl	8001f20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff34 	bl	8001f94 <LL_ADC_IsInternalRegulatorEnabled>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d115      	bne.n	800215e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff18 	bl	8001f6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800213c:	4b9f      	ldr	r3, [pc, #636]	; (80023bc <HAL_ADC_Init+0x2f0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	099b      	lsrs	r3, r3, #6
 8002142:	4a9f      	ldr	r2, [pc, #636]	; (80023c0 <HAL_ADC_Init+0x2f4>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	099b      	lsrs	r3, r3, #6
 800214a:	3301      	adds	r3, #1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002150:	e002      	b.n	8002158 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3b01      	subs	r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f9      	bne.n	8002152 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff16 	bl	8001f94 <LL_ADC_IsInternalRegulatorEnabled>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10d      	bne.n	800218a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	f043 0210 	orr.w	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff76 	bl	8002080 <LL_ADC_REG_IsConversionOngoing>
 8002194:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 8148 	bne.w	8002434 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 8144 	bne.w	8002434 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021b4:	f043 0202 	orr.w	r2, r3, #2
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff23 	bl	800200c <LL_ADC_IsEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d141      	bne.n	8002250 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d4:	d004      	beq.n	80021e0 <HAL_ADC_Init+0x114>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a7a      	ldr	r2, [pc, #488]	; (80023c4 <HAL_ADC_Init+0x2f8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d10f      	bne.n	8002200 <HAL_ADC_Init+0x134>
 80021e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021e4:	f7ff ff12 	bl	800200c <LL_ADC_IsEnabled>
 80021e8:	4604      	mov	r4, r0
 80021ea:	4876      	ldr	r0, [pc, #472]	; (80023c4 <HAL_ADC_Init+0x2f8>)
 80021ec:	f7ff ff0e 	bl	800200c <LL_ADC_IsEnabled>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4323      	orrs	r3, r4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	e012      	b.n	8002226 <HAL_ADC_Init+0x15a>
 8002200:	4871      	ldr	r0, [pc, #452]	; (80023c8 <HAL_ADC_Init+0x2fc>)
 8002202:	f7ff ff03 	bl	800200c <LL_ADC_IsEnabled>
 8002206:	4604      	mov	r4, r0
 8002208:	4870      	ldr	r0, [pc, #448]	; (80023cc <HAL_ADC_Init+0x300>)
 800220a:	f7ff feff 	bl	800200c <LL_ADC_IsEnabled>
 800220e:	4603      	mov	r3, r0
 8002210:	431c      	orrs	r4, r3
 8002212:	486f      	ldr	r0, [pc, #444]	; (80023d0 <HAL_ADC_Init+0x304>)
 8002214:	f7ff fefa 	bl	800200c <LL_ADC_IsEnabled>
 8002218:	4603      	mov	r3, r0
 800221a:	4323      	orrs	r3, r4
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d012      	beq.n	8002250 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002232:	d004      	beq.n	800223e <HAL_ADC_Init+0x172>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a62      	ldr	r2, [pc, #392]	; (80023c4 <HAL_ADC_Init+0x2f8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Init+0x176>
 800223e:	4a65      	ldr	r2, [pc, #404]	; (80023d4 <HAL_ADC_Init+0x308>)
 8002240:	e000      	b.n	8002244 <HAL_ADC_Init+0x178>
 8002242:	4a65      	ldr	r2, [pc, #404]	; (80023d8 <HAL_ADC_Init+0x30c>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f7ff fcf6 	bl	8001c3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7f5b      	ldrb	r3, [r3, #29]
 8002254:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800225a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002260:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002266:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800226e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800227a:	2b01      	cmp	r3, #1
 800227c:	d106      	bne.n	800228c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	3b01      	subs	r3, #1
 8002284:	045b      	lsls	r3, r3, #17
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d009      	beq.n	80022a8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <HAL_ADC_Init+0x310>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	69b9      	ldr	r1, [r7, #24]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fed2 	bl	8002080 <LL_ADC_REG_IsConversionOngoing>
 80022dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fedf 	bl	80020a6 <LL_ADC_INJ_IsConversionOngoing>
 80022e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d17f      	bne.n	80023f0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d17c      	bne.n	80023f0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022fa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002302:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002312:	f023 0302 	bic.w	r3, r3, #2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	430b      	orrs	r3, r1
 800231e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d017      	beq.n	8002358 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002336:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002340:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002344:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6911      	ldr	r1, [r2, #16]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	430b      	orrs	r3, r1
 8002352:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002356:	e013      	b.n	8002380 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002366:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002378:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800237c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002386:	2b01      	cmp	r3, #1
 8002388:	d12a      	bne.n	80023e0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023a0:	4311      	orrs	r1, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023a6:	4311      	orrs	r1, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023ac:	430a      	orrs	r2, r1
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	611a      	str	r2, [r3, #16]
 80023ba:	e019      	b.n	80023f0 <HAL_ADC_Init+0x324>
 80023bc:	20000004 	.word	0x20000004
 80023c0:	053e2d63 	.word	0x053e2d63
 80023c4:	50000100 	.word	0x50000100
 80023c8:	50000400 	.word	0x50000400
 80023cc:	50000500 	.word	0x50000500
 80023d0:	50000600 	.word	0x50000600
 80023d4:	50000300 	.word	0x50000300
 80023d8:	50000700 	.word	0x50000700
 80023dc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d10c      	bne.n	8002412 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f023 010f 	bic.w	r1, r3, #15
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	1e5a      	subs	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
 8002410:	e007      	b.n	8002422 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 020f 	bic.w	r2, r2, #15
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	f023 0303 	bic.w	r3, r3, #3
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	; 0x5c
 8002432:	e007      	b.n	8002444 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	f043 0210 	orr.w	r2, r3, #16
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002444:	7ffb      	ldrb	r3, [r7, #31]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd90      	pop	{r4, r7, pc}
 800244e:	bf00      	nop

08002450 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002464:	d004      	beq.n	8002470 <HAL_ADC_Start_DMA+0x20>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a5a      	ldr	r2, [pc, #360]	; (80025d4 <HAL_ADC_Start_DMA+0x184>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_ADC_Start_DMA+0x24>
 8002470:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_ADC_Start_DMA+0x188>)
 8002472:	e000      	b.n	8002476 <HAL_ADC_Start_DMA+0x26>
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_ADC_Start_DMA+0x18c>)
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fd44 	bl	8001f04 <LL_ADC_GetMultimode>
 800247c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fdfc 	bl	8002080 <LL_ADC_REG_IsConversionOngoing>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 809b 	bne.w	80025c6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_ADC_Start_DMA+0x4e>
 800249a:	2302      	movs	r3, #2
 800249c:	e096      	b.n	80025cc <HAL_ADC_Start_DMA+0x17c>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a4d      	ldr	r2, [pc, #308]	; (80025e0 <HAL_ADC_Start_DMA+0x190>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d008      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d002      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b09      	cmp	r3, #9
 80024c0:	d17a      	bne.n	80025b8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fcec 	bl	8002ea0 <ADC_Enable>
 80024c8:	4603      	mov	r3, r0
 80024ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d16d      	bne.n	80025ae <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a3a      	ldr	r2, [pc, #232]	; (80025d4 <HAL_ADC_Start_DMA+0x184>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d009      	beq.n	8002504 <HAL_ADC_Start_DMA+0xb4>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3b      	ldr	r2, [pc, #236]	; (80025e4 <HAL_ADC_Start_DMA+0x194>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d002      	beq.n	8002500 <HAL_ADC_Start_DMA+0xb0>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	e003      	b.n	8002508 <HAL_ADC_Start_DMA+0xb8>
 8002500:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <HAL_ADC_Start_DMA+0x198>)
 8002502:	e001      	b.n	8002508 <HAL_ADC_Start_DMA+0xb8>
 8002504:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	4293      	cmp	r3, r2
 800250e:	d002      	beq.n	8002516 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002532:	f023 0206 	bic.w	r2, r3, #6
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	661a      	str	r2, [r3, #96]	; 0x60
 800253a:	e002      	b.n	8002542 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	4a29      	ldr	r2, [pc, #164]	; (80025ec <HAL_ADC_Start_DMA+0x19c>)
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <HAL_ADC_Start_DMA+0x1a0>)
 8002550:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <HAL_ADC_Start_DMA+0x1a4>)
 8002558:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	221c      	movs	r2, #28
 8002560:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0210 	orr.w	r2, r2, #16
 8002578:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3340      	adds	r3, #64	; 0x40
 8002594:	4619      	mov	r1, r3
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f001 f91b 	bl	80037d4 <HAL_DMA_Start_IT>
 800259e:	4603      	mov	r3, r0
 80025a0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fd56 	bl	8002058 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80025ac:	e00d      	b.n	80025ca <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80025b6:	e008      	b.n	80025ca <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80025c4:	e001      	b.n	80025ca <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
 80025c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	50000100 	.word	0x50000100
 80025d8:	50000300 	.word	0x50000300
 80025dc:	50000700 	.word	0x50000700
 80025e0:	50000600 	.word	0x50000600
 80025e4:	50000500 	.word	0x50000500
 80025e8:	50000400 	.word	0x50000400
 80025ec:	08003023 	.word	0x08003023
 80025f0:	080030fb 	.word	0x080030fb
 80025f4:	08003117 	.word	0x08003117

080025f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b0b6      	sub	sp, #216	; 0xd8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800263a:	2b01      	cmp	r3, #1
 800263c:	d102      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x24>
 800263e:	2302      	movs	r3, #2
 8002640:	f000 bc13 	b.w	8002e6a <HAL_ADC_ConfigChannel+0x84a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fd15 	bl	8002080 <LL_ADC_REG_IsConversionOngoing>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	f040 83f3 	bne.w	8002e44 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6859      	ldr	r1, [r3, #4]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	f7ff fbcb 	bl	8001e06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fd03 	bl	8002080 <LL_ADC_REG_IsConversionOngoing>
 800267a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fd0f 	bl	80020a6 <LL_ADC_INJ_IsConversionOngoing>
 8002688:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800268c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002690:	2b00      	cmp	r3, #0
 8002692:	f040 81d9 	bne.w	8002a48 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 81d4 	bne.w	8002a48 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026a8:	d10f      	bne.n	80026ca <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7ff fbd2 	bl	8001e5e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fb79 	bl	8001dba <LL_ADC_SetSamplingTimeCommonConfig>
 80026c8:	e00e      	b.n	80026e8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	461a      	mov	r2, r3
 80026d8:	f7ff fbc1 	bl	8001e5e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fb69 	bl	8001dba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	08db      	lsrs	r3, r3, #3
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b04      	cmp	r3, #4
 8002708:	d022      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6919      	ldr	r1, [r3, #16]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800271a:	f7ff fac3 	bl	8001ca4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6919      	ldr	r1, [r3, #16]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	461a      	mov	r2, r3
 800272c:	f7ff fb0f 	bl	8001d4e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6919      	ldr	r1, [r3, #16]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	7f1b      	ldrb	r3, [r3, #28]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d102      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x126>
 8002740:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002744:	e000      	b.n	8002748 <HAL_ADC_ConfigChannel+0x128>
 8002746:	2300      	movs	r3, #0
 8002748:	461a      	mov	r2, r3
 800274a:	f7ff fb1b 	bl	8001d84 <LL_ADC_SetOffsetSaturation>
 800274e:	e17b      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fac8 	bl	8001cec <LL_ADC_GetOffsetChannel>
 800275c:	4603      	mov	r3, r0
 800275e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10a      	bne.n	800277c <HAL_ADC_ConfigChannel+0x15c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fabd 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	0e9b      	lsrs	r3, r3, #26
 8002776:	f003 021f 	and.w	r2, r3, #31
 800277a:	e01e      	b.n	80027ba <HAL_ADC_ConfigChannel+0x19a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fab2 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800279a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800279e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e004      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80027ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d105      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x1b2>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0e9b      	lsrs	r3, r3, #26
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	e018      	b.n	8002804 <HAL_ADC_ConfigChannel+0x1e4>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e004      	b.n	8002804 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80027fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002804:	429a      	cmp	r2, r3
 8002806:	d106      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2200      	movs	r2, #0
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fa81 	bl	8001d18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fa65 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002822:	4603      	mov	r3, r0
 8002824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x222>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2101      	movs	r1, #1
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fa5a 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002838:	4603      	mov	r3, r0
 800283a:	0e9b      	lsrs	r3, r3, #26
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	e01e      	b.n	8002880 <HAL_ADC_ConfigChannel+0x260>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2101      	movs	r1, #1
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fa4f 	bl	8001cec <LL_ADC_GetOffsetChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002860:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002864:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002870:	2320      	movs	r3, #32
 8002872:	e004      	b.n	800287e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x278>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0e9b      	lsrs	r3, r3, #26
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	e018      	b.n	80028ca <HAL_ADC_ConfigChannel+0x2aa>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80028ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80028bc:	2320      	movs	r3, #32
 80028be:	e004      	b.n	80028ca <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80028c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d106      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2200      	movs	r2, #0
 80028d4:	2101      	movs	r1, #1
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fa1e 	bl	8001d18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2102      	movs	r1, #2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fa02 	bl	8001cec <LL_ADC_GetOffsetChannel>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x2e8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2102      	movs	r1, #2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff f9f7 	bl	8001cec <LL_ADC_GetOffsetChannel>
 80028fe:	4603      	mov	r3, r0
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	f003 021f 	and.w	r2, r3, #31
 8002906:	e01e      	b.n	8002946 <HAL_ADC_ConfigChannel+0x326>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2102      	movs	r1, #2
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f9ec 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002926:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800292a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800292e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002936:	2320      	movs	r3, #32
 8002938:	e004      	b.n	8002944 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800293a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294e:	2b00      	cmp	r3, #0
 8002950:	d105      	bne.n	800295e <HAL_ADC_ConfigChannel+0x33e>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	0e9b      	lsrs	r3, r3, #26
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	e016      	b.n	800298c <HAL_ADC_ConfigChannel+0x36c>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002970:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002972:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002976:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800297e:	2320      	movs	r3, #32
 8002980:	e004      	b.n	800298c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800298c:	429a      	cmp	r2, r3
 800298e:	d106      	bne.n	800299e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2200      	movs	r2, #0
 8002996:	2102      	movs	r1, #2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff f9bd 	bl	8001d18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2103      	movs	r1, #3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff f9a1 	bl	8001cec <LL_ADC_GetOffsetChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x3aa>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2103      	movs	r1, #3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff f996 	bl	8001cec <LL_ADC_GetOffsetChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	0e9b      	lsrs	r3, r3, #26
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	e017      	b.n	80029fa <HAL_ADC_ConfigChannel+0x3da>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2103      	movs	r1, #3
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff f98b 	bl	8001cec <LL_ADC_GetOffsetChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029e4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e003      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80029f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x3f2>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	0e9b      	lsrs	r3, r3, #26
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	e011      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x416>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	e003      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d106      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2103      	movs	r1, #3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f968 	bl	8001d18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fadd 	bl	800200c <LL_ADC_IsEnabled>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f040 813d 	bne.w	8002cd4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6819      	ldr	r1, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f7ff fa24 	bl	8001eb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4aa2      	ldr	r2, [pc, #648]	; (8002cfc <HAL_ADC_ConfigChannel+0x6dc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	f040 812e 	bne.w	8002cd4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x480>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	0e9b      	lsrs	r3, r3, #26
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	2b09      	cmp	r3, #9
 8002a96:	bf94      	ite	ls
 8002a98:	2301      	movls	r3, #1
 8002a9a:	2300      	movhi	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e019      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x4b4>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ab8:	2320      	movs	r3, #32
 8002aba:	e003      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2b09      	cmp	r3, #9
 8002acc:	bf94      	ite	ls
 8002ace:	2301      	movls	r3, #1
 8002ad0:	2300      	movhi	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d079      	beq.n	8002bcc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d107      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x4d4>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0e9b      	lsrs	r3, r3, #26
 8002aea:	3301      	adds	r3, #1
 8002aec:	069b      	lsls	r3, r3, #26
 8002aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af2:	e015      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x500>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b04:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	e003      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	069b      	lsls	r3, r3, #26
 8002b1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x520>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	0e9b      	lsrs	r3, r3, #26
 8002b32:	3301      	adds	r3, #1
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2101      	movs	r1, #1
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	e017      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x550>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e003      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	ea42 0103 	orr.w	r1, r2, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x576>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0e9b      	lsrs	r3, r3, #26
 8002b86:	3301      	adds	r3, #1
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	051b      	lsls	r3, r3, #20
 8002b94:	e018      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x5a8>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	e003      	b.n	8002bba <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	e07e      	b.n	8002cca <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x5c8>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	3301      	adds	r3, #1
 8002be0:	069b      	lsls	r3, r3, #26
 8002be2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be6:	e015      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x5f4>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	069b      	lsls	r3, r3, #26
 8002c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x614>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0e9b      	lsrs	r3, r3, #26
 8002c26:	3301      	adds	r3, #1
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	e017      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x644>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	61fb      	str	r3, [r7, #28]
  return result;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	e003      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	ea42 0103 	orr.w	r1, r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10d      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x670>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	3b1e      	subs	r3, #30
 8002c88:	051b      	lsls	r3, r3, #20
 8002c8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c8e:	e01b      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x6a8>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	613b      	str	r3, [r7, #16]
  return result;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002ca8:	2320      	movs	r3, #32
 8002caa:	e003      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f003 021f 	and.w	r2, r3, #31
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b1e      	subs	r3, #30
 8002cc2:	051b      	lsls	r3, r3, #20
 8002cc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	6892      	ldr	r2, [r2, #8]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f7ff f8c5 	bl	8001e5e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_ADC_ConfigChannel+0x6e0>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80be 	beq.w	8002e5e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cea:	d004      	beq.n	8002cf6 <HAL_ADC_ConfigChannel+0x6d6>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <HAL_ADC_ConfigChannel+0x6e4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d10a      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x6ec>
 8002cf6:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <HAL_ADC_ConfigChannel+0x6e8>)
 8002cf8:	e009      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x6ee>
 8002cfa:	bf00      	nop
 8002cfc:	407f0000 	.word	0x407f0000
 8002d00:	80080000 	.word	0x80080000
 8002d04:	50000100 	.word	0x50000100
 8002d08:	50000300 	.word	0x50000300
 8002d0c:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <HAL_ADC_ConfigChannel+0x854>)
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe ffba 	bl	8001c88 <LL_ADC_GetCommonPathInternalCh>
 8002d14:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a56      	ldr	r2, [pc, #344]	; (8002e78 <HAL_ADC_ConfigChannel+0x858>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_ADC_ConfigChannel+0x70c>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a55      	ldr	r2, [pc, #340]	; (8002e7c <HAL_ADC_ConfigChannel+0x85c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d13a      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d134      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d40:	d005      	beq.n	8002d4e <HAL_ADC_ConfigChannel+0x72e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a4e      	ldr	r2, [pc, #312]	; (8002e80 <HAL_ADC_ConfigChannel+0x860>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	f040 8085 	bne.w	8002e58 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d56:	d004      	beq.n	8002d62 <HAL_ADC_ConfigChannel+0x742>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a49      	ldr	r2, [pc, #292]	; (8002e84 <HAL_ADC_ConfigChannel+0x864>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x746>
 8002d62:	4a49      	ldr	r2, [pc, #292]	; (8002e88 <HAL_ADC_ConfigChannel+0x868>)
 8002d64:	e000      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x748>
 8002d66:	4a43      	ldr	r2, [pc, #268]	; (8002e74 <HAL_ADC_ConfigChannel+0x854>)
 8002d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d70:	4619      	mov	r1, r3
 8002d72:	4610      	mov	r0, r2
 8002d74:	f7fe ff75 	bl	8001c62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d78:	4b44      	ldr	r3, [pc, #272]	; (8002e8c <HAL_ADC_ConfigChannel+0x86c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	099b      	lsrs	r3, r3, #6
 8002d7e:	4a44      	ldr	r2, [pc, #272]	; (8002e90 <HAL_ADC_ConfigChannel+0x870>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d92:	e002      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f9      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da0:	e05a      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a3b      	ldr	r2, [pc, #236]	; (8002e94 <HAL_ADC_ConfigChannel+0x874>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d125      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x7d8>
 8002dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d11f      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a31      	ldr	r2, [pc, #196]	; (8002e84 <HAL_ADC_ConfigChannel+0x864>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d104      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x7ac>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a34      	ldr	r2, [pc, #208]	; (8002e98 <HAL_ADC_ConfigChannel+0x878>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d047      	beq.n	8002e5c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dd4:	d004      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x7c0>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2a      	ldr	r2, [pc, #168]	; (8002e84 <HAL_ADC_ConfigChannel+0x864>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d101      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x7c4>
 8002de0:	4a29      	ldr	r2, [pc, #164]	; (8002e88 <HAL_ADC_ConfigChannel+0x868>)
 8002de2:	e000      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x7c6>
 8002de4:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <HAL_ADC_ConfigChannel+0x854>)
 8002de6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dee:	4619      	mov	r1, r3
 8002df0:	4610      	mov	r0, r2
 8002df2:	f7fe ff36 	bl	8001c62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002df6:	e031      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a27      	ldr	r2, [pc, #156]	; (8002e9c <HAL_ADC_ConfigChannel+0x87c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d12d      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d127      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <HAL_ADC_ConfigChannel+0x864>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e20:	d004      	beq.n	8002e2c <HAL_ADC_ConfigChannel+0x80c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <HAL_ADC_ConfigChannel+0x864>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x810>
 8002e2c:	4a16      	ldr	r2, [pc, #88]	; (8002e88 <HAL_ADC_ConfigChannel+0x868>)
 8002e2e:	e000      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x812>
 8002e30:	4a10      	ldr	r2, [pc, #64]	; (8002e74 <HAL_ADC_ConfigChannel+0x854>)
 8002e32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	f7fe ff10 	bl	8001c62 <LL_ADC_SetCommonPathInternalCh>
 8002e42:	e00c      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	f043 0220 	orr.w	r2, r3, #32
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e56:	e002      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e58:	bf00      	nop
 8002e5a:	e000      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	37d8      	adds	r7, #216	; 0xd8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	50000700 	.word	0x50000700
 8002e78:	c3210000 	.word	0xc3210000
 8002e7c:	90c00010 	.word	0x90c00010
 8002e80:	50000600 	.word	0x50000600
 8002e84:	50000100 	.word	0x50000100
 8002e88:	50000300 	.word	0x50000300
 8002e8c:	20000004 	.word	0x20000004
 8002e90:	053e2d63 	.word	0x053e2d63
 8002e94:	c7520000 	.word	0xc7520000
 8002e98:	50000500 	.word	0x50000500
 8002e9c:	cb840000 	.word	0xcb840000

08002ea0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff f8ad 	bl	800200c <LL_ADC_IsEnabled>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d14d      	bne.n	8002f54 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <ADC_Enable+0xc0>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00d      	beq.n	8002ee2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eca:	f043 0210 	orr.w	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e039      	b.n	8002f56 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff f868 	bl	8001fbc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002eec:	f7fe fe78 	bl	8001be0 <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ef2:	e028      	b.n	8002f46 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff f887 	bl	800200c <LL_ADC_IsEnabled>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff f857 	bl	8001fbc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f0e:	f7fe fe67 	bl	8001be0 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d914      	bls.n	8002f46 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d00d      	beq.n	8002f46 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2e:	f043 0210 	orr.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e007      	b.n	8002f56 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d1cf      	bne.n	8002ef4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	8000003f 	.word	0x8000003f

08002f64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff f85e 	bl	8002032 <LL_ADC_IsDisableOngoing>
 8002f76:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff f845 	bl	800200c <LL_ADC_IsEnabled>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d047      	beq.n	8003018 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d144      	bne.n	8003018 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 030d 	and.w	r3, r3, #13
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d10c      	bne.n	8002fb6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff f81f 	bl	8001fe4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2203      	movs	r2, #3
 8002fac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fae:	f7fe fe17 	bl	8001be0 <HAL_GetTick>
 8002fb2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fb4:	e029      	b.n	800300a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	f043 0210 	orr.w	r2, r3, #16
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e023      	b.n	800301a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fd2:	f7fe fe05 	bl	8001be0 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d914      	bls.n	800300a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	f043 0210 	orr.w	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e007      	b.n	800301a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1dc      	bne.n	8002fd2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003038:	2b00      	cmp	r3, #0
 800303a:	d14b      	bne.n	80030d4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d021      	beq.n	800309a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe fec0 	bl	8001de0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d032      	beq.n	80030cc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d12b      	bne.n	80030cc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d11f      	bne.n	80030cc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	65da      	str	r2, [r3, #92]	; 0x5c
 8003098:	e018      	b.n	80030cc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d111      	bne.n	80030cc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7fd fe89 	bl	8000de4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030d2:	e00e      	b.n	80030f2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff fa93 	bl	800260c <HAL_ADC_ErrorCallback>
}
 80030e6:	e004      	b.n	80030f2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7ff fa75 	bl	80025f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003134:	f043 0204 	orr.w	r2, r3, #4
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff fa65 	bl	800260c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <LL_ADC_IsEnabled>:
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <LL_ADC_IsEnabled+0x18>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <LL_ADC_IsEnabled+0x1a>
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_ADC_StartCalibration>:
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003182:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800318c:	4313      	orrs	r3, r2
 800318e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	609a      	str	r2, [r3, #8]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <LL_ADC_IsCalibrationOnGoing>:
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031b6:	d101      	bne.n	80031bc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <LL_ADC_REG_IsConversionOngoing>:
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d101      	bne.n	80031e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_ADCEx_Calibration_Start+0x1c>
 8003208:	2302      	movs	r3, #2
 800320a:	e04d      	b.n	80032a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fea5 	bl	8002f64 <ADC_Disable>
 800321a:	4603      	mov	r3, r0
 800321c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d136      	bne.n	8003292 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800322c:	f023 0302 	bic.w	r3, r3, #2
 8003230:	f043 0202 	orr.w	r2, r3, #2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6839      	ldr	r1, [r7, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff ff96 	bl	8003170 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003244:	e014      	b.n	8003270 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	3301      	adds	r3, #1
 800324a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d90d      	bls.n	8003270 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	f023 0312 	bic.w	r3, r3, #18
 800325c:	f043 0210 	orr.w	r2, r3, #16
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e01b      	b.n	80032a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff94 	bl	80031a2 <LL_ADC_IsCalibrationOnGoing>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e2      	bne.n	8003246 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	f023 0303 	bic.w	r3, r3, #3
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003290:	e005      	b.n	800329e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003296:	f043 0210 	orr.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	0004de01 	.word	0x0004de01

080032b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b0a1      	sub	sp, #132	; 0x84
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e0e7      	b.n	80034a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80032da:	2300      	movs	r3, #0
 80032dc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80032de:	2300      	movs	r3, #0
 80032e0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ea:	d102      	bne.n	80032f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032ec:	4b6f      	ldr	r3, [pc, #444]	; (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	e009      	b.n	8003306 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a6e      	ldr	r2, [pc, #440]	; (80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d102      	bne.n	8003302 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80032fc:	4b6d      	ldr	r3, [pc, #436]	; (80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	e001      	b.n	8003306 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	f043 0220 	orr.w	r2, r3, #32
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0be      	b.n	80034a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff ff4f 	bl	80031ca <LL_ADC_REG_IsConversionOngoing>
 800332c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ff49 	bl	80031ca <LL_ADC_REG_IsConversionOngoing>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	f040 80a0 	bne.w	8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 809c 	bne.w	8003480 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003350:	d004      	beq.n	800335c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a55      	ldr	r2, [pc, #340]	; (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d101      	bne.n	8003360 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800335c:	4b56      	ldr	r3, [pc, #344]	; (80034b8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800335e:	e000      	b.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003360:	4b56      	ldr	r3, [pc, #344]	; (80034bc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003362:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d04b      	beq.n	8003404 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800336c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800337e:	035b      	lsls	r3, r3, #13
 8003380:	430b      	orrs	r3, r1
 8003382:	431a      	orrs	r2, r3
 8003384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003386:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003390:	d004      	beq.n	800339c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a45      	ldr	r2, [pc, #276]	; (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d10f      	bne.n	80033bc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800339c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80033a0:	f7ff fed3 	bl	800314a <LL_ADC_IsEnabled>
 80033a4:	4604      	mov	r4, r0
 80033a6:	4841      	ldr	r0, [pc, #260]	; (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033a8:	f7ff fecf 	bl	800314a <LL_ADC_IsEnabled>
 80033ac:	4603      	mov	r3, r0
 80033ae:	4323      	orrs	r3, r4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e012      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80033bc:	483c      	ldr	r0, [pc, #240]	; (80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033be:	f7ff fec4 	bl	800314a <LL_ADC_IsEnabled>
 80033c2:	4604      	mov	r4, r0
 80033c4:	483b      	ldr	r0, [pc, #236]	; (80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033c6:	f7ff fec0 	bl	800314a <LL_ADC_IsEnabled>
 80033ca:	4603      	mov	r3, r0
 80033cc:	431c      	orrs	r4, r3
 80033ce:	483c      	ldr	r0, [pc, #240]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033d0:	f7ff febb 	bl	800314a <LL_ADC_IsEnabled>
 80033d4:	4603      	mov	r3, r0
 80033d6:	4323      	orrs	r3, r4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d056      	beq.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033ee:	f023 030f 	bic.w	r3, r3, #15
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	6811      	ldr	r1, [r2, #0]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	6892      	ldr	r2, [r2, #8]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	431a      	orrs	r2, r3
 80033fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003400:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003402:	e047      	b.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800340c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800340e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003418:	d004      	beq.n	8003424 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a23      	ldr	r2, [pc, #140]	; (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d10f      	bne.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003424:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003428:	f7ff fe8f 	bl	800314a <LL_ADC_IsEnabled>
 800342c:	4604      	mov	r4, r0
 800342e:	481f      	ldr	r0, [pc, #124]	; (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003430:	f7ff fe8b 	bl	800314a <LL_ADC_IsEnabled>
 8003434:	4603      	mov	r3, r0
 8003436:	4323      	orrs	r3, r4
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e012      	b.n	800346a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003444:	481a      	ldr	r0, [pc, #104]	; (80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003446:	f7ff fe80 	bl	800314a <LL_ADC_IsEnabled>
 800344a:	4604      	mov	r4, r0
 800344c:	4819      	ldr	r0, [pc, #100]	; (80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800344e:	f7ff fe7c 	bl	800314a <LL_ADC_IsEnabled>
 8003452:	4603      	mov	r3, r0
 8003454:	431c      	orrs	r4, r3
 8003456:	481a      	ldr	r0, [pc, #104]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003458:	f7ff fe77 	bl	800314a <LL_ADC_IsEnabled>
 800345c:	4603      	mov	r3, r0
 800345e:	4323      	orrs	r3, r4
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d012      	beq.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800346e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003476:	f023 030f 	bic.w	r3, r3, #15
 800347a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800347c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800347e:	e009      	b.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003492:	e000      	b.n	8003496 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003494:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800349e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3784      	adds	r7, #132	; 0x84
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd90      	pop	{r4, r7, pc}
 80034aa:	bf00      	nop
 80034ac:	50000100 	.word	0x50000100
 80034b0:	50000400 	.word	0x50000400
 80034b4:	50000500 	.word	0x50000500
 80034b8:	50000300 	.word	0x50000300
 80034bc:	50000700 	.word	0x50000700
 80034c0:	50000600 	.word	0x50000600

080034c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <__NVIC_SetPriorityGrouping+0x44>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034e0:	4013      	ands	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034f6:	4a04      	ldr	r2, [pc, #16]	; (8003508 <__NVIC_SetPriorityGrouping+0x44>)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	60d3      	str	r3, [r2, #12]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <__NVIC_GetPriorityGrouping+0x18>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	f003 0307 	and.w	r3, r3, #7
}
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003536:	2b00      	cmp	r3, #0
 8003538:	db0b      	blt.n	8003552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	f003 021f 	and.w	r2, r3, #31
 8003540:	4907      	ldr	r1, [pc, #28]	; (8003560 <__NVIC_EnableIRQ+0x38>)
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	2001      	movs	r0, #1
 800354a:	fa00 f202 	lsl.w	r2, r0, r2
 800354e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	e000e100 	.word	0xe000e100

08003564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	6039      	str	r1, [r7, #0]
 800356e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003574:	2b00      	cmp	r3, #0
 8003576:	db0a      	blt.n	800358e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	490c      	ldr	r1, [pc, #48]	; (80035b0 <__NVIC_SetPriority+0x4c>)
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	0112      	lsls	r2, r2, #4
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	440b      	add	r3, r1
 8003588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800358c:	e00a      	b.n	80035a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4908      	ldr	r1, [pc, #32]	; (80035b4 <__NVIC_SetPriority+0x50>)
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	3b04      	subs	r3, #4
 800359c:	0112      	lsls	r2, r2, #4
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	440b      	add	r3, r1
 80035a2:	761a      	strb	r2, [r3, #24]
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000e100 	.word	0xe000e100
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b089      	sub	sp, #36	; 0x24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f1c3 0307 	rsb	r3, r3, #7
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	bf28      	it	cs
 80035d6:	2304      	movcs	r3, #4
 80035d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3304      	adds	r3, #4
 80035de:	2b06      	cmp	r3, #6
 80035e0:	d902      	bls.n	80035e8 <NVIC_EncodePriority+0x30>
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	3b03      	subs	r3, #3
 80035e6:	e000      	b.n	80035ea <NVIC_EncodePriority+0x32>
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ec:	f04f 32ff 	mov.w	r2, #4294967295
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43da      	mvns	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	401a      	ands	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003600:	f04f 31ff 	mov.w	r1, #4294967295
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	43d9      	mvns	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003610:	4313      	orrs	r3, r2
         );
}
 8003612:	4618      	mov	r0, r3
 8003614:	3724      	adds	r7, #36	; 0x24
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff4c 	bl	80034c4 <__NVIC_SetPriorityGrouping>
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003642:	f7ff ff63 	bl	800350c <__NVIC_GetPriorityGrouping>
 8003646:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	6978      	ldr	r0, [r7, #20]
 800364e:	f7ff ffb3 	bl	80035b8 <NVIC_EncodePriority>
 8003652:	4602      	mov	r2, r0
 8003654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003658:	4611      	mov	r1, r2
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ff82 	bl	8003564 <__NVIC_SetPriority>
}
 8003660:	bf00      	nop
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff ff56 	bl	8003528 <__NVIC_EnableIRQ>
}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e08d      	b.n	80037b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_DMA_Init+0x138>)
 800369e:	429a      	cmp	r2, r3
 80036a0:	d80f      	bhi.n	80036c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	4b45      	ldr	r3, [pc, #276]	; (80037c0 <HAL_DMA_Init+0x13c>)
 80036aa:	4413      	add	r3, r2
 80036ac:	4a45      	ldr	r2, [pc, #276]	; (80037c4 <HAL_DMA_Init+0x140>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	009a      	lsls	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a42      	ldr	r2, [pc, #264]	; (80037c8 <HAL_DMA_Init+0x144>)
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
 80036c0:	e00e      	b.n	80036e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	4b40      	ldr	r3, [pc, #256]	; (80037cc <HAL_DMA_Init+0x148>)
 80036ca:	4413      	add	r3, r2
 80036cc:	4a3d      	ldr	r2, [pc, #244]	; (80037c4 <HAL_DMA_Init+0x140>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	009a      	lsls	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a3c      	ldr	r2, [pc, #240]	; (80037d0 <HAL_DMA_Init+0x14c>)
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003704:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003710:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fa76 	bl	8003c24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003740:	d102      	bne.n	8003748 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800375c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d010      	beq.n	8003788 <HAL_DMA_Init+0x104>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b04      	cmp	r3, #4
 800376c:	d80c      	bhi.n	8003788 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa96 	bl	8003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	e008      	b.n	800379a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40020407 	.word	0x40020407
 80037c0:	bffdfff8 	.word	0xbffdfff8
 80037c4:	cccccccd 	.word	0xcccccccd
 80037c8:	40020000 	.word	0x40020000
 80037cc:	bffdfbf8 	.word	0xbffdfbf8
 80037d0:	40020400 	.word	0x40020400

080037d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_DMA_Start_IT+0x20>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e066      	b.n	80038c2 <HAL_DMA_Start_IT+0xee>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d155      	bne.n	80038b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f9bb 	bl	8003ba8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 020e 	orr.w	r2, r2, #14
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e00f      	b.n	800386c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0204 	bic.w	r2, r2, #4
 800385a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 020a 	orr.w	r2, r2, #10
 800386a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003888:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	e005      	b.n	80038c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
 80038be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d005      	beq.n	80038ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2204      	movs	r2, #4
 80038e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	e037      	b.n	800395e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 020e 	bic.w	r2, r2, #14
 80038fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003908:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800390c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f003 021f 	and.w	r2, r3, #31
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2101      	movs	r1, #1
 800392c:	fa01 f202 	lsl.w	r2, r1, r2
 8003930:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800393a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00c      	beq.n	800395e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003952:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800395c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d00d      	beq.n	80039b0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2204      	movs	r2, #4
 8003998:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
 80039ae:	e047      	b.n	8003a40 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 020e 	bic.w	r2, r2, #14
 80039be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	f003 021f 	and.w	r2, r3, #31
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	2101      	movs	r1, #1
 80039ee:	fa01 f202 	lsl.w	r2, r1, r2
 80039f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00c      	beq.n	8003a20 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
    }
  }
  return status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d026      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x7a>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d021      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d107      	bne.n	8003a9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0204 	bic.w	r2, r2, #4
 8003a9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f003 021f 	and.w	r2, r3, #31
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2104      	movs	r1, #4
 8003aac:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d071      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ac2:	e06c      	b.n	8003b9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	2202      	movs	r2, #2
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d02e      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d029      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 020a 	bic.w	r2, r2, #10
 8003afe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f003 021f 	and.w	r2, r3, #31
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	2102      	movs	r1, #2
 8003b16:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d038      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b34:	e033      	b.n	8003b9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	2208      	movs	r2, #8
 8003b40:	409a      	lsls	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d02a      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d025      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 020e 	bic.w	r2, r2, #14
 8003b62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	f003 021f 	and.w	r2, r3, #31
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f202 	lsl.w	r2, r1, r2
 8003b76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
}
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bbe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bd0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	f003 021f 	and.w	r2, r3, #31
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	2101      	movs	r1, #1
 8003be0:	fa01 f202 	lsl.w	r2, r1, r2
 8003be4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d108      	bne.n	8003c08 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c06:	e007      	b.n	8003c18 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d802      	bhi.n	8003c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	e001      	b.n	8003c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c40:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	3b08      	subs	r3, #8
 8003c4e:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	009a      	lsls	r2, r3, #2
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4413      	add	r3, r2
 8003c64:	461a      	mov	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a0b      	ldr	r2, [pc, #44]	; (8003c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	2201      	movs	r2, #1
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40020407 	.word	0x40020407
 8003c90:	40020800 	.word	0x40020800
 8003c94:	40020820 	.word	0x40020820
 8003c98:	cccccccd 	.word	0xcccccccd
 8003c9c:	40020880 	.word	0x40020880

08003ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	461a      	mov	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003cc2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	2201      	movs	r2, #1
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	1000823f 	.word	0x1000823f
 8003ce4:	40020940 	.word	0x40020940

08003ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cf6:	e15a      	b.n	8003fae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	fa01 f303 	lsl.w	r3, r1, r3
 8003d04:	4013      	ands	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 814c 	beq.w	8003fa8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d005      	beq.n	8003d28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d130      	bne.n	8003d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	2203      	movs	r2, #3
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d5e:	2201      	movs	r2, #1
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	091b      	lsrs	r3, r3, #4
 8003d74:	f003 0201 	and.w	r2, r3, #1
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d017      	beq.n	8003dc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	2203      	movs	r2, #3
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43db      	mvns	r3, r3
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4013      	ands	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d123      	bne.n	8003e1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	08da      	lsrs	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3208      	adds	r2, #8
 8003dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	220f      	movs	r2, #15
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	08da      	lsrs	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3208      	adds	r2, #8
 8003e14:	6939      	ldr	r1, [r7, #16]
 8003e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	2203      	movs	r2, #3
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 0203 	and.w	r2, r3, #3
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80a6 	beq.w	8003fa8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5c:	4b5b      	ldr	r3, [pc, #364]	; (8003fcc <HAL_GPIO_Init+0x2e4>)
 8003e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e60:	4a5a      	ldr	r2, [pc, #360]	; (8003fcc <HAL_GPIO_Init+0x2e4>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	6613      	str	r3, [r2, #96]	; 0x60
 8003e68:	4b58      	ldr	r3, [pc, #352]	; (8003fcc <HAL_GPIO_Init+0x2e4>)
 8003e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e74:	4a56      	ldr	r2, [pc, #344]	; (8003fd0 <HAL_GPIO_Init+0x2e8>)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	220f      	movs	r2, #15
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e9e:	d01f      	beq.n	8003ee0 <HAL_GPIO_Init+0x1f8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a4c      	ldr	r2, [pc, #304]	; (8003fd4 <HAL_GPIO_Init+0x2ec>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d019      	beq.n	8003edc <HAL_GPIO_Init+0x1f4>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a4b      	ldr	r2, [pc, #300]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d013      	beq.n	8003ed8 <HAL_GPIO_Init+0x1f0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a4a      	ldr	r2, [pc, #296]	; (8003fdc <HAL_GPIO_Init+0x2f4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00d      	beq.n	8003ed4 <HAL_GPIO_Init+0x1ec>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a49      	ldr	r2, [pc, #292]	; (8003fe0 <HAL_GPIO_Init+0x2f8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <HAL_GPIO_Init+0x1e8>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a48      	ldr	r2, [pc, #288]	; (8003fe4 <HAL_GPIO_Init+0x2fc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d101      	bne.n	8003ecc <HAL_GPIO_Init+0x1e4>
 8003ec8:	2305      	movs	r3, #5
 8003eca:	e00a      	b.n	8003ee2 <HAL_GPIO_Init+0x1fa>
 8003ecc:	2306      	movs	r3, #6
 8003ece:	e008      	b.n	8003ee2 <HAL_GPIO_Init+0x1fa>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	e006      	b.n	8003ee2 <HAL_GPIO_Init+0x1fa>
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e004      	b.n	8003ee2 <HAL_GPIO_Init+0x1fa>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e002      	b.n	8003ee2 <HAL_GPIO_Init+0x1fa>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <HAL_GPIO_Init+0x1fa>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	f002 0203 	and.w	r2, r2, #3
 8003ee8:	0092      	lsls	r2, r2, #2
 8003eea:	4093      	lsls	r3, r2
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ef2:	4937      	ldr	r1, [pc, #220]	; (8003fd0 <HAL_GPIO_Init+0x2e8>)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	089b      	lsrs	r3, r3, #2
 8003ef8:	3302      	adds	r3, #2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f00:	4b39      	ldr	r3, [pc, #228]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f24:	4a30      	ldr	r2, [pc, #192]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f2a:	4b2f      	ldr	r3, [pc, #188]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	43db      	mvns	r3, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f4e:	4a26      	ldr	r2, [pc, #152]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f54:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f78:	4a1b      	ldr	r2, [pc, #108]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f7e:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	43db      	mvns	r3, r3
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fa2:	4a11      	ldr	r2, [pc, #68]	; (8003fe8 <HAL_GPIO_Init+0x300>)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	3301      	adds	r3, #1
 8003fac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f47f ae9d 	bne.w	8003cf8 <HAL_GPIO_Init+0x10>
  }
}
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	48000400 	.word	0x48000400
 8003fd8:	48000800 	.word	0x48000800
 8003fdc:	48000c00 	.word	0x48000c00
 8003fe0:	48001000 	.word	0x48001000
 8003fe4:	48001400 	.word	0x48001400
 8003fe8:	40010400 	.word	0x40010400

08003fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ffc:	787b      	ldrb	r3, [r7, #1]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004002:	887a      	ldrh	r2, [r7, #2]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004008:	e002      	b.n	8004010 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004026:	4b08      	ldr	r3, [pc, #32]	; (8004048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	4013      	ands	r3, r2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d006      	beq.n	8004040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004032:	4a05      	ldr	r2, [pc, #20]	; (8004048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f806 	bl	800404c <HAL_GPIO_EXTI_Callback>
  }
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40010400 	.word	0x40010400

0800404c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d141      	bne.n	80040f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004072:	4b4b      	ldr	r3, [pc, #300]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800407a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407e:	d131      	bne.n	80040e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004080:	4b47      	ldr	r3, [pc, #284]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004086:	4a46      	ldr	r2, [pc, #280]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004090:	4b43      	ldr	r3, [pc, #268]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004098:	4a41      	ldr	r2, [pc, #260]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800409e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040a0:	4b40      	ldr	r3, [pc, #256]	; (80041a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2232      	movs	r2, #50	; 0x32
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	4a3f      	ldr	r2, [pc, #252]	; (80041a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	0c9b      	lsrs	r3, r3, #18
 80040b2:	3301      	adds	r3, #1
 80040b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040b6:	e002      	b.n	80040be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040be:	4b38      	ldr	r3, [pc, #224]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ca:	d102      	bne.n	80040d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f2      	bne.n	80040b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040d2:	4b33      	ldr	r3, [pc, #204]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040de:	d158      	bne.n	8004192 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e057      	b.n	8004194 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040e4:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ea:	4a2d      	ldr	r2, [pc, #180]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040f4:	e04d      	b.n	8004192 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040fc:	d141      	bne.n	8004182 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040fe:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410a:	d131      	bne.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800410c:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004112:	4a23      	ldr	r2, [pc, #140]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004118:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004124:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800412a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800412c:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2232      	movs	r2, #50	; 0x32
 8004132:	fb02 f303 	mul.w	r3, r2, r3
 8004136:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	0c9b      	lsrs	r3, r3, #18
 800413e:	3301      	adds	r3, #1
 8004140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004142:	e002      	b.n	800414a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3b01      	subs	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004156:	d102      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f2      	bne.n	8004144 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416a:	d112      	bne.n	8004192 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e011      	b.n	8004194 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004176:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004180:	e007      	b.n	8004192 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800418a:	4a05      	ldr	r2, [pc, #20]	; (80041a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004190:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40007000 	.word	0x40007000
 80041a4:	20000004 	.word	0x20000004
 80041a8:	431bde83 	.word	0x431bde83

080041ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041ba:	6093      	str	r3, [r2, #8]
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40007000 	.word	0x40007000

080041cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e306      	b.n	80047ec <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d075      	beq.n	80042d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ea:	4b97      	ldr	r3, [pc, #604]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041f4:	4b94      	ldr	r3, [pc, #592]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b0c      	cmp	r3, #12
 8004202:	d102      	bne.n	800420a <HAL_RCC_OscConfig+0x3e>
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2b03      	cmp	r3, #3
 8004208:	d002      	beq.n	8004210 <HAL_RCC_OscConfig+0x44>
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b08      	cmp	r3, #8
 800420e:	d10b      	bne.n	8004228 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	4b8d      	ldr	r3, [pc, #564]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d05b      	beq.n	80042d4 <HAL_RCC_OscConfig+0x108>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d157      	bne.n	80042d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e2e1      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004230:	d106      	bne.n	8004240 <HAL_RCC_OscConfig+0x74>
 8004232:	4b85      	ldr	r3, [pc, #532]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a84      	ldr	r2, [pc, #528]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e01d      	b.n	800427c <HAL_RCC_OscConfig+0xb0>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x98>
 800424a:	4b7f      	ldr	r3, [pc, #508]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a7e      	ldr	r2, [pc, #504]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b7c      	ldr	r3, [pc, #496]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a7b      	ldr	r2, [pc, #492]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0xb0>
 8004264:	4b78      	ldr	r3, [pc, #480]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a77      	ldr	r2, [pc, #476]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b75      	ldr	r3, [pc, #468]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a74      	ldr	r2, [pc, #464]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fd fcac 	bl	8001be0 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800428c:	f7fd fca8 	bl	8001be0 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e2a6      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800429e:	4b6a      	ldr	r3, [pc, #424]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0xc0>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd fc98 	bl	8001be0 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fd fc94 	bl	8001be0 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	; 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e292      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042c6:	4b60      	ldr	r3, [pc, #384]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0xe8>
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d075      	beq.n	80043ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042e2:	4b59      	ldr	r3, [pc, #356]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ec:	4b56      	ldr	r3, [pc, #344]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b0c      	cmp	r3, #12
 80042fa:	d102      	bne.n	8004302 <HAL_RCC_OscConfig+0x136>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d002      	beq.n	8004308 <HAL_RCC_OscConfig+0x13c>
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d11f      	bne.n	8004348 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004308:	4b4f      	ldr	r3, [pc, #316]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_OscConfig+0x154>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e265      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	4b49      	ldr	r3, [pc, #292]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	061b      	lsls	r3, r3, #24
 800432e:	4946      	ldr	r1, [pc, #280]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004334:	4b45      	ldr	r3, [pc, #276]	; (800444c <HAL_RCC_OscConfig+0x280>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7fc ffcf 	bl	80012dc <HAL_InitTick>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d043      	beq.n	80043cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e251      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d023      	beq.n	8004398 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004350:	4b3d      	ldr	r3, [pc, #244]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a3c      	ldr	r2, [pc, #240]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435c:	f7fd fc40 	bl	8001be0 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004364:	f7fd fc3c 	bl	8001be0 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e23a      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004376:	4b34      	ldr	r3, [pc, #208]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004382:	4b31      	ldr	r3, [pc, #196]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	061b      	lsls	r3, r3, #24
 8004390:	492d      	ldr	r1, [pc, #180]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	604b      	str	r3, [r1, #4]
 8004396:	e01a      	b.n	80043ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004398:	4b2b      	ldr	r3, [pc, #172]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a2a      	ldr	r2, [pc, #168]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 800439e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fd fc1c 	bl	8001be0 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ac:	f7fd fc18 	bl	8001be0 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e216      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043be:	4b22      	ldr	r3, [pc, #136]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x1e0>
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d041      	beq.n	800445e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01c      	beq.n	800441c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043e2:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 80043e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e8:	4a17      	ldr	r2, [pc, #92]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f2:	f7fd fbf5 	bl	8001be0 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043fa:	f7fd fbf1 	bl	8001be0 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e1ef      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 800440e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0ef      	beq.n	80043fa <HAL_RCC_OscConfig+0x22e>
 800441a:	e020      	b.n	800445e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 800441e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004422:	4a09      	ldr	r2, [pc, #36]	; (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442c:	f7fd fbd8 	bl	8001be0 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004432:	e00d      	b.n	8004450 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004434:	f7fd fbd4 	bl	8001be0 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d906      	bls.n	8004450 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e1d2      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
 8004446:	bf00      	nop
 8004448:	40021000 	.word	0x40021000
 800444c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004450:	4b8c      	ldr	r3, [pc, #560]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 8004452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1ea      	bne.n	8004434 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 80a6 	beq.w	80045b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446c:	2300      	movs	r3, #0
 800446e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004470:	4b84      	ldr	r3, [pc, #528]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_RCC_OscConfig+0x2b4>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_RCC_OscConfig+0x2b6>
 8004480:	2300      	movs	r3, #0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00d      	beq.n	80044a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004486:	4b7f      	ldr	r3, [pc, #508]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 8004488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448a:	4a7e      	ldr	r2, [pc, #504]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 800448c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004490:	6593      	str	r3, [r2, #88]	; 0x58
 8004492:	4b7c      	ldr	r3, [pc, #496]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800449e:	2301      	movs	r3, #1
 80044a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a2:	4b79      	ldr	r3, [pc, #484]	; (8004688 <HAL_RCC_OscConfig+0x4bc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d118      	bne.n	80044e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ae:	4b76      	ldr	r3, [pc, #472]	; (8004688 <HAL_RCC_OscConfig+0x4bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a75      	ldr	r2, [pc, #468]	; (8004688 <HAL_RCC_OscConfig+0x4bc>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ba:	f7fd fb91 	bl	8001be0 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fd fb8d 	bl	8001be0 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e18b      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d4:	4b6c      	ldr	r3, [pc, #432]	; (8004688 <HAL_RCC_OscConfig+0x4bc>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d108      	bne.n	80044fa <HAL_RCC_OscConfig+0x32e>
 80044e8:	4b66      	ldr	r3, [pc, #408]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	4a65      	ldr	r2, [pc, #404]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044f8:	e024      	b.n	8004544 <HAL_RCC_OscConfig+0x378>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b05      	cmp	r3, #5
 8004500:	d110      	bne.n	8004524 <HAL_RCC_OscConfig+0x358>
 8004502:	4b60      	ldr	r3, [pc, #384]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	4a5e      	ldr	r2, [pc, #376]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 800450a:	f043 0304 	orr.w	r3, r3, #4
 800450e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004512:	4b5c      	ldr	r3, [pc, #368]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	4a5a      	ldr	r2, [pc, #360]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004522:	e00f      	b.n	8004544 <HAL_RCC_OscConfig+0x378>
 8004524:	4b57      	ldr	r3, [pc, #348]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452a:	4a56      	ldr	r2, [pc, #344]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004534:	4b53      	ldr	r3, [pc, #332]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453a:	4a52      	ldr	r2, [pc, #328]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 800453c:	f023 0304 	bic.w	r3, r3, #4
 8004540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d016      	beq.n	800457a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454c:	f7fd fb48 	bl	8001be0 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004552:	e00a      	b.n	800456a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004554:	f7fd fb44 	bl	8001be0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e140      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800456a:	4b46      	ldr	r3, [pc, #280]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ed      	beq.n	8004554 <HAL_RCC_OscConfig+0x388>
 8004578:	e015      	b.n	80045a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457a:	f7fd fb31 	bl	8001be0 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004580:	e00a      	b.n	8004598 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004582:	f7fd fb2d 	bl	8001be0 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004590:	4293      	cmp	r3, r2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e129      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004598:	4b3a      	ldr	r3, [pc, #232]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 800459a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1ed      	bne.n	8004582 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045a6:	7ffb      	ldrb	r3, [r7, #31]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d105      	bne.n	80045b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ac:	4b35      	ldr	r3, [pc, #212]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 80045ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b0:	4a34      	ldr	r2, [pc, #208]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 80045b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d03c      	beq.n	800463e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01c      	beq.n	8004606 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045cc:	4b2d      	ldr	r3, [pc, #180]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 80045ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d2:	4a2c      	ldr	r2, [pc, #176]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7fd fb00 	bl	8001be0 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045e4:	f7fd fafc 	bl	8001be0 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e0fa      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045f6:	4b23      	ldr	r3, [pc, #140]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 80045f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ef      	beq.n	80045e4 <HAL_RCC_OscConfig+0x418>
 8004604:	e01b      	b.n	800463e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004606:	4b1f      	ldr	r3, [pc, #124]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 8004608:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800460c:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004616:	f7fd fae3 	bl	8001be0 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800461e:	f7fd fadf 	bl	8001be0 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0dd      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 8004632:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1ef      	bne.n	800461e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 80d1 	beq.w	80047ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004648:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 030c 	and.w	r3, r3, #12
 8004650:	2b0c      	cmp	r3, #12
 8004652:	f000 808b 	beq.w	800476c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d15e      	bne.n	800471c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a08      	ldr	r2, [pc, #32]	; (8004684 <HAL_RCC_OscConfig+0x4b8>)
 8004664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466a:	f7fd fab9 	bl	8001be0 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004670:	e00c      	b.n	800468c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004672:	f7fd fab5 	bl	8001be0 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d905      	bls.n	800468c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e0b3      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
 8004684:	40021000 	.word	0x40021000
 8004688:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800468c:	4b59      	ldr	r3, [pc, #356]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1ec      	bne.n	8004672 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004698:	4b56      	ldr	r3, [pc, #344]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	4b56      	ldr	r3, [pc, #344]	; (80047f8 <HAL_RCC_OscConfig+0x62c>)
 800469e:	4013      	ands	r3, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6a11      	ldr	r1, [r2, #32]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046a8:	3a01      	subs	r2, #1
 80046aa:	0112      	lsls	r2, r2, #4
 80046ac:	4311      	orrs	r1, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80046b2:	0212      	lsls	r2, r2, #8
 80046b4:	4311      	orrs	r1, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046ba:	0852      	lsrs	r2, r2, #1
 80046bc:	3a01      	subs	r2, #1
 80046be:	0552      	lsls	r2, r2, #21
 80046c0:	4311      	orrs	r1, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046c6:	0852      	lsrs	r2, r2, #1
 80046c8:	3a01      	subs	r2, #1
 80046ca:	0652      	lsls	r2, r2, #25
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046d2:	06d2      	lsls	r2, r2, #27
 80046d4:	430a      	orrs	r2, r1
 80046d6:	4947      	ldr	r1, [pc, #284]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046dc:	4b45      	ldr	r3, [pc, #276]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a44      	ldr	r2, [pc, #272]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 80046e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046e8:	4b42      	ldr	r3, [pc, #264]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	4a41      	ldr	r2, [pc, #260]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 80046ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fd fa74 	bl	8001be0 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fd fa70 	bl	8001be0 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e06e      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470e:	4b39      	ldr	r3, [pc, #228]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0x530>
 800471a:	e066      	b.n	80047ea <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471c:	4b35      	ldr	r3, [pc, #212]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a34      	ldr	r2, [pc, #208]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 8004722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004726:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004728:	4b32      	ldr	r3, [pc, #200]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4a31      	ldr	r2, [pc, #196]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 800472e:	f023 0303 	bic.w	r3, r3, #3
 8004732:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004734:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4a2e      	ldr	r2, [pc, #184]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 800473a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800473e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004742:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7fd fa4c 	bl	8001be0 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fd fa48 	bl	8001be0 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e046      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800475e:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x580>
 800476a:	e03e      	b.n	80047ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e039      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004778:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <HAL_RCC_OscConfig+0x628>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f003 0203 	and.w	r2, r3, #3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	429a      	cmp	r2, r3
 800478a:	d12c      	bne.n	80047e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	3b01      	subs	r3, #1
 8004798:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479a:	429a      	cmp	r2, r3
 800479c:	d123      	bne.n	80047e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d11b      	bne.n	80047e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d113      	bne.n	80047e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	3b01      	subs	r3, #1
 80047cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d109      	bne.n	80047e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	3b01      	subs	r3, #1
 80047e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d001      	beq.n	80047ea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3720      	adds	r7, #32
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40021000 	.word	0x40021000
 80047f8:	019f800c 	.word	0x019f800c

080047fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e11e      	b.n	8004a52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004814:	4b91      	ldr	r3, [pc, #580]	; (8004a5c <HAL_RCC_ClockConfig+0x260>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d910      	bls.n	8004844 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004822:	4b8e      	ldr	r3, [pc, #568]	; (8004a5c <HAL_RCC_ClockConfig+0x260>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 020f 	bic.w	r2, r3, #15
 800482a:	498c      	ldr	r1, [pc, #560]	; (8004a5c <HAL_RCC_ClockConfig+0x260>)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004832:	4b8a      	ldr	r3, [pc, #552]	; (8004a5c <HAL_RCC_ClockConfig+0x260>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e106      	b.n	8004a52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d073      	beq.n	8004938 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d129      	bne.n	80048ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004858:	4b81      	ldr	r3, [pc, #516]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0f4      	b.n	8004a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004868:	f000 f9d0 	bl	8004c0c <RCC_GetSysClockFreqFromPLLSource>
 800486c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4a7c      	ldr	r2, [pc, #496]	; (8004a64 <HAL_RCC_ClockConfig+0x268>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d93f      	bls.n	80048f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004876:	4b7a      	ldr	r3, [pc, #488]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800488a:	2b00      	cmp	r3, #0
 800488c:	d033      	beq.n	80048f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004892:	2b00      	cmp	r3, #0
 8004894:	d12f      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004896:	4b72      	ldr	r3, [pc, #456]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800489e:	4a70      	ldr	r2, [pc, #448]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 80048a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e024      	b.n	80048f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d107      	bne.n	80048c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048b4:	4b6a      	ldr	r3, [pc, #424]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0c6      	b.n	8004a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048c4:	4b66      	ldr	r3, [pc, #408]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0be      	b.n	8004a52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048d4:	f000 f8ce 	bl	8004a74 <HAL_RCC_GetSysClockFreq>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	4a61      	ldr	r2, [pc, #388]	; (8004a64 <HAL_RCC_ClockConfig+0x268>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d909      	bls.n	80048f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048e2:	4b5f      	ldr	r3, [pc, #380]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ea:	4a5d      	ldr	r2, [pc, #372]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 80048ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048f6:	4b5a      	ldr	r3, [pc, #360]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f023 0203 	bic.w	r2, r3, #3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4957      	ldr	r1, [pc, #348]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004904:	4313      	orrs	r3, r2
 8004906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004908:	f7fd f96a 	bl	8001be0 <HAL_GetTick>
 800490c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	e00a      	b.n	8004926 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004910:	f7fd f966 	bl	8001be0 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	; 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e095      	b.n	8004a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004926:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 020c 	and.w	r2, r3, #12
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	429a      	cmp	r2, r3
 8004936:	d1eb      	bne.n	8004910 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d023      	beq.n	800498c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004950:	4b43      	ldr	r3, [pc, #268]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4a42      	ldr	r2, [pc, #264]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004956:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800495a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004968:	4b3d      	ldr	r3, [pc, #244]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004970:	4a3b      	ldr	r2, [pc, #236]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004972:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004976:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004978:	4b39      	ldr	r3, [pc, #228]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4936      	ldr	r1, [pc, #216]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
 800498a:	e008      	b.n	800499e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b80      	cmp	r3, #128	; 0x80
 8004990:	d105      	bne.n	800499e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004992:	4b33      	ldr	r3, [pc, #204]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	4a32      	ldr	r2, [pc, #200]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004998:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800499c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800499e:	4b2f      	ldr	r3, [pc, #188]	; (8004a5c <HAL_RCC_ClockConfig+0x260>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d21d      	bcs.n	80049e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ac:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <HAL_RCC_ClockConfig+0x260>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f023 020f 	bic.w	r2, r3, #15
 80049b4:	4929      	ldr	r1, [pc, #164]	; (8004a5c <HAL_RCC_ClockConfig+0x260>)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049bc:	f7fd f910 	bl	8001be0 <HAL_GetTick>
 80049c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	e00a      	b.n	80049da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c4:	f7fd f90c 	bl	8001be0 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e03b      	b.n	8004a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049da:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <HAL_RCC_ClockConfig+0x260>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d1ed      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f4:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4917      	ldr	r1, [pc, #92]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a12:	4b13      	ldr	r3, [pc, #76]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	490f      	ldr	r1, [pc, #60]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a26:	f000 f825 	bl	8004a74 <HAL_RCC_GetSysClockFreq>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <HAL_RCC_ClockConfig+0x264>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	490c      	ldr	r1, [pc, #48]	; (8004a68 <HAL_RCC_ClockConfig+0x26c>)
 8004a38:	5ccb      	ldrb	r3, [r1, r3]
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a42:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <HAL_RCC_ClockConfig+0x270>)
 8004a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <HAL_RCC_ClockConfig+0x274>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fc fc46 	bl	80012dc <HAL_InitTick>
 8004a50:	4603      	mov	r3, r0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40022000 	.word	0x40022000
 8004a60:	40021000 	.word	0x40021000
 8004a64:	04c4b400 	.word	0x04c4b400
 8004a68:	08009a44 	.word	0x08009a44
 8004a6c:	20000004 	.word	0x20000004
 8004a70:	20000008 	.word	0x20000008

08004a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a7a:	4b2c      	ldr	r3, [pc, #176]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d102      	bne.n	8004a8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a86:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	e047      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a8c:	4b27      	ldr	r3, [pc, #156]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 030c 	and.w	r3, r3, #12
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d102      	bne.n	8004a9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a98:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	e03e      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a9e:	4b23      	ldr	r3, [pc, #140]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b0c      	cmp	r3, #12
 8004aa8:	d136      	bne.n	8004b18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aaa:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ab4:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	3301      	adds	r3, #1
 8004ac0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d10c      	bne.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ac8:	4a1a      	ldr	r2, [pc, #104]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	4a16      	ldr	r2, [pc, #88]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad2:	68d2      	ldr	r2, [r2, #12]
 8004ad4:	0a12      	lsrs	r2, r2, #8
 8004ad6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	617b      	str	r3, [r7, #20]
      break;
 8004ae0:	e00c      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ae2:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aea:	4a10      	ldr	r2, [pc, #64]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aec:	68d2      	ldr	r2, [r2, #12]
 8004aee:	0a12      	lsrs	r2, r2, #8
 8004af0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004af4:	fb02 f303 	mul.w	r3, r2, r3
 8004af8:	617b      	str	r3, [r7, #20]
      break;
 8004afa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004afc:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	0e5b      	lsrs	r3, r3, #25
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	3301      	adds	r3, #1
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	e001      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b1c:	693b      	ldr	r3, [r7, #16]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	00f42400 	.word	0x00f42400
 8004b34:	016e3600 	.word	0x016e3600

08004b38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b3c:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20000004 	.word	0x20000004

08004b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b54:	f7ff fff0 	bl	8004b38 <HAL_RCC_GetHCLKFreq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4904      	ldr	r1, [pc, #16]	; (8004b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000
 8004b78:	08009a54 	.word	0x08009a54

08004b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b80:	f7ff ffda 	bl	8004b38 <HAL_RCC_GetHCLKFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	0adb      	lsrs	r3, r3, #11
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4904      	ldr	r1, [pc, #16]	; (8004ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	08009a54 	.word	0x08009a54

08004ba8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	220f      	movs	r2, #15
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004bb8:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <HAL_RCC_GetClockConfig+0x5c>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0203 	and.w	r2, r3, #3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <HAL_RCC_GetClockConfig+0x5c>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <HAL_RCC_GetClockConfig+0x5c>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004bdc:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <HAL_RCC_GetClockConfig+0x5c>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	08db      	lsrs	r3, r3, #3
 8004be2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004bea:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <HAL_RCC_GetClockConfig+0x60>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 020f 	and.w	r2, r3, #15
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	601a      	str	r2, [r3, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40021000 	.word	0x40021000
 8004c08:	40022000 	.word	0x40022000

08004c0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c12:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	091b      	lsrs	r3, r3, #4
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d10c      	bne.n	8004c4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c30:	4a17      	ldr	r2, [pc, #92]	; (8004c90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c38:	4a14      	ldr	r2, [pc, #80]	; (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c3a:	68d2      	ldr	r2, [r2, #12]
 8004c3c:	0a12      	lsrs	r2, r2, #8
 8004c3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c42:	fb02 f303 	mul.w	r3, r2, r3
 8004c46:	617b      	str	r3, [r7, #20]
    break;
 8004c48:	e00c      	b.n	8004c64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c4a:	4a12      	ldr	r2, [pc, #72]	; (8004c94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c52:	4a0e      	ldr	r2, [pc, #56]	; (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c54:	68d2      	ldr	r2, [r2, #12]
 8004c56:	0a12      	lsrs	r2, r2, #8
 8004c58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c5c:	fb02 f303 	mul.w	r3, r2, r3
 8004c60:	617b      	str	r3, [r7, #20]
    break;
 8004c62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c64:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	0e5b      	lsrs	r3, r3, #25
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	3301      	adds	r3, #1
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c7e:	687b      	ldr	r3, [r7, #4]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	016e3600 	.word	0x016e3600
 8004c94:	00f42400 	.word	0x00f42400

08004c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8098 	beq.w	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cba:	4b43      	ldr	r3, [pc, #268]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10d      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc6:	4b40      	ldr	r3, [pc, #256]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cca:	4a3f      	ldr	r2, [pc, #252]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8004cd2:	4b3d      	ldr	r3, [pc, #244]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ce2:	4b3a      	ldr	r3, [pc, #232]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a39      	ldr	r2, [pc, #228]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cee:	f7fc ff77 	bl	8001be0 <HAL_GetTick>
 8004cf2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cf4:	e009      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf6:	f7fc ff73 	bl	8001be0 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d902      	bls.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	74fb      	strb	r3, [r7, #19]
        break;
 8004d08:	e005      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d0a:	4b30      	ldr	r3, [pc, #192]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0ef      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d16:	7cfb      	ldrb	r3, [r7, #19]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d159      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d1c:	4b2a      	ldr	r3, [pc, #168]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01e      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d019      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d38:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d44:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4a:	4a1f      	ldr	r2, [pc, #124]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d54:	4b1c      	ldr	r3, [pc, #112]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d64:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d76:	f7fc ff33 	bl	8001be0 <HAL_GetTick>
 8004d7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d7c:	e00b      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7e:	f7fc ff2f 	bl	8001be0 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d902      	bls.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	74fb      	strb	r3, [r7, #19]
            break;
 8004d94:	e006      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d96:	4b0c      	ldr	r3, [pc, #48]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0ec      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004daa:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db8:	4903      	ldr	r1, [pc, #12]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dc2:	7cfb      	ldrb	r3, [r7, #19]
 8004dc4:	74bb      	strb	r3, [r7, #18]
 8004dc6:	e005      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	7cfb      	ldrb	r3, [r7, #19]
 8004dd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd4:	7c7b      	ldrb	r3, [r7, #17]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d105      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dda:	4ba7      	ldr	r3, [pc, #668]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dde:	4aa6      	ldr	r2, [pc, #664]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004df2:	4ba1      	ldr	r3, [pc, #644]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df8:	f023 0203 	bic.w	r2, r3, #3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	499d      	ldr	r1, [pc, #628]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e14:	4b98      	ldr	r3, [pc, #608]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f023 020c 	bic.w	r2, r3, #12
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	4995      	ldr	r1, [pc, #596]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e36:	4b90      	ldr	r3, [pc, #576]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	498c      	ldr	r1, [pc, #560]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e58:	4b87      	ldr	r3, [pc, #540]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	4984      	ldr	r1, [pc, #528]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e7a:	4b7f      	ldr	r3, [pc, #508]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	497b      	ldr	r1, [pc, #492]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e9c:	4b76      	ldr	r3, [pc, #472]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	4973      	ldr	r1, [pc, #460]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ebe:	4b6e      	ldr	r3, [pc, #440]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	496a      	ldr	r1, [pc, #424]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ee0:	4b65      	ldr	r3, [pc, #404]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	4962      	ldr	r1, [pc, #392]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f02:	4b5d      	ldr	r3, [pc, #372]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	4959      	ldr	r1, [pc, #356]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f24:	4b54      	ldr	r3, [pc, #336]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f2a:	f023 0203 	bic.w	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f32:	4951      	ldr	r1, [pc, #324]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f46:	4b4c      	ldr	r3, [pc, #304]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	4948      	ldr	r1, [pc, #288]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d015      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f68:	4b43      	ldr	r3, [pc, #268]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	4940      	ldr	r1, [pc, #256]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f86:	d105      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f88:	4b3b      	ldr	r3, [pc, #236]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4a3a      	ldr	r2, [pc, #232]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d015      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fa0:	4b35      	ldr	r3, [pc, #212]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fae:	4932      	ldr	r1, [pc, #200]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fbe:	d105      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fc0:	4b2d      	ldr	r3, [pc, #180]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4a2c      	ldr	r2, [pc, #176]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d015      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fd8:	4b27      	ldr	r3, [pc, #156]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe6:	4924      	ldr	r1, [pc, #144]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ff6:	d105      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff8:	4b1f      	ldr	r3, [pc, #124]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4a1e      	ldr	r2, [pc, #120]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005002:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d015      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005010:	4b19      	ldr	r3, [pc, #100]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501e:	4916      	ldr	r1, [pc, #88]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800502e:	d105      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005030:	4b11      	ldr	r3, [pc, #68]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4a10      	ldr	r2, [pc, #64]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800503a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d019      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	4908      	ldr	r1, [pc, #32]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005066:	d109      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005068:	4b03      	ldr	r3, [pc, #12]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	4a02      	ldr	r2, [pc, #8]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005072:	60d3      	str	r3, [r2, #12]
 8005074:	e002      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005076:	bf00      	nop
 8005078:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d015      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005088:	4b29      	ldr	r3, [pc, #164]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	4926      	ldr	r1, [pc, #152]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050a6:	d105      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050a8:	4b21      	ldr	r3, [pc, #132]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	4a20      	ldr	r2, [pc, #128]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d015      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80050c0:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ce:	4918      	ldr	r1, [pc, #96]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050de:	d105      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050e0:	4b13      	ldr	r3, [pc, #76]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4a12      	ldr	r2, [pc, #72]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d015      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80050f8:	4b0d      	ldr	r3, [pc, #52]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005106:	490a      	ldr	r1, [pc, #40]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005116:	d105      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4a04      	ldr	r2, [pc, #16]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800511e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005122:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005124:	7cbb      	ldrb	r3, [r7, #18]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40021000 	.word	0x40021000

08005134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e049      	b.n	80051da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f841 	bl	80051e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3304      	adds	r3, #4
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f000 ff1e 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	d001      	beq.n	8005210 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e04c      	b.n	80052aa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <HAL_TIM_Base_Start+0xc0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d022      	beq.n	8005268 <HAL_TIM_Base_Start+0x70>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522a:	d01d      	beq.n	8005268 <HAL_TIM_Base_Start+0x70>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a22      	ldr	r2, [pc, #136]	; (80052bc <HAL_TIM_Base_Start+0xc4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d018      	beq.n	8005268 <HAL_TIM_Base_Start+0x70>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a21      	ldr	r2, [pc, #132]	; (80052c0 <HAL_TIM_Base_Start+0xc8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <HAL_TIM_Base_Start+0x70>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1f      	ldr	r2, [pc, #124]	; (80052c4 <HAL_TIM_Base_Start+0xcc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00e      	beq.n	8005268 <HAL_TIM_Base_Start+0x70>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1e      	ldr	r2, [pc, #120]	; (80052c8 <HAL_TIM_Base_Start+0xd0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d009      	beq.n	8005268 <HAL_TIM_Base_Start+0x70>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <HAL_TIM_Base_Start+0xd4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_TIM_Base_Start+0x70>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1b      	ldr	r2, [pc, #108]	; (80052d0 <HAL_TIM_Base_Start+0xd8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d115      	bne.n	8005294 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <HAL_TIM_Base_Start+0xdc>)
 8005270:	4013      	ands	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b06      	cmp	r3, #6
 8005278:	d015      	beq.n	80052a6 <HAL_TIM_Base_Start+0xae>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005280:	d011      	beq.n	80052a6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	e008      	b.n	80052a6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e000      	b.n	80052a8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	40013400 	.word	0x40013400
 80052cc:	40014000 	.word	0x40014000
 80052d0:	40015000 	.word	0x40015000
 80052d4:	00010007 	.word	0x00010007

080052d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d001      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e054      	b.n	800539a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a26      	ldr	r2, [pc, #152]	; (80053a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d022      	beq.n	8005358 <HAL_TIM_Base_Start_IT+0x80>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531a:	d01d      	beq.n	8005358 <HAL_TIM_Base_Start_IT+0x80>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a22      	ldr	r2, [pc, #136]	; (80053ac <HAL_TIM_Base_Start_IT+0xd4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d018      	beq.n	8005358 <HAL_TIM_Base_Start_IT+0x80>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a21      	ldr	r2, [pc, #132]	; (80053b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d013      	beq.n	8005358 <HAL_TIM_Base_Start_IT+0x80>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1f      	ldr	r2, [pc, #124]	; (80053b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00e      	beq.n	8005358 <HAL_TIM_Base_Start_IT+0x80>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1e      	ldr	r2, [pc, #120]	; (80053b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d009      	beq.n	8005358 <HAL_TIM_Base_Start_IT+0x80>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a1c      	ldr	r2, [pc, #112]	; (80053bc <HAL_TIM_Base_Start_IT+0xe4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d004      	beq.n	8005358 <HAL_TIM_Base_Start_IT+0x80>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1b      	ldr	r2, [pc, #108]	; (80053c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d115      	bne.n	8005384 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	4b19      	ldr	r3, [pc, #100]	; (80053c4 <HAL_TIM_Base_Start_IT+0xec>)
 8005360:	4013      	ands	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b06      	cmp	r3, #6
 8005368:	d015      	beq.n	8005396 <HAL_TIM_Base_Start_IT+0xbe>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005370:	d011      	beq.n	8005396 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0201 	orr.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005382:	e008      	b.n	8005396 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e000      	b.n	8005398 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005396:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800
 80053b4:	40000c00 	.word	0x40000c00
 80053b8:	40013400 	.word	0x40013400
 80053bc:	40014000 	.word	0x40014000
 80053c0:	40015000 	.word	0x40015000
 80053c4:	00010007 	.word	0x00010007

080053c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e049      	b.n	800546e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fc f980 	bl	80016f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3304      	adds	r3, #4
 8005404:	4619      	mov	r1, r3
 8005406:	4610      	mov	r0, r2
 8005408:	f000 fdd4 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d109      	bne.n	800549c <HAL_TIM_PWM_Start+0x24>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	bf14      	ite	ne
 8005494:	2301      	movne	r3, #1
 8005496:	2300      	moveq	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	e03c      	b.n	8005516 <HAL_TIM_PWM_Start+0x9e>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d109      	bne.n	80054b6 <HAL_TIM_PWM_Start+0x3e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	bf14      	ite	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	2300      	moveq	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	e02f      	b.n	8005516 <HAL_TIM_PWM_Start+0x9e>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d109      	bne.n	80054d0 <HAL_TIM_PWM_Start+0x58>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	e022      	b.n	8005516 <HAL_TIM_PWM_Start+0x9e>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b0c      	cmp	r3, #12
 80054d4:	d109      	bne.n	80054ea <HAL_TIM_PWM_Start+0x72>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b01      	cmp	r3, #1
 80054e0:	bf14      	ite	ne
 80054e2:	2301      	movne	r3, #1
 80054e4:	2300      	moveq	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	e015      	b.n	8005516 <HAL_TIM_PWM_Start+0x9e>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d109      	bne.n	8005504 <HAL_TIM_PWM_Start+0x8c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	e008      	b.n	8005516 <HAL_TIM_PWM_Start+0x9e>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b01      	cmp	r3, #1
 800550e:	bf14      	ite	ne
 8005510:	2301      	movne	r3, #1
 8005512:	2300      	moveq	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e0a6      	b.n	800566c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d104      	bne.n	800552e <HAL_TIM_PWM_Start+0xb6>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800552c:	e023      	b.n	8005576 <HAL_TIM_PWM_Start+0xfe>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b04      	cmp	r3, #4
 8005532:	d104      	bne.n	800553e <HAL_TIM_PWM_Start+0xc6>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800553c:	e01b      	b.n	8005576 <HAL_TIM_PWM_Start+0xfe>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b08      	cmp	r3, #8
 8005542:	d104      	bne.n	800554e <HAL_TIM_PWM_Start+0xd6>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800554c:	e013      	b.n	8005576 <HAL_TIM_PWM_Start+0xfe>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b0c      	cmp	r3, #12
 8005552:	d104      	bne.n	800555e <HAL_TIM_PWM_Start+0xe6>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800555c:	e00b      	b.n	8005576 <HAL_TIM_PWM_Start+0xfe>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b10      	cmp	r3, #16
 8005562:	d104      	bne.n	800556e <HAL_TIM_PWM_Start+0xf6>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800556c:	e003      	b.n	8005576 <HAL_TIM_PWM_Start+0xfe>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2202      	movs	r2, #2
 8005572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2201      	movs	r2, #1
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f001 f8ea 	bl	8006758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a3a      	ldr	r2, [pc, #232]	; (8005674 <HAL_TIM_PWM_Start+0x1fc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d018      	beq.n	80055c0 <HAL_TIM_PWM_Start+0x148>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a39      	ldr	r2, [pc, #228]	; (8005678 <HAL_TIM_PWM_Start+0x200>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d013      	beq.n	80055c0 <HAL_TIM_PWM_Start+0x148>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a37      	ldr	r2, [pc, #220]	; (800567c <HAL_TIM_PWM_Start+0x204>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00e      	beq.n	80055c0 <HAL_TIM_PWM_Start+0x148>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a36      	ldr	r2, [pc, #216]	; (8005680 <HAL_TIM_PWM_Start+0x208>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_TIM_PWM_Start+0x148>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a34      	ldr	r2, [pc, #208]	; (8005684 <HAL_TIM_PWM_Start+0x20c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <HAL_TIM_PWM_Start+0x148>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a33      	ldr	r2, [pc, #204]	; (8005688 <HAL_TIM_PWM_Start+0x210>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d101      	bne.n	80055c4 <HAL_TIM_PWM_Start+0x14c>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <HAL_TIM_PWM_Start+0x14e>
 80055c4:	2300      	movs	r3, #0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a25      	ldr	r2, [pc, #148]	; (8005674 <HAL_TIM_PWM_Start+0x1fc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d022      	beq.n	800562a <HAL_TIM_PWM_Start+0x1b2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ec:	d01d      	beq.n	800562a <HAL_TIM_PWM_Start+0x1b2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a26      	ldr	r2, [pc, #152]	; (800568c <HAL_TIM_PWM_Start+0x214>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d018      	beq.n	800562a <HAL_TIM_PWM_Start+0x1b2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a24      	ldr	r2, [pc, #144]	; (8005690 <HAL_TIM_PWM_Start+0x218>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <HAL_TIM_PWM_Start+0x1b2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a23      	ldr	r2, [pc, #140]	; (8005694 <HAL_TIM_PWM_Start+0x21c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_TIM_PWM_Start+0x1b2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a19      	ldr	r2, [pc, #100]	; (8005678 <HAL_TIM_PWM_Start+0x200>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_TIM_PWM_Start+0x1b2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a18      	ldr	r2, [pc, #96]	; (800567c <HAL_TIM_PWM_Start+0x204>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIM_PWM_Start+0x1b2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a18      	ldr	r2, [pc, #96]	; (8005688 <HAL_TIM_PWM_Start+0x210>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d115      	bne.n	8005656 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	4b19      	ldr	r3, [pc, #100]	; (8005698 <HAL_TIM_PWM_Start+0x220>)
 8005632:	4013      	ands	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b06      	cmp	r3, #6
 800563a:	d015      	beq.n	8005668 <HAL_TIM_PWM_Start+0x1f0>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005642:	d011      	beq.n	8005668 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005654:	e008      	b.n	8005668 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0201 	orr.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	e000      	b.n	800566a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005668:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40012c00 	.word	0x40012c00
 8005678:	40013400 	.word	0x40013400
 800567c:	40014000 	.word	0x40014000
 8005680:	40014400 	.word	0x40014400
 8005684:	40014800 	.word	0x40014800
 8005688:	40015000 	.word	0x40015000
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	40000c00 	.word	0x40000c00
 8005698:	00010007 	.word	0x00010007

0800569c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f001 f852 	bl	8006758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a40      	ldr	r2, [pc, #256]	; (80057bc <HAL_TIM_PWM_Stop+0x120>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d018      	beq.n	80056f0 <HAL_TIM_PWM_Stop+0x54>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a3f      	ldr	r2, [pc, #252]	; (80057c0 <HAL_TIM_PWM_Stop+0x124>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d013      	beq.n	80056f0 <HAL_TIM_PWM_Stop+0x54>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3d      	ldr	r2, [pc, #244]	; (80057c4 <HAL_TIM_PWM_Stop+0x128>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00e      	beq.n	80056f0 <HAL_TIM_PWM_Stop+0x54>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a3c      	ldr	r2, [pc, #240]	; (80057c8 <HAL_TIM_PWM_Stop+0x12c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d009      	beq.n	80056f0 <HAL_TIM_PWM_Stop+0x54>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a3a      	ldr	r2, [pc, #232]	; (80057cc <HAL_TIM_PWM_Stop+0x130>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_TIM_PWM_Stop+0x54>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a39      	ldr	r2, [pc, #228]	; (80057d0 <HAL_TIM_PWM_Stop+0x134>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d101      	bne.n	80056f4 <HAL_TIM_PWM_Stop+0x58>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <HAL_TIM_PWM_Stop+0x5a>
 80056f4:	2300      	movs	r3, #0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d017      	beq.n	800572a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6a1a      	ldr	r2, [r3, #32]
 8005700:	f241 1311 	movw	r3, #4369	; 0x1111
 8005704:	4013      	ands	r3, r2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10f      	bne.n	800572a <HAL_TIM_PWM_Stop+0x8e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	f244 4344 	movw	r3, #17476	; 0x4444
 8005714:	4013      	ands	r3, r2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d107      	bne.n	800572a <HAL_TIM_PWM_Stop+0x8e>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005728:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a1a      	ldr	r2, [r3, #32]
 8005730:	f241 1311 	movw	r3, #4369	; 0x1111
 8005734:	4013      	ands	r3, r2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10f      	bne.n	800575a <HAL_TIM_PWM_Stop+0xbe>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6a1a      	ldr	r2, [r3, #32]
 8005740:	f244 4344 	movw	r3, #17476	; 0x4444
 8005744:	4013      	ands	r3, r2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d107      	bne.n	800575a <HAL_TIM_PWM_Stop+0xbe>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0201 	bic.w	r2, r2, #1
 8005758:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d104      	bne.n	800576a <HAL_TIM_PWM_Stop+0xce>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005768:	e023      	b.n	80057b2 <HAL_TIM_PWM_Stop+0x116>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b04      	cmp	r3, #4
 800576e:	d104      	bne.n	800577a <HAL_TIM_PWM_Stop+0xde>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005778:	e01b      	b.n	80057b2 <HAL_TIM_PWM_Stop+0x116>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b08      	cmp	r3, #8
 800577e:	d104      	bne.n	800578a <HAL_TIM_PWM_Stop+0xee>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005788:	e013      	b.n	80057b2 <HAL_TIM_PWM_Stop+0x116>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b0c      	cmp	r3, #12
 800578e:	d104      	bne.n	800579a <HAL_TIM_PWM_Stop+0xfe>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005798:	e00b      	b.n	80057b2 <HAL_TIM_PWM_Stop+0x116>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b10      	cmp	r3, #16
 800579e:	d104      	bne.n	80057aa <HAL_TIM_PWM_Stop+0x10e>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057a8:	e003      	b.n	80057b2 <HAL_TIM_PWM_Stop+0x116>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40013400 	.word	0x40013400
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40014400 	.word	0x40014400
 80057cc:	40014800 	.word	0x40014800
 80057d0:	40015000 	.word	0x40015000

080057d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e097      	b.n	8005918 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7fb ff99 	bl	8001734 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005818:	f023 0307 	bic.w	r3, r3, #7
 800581c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3304      	adds	r3, #4
 8005826:	4619      	mov	r1, r3
 8005828:	4610      	mov	r0, r2
 800582a:	f000 fbc3 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005856:	f023 0303 	bic.w	r3, r3, #3
 800585a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	4313      	orrs	r3, r2
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005874:	f023 030c 	bic.w	r3, r3, #12
 8005878:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005880:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	4313      	orrs	r3, r2
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	011a      	lsls	r2, r3, #4
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	031b      	lsls	r3, r3, #12
 80058a4:	4313      	orrs	r3, r2
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80058b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	4313      	orrs	r3, r2
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005930:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005938:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005940:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005948:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d110      	bne.n	8005972 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d102      	bne.n	800595c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005956:	7b7b      	ldrb	r3, [r7, #13]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d001      	beq.n	8005960 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e069      	b.n	8005a34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005970:	e031      	b.n	80059d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b04      	cmp	r3, #4
 8005976:	d110      	bne.n	800599a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005978:	7bbb      	ldrb	r3, [r7, #14]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d102      	bne.n	8005984 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800597e:	7b3b      	ldrb	r3, [r7, #12]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d001      	beq.n	8005988 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e055      	b.n	8005a34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005998:	e01d      	b.n	80059d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d108      	bne.n	80059b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059a0:	7bbb      	ldrb	r3, [r7, #14]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d105      	bne.n	80059b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059a6:	7b7b      	ldrb	r3, [r7, #13]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d102      	bne.n	80059b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059ac:	7b3b      	ldrb	r3, [r7, #12]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d001      	beq.n	80059b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e03e      	b.n	8005a34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2202      	movs	r2, #2
 80059c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2202      	movs	r2, #2
 80059d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_TIM_Encoder_Start+0xc4>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d008      	beq.n	80059f4 <HAL_TIM_Encoder_Start+0xd4>
 80059e2:	e00f      	b.n	8005a04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2201      	movs	r2, #1
 80059ea:	2100      	movs	r1, #0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 feb3 	bl	8006758 <TIM_CCxChannelCmd>
      break;
 80059f2:	e016      	b.n	8005a22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2201      	movs	r2, #1
 80059fa:	2104      	movs	r1, #4
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 feab 	bl	8006758 <TIM_CCxChannelCmd>
      break;
 8005a02:	e00e      	b.n	8005a22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fea3 	bl	8006758 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2201      	movs	r2, #1
 8005a18:	2104      	movs	r1, #4
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fe9c 	bl	8006758 <TIM_CCxChannelCmd>
      break;
 8005a20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d122      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d11b      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0202 	mvn.w	r2, #2
 8005a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa7a 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005a84:	e005      	b.n	8005a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fa6c 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fa7d 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d122      	bne.n	8005aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d11b      	bne.n	8005aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0204 	mvn.w	r2, #4
 8005abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fa50 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa42 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fa53 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0208 	mvn.w	r2, #8
 8005b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2204      	movs	r2, #4
 8005b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fa26 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fa18 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fa29 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b10      	cmp	r3, #16
 8005b4c:	d122      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d11b      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0210 	mvn.w	r2, #16
 8005b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2208      	movs	r2, #8
 8005b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f9fc 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f9ee 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f9ff 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d10e      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d107      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0201 	mvn.w	r2, #1
 8005bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fb f91c 	bl	8000df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bca:	2b80      	cmp	r3, #128	; 0x80
 8005bcc:	d10e      	bne.n	8005bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd8:	2b80      	cmp	r3, #128	; 0x80
 8005bda:	d107      	bne.n	8005bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 f84e 	bl	8006c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfa:	d10e      	bne.n	8005c1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c06:	2b80      	cmp	r3, #128	; 0x80
 8005c08:	d107      	bne.n	8005c1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f001 f841 	bl	8006c9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c24:	2b40      	cmp	r3, #64	; 0x40
 8005c26:	d10e      	bne.n	8005c46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d107      	bne.n	8005c46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f9ad 	bl	8005fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d10e      	bne.n	8005c72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d107      	bne.n	8005c72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f06f 0220 	mvn.w	r2, #32
 8005c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 f801 	bl	8006c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c80:	d10f      	bne.n	8005ca2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c90:	d107      	bne.n	8005ca2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 f807 	bl	8006cb0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cb0:	d10f      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cc0:	d107      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fff9 	bl	8006cc4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ce0:	d10f      	bne.n	8005d02 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf0:	d107      	bne.n	8005d02 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 ffeb 	bl	8006cd8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d10:	d10f      	bne.n	8005d32 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d20:	d107      	bne.n	8005d32 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 ffdd 	bl	8006cec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e0ff      	b.n	8005f5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b14      	cmp	r3, #20
 8005d66:	f200 80f0 	bhi.w	8005f4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d6a:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005dc5 	.word	0x08005dc5
 8005d74:	08005f4b 	.word	0x08005f4b
 8005d78:	08005f4b 	.word	0x08005f4b
 8005d7c:	08005f4b 	.word	0x08005f4b
 8005d80:	08005e05 	.word	0x08005e05
 8005d84:	08005f4b 	.word	0x08005f4b
 8005d88:	08005f4b 	.word	0x08005f4b
 8005d8c:	08005f4b 	.word	0x08005f4b
 8005d90:	08005e47 	.word	0x08005e47
 8005d94:	08005f4b 	.word	0x08005f4b
 8005d98:	08005f4b 	.word	0x08005f4b
 8005d9c:	08005f4b 	.word	0x08005f4b
 8005da0:	08005e87 	.word	0x08005e87
 8005da4:	08005f4b 	.word	0x08005f4b
 8005da8:	08005f4b 	.word	0x08005f4b
 8005dac:	08005f4b 	.word	0x08005f4b
 8005db0:	08005ec9 	.word	0x08005ec9
 8005db4:	08005f4b 	.word	0x08005f4b
 8005db8:	08005f4b 	.word	0x08005f4b
 8005dbc:	08005f4b 	.word	0x08005f4b
 8005dc0:	08005f09 	.word	0x08005f09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 f99a 	bl	8006104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0208 	orr.w	r2, r2, #8
 8005dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0204 	bic.w	r2, r2, #4
 8005dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6999      	ldr	r1, [r3, #24]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	619a      	str	r2, [r3, #24]
      break;
 8005e02:	e0a5      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fa14 	bl	8006238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6999      	ldr	r1, [r3, #24]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	021a      	lsls	r2, r3, #8
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	619a      	str	r2, [r3, #24]
      break;
 8005e44:	e084      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fa87 	bl	8006360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0208 	orr.w	r2, r2, #8
 8005e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0204 	bic.w	r2, r2, #4
 8005e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69d9      	ldr	r1, [r3, #28]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	61da      	str	r2, [r3, #28]
      break;
 8005e84:	e064      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 faf9 	bl	8006484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69d9      	ldr	r1, [r3, #28]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	021a      	lsls	r2, r3, #8
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	61da      	str	r2, [r3, #28]
      break;
 8005ec6:	e043      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68b9      	ldr	r1, [r7, #8]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fb6c 	bl	80065ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0208 	orr.w	r2, r2, #8
 8005ee2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0204 	bic.w	r2, r2, #4
 8005ef2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005f06:	e023      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fbb6 	bl	8006680 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f32:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	021a      	lsls	r2, r3, #8
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005f48:	e002      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop

08005f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a46      	ldr	r2, [pc, #280]	; (80060e0 <TIM_Base_SetConfig+0x12c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d017      	beq.n	8005ffc <TIM_Base_SetConfig+0x48>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd2:	d013      	beq.n	8005ffc <TIM_Base_SetConfig+0x48>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a43      	ldr	r2, [pc, #268]	; (80060e4 <TIM_Base_SetConfig+0x130>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00f      	beq.n	8005ffc <TIM_Base_SetConfig+0x48>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a42      	ldr	r2, [pc, #264]	; (80060e8 <TIM_Base_SetConfig+0x134>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00b      	beq.n	8005ffc <TIM_Base_SetConfig+0x48>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a41      	ldr	r2, [pc, #260]	; (80060ec <TIM_Base_SetConfig+0x138>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d007      	beq.n	8005ffc <TIM_Base_SetConfig+0x48>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a40      	ldr	r2, [pc, #256]	; (80060f0 <TIM_Base_SetConfig+0x13c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d003      	beq.n	8005ffc <TIM_Base_SetConfig+0x48>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a3f      	ldr	r2, [pc, #252]	; (80060f4 <TIM_Base_SetConfig+0x140>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d108      	bne.n	800600e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a33      	ldr	r2, [pc, #204]	; (80060e0 <TIM_Base_SetConfig+0x12c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d023      	beq.n	800605e <TIM_Base_SetConfig+0xaa>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601c:	d01f      	beq.n	800605e <TIM_Base_SetConfig+0xaa>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a30      	ldr	r2, [pc, #192]	; (80060e4 <TIM_Base_SetConfig+0x130>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d01b      	beq.n	800605e <TIM_Base_SetConfig+0xaa>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2f      	ldr	r2, [pc, #188]	; (80060e8 <TIM_Base_SetConfig+0x134>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d017      	beq.n	800605e <TIM_Base_SetConfig+0xaa>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2e      	ldr	r2, [pc, #184]	; (80060ec <TIM_Base_SetConfig+0x138>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d013      	beq.n	800605e <TIM_Base_SetConfig+0xaa>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2d      	ldr	r2, [pc, #180]	; (80060f0 <TIM_Base_SetConfig+0x13c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00f      	beq.n	800605e <TIM_Base_SetConfig+0xaa>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2d      	ldr	r2, [pc, #180]	; (80060f8 <TIM_Base_SetConfig+0x144>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00b      	beq.n	800605e <TIM_Base_SetConfig+0xaa>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2c      	ldr	r2, [pc, #176]	; (80060fc <TIM_Base_SetConfig+0x148>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d007      	beq.n	800605e <TIM_Base_SetConfig+0xaa>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2b      	ldr	r2, [pc, #172]	; (8006100 <TIM_Base_SetConfig+0x14c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_Base_SetConfig+0xaa>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a26      	ldr	r2, [pc, #152]	; (80060f4 <TIM_Base_SetConfig+0x140>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d108      	bne.n	8006070 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a12      	ldr	r2, [pc, #72]	; (80060e0 <TIM_Base_SetConfig+0x12c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d013      	beq.n	80060c4 <TIM_Base_SetConfig+0x110>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a14      	ldr	r2, [pc, #80]	; (80060f0 <TIM_Base_SetConfig+0x13c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00f      	beq.n	80060c4 <TIM_Base_SetConfig+0x110>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a14      	ldr	r2, [pc, #80]	; (80060f8 <TIM_Base_SetConfig+0x144>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00b      	beq.n	80060c4 <TIM_Base_SetConfig+0x110>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a13      	ldr	r2, [pc, #76]	; (80060fc <TIM_Base_SetConfig+0x148>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d007      	beq.n	80060c4 <TIM_Base_SetConfig+0x110>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a12      	ldr	r2, [pc, #72]	; (8006100 <TIM_Base_SetConfig+0x14c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d003      	beq.n	80060c4 <TIM_Base_SetConfig+0x110>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a0d      	ldr	r2, [pc, #52]	; (80060f4 <TIM_Base_SetConfig+0x140>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d103      	bne.n	80060cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	615a      	str	r2, [r3, #20]
}
 80060d2:	bf00      	nop
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	40012c00 	.word	0x40012c00
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40000800 	.word	0x40000800
 80060ec:	40000c00 	.word	0x40000c00
 80060f0:	40013400 	.word	0x40013400
 80060f4:	40015000 	.word	0x40015000
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40014400 	.word	0x40014400
 8006100:	40014800 	.word	0x40014800

08006104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f023 0201 	bic.w	r2, r3, #1
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0303 	bic.w	r3, r3, #3
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f023 0302 	bic.w	r3, r3, #2
 8006150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a30      	ldr	r2, [pc, #192]	; (8006220 <TIM_OC1_SetConfig+0x11c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <TIM_OC1_SetConfig+0x88>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a2f      	ldr	r2, [pc, #188]	; (8006224 <TIM_OC1_SetConfig+0x120>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00f      	beq.n	800618c <TIM_OC1_SetConfig+0x88>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a2e      	ldr	r2, [pc, #184]	; (8006228 <TIM_OC1_SetConfig+0x124>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00b      	beq.n	800618c <TIM_OC1_SetConfig+0x88>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a2d      	ldr	r2, [pc, #180]	; (800622c <TIM_OC1_SetConfig+0x128>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d007      	beq.n	800618c <TIM_OC1_SetConfig+0x88>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a2c      	ldr	r2, [pc, #176]	; (8006230 <TIM_OC1_SetConfig+0x12c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_OC1_SetConfig+0x88>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a2b      	ldr	r2, [pc, #172]	; (8006234 <TIM_OC1_SetConfig+0x130>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d10c      	bne.n	80061a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 0308 	bic.w	r3, r3, #8
 8006192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 0304 	bic.w	r3, r3, #4
 80061a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a1d      	ldr	r2, [pc, #116]	; (8006220 <TIM_OC1_SetConfig+0x11c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d013      	beq.n	80061d6 <TIM_OC1_SetConfig+0xd2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <TIM_OC1_SetConfig+0x120>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00f      	beq.n	80061d6 <TIM_OC1_SetConfig+0xd2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a1b      	ldr	r2, [pc, #108]	; (8006228 <TIM_OC1_SetConfig+0x124>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00b      	beq.n	80061d6 <TIM_OC1_SetConfig+0xd2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a1a      	ldr	r2, [pc, #104]	; (800622c <TIM_OC1_SetConfig+0x128>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d007      	beq.n	80061d6 <TIM_OC1_SetConfig+0xd2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a19      	ldr	r2, [pc, #100]	; (8006230 <TIM_OC1_SetConfig+0x12c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d003      	beq.n	80061d6 <TIM_OC1_SetConfig+0xd2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a18      	ldr	r2, [pc, #96]	; (8006234 <TIM_OC1_SetConfig+0x130>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d111      	bne.n	80061fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	621a      	str	r2, [r3, #32]
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40013400 	.word	0x40013400
 8006228:	40014000 	.word	0x40014000
 800622c:	40014400 	.word	0x40014400
 8006230:	40014800 	.word	0x40014800
 8006234:	40015000 	.word	0x40015000

08006238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f023 0210 	bic.w	r2, r3, #16
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 0320 	bic.w	r3, r3, #32
 8006286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a2c      	ldr	r2, [pc, #176]	; (8006348 <TIM_OC2_SetConfig+0x110>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <TIM_OC2_SetConfig+0x74>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a2b      	ldr	r2, [pc, #172]	; (800634c <TIM_OC2_SetConfig+0x114>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_OC2_SetConfig+0x74>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a2a      	ldr	r2, [pc, #168]	; (8006350 <TIM_OC2_SetConfig+0x118>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d10d      	bne.n	80062c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <TIM_OC2_SetConfig+0x110>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d013      	beq.n	80062f8 <TIM_OC2_SetConfig+0xc0>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a1e      	ldr	r2, [pc, #120]	; (800634c <TIM_OC2_SetConfig+0x114>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00f      	beq.n	80062f8 <TIM_OC2_SetConfig+0xc0>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a1e      	ldr	r2, [pc, #120]	; (8006354 <TIM_OC2_SetConfig+0x11c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00b      	beq.n	80062f8 <TIM_OC2_SetConfig+0xc0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a1d      	ldr	r2, [pc, #116]	; (8006358 <TIM_OC2_SetConfig+0x120>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d007      	beq.n	80062f8 <TIM_OC2_SetConfig+0xc0>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a1c      	ldr	r2, [pc, #112]	; (800635c <TIM_OC2_SetConfig+0x124>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_OC2_SetConfig+0xc0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a17      	ldr	r2, [pc, #92]	; (8006350 <TIM_OC2_SetConfig+0x118>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d113      	bne.n	8006320 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006306:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40012c00 	.word	0x40012c00
 800634c:	40013400 	.word	0x40013400
 8006350:	40015000 	.word	0x40015000
 8006354:	40014000 	.word	0x40014000
 8006358:	40014400 	.word	0x40014400
 800635c:	40014800 	.word	0x40014800

08006360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800638e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a2b      	ldr	r2, [pc, #172]	; (800646c <TIM_OC3_SetConfig+0x10c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d007      	beq.n	80063d2 <TIM_OC3_SetConfig+0x72>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a2a      	ldr	r2, [pc, #168]	; (8006470 <TIM_OC3_SetConfig+0x110>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_OC3_SetConfig+0x72>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a29      	ldr	r2, [pc, #164]	; (8006474 <TIM_OC3_SetConfig+0x114>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d10d      	bne.n	80063ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a1e      	ldr	r2, [pc, #120]	; (800646c <TIM_OC3_SetConfig+0x10c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <TIM_OC3_SetConfig+0xbe>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a1d      	ldr	r2, [pc, #116]	; (8006470 <TIM_OC3_SetConfig+0x110>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00f      	beq.n	800641e <TIM_OC3_SetConfig+0xbe>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a1d      	ldr	r2, [pc, #116]	; (8006478 <TIM_OC3_SetConfig+0x118>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00b      	beq.n	800641e <TIM_OC3_SetConfig+0xbe>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a1c      	ldr	r2, [pc, #112]	; (800647c <TIM_OC3_SetConfig+0x11c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d007      	beq.n	800641e <TIM_OC3_SetConfig+0xbe>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <TIM_OC3_SetConfig+0x120>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d003      	beq.n	800641e <TIM_OC3_SetConfig+0xbe>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a16      	ldr	r2, [pc, #88]	; (8006474 <TIM_OC3_SetConfig+0x114>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d113      	bne.n	8006446 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800642c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	621a      	str	r2, [r3, #32]
}
 8006460:	bf00      	nop
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	40012c00 	.word	0x40012c00
 8006470:	40013400 	.word	0x40013400
 8006474:	40015000 	.word	0x40015000
 8006478:	40014000 	.word	0x40014000
 800647c:	40014400 	.word	0x40014400
 8006480:	40014800 	.word	0x40014800

08006484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	031b      	lsls	r3, r3, #12
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a2c      	ldr	r2, [pc, #176]	; (8006594 <TIM_OC4_SetConfig+0x110>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d007      	beq.n	80064f8 <TIM_OC4_SetConfig+0x74>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <TIM_OC4_SetConfig+0x114>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d003      	beq.n	80064f8 <TIM_OC4_SetConfig+0x74>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a2a      	ldr	r2, [pc, #168]	; (800659c <TIM_OC4_SetConfig+0x118>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d10d      	bne.n	8006514 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	031b      	lsls	r3, r3, #12
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006512:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a1f      	ldr	r2, [pc, #124]	; (8006594 <TIM_OC4_SetConfig+0x110>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d013      	beq.n	8006544 <TIM_OC4_SetConfig+0xc0>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a1e      	ldr	r2, [pc, #120]	; (8006598 <TIM_OC4_SetConfig+0x114>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00f      	beq.n	8006544 <TIM_OC4_SetConfig+0xc0>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a1e      	ldr	r2, [pc, #120]	; (80065a0 <TIM_OC4_SetConfig+0x11c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00b      	beq.n	8006544 <TIM_OC4_SetConfig+0xc0>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <TIM_OC4_SetConfig+0x120>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d007      	beq.n	8006544 <TIM_OC4_SetConfig+0xc0>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a1c      	ldr	r2, [pc, #112]	; (80065a8 <TIM_OC4_SetConfig+0x124>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_OC4_SetConfig+0xc0>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a17      	ldr	r2, [pc, #92]	; (800659c <TIM_OC4_SetConfig+0x118>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d113      	bne.n	800656c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800654a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006552:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	019b      	lsls	r3, r3, #6
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	019b      	lsls	r3, r3, #6
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40013400 	.word	0x40013400
 800659c:	40015000 	.word	0x40015000
 80065a0:	40014000 	.word	0x40014000
 80065a4:	40014400 	.word	0x40014400
 80065a8:	40014800 	.word	0x40014800

080065ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	041b      	lsls	r3, r3, #16
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a19      	ldr	r2, [pc, #100]	; (8006668 <TIM_OC5_SetConfig+0xbc>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d013      	beq.n	800662e <TIM_OC5_SetConfig+0x82>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a18      	ldr	r2, [pc, #96]	; (800666c <TIM_OC5_SetConfig+0xc0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00f      	beq.n	800662e <TIM_OC5_SetConfig+0x82>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a17      	ldr	r2, [pc, #92]	; (8006670 <TIM_OC5_SetConfig+0xc4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00b      	beq.n	800662e <TIM_OC5_SetConfig+0x82>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a16      	ldr	r2, [pc, #88]	; (8006674 <TIM_OC5_SetConfig+0xc8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d007      	beq.n	800662e <TIM_OC5_SetConfig+0x82>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a15      	ldr	r2, [pc, #84]	; (8006678 <TIM_OC5_SetConfig+0xcc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d003      	beq.n	800662e <TIM_OC5_SetConfig+0x82>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a14      	ldr	r2, [pc, #80]	; (800667c <TIM_OC5_SetConfig+0xd0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d109      	bne.n	8006642 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006634:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	021b      	lsls	r3, r3, #8
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	621a      	str	r2, [r3, #32]
}
 800665c:	bf00      	nop
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40013400 	.word	0x40013400
 8006670:	40014000 	.word	0x40014000
 8006674:	40014400 	.word	0x40014400
 8006678:	40014800 	.word	0x40014800
 800667c:	40015000 	.word	0x40015000

08006680 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	021b      	lsls	r3, r3, #8
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	051b      	lsls	r3, r3, #20
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a1a      	ldr	r2, [pc, #104]	; (8006740 <TIM_OC6_SetConfig+0xc0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d013      	beq.n	8006704 <TIM_OC6_SetConfig+0x84>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a19      	ldr	r2, [pc, #100]	; (8006744 <TIM_OC6_SetConfig+0xc4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00f      	beq.n	8006704 <TIM_OC6_SetConfig+0x84>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a18      	ldr	r2, [pc, #96]	; (8006748 <TIM_OC6_SetConfig+0xc8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00b      	beq.n	8006704 <TIM_OC6_SetConfig+0x84>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a17      	ldr	r2, [pc, #92]	; (800674c <TIM_OC6_SetConfig+0xcc>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d007      	beq.n	8006704 <TIM_OC6_SetConfig+0x84>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a16      	ldr	r2, [pc, #88]	; (8006750 <TIM_OC6_SetConfig+0xd0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_OC6_SetConfig+0x84>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a15      	ldr	r2, [pc, #84]	; (8006754 <TIM_OC6_SetConfig+0xd4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d109      	bne.n	8006718 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800670a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	029b      	lsls	r3, r3, #10
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4313      	orrs	r3, r2
 8006716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	621a      	str	r2, [r3, #32]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	40012c00 	.word	0x40012c00
 8006744:	40013400 	.word	0x40013400
 8006748:	40014000 	.word	0x40014000
 800674c:	40014400 	.word	0x40014400
 8006750:	40014800 	.word	0x40014800
 8006754:	40015000 	.word	0x40015000

08006758 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f003 031f 	and.w	r3, r3, #31
 800676a:	2201      	movs	r2, #1
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a1a      	ldr	r2, [r3, #32]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	43db      	mvns	r3, r3
 800677a:	401a      	ands	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a1a      	ldr	r2, [r3, #32]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	fa01 f303 	lsl.w	r3, r1, r3
 8006790:	431a      	orrs	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	621a      	str	r2, [r3, #32]
}
 8006796:	bf00      	nop
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
	...

080067a4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d109      	bne.n	80067c8 <HAL_TIMEx_PWMN_Start+0x24>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	e022      	b.n	800680e <HAL_TIMEx_PWMN_Start+0x6a>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d109      	bne.n	80067e2 <HAL_TIMEx_PWMN_Start+0x3e>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	bf14      	ite	ne
 80067da:	2301      	movne	r3, #1
 80067dc:	2300      	moveq	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	e015      	b.n	800680e <HAL_TIMEx_PWMN_Start+0x6a>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d109      	bne.n	80067fc <HAL_TIMEx_PWMN_Start+0x58>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	bf14      	ite	ne
 80067f4:	2301      	movne	r3, #1
 80067f6:	2300      	moveq	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	e008      	b.n	800680e <HAL_TIMEx_PWMN_Start+0x6a>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	bf14      	ite	ne
 8006808:	2301      	movne	r3, #1
 800680a:	2300      	moveq	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e073      	b.n	80068fe <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <HAL_TIMEx_PWMN_Start+0x82>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006824:	e013      	b.n	800684e <HAL_TIMEx_PWMN_Start+0xaa>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b04      	cmp	r3, #4
 800682a:	d104      	bne.n	8006836 <HAL_TIMEx_PWMN_Start+0x92>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006834:	e00b      	b.n	800684e <HAL_TIMEx_PWMN_Start+0xaa>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b08      	cmp	r3, #8
 800683a:	d104      	bne.n	8006846 <HAL_TIMEx_PWMN_Start+0xa2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006844:	e003      	b.n	800684e <HAL_TIMEx_PWMN_Start+0xaa>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2204      	movs	r2, #4
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fa52 	bl	8006d00 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800686a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a25      	ldr	r2, [pc, #148]	; (8006908 <HAL_TIMEx_PWMN_Start+0x164>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d022      	beq.n	80068bc <HAL_TIMEx_PWMN_Start+0x118>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800687e:	d01d      	beq.n	80068bc <HAL_TIMEx_PWMN_Start+0x118>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a21      	ldr	r2, [pc, #132]	; (800690c <HAL_TIMEx_PWMN_Start+0x168>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d018      	beq.n	80068bc <HAL_TIMEx_PWMN_Start+0x118>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a20      	ldr	r2, [pc, #128]	; (8006910 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d013      	beq.n	80068bc <HAL_TIMEx_PWMN_Start+0x118>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a1e      	ldr	r2, [pc, #120]	; (8006914 <HAL_TIMEx_PWMN_Start+0x170>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d00e      	beq.n	80068bc <HAL_TIMEx_PWMN_Start+0x118>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a1d      	ldr	r2, [pc, #116]	; (8006918 <HAL_TIMEx_PWMN_Start+0x174>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d009      	beq.n	80068bc <HAL_TIMEx_PWMN_Start+0x118>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1b      	ldr	r2, [pc, #108]	; (800691c <HAL_TIMEx_PWMN_Start+0x178>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d004      	beq.n	80068bc <HAL_TIMEx_PWMN_Start+0x118>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1a      	ldr	r2, [pc, #104]	; (8006920 <HAL_TIMEx_PWMN_Start+0x17c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d115      	bne.n	80068e8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	4b18      	ldr	r3, [pc, #96]	; (8006924 <HAL_TIMEx_PWMN_Start+0x180>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b06      	cmp	r3, #6
 80068cc:	d015      	beq.n	80068fa <HAL_TIMEx_PWMN_Start+0x156>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d4:	d011      	beq.n	80068fa <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f042 0201 	orr.w	r2, r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e6:	e008      	b.n	80068fa <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	e000      	b.n	80068fc <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40000400 	.word	0x40000400
 8006910:	40000800 	.word	0x40000800
 8006914:	40000c00 	.word	0x40000c00
 8006918:	40013400 	.word	0x40013400
 800691c:	40014000 	.word	0x40014000
 8006920:	40015000 	.word	0x40015000
 8006924:	00010007 	.word	0x00010007

08006928 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2200      	movs	r2, #0
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f000 f9e0 	bl	8006d00 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a1a      	ldr	r2, [r3, #32]
 8006946:	f241 1311 	movw	r3, #4369	; 0x1111
 800694a:	4013      	ands	r3, r2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10f      	bne.n	8006970 <HAL_TIMEx_PWMN_Stop+0x48>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6a1a      	ldr	r2, [r3, #32]
 8006956:	f244 4344 	movw	r3, #17476	; 0x4444
 800695a:	4013      	ands	r3, r2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d107      	bne.n	8006970 <HAL_TIMEx_PWMN_Stop+0x48>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800696e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6a1a      	ldr	r2, [r3, #32]
 8006976:	f241 1311 	movw	r3, #4369	; 0x1111
 800697a:	4013      	ands	r3, r2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10f      	bne.n	80069a0 <HAL_TIMEx_PWMN_Stop+0x78>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	f244 4344 	movw	r3, #17476	; 0x4444
 800698a:	4013      	ands	r3, r2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d107      	bne.n	80069a0 <HAL_TIMEx_PWMN_Stop+0x78>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0201 	bic.w	r2, r2, #1
 800699e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d104      	bne.n	80069b0 <HAL_TIMEx_PWMN_Stop+0x88>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ae:	e013      	b.n	80069d8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d104      	bne.n	80069c0 <HAL_TIMEx_PWMN_Stop+0x98>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069be:	e00b      	b.n	80069d8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	d104      	bne.n	80069d0 <HAL_TIMEx_PWMN_Stop+0xa8>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069ce:	e003      	b.n	80069d8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e074      	b.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a34      	ldr	r2, [pc, #208]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d009      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a33      	ldr	r2, [pc, #204]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d004      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a31      	ldr	r2, [pc, #196]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d108      	bne.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a21      	ldr	r2, [pc, #132]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7c:	d01d      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1f      	ldr	r2, [pc, #124]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1c      	ldr	r2, [pc, #112]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a15      	ldr	r2, [pc, #84]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a18      	ldr	r2, [pc, #96]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a11      	ldr	r2, [pc, #68]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d10c      	bne.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40012c00 	.word	0x40012c00
 8006af8:	40013400 	.word	0x40013400
 8006afc:	40015000 	.word	0x40015000
 8006b00:	40000400 	.word	0x40000400
 8006b04:	40000800 	.word	0x40000800
 8006b08:	40000c00 	.word	0x40000c00
 8006b0c:	40014000 	.word	0x40014000

08006b10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e096      	b.n	8006c5a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	041b      	lsls	r3, r3, #16
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a2f      	ldr	r2, [pc, #188]	; (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d009      	beq.n	8006bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a2d      	ldr	r2, [pc, #180]	; (8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a2c      	ldr	r2, [pc, #176]	; (8006c70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d106      	bne.n	8006bd2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a24      	ldr	r2, [pc, #144]	; (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d009      	beq.n	8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a22      	ldr	r2, [pc, #136]	; (8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d004      	beq.n	8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a21      	ldr	r2, [pc, #132]	; (8006c70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d12b      	bne.n	8006c48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	051b      	lsls	r3, r3, #20
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a11      	ldr	r2, [pc, #68]	; (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d009      	beq.n	8006c3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a10      	ldr	r2, [pc, #64]	; (8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d004      	beq.n	8006c3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a0e      	ldr	r2, [pc, #56]	; (8006c70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d106      	bne.n	8006c48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	40013400 	.word	0x40013400
 8006c70:	40015000 	.word	0x40015000

08006c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f003 031f 	and.w	r3, r3, #31
 8006d12:	2204      	movs	r2, #4
 8006d14:	fa02 f303 	lsl.w	r3, r2, r3
 8006d18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a1a      	ldr	r2, [r3, #32]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	43db      	mvns	r3, r3
 8006d22:	401a      	ands	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a1a      	ldr	r2, [r3, #32]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f003 031f 	and.w	r3, r3, #31
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	fa01 f303 	lsl.w	r3, r1, r3
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	621a      	str	r2, [r3, #32]
}
 8006d3e:	bf00      	nop
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e042      	b.n	8006de2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d106      	bne.n	8006d74 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fa fe42 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2224      	movs	r2, #36	; 0x24
 8006d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0201 	bic.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fc51 	bl	8007634 <UART_SetConfig>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d101      	bne.n	8006d9c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e022      	b.n	8006de2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 ff41 	bl	8007c2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006db8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0201 	orr.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 ffc8 	bl	8007d70 <UART_CheckIdleState>
 8006de0:	4603      	mov	r3, r0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b08a      	sub	sp, #40	; 0x28
 8006dee:	af02      	add	r7, sp, #8
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	603b      	str	r3, [r7, #0]
 8006df6:	4613      	mov	r3, r2
 8006df8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	f040 8083 	bne.w	8006f0c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <HAL_UART_Transmit+0x28>
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e07b      	b.n	8006f0e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_UART_Transmit+0x3a>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e074      	b.n	8006f0e <HAL_UART_Transmit+0x124>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2221      	movs	r2, #33	; 0x21
 8006e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e3c:	f7fa fed0 	bl	8001be0 <HAL_GetTick>
 8006e40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	88fa      	ldrh	r2, [r7, #6]
 8006e46:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	88fa      	ldrh	r2, [r7, #6]
 8006e4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5a:	d108      	bne.n	8006e6e <HAL_UART_Transmit+0x84>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	61bb      	str	r3, [r7, #24]
 8006e6c:	e003      	b.n	8006e76 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006e7e:	e02c      	b.n	8006eda <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2200      	movs	r2, #0
 8006e88:	2180      	movs	r1, #128	; 0x80
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 ffbb 	bl	8007e06 <UART_WaitOnFlagUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e039      	b.n	8006f0e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	3302      	adds	r3, #2
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	e007      	b.n	8006ec8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1cc      	bne.n	8006e80 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2200      	movs	r2, #0
 8006eee:	2140      	movs	r1, #64	; 0x40
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 ff88 	bl	8007e06 <UART_WaitOnFlagUntilTimeout>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e006      	b.n	8006f0e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e000      	b.n	8006f0e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006f0c:	2302      	movs	r3, #2
  }
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3720      	adds	r7, #32
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	; 0x28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4613      	mov	r3, r2
 8006f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d142      	bne.n	8006fb6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_UART_Receive_IT+0x24>
 8006f36:	88fb      	ldrh	r3, [r7, #6]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e03b      	b.n	8006fb8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <HAL_UART_Receive_IT+0x36>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	e034      	b.n	8006fb8 <HAL_UART_Receive_IT+0xa0>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a17      	ldr	r2, [pc, #92]	; (8006fc0 <HAL_UART_Receive_IT+0xa8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01f      	beq.n	8006fa6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d018      	beq.n	8006fa6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	e853 3f00 	ldrex	r3, [r3]
 8006f80:	613b      	str	r3, [r7, #16]
   return(result);
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	623b      	str	r3, [r7, #32]
 8006f94:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f96:	69f9      	ldr	r1, [r7, #28]
 8006f98:	6a3a      	ldr	r2, [r7, #32]
 8006f9a:	e841 2300 	strex	r3, r2, [r1]
 8006f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1e6      	bne.n	8006f74 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006fa6:	88fb      	ldrh	r3, [r7, #6]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	68b9      	ldr	r1, [r7, #8]
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 fff3 	bl	8007f98 <UART_Start_Receive_IT>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	e000      	b.n	8006fb8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
  }
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3728      	adds	r7, #40	; 0x28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	40008000 	.word	0x40008000

08006fc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b0ba      	sub	sp, #232	; 0xe8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006fea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006fee:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ff8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d11b      	bne.n	8007038 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007004:	f003 0320 	and.w	r3, r3, #32
 8007008:	2b00      	cmp	r3, #0
 800700a:	d015      	beq.n	8007038 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800700c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007010:	f003 0320 	and.w	r3, r3, #32
 8007014:	2b00      	cmp	r3, #0
 8007016:	d105      	bne.n	8007024 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800701c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d009      	beq.n	8007038 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 82d6 	beq.w	80075da <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
      }
      return;
 8007036:	e2d0      	b.n	80075da <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007038:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 811f 	beq.w	8007280 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007042:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007046:	4b8b      	ldr	r3, [pc, #556]	; (8007274 <HAL_UART_IRQHandler+0x2b0>)
 8007048:	4013      	ands	r3, r2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d106      	bne.n	800705c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800704e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007052:	4b89      	ldr	r3, [pc, #548]	; (8007278 <HAL_UART_IRQHandler+0x2b4>)
 8007054:	4013      	ands	r3, r2
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 8112 	beq.w	8007280 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800705c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b00      	cmp	r3, #0
 8007066:	d011      	beq.n	800708c <HAL_UART_IRQHandler+0xc8>
 8007068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800706c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2201      	movs	r2, #1
 800707a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007082:	f043 0201 	orr.w	r2, r3, #1
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d011      	beq.n	80070bc <HAL_UART_IRQHandler+0xf8>
 8007098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2202      	movs	r2, #2
 80070aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b2:	f043 0204 	orr.w	r2, r3, #4
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d011      	beq.n	80070ec <HAL_UART_IRQHandler+0x128>
 80070c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2204      	movs	r2, #4
 80070da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e2:	f043 0202 	orr.w	r2, r3, #2
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f0:	f003 0308 	and.w	r3, r3, #8
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d017      	beq.n	8007128 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80070f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	d105      	bne.n	8007110 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007104:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007108:	4b5a      	ldr	r3, [pc, #360]	; (8007274 <HAL_UART_IRQHandler+0x2b0>)
 800710a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2208      	movs	r2, #8
 8007116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800711e:	f043 0208 	orr.w	r2, r3, #8
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007130:	2b00      	cmp	r3, #0
 8007132:	d012      	beq.n	800715a <HAL_UART_IRQHandler+0x196>
 8007134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007138:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00c      	beq.n	800715a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007148:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007150:	f043 0220 	orr.w	r2, r3, #32
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 823c 	beq.w	80075de <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d013      	beq.n	800719a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d105      	bne.n	800718a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800717e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d007      	beq.n	800719a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b40      	cmp	r3, #64	; 0x40
 80071b0:	d005      	beq.n	80071be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d04f      	beq.n	800725e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 f814 	bl	80081ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ce:	2b40      	cmp	r3, #64	; 0x40
 80071d0:	d141      	bne.n	8007256 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3308      	adds	r3, #8
 80071d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3308      	adds	r3, #8
 80071fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80071fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800720a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1d9      	bne.n	80071d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d013      	beq.n	800724e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800722a:	4a14      	ldr	r2, [pc, #80]	; (800727c <HAL_UART_IRQHandler+0x2b8>)
 800722c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007232:	4618      	mov	r0, r3
 8007234:	f7fc fba2 	bl	800397c <HAL_DMA_Abort_IT>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d017      	beq.n	800726e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007248:	4610      	mov	r0, r2
 800724a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724c:	e00f      	b.n	800726e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f9da 	bl	8007608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007254:	e00b      	b.n	800726e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f9d6 	bl	8007608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725c:	e007      	b.n	800726e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f9d2 	bl	8007608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800726c:	e1b7      	b.n	80075de <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726e:	bf00      	nop
    return;
 8007270:	e1b5      	b.n	80075de <HAL_UART_IRQHandler+0x61a>
 8007272:	bf00      	nop
 8007274:	10000001 	.word	0x10000001
 8007278:	04000120 	.word	0x04000120
 800727c:	080082b9 	.word	0x080082b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007284:	2b01      	cmp	r3, #1
 8007286:	f040 814a 	bne.w	800751e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800728a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728e:	f003 0310 	and.w	r3, r3, #16
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 8143 	beq.w	800751e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 813c 	beq.w	800751e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2210      	movs	r2, #16
 80072ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b8:	2b40      	cmp	r3, #64	; 0x40
 80072ba:	f040 80b5 	bne.w	8007428 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 8187 	beq.w	80075e2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072de:	429a      	cmp	r2, r3
 80072e0:	f080 817f 	bcs.w	80075e2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f040 8086 	bne.w	800740c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800731c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800732a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800732e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007336:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1da      	bne.n	8007300 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3308      	adds	r3, #8
 8007350:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007354:	e853 3f00 	ldrex	r3, [r3]
 8007358:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800735a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800735c:	f023 0301 	bic.w	r3, r3, #1
 8007360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3308      	adds	r3, #8
 800736a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800736e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007372:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007376:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e1      	bne.n	800734a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3308      	adds	r3, #8
 800738c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e3      	bne.n	8007386 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073dc:	f023 0310 	bic.w	r3, r3, #16
 80073e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80073f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e4      	bne.n	80073cc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007406:	4618      	mov	r0, r3
 8007408:	f7fc fa5f 	bl	80038ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007418:	b29b      	uxth	r3, r3
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	b29b      	uxth	r3, r3
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f8fb 	bl	800761c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007426:	e0dc      	b.n	80075e2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007434:	b29b      	uxth	r3, r3
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007442:	b29b      	uxth	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 80ce 	beq.w	80075e6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800744a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 80c9 	beq.w	80075e6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007464:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007476:	647b      	str	r3, [r7, #68]	; 0x44
 8007478:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800747c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e4      	bne.n	8007454 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3308      	adds	r3, #8
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	623b      	str	r3, [r7, #32]
   return(result);
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074a0:	f023 0301 	bic.w	r3, r3, #1
 80074a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074b2:	633a      	str	r2, [r7, #48]	; 0x30
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e1      	bne.n	800748a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0310 	bic.w	r3, r3, #16
 80074ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074fc:	61fb      	str	r3, [r7, #28]
 80074fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	69b9      	ldr	r1, [r7, #24]
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	e841 2300 	strex	r3, r2, [r1]
 8007508:	617b      	str	r3, [r7, #20]
   return(result);
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e4      	bne.n	80074da <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f880 	bl	800761c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800751c:	e063      	b.n	80075e6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800751e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00e      	beq.n	8007548 <HAL_UART_IRQHandler+0x584>
 800752a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800752e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d008      	beq.n	8007548 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800753e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 fb57 	bl	8008bf4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007546:	e051      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007550:	2b00      	cmp	r3, #0
 8007552:	d014      	beq.n	800757e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755c:	2b00      	cmp	r3, #0
 800755e:	d105      	bne.n	800756c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d008      	beq.n	800757e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007570:	2b00      	cmp	r3, #0
 8007572:	d03a      	beq.n	80075ea <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	4798      	blx	r3
    }
    return;
 800757c:	e035      	b.n	80075ea <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800757e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007586:	2b00      	cmp	r3, #0
 8007588:	d009      	beq.n	800759e <HAL_UART_IRQHandler+0x5da>
 800758a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fea4 	bl	80082e4 <UART_EndTransmit_IT>
    return;
 800759c:	e026      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800759e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d009      	beq.n	80075be <HAL_UART_IRQHandler+0x5fa>
 80075aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 fb30 	bl	8008c1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075bc:	e016      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80075be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d010      	beq.n	80075ec <HAL_UART_IRQHandler+0x628>
 80075ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	da0c      	bge.n	80075ec <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 fb18 	bl	8008c08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075d8:	e008      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
      return;
 80075da:	bf00      	nop
 80075dc:	e006      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
    return;
 80075de:	bf00      	nop
 80075e0:	e004      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
      return;
 80075e2:	bf00      	nop
 80075e4:	e002      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
      return;
 80075e6:	bf00      	nop
 80075e8:	e000      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
    return;
 80075ea:	bf00      	nop
  }
}
 80075ec:	37e8      	adds	r7, #232	; 0xe8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop

080075f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007638:	b08c      	sub	sp, #48	; 0x30
 800763a:	af00      	add	r7, sp, #0
 800763c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	431a      	orrs	r2, r3
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	431a      	orrs	r2, r3
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	4313      	orrs	r3, r2
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4baa      	ldr	r3, [pc, #680]	; (800790c <UART_SetConfig+0x2d8>)
 8007664:	4013      	ands	r3, r2
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800766c:	430b      	orrs	r3, r1
 800766e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a9f      	ldr	r2, [pc, #636]	; (8007910 <UART_SetConfig+0x2dc>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d004      	beq.n	80076a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800769c:	4313      	orrs	r3, r2
 800769e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80076aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	6812      	ldr	r2, [r2, #0]
 80076b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076b4:	430b      	orrs	r3, r1
 80076b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	f023 010f 	bic.w	r1, r3, #15
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a90      	ldr	r2, [pc, #576]	; (8007914 <UART_SetConfig+0x2e0>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d125      	bne.n	8007724 <UART_SetConfig+0xf0>
 80076d8:	4b8f      	ldr	r3, [pc, #572]	; (8007918 <UART_SetConfig+0x2e4>)
 80076da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d81a      	bhi.n	800771c <UART_SetConfig+0xe8>
 80076e6:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <UART_SetConfig+0xb8>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	080076fd 	.word	0x080076fd
 80076f0:	0800770d 	.word	0x0800770d
 80076f4:	08007705 	.word	0x08007705
 80076f8:	08007715 	.word	0x08007715
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007702:	e116      	b.n	8007932 <UART_SetConfig+0x2fe>
 8007704:	2302      	movs	r3, #2
 8007706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800770a:	e112      	b.n	8007932 <UART_SetConfig+0x2fe>
 800770c:	2304      	movs	r3, #4
 800770e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007712:	e10e      	b.n	8007932 <UART_SetConfig+0x2fe>
 8007714:	2308      	movs	r3, #8
 8007716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800771a:	e10a      	b.n	8007932 <UART_SetConfig+0x2fe>
 800771c:	2310      	movs	r3, #16
 800771e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007722:	e106      	b.n	8007932 <UART_SetConfig+0x2fe>
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a7c      	ldr	r2, [pc, #496]	; (800791c <UART_SetConfig+0x2e8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d138      	bne.n	80077a0 <UART_SetConfig+0x16c>
 800772e:	4b7a      	ldr	r3, [pc, #488]	; (8007918 <UART_SetConfig+0x2e4>)
 8007730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007734:	f003 030c 	and.w	r3, r3, #12
 8007738:	2b0c      	cmp	r3, #12
 800773a:	d82d      	bhi.n	8007798 <UART_SetConfig+0x164>
 800773c:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <UART_SetConfig+0x110>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	08007779 	.word	0x08007779
 8007748:	08007799 	.word	0x08007799
 800774c:	08007799 	.word	0x08007799
 8007750:	08007799 	.word	0x08007799
 8007754:	08007789 	.word	0x08007789
 8007758:	08007799 	.word	0x08007799
 800775c:	08007799 	.word	0x08007799
 8007760:	08007799 	.word	0x08007799
 8007764:	08007781 	.word	0x08007781
 8007768:	08007799 	.word	0x08007799
 800776c:	08007799 	.word	0x08007799
 8007770:	08007799 	.word	0x08007799
 8007774:	08007791 	.word	0x08007791
 8007778:	2300      	movs	r3, #0
 800777a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800777e:	e0d8      	b.n	8007932 <UART_SetConfig+0x2fe>
 8007780:	2302      	movs	r3, #2
 8007782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007786:	e0d4      	b.n	8007932 <UART_SetConfig+0x2fe>
 8007788:	2304      	movs	r3, #4
 800778a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800778e:	e0d0      	b.n	8007932 <UART_SetConfig+0x2fe>
 8007790:	2308      	movs	r3, #8
 8007792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007796:	e0cc      	b.n	8007932 <UART_SetConfig+0x2fe>
 8007798:	2310      	movs	r3, #16
 800779a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800779e:	e0c8      	b.n	8007932 <UART_SetConfig+0x2fe>
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a5e      	ldr	r2, [pc, #376]	; (8007920 <UART_SetConfig+0x2ec>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d125      	bne.n	80077f6 <UART_SetConfig+0x1c2>
 80077aa:	4b5b      	ldr	r3, [pc, #364]	; (8007918 <UART_SetConfig+0x2e4>)
 80077ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077b4:	2b30      	cmp	r3, #48	; 0x30
 80077b6:	d016      	beq.n	80077e6 <UART_SetConfig+0x1b2>
 80077b8:	2b30      	cmp	r3, #48	; 0x30
 80077ba:	d818      	bhi.n	80077ee <UART_SetConfig+0x1ba>
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d00a      	beq.n	80077d6 <UART_SetConfig+0x1a2>
 80077c0:	2b20      	cmp	r3, #32
 80077c2:	d814      	bhi.n	80077ee <UART_SetConfig+0x1ba>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <UART_SetConfig+0x19a>
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d008      	beq.n	80077de <UART_SetConfig+0x1aa>
 80077cc:	e00f      	b.n	80077ee <UART_SetConfig+0x1ba>
 80077ce:	2300      	movs	r3, #0
 80077d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077d4:	e0ad      	b.n	8007932 <UART_SetConfig+0x2fe>
 80077d6:	2302      	movs	r3, #2
 80077d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077dc:	e0a9      	b.n	8007932 <UART_SetConfig+0x2fe>
 80077de:	2304      	movs	r3, #4
 80077e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077e4:	e0a5      	b.n	8007932 <UART_SetConfig+0x2fe>
 80077e6:	2308      	movs	r3, #8
 80077e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ec:	e0a1      	b.n	8007932 <UART_SetConfig+0x2fe>
 80077ee:	2310      	movs	r3, #16
 80077f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077f4:	e09d      	b.n	8007932 <UART_SetConfig+0x2fe>
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a4a      	ldr	r2, [pc, #296]	; (8007924 <UART_SetConfig+0x2f0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d125      	bne.n	800784c <UART_SetConfig+0x218>
 8007800:	4b45      	ldr	r3, [pc, #276]	; (8007918 <UART_SetConfig+0x2e4>)
 8007802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007806:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800780a:	2bc0      	cmp	r3, #192	; 0xc0
 800780c:	d016      	beq.n	800783c <UART_SetConfig+0x208>
 800780e:	2bc0      	cmp	r3, #192	; 0xc0
 8007810:	d818      	bhi.n	8007844 <UART_SetConfig+0x210>
 8007812:	2b80      	cmp	r3, #128	; 0x80
 8007814:	d00a      	beq.n	800782c <UART_SetConfig+0x1f8>
 8007816:	2b80      	cmp	r3, #128	; 0x80
 8007818:	d814      	bhi.n	8007844 <UART_SetConfig+0x210>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <UART_SetConfig+0x1f0>
 800781e:	2b40      	cmp	r3, #64	; 0x40
 8007820:	d008      	beq.n	8007834 <UART_SetConfig+0x200>
 8007822:	e00f      	b.n	8007844 <UART_SetConfig+0x210>
 8007824:	2300      	movs	r3, #0
 8007826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800782a:	e082      	b.n	8007932 <UART_SetConfig+0x2fe>
 800782c:	2302      	movs	r3, #2
 800782e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007832:	e07e      	b.n	8007932 <UART_SetConfig+0x2fe>
 8007834:	2304      	movs	r3, #4
 8007836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800783a:	e07a      	b.n	8007932 <UART_SetConfig+0x2fe>
 800783c:	2308      	movs	r3, #8
 800783e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007842:	e076      	b.n	8007932 <UART_SetConfig+0x2fe>
 8007844:	2310      	movs	r3, #16
 8007846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800784a:	e072      	b.n	8007932 <UART_SetConfig+0x2fe>
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a35      	ldr	r2, [pc, #212]	; (8007928 <UART_SetConfig+0x2f4>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d12a      	bne.n	80078ac <UART_SetConfig+0x278>
 8007856:	4b30      	ldr	r3, [pc, #192]	; (8007918 <UART_SetConfig+0x2e4>)
 8007858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007864:	d01a      	beq.n	800789c <UART_SetConfig+0x268>
 8007866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800786a:	d81b      	bhi.n	80078a4 <UART_SetConfig+0x270>
 800786c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007870:	d00c      	beq.n	800788c <UART_SetConfig+0x258>
 8007872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007876:	d815      	bhi.n	80078a4 <UART_SetConfig+0x270>
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <UART_SetConfig+0x250>
 800787c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007880:	d008      	beq.n	8007894 <UART_SetConfig+0x260>
 8007882:	e00f      	b.n	80078a4 <UART_SetConfig+0x270>
 8007884:	2300      	movs	r3, #0
 8007886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800788a:	e052      	b.n	8007932 <UART_SetConfig+0x2fe>
 800788c:	2302      	movs	r3, #2
 800788e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007892:	e04e      	b.n	8007932 <UART_SetConfig+0x2fe>
 8007894:	2304      	movs	r3, #4
 8007896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800789a:	e04a      	b.n	8007932 <UART_SetConfig+0x2fe>
 800789c:	2308      	movs	r3, #8
 800789e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078a2:	e046      	b.n	8007932 <UART_SetConfig+0x2fe>
 80078a4:	2310      	movs	r3, #16
 80078a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078aa:	e042      	b.n	8007932 <UART_SetConfig+0x2fe>
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a17      	ldr	r2, [pc, #92]	; (8007910 <UART_SetConfig+0x2dc>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d13a      	bne.n	800792c <UART_SetConfig+0x2f8>
 80078b6:	4b18      	ldr	r3, [pc, #96]	; (8007918 <UART_SetConfig+0x2e4>)
 80078b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078c4:	d01a      	beq.n	80078fc <UART_SetConfig+0x2c8>
 80078c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078ca:	d81b      	bhi.n	8007904 <UART_SetConfig+0x2d0>
 80078cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078d0:	d00c      	beq.n	80078ec <UART_SetConfig+0x2b8>
 80078d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078d6:	d815      	bhi.n	8007904 <UART_SetConfig+0x2d0>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <UART_SetConfig+0x2b0>
 80078dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e0:	d008      	beq.n	80078f4 <UART_SetConfig+0x2c0>
 80078e2:	e00f      	b.n	8007904 <UART_SetConfig+0x2d0>
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078ea:	e022      	b.n	8007932 <UART_SetConfig+0x2fe>
 80078ec:	2302      	movs	r3, #2
 80078ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078f2:	e01e      	b.n	8007932 <UART_SetConfig+0x2fe>
 80078f4:	2304      	movs	r3, #4
 80078f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078fa:	e01a      	b.n	8007932 <UART_SetConfig+0x2fe>
 80078fc:	2308      	movs	r3, #8
 80078fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007902:	e016      	b.n	8007932 <UART_SetConfig+0x2fe>
 8007904:	2310      	movs	r3, #16
 8007906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800790a:	e012      	b.n	8007932 <UART_SetConfig+0x2fe>
 800790c:	cfff69f3 	.word	0xcfff69f3
 8007910:	40008000 	.word	0x40008000
 8007914:	40013800 	.word	0x40013800
 8007918:	40021000 	.word	0x40021000
 800791c:	40004400 	.word	0x40004400
 8007920:	40004800 	.word	0x40004800
 8007924:	40004c00 	.word	0x40004c00
 8007928:	40005000 	.word	0x40005000
 800792c:	2310      	movs	r3, #16
 800792e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4aae      	ldr	r2, [pc, #696]	; (8007bf0 <UART_SetConfig+0x5bc>)
 8007938:	4293      	cmp	r3, r2
 800793a:	f040 8097 	bne.w	8007a6c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800793e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007942:	2b08      	cmp	r3, #8
 8007944:	d823      	bhi.n	800798e <UART_SetConfig+0x35a>
 8007946:	a201      	add	r2, pc, #4	; (adr r2, 800794c <UART_SetConfig+0x318>)
 8007948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794c:	08007971 	.word	0x08007971
 8007950:	0800798f 	.word	0x0800798f
 8007954:	08007979 	.word	0x08007979
 8007958:	0800798f 	.word	0x0800798f
 800795c:	0800797f 	.word	0x0800797f
 8007960:	0800798f 	.word	0x0800798f
 8007964:	0800798f 	.word	0x0800798f
 8007968:	0800798f 	.word	0x0800798f
 800796c:	08007987 	.word	0x08007987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007970:	f7fd f8ee 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 8007974:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007976:	e010      	b.n	800799a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007978:	4b9e      	ldr	r3, [pc, #632]	; (8007bf4 <UART_SetConfig+0x5c0>)
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800797c:	e00d      	b.n	800799a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800797e:	f7fd f879 	bl	8004a74 <HAL_RCC_GetSysClockFreq>
 8007982:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007984:	e009      	b.n	800799a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800798a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800798c:	e005      	b.n	800799a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800798e:	2300      	movs	r3, #0
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007998:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 8130 	beq.w	8007c02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	4a94      	ldr	r2, [pc, #592]	; (8007bf8 <UART_SetConfig+0x5c4>)
 80079a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079ac:	461a      	mov	r2, r3
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	4613      	mov	r3, r2
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	4413      	add	r3, r2
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d305      	bcc.n	80079d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d903      	bls.n	80079da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079d8:	e113      	b.n	8007c02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	2200      	movs	r2, #0
 80079de:	60bb      	str	r3, [r7, #8]
 80079e0:	60fa      	str	r2, [r7, #12]
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	4a84      	ldr	r2, [pc, #528]	; (8007bf8 <UART_SetConfig+0x5c4>)
 80079e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2200      	movs	r2, #0
 80079f0:	603b      	str	r3, [r7, #0]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079fc:	f7f8 fc68 	bl	80002d0 <__aeabi_uldivmod>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4610      	mov	r0, r2
 8007a06:	4619      	mov	r1, r3
 8007a08:	f04f 0200 	mov.w	r2, #0
 8007a0c:	f04f 0300 	mov.w	r3, #0
 8007a10:	020b      	lsls	r3, r1, #8
 8007a12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a16:	0202      	lsls	r2, r0, #8
 8007a18:	6979      	ldr	r1, [r7, #20]
 8007a1a:	6849      	ldr	r1, [r1, #4]
 8007a1c:	0849      	lsrs	r1, r1, #1
 8007a1e:	2000      	movs	r0, #0
 8007a20:	460c      	mov	r4, r1
 8007a22:	4605      	mov	r5, r0
 8007a24:	eb12 0804 	adds.w	r8, r2, r4
 8007a28:	eb43 0905 	adc.w	r9, r3, r5
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	469a      	mov	sl, r3
 8007a34:	4693      	mov	fp, r2
 8007a36:	4652      	mov	r2, sl
 8007a38:	465b      	mov	r3, fp
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	f7f8 fc47 	bl	80002d0 <__aeabi_uldivmod>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	4613      	mov	r3, r2
 8007a48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a50:	d308      	bcc.n	8007a64 <UART_SetConfig+0x430>
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a58:	d204      	bcs.n	8007a64 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6a3a      	ldr	r2, [r7, #32]
 8007a60:	60da      	str	r2, [r3, #12]
 8007a62:	e0ce      	b.n	8007c02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007a6a:	e0ca      	b.n	8007c02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a74:	d166      	bne.n	8007b44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007a76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	d827      	bhi.n	8007ace <UART_SetConfig+0x49a>
 8007a7e:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <UART_SetConfig+0x450>)
 8007a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a84:	08007aa9 	.word	0x08007aa9
 8007a88:	08007ab1 	.word	0x08007ab1
 8007a8c:	08007ab9 	.word	0x08007ab9
 8007a90:	08007acf 	.word	0x08007acf
 8007a94:	08007abf 	.word	0x08007abf
 8007a98:	08007acf 	.word	0x08007acf
 8007a9c:	08007acf 	.word	0x08007acf
 8007aa0:	08007acf 	.word	0x08007acf
 8007aa4:	08007ac7 	.word	0x08007ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aa8:	f7fd f852 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 8007aac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007aae:	e014      	b.n	8007ada <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ab0:	f7fd f864 	bl	8004b7c <HAL_RCC_GetPCLK2Freq>
 8007ab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ab6:	e010      	b.n	8007ada <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ab8:	4b4e      	ldr	r3, [pc, #312]	; (8007bf4 <UART_SetConfig+0x5c0>)
 8007aba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007abc:	e00d      	b.n	8007ada <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007abe:	f7fc ffd9 	bl	8004a74 <HAL_RCC_GetSysClockFreq>
 8007ac2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ac4:	e009      	b.n	8007ada <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007acc:	e005      	b.n	8007ada <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ad8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8090 	beq.w	8007c02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	4a44      	ldr	r2, [pc, #272]	; (8007bf8 <UART_SetConfig+0x5c4>)
 8007ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aec:	461a      	mov	r2, r3
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007af4:	005a      	lsls	r2, r3, #1
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	085b      	lsrs	r3, r3, #1
 8007afc:	441a      	add	r2, r3
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	2b0f      	cmp	r3, #15
 8007b0c:	d916      	bls.n	8007b3c <UART_SetConfig+0x508>
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b14:	d212      	bcs.n	8007b3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	f023 030f 	bic.w	r3, r3, #15
 8007b1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	085b      	lsrs	r3, r3, #1
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	8bfb      	ldrh	r3, [r7, #30]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	8bfa      	ldrh	r2, [r7, #30]
 8007b38:	60da      	str	r2, [r3, #12]
 8007b3a:	e062      	b.n	8007c02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007b42:	e05e      	b.n	8007c02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b48:	2b08      	cmp	r3, #8
 8007b4a:	d828      	bhi.n	8007b9e <UART_SetConfig+0x56a>
 8007b4c:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <UART_SetConfig+0x520>)
 8007b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b52:	bf00      	nop
 8007b54:	08007b79 	.word	0x08007b79
 8007b58:	08007b81 	.word	0x08007b81
 8007b5c:	08007b89 	.word	0x08007b89
 8007b60:	08007b9f 	.word	0x08007b9f
 8007b64:	08007b8f 	.word	0x08007b8f
 8007b68:	08007b9f 	.word	0x08007b9f
 8007b6c:	08007b9f 	.word	0x08007b9f
 8007b70:	08007b9f 	.word	0x08007b9f
 8007b74:	08007b97 	.word	0x08007b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b78:	f7fc ffea 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 8007b7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b7e:	e014      	b.n	8007baa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b80:	f7fc fffc 	bl	8004b7c <HAL_RCC_GetPCLK2Freq>
 8007b84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b86:	e010      	b.n	8007baa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b88:	4b1a      	ldr	r3, [pc, #104]	; (8007bf4 <UART_SetConfig+0x5c0>)
 8007b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b8c:	e00d      	b.n	8007baa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b8e:	f7fc ff71 	bl	8004a74 <HAL_RCC_GetSysClockFreq>
 8007b92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b94:	e009      	b.n	8007baa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b9c:	e005      	b.n	8007baa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ba8:	bf00      	nop
    }

    if (pclk != 0U)
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d028      	beq.n	8007c02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	4a10      	ldr	r2, [pc, #64]	; (8007bf8 <UART_SetConfig+0x5c4>)
 8007bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	085b      	lsrs	r3, r3, #1
 8007bc8:	441a      	add	r2, r3
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	2b0f      	cmp	r3, #15
 8007bd8:	d910      	bls.n	8007bfc <UART_SetConfig+0x5c8>
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be0:	d20c      	bcs.n	8007bfc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60da      	str	r2, [r3, #12]
 8007bec:	e009      	b.n	8007c02 <UART_SetConfig+0x5ce>
 8007bee:	bf00      	nop
 8007bf0:	40008000 	.word	0x40008000
 8007bf4:	00f42400 	.word	0x00f42400
 8007bf8:	08009a5c 	.word	0x08009a5c
      }
      else
      {
        ret = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2200      	movs	r2, #0
 8007c16:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007c1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3730      	adds	r7, #48	; 0x30
 8007c26:	46bd      	mov	sp, r7
 8007c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00a      	beq.n	8007c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00a      	beq.n	8007c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce2:	f003 0320 	and.w	r3, r3, #32
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01a      	beq.n	8007d42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d2a:	d10a      	bne.n	8007d42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	605a      	str	r2, [r3, #4]
  }
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d80:	f7f9 ff2e 	bl	8001be0 <HAL_GetTick>
 8007d84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d10e      	bne.n	8007db2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f82f 	bl	8007e06 <UART_WaitOnFlagUntilTimeout>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e025      	b.n	8007dfe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d10e      	bne.n	8007dde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f819 	bl	8007e06 <UART_WaitOnFlagUntilTimeout>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e00f      	b.n	8007dfe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b09c      	sub	sp, #112	; 0x70
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	60f8      	str	r0, [r7, #12]
 8007e0e:	60b9      	str	r1, [r7, #8]
 8007e10:	603b      	str	r3, [r7, #0]
 8007e12:	4613      	mov	r3, r2
 8007e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e16:	e0a9      	b.n	8007f6c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1e:	f000 80a5 	beq.w	8007f6c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e22:	f7f9 fedd 	bl	8001be0 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d302      	bcc.n	8007e38 <UART_WaitOnFlagUntilTimeout+0x32>
 8007e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d140      	bne.n	8007eba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e4c:	667b      	str	r3, [r7, #100]	; 0x64
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e58:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e5e:	e841 2300 	strex	r3, r2, [r1]
 8007e62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e6      	bne.n	8007e38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e74:	e853 3f00 	ldrex	r3, [r3]
 8007e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	f023 0301 	bic.w	r3, r3, #1
 8007e80:	663b      	str	r3, [r7, #96]	; 0x60
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3308      	adds	r3, #8
 8007e88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e92:	e841 2300 	strex	r3, r2, [r1]
 8007e96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e5      	bne.n	8007e6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e069      	b.n	8007f8e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0304 	and.w	r3, r3, #4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d051      	beq.n	8007f6c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ed6:	d149      	bne.n	8007f6c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ee0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	461a      	mov	r2, r3
 8007efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f00:	637b      	str	r3, [r7, #52]	; 0x34
 8007f02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e6      	bne.n	8007ee2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3308      	adds	r3, #8
 8007f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	613b      	str	r3, [r7, #16]
   return(result);
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	f023 0301 	bic.w	r3, r3, #1
 8007f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3308      	adds	r3, #8
 8007f32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f34:	623a      	str	r2, [r7, #32]
 8007f36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	69f9      	ldr	r1, [r7, #28]
 8007f3a:	6a3a      	ldr	r2, [r7, #32]
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e5      	bne.n	8007f14 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e010      	b.n	8007f8e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	69da      	ldr	r2, [r3, #28]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	4013      	ands	r3, r2
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	bf0c      	ite	eq
 8007f7c:	2301      	moveq	r3, #1
 8007f7e:	2300      	movne	r3, #0
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	461a      	mov	r2, r3
 8007f84:	79fb      	ldrb	r3, [r7, #7]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	f43f af46 	beq.w	8007e18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3770      	adds	r7, #112	; 0x70
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b0a3      	sub	sp, #140	; 0x8c
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	88fa      	ldrh	r2, [r7, #6]
 8007fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	88fa      	ldrh	r2, [r7, #6]
 8007fb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fca:	d10e      	bne.n	8007fea <UART_Start_Receive_IT+0x52>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d105      	bne.n	8007fe0 <UART_Start_Receive_IT+0x48>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007fda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fde:	e02d      	b.n	800803c <UART_Start_Receive_IT+0xa4>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	22ff      	movs	r2, #255	; 0xff
 8007fe4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fe8:	e028      	b.n	800803c <UART_Start_Receive_IT+0xa4>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10d      	bne.n	800800e <UART_Start_Receive_IT+0x76>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d104      	bne.n	8008004 <UART_Start_Receive_IT+0x6c>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	22ff      	movs	r2, #255	; 0xff
 8007ffe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008002:	e01b      	b.n	800803c <UART_Start_Receive_IT+0xa4>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	227f      	movs	r2, #127	; 0x7f
 8008008:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800800c:	e016      	b.n	800803c <UART_Start_Receive_IT+0xa4>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008016:	d10d      	bne.n	8008034 <UART_Start_Receive_IT+0x9c>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d104      	bne.n	800802a <UART_Start_Receive_IT+0x92>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	227f      	movs	r2, #127	; 0x7f
 8008024:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008028:	e008      	b.n	800803c <UART_Start_Receive_IT+0xa4>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	223f      	movs	r2, #63	; 0x3f
 800802e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008032:	e003      	b.n	800803c <UART_Start_Receive_IT+0xa4>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2222      	movs	r2, #34	; 0x22
 8008048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3308      	adds	r3, #8
 8008052:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008056:	e853 3f00 	ldrex	r3, [r3]
 800805a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800805c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800805e:	f043 0301 	orr.w	r3, r3, #1
 8008062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3308      	adds	r3, #8
 800806c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008070:	673a      	str	r2, [r7, #112]	; 0x70
 8008072:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008076:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800807e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e3      	bne.n	800804c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800808c:	d153      	bne.n	8008136 <UART_Start_Receive_IT+0x19e>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008094:	88fa      	ldrh	r2, [r7, #6]
 8008096:	429a      	cmp	r2, r3
 8008098:	d34d      	bcc.n	8008136 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a2:	d107      	bne.n	80080b4 <UART_Start_Receive_IT+0x11c>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d103      	bne.n	80080b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4a4b      	ldr	r2, [pc, #300]	; (80081dc <UART_Start_Receive_IT+0x244>)
 80080b0:	671a      	str	r2, [r3, #112]	; 0x70
 80080b2:	e002      	b.n	80080ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	4a4a      	ldr	r2, [pc, #296]	; (80081e0 <UART_Start_Receive_IT+0x248>)
 80080b8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d01a      	beq.n	8008100 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080ee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080f4:	e841 2300 	strex	r3, r2, [r1]
 80080f8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80080fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e4      	bne.n	80080ca <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3308      	adds	r3, #8
 8008106:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008116:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3308      	adds	r3, #8
 800811e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008120:	64ba      	str	r2, [r7, #72]	; 0x48
 8008122:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800812e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e5      	bne.n	8008100 <UART_Start_Receive_IT+0x168>
 8008134:	e04a      	b.n	80081cc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813e:	d107      	bne.n	8008150 <UART_Start_Receive_IT+0x1b8>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d103      	bne.n	8008150 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4a26      	ldr	r2, [pc, #152]	; (80081e4 <UART_Start_Receive_IT+0x24c>)
 800814c:	671a      	str	r2, [r3, #112]	; 0x70
 800814e:	e002      	b.n	8008156 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4a25      	ldr	r2, [pc, #148]	; (80081e8 <UART_Start_Receive_IT+0x250>)
 8008154:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d019      	beq.n	800819a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800817a:	677b      	str	r3, [r7, #116]	; 0x74
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	461a      	mov	r2, r3
 8008182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008184:	637b      	str	r3, [r7, #52]	; 0x34
 8008186:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800818a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e6      	bne.n	8008166 <UART_Start_Receive_IT+0x1ce>
 8008198:	e018      	b.n	80081cc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	e853 3f00 	ldrex	r3, [r3]
 80081a6:	613b      	str	r3, [r7, #16]
   return(result);
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f043 0320 	orr.w	r3, r3, #32
 80081ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	461a      	mov	r2, r3
 80081b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081b8:	623b      	str	r3, [r7, #32]
 80081ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081bc:	69f9      	ldr	r1, [r7, #28]
 80081be:	6a3a      	ldr	r2, [r7, #32]
 80081c0:	e841 2300 	strex	r3, r2, [r1]
 80081c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e6      	bne.n	800819a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	378c      	adds	r7, #140	; 0x8c
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	080088f5 	.word	0x080088f5
 80081e0:	080085fd 	.word	0x080085fd
 80081e4:	0800849b 	.word	0x0800849b
 80081e8:	0800833b 	.word	0x0800833b

080081ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b095      	sub	sp, #84	; 0x54
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008208:	64fb      	str	r3, [r7, #76]	; 0x4c
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	461a      	mov	r2, r3
 8008210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008212:	643b      	str	r3, [r7, #64]	; 0x40
 8008214:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008216:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008218:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e6      	bne.n	80081f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3308      	adds	r3, #8
 800822c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	61fb      	str	r3, [r7, #28]
   return(result);
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800823c:	f023 0301 	bic.w	r3, r3, #1
 8008240:	64bb      	str	r3, [r7, #72]	; 0x48
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3308      	adds	r3, #8
 8008248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800824a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800824c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e3      	bne.n	8008226 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008262:	2b01      	cmp	r3, #1
 8008264:	d118      	bne.n	8008298 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	e853 3f00 	ldrex	r3, [r3]
 8008272:	60bb      	str	r3, [r7, #8]
   return(result);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	f023 0310 	bic.w	r3, r3, #16
 800827a:	647b      	str	r3, [r7, #68]	; 0x44
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	461a      	mov	r2, r3
 8008282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008284:	61bb      	str	r3, [r7, #24]
 8008286:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008288:	6979      	ldr	r1, [r7, #20]
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	e841 2300 	strex	r3, r2, [r1]
 8008290:	613b      	str	r3, [r7, #16]
   return(result);
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1e6      	bne.n	8008266 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 80082ac:	bf00      	nop
 80082ae:	3754      	adds	r7, #84	; 0x54
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f7ff f996 	bl	8007608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082dc:	bf00      	nop
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b088      	sub	sp, #32
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008300:	61fb      	str	r3, [r7, #28]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	61bb      	str	r3, [r7, #24]
 800830c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830e:	6979      	ldr	r1, [r7, #20]
 8008310:	69ba      	ldr	r2, [r7, #24]
 8008312:	e841 2300 	strex	r3, r2, [r1]
 8008316:	613b      	str	r3, [r7, #16]
   return(result);
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1e6      	bne.n	80082ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff f961 	bl	80075f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008332:	bf00      	nop
 8008334:	3720      	adds	r7, #32
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b096      	sub	sp, #88	; 0x58
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008348:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008352:	2b22      	cmp	r3, #34	; 0x22
 8008354:	f040 8095 	bne.w	8008482 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008362:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008366:	b2d9      	uxtb	r1, r3
 8008368:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800836c:	b2da      	uxtb	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008372:	400a      	ands	r2, r1
 8008374:	b2d2      	uxtb	r2, r2
 8008376:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008388:	b29b      	uxth	r3, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800839a:	b29b      	uxth	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d178      	bne.n	8008492 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a8:	e853 3f00 	ldrex	r3, [r3]
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083b4:	653b      	str	r3, [r7, #80]	; 0x50
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083be:	647b      	str	r3, [r7, #68]	; 0x44
 80083c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e6      	bne.n	80083a0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3308      	adds	r3, #8
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	623b      	str	r3, [r7, #32]
   return(result);
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	f023 0301 	bic.w	r3, r3, #1
 80083e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3308      	adds	r3, #8
 80083f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083f2:	633a      	str	r2, [r7, #48]	; 0x30
 80083f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e5      	bne.n	80083d2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2220      	movs	r2, #32
 800840a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008418:	2b01      	cmp	r3, #1
 800841a:	d12e      	bne.n	800847a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f023 0310 	bic.w	r3, r3, #16
 8008436:	64bb      	str	r3, [r7, #72]	; 0x48
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008440:	61fb      	str	r3, [r7, #28]
 8008442:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	69b9      	ldr	r1, [r7, #24]
 8008446:	69fa      	ldr	r2, [r7, #28]
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	617b      	str	r3, [r7, #20]
   return(result);
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e6      	bne.n	8008422 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	f003 0310 	and.w	r3, r3, #16
 800845e:	2b10      	cmp	r3, #16
 8008460:	d103      	bne.n	800846a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2210      	movs	r2, #16
 8008468:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7ff f8d2 	bl	800761c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008478:	e00b      	b.n	8008492 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7f8 fc9c 	bl	8000db8 <HAL_UART_RxCpltCallback>
}
 8008480:	e007      	b.n	8008492 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699a      	ldr	r2, [r3, #24]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f042 0208 	orr.w	r2, r2, #8
 8008490:	619a      	str	r2, [r3, #24]
}
 8008492:	bf00      	nop
 8008494:	3758      	adds	r7, #88	; 0x58
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b096      	sub	sp, #88	; 0x58
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b2:	2b22      	cmp	r3, #34	; 0x22
 80084b4:	f040 8095 	bne.w	80085e2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80084c8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80084cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80084d0:	4013      	ands	r3, r2
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084dc:	1c9a      	adds	r2, r3, #2
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d178      	bne.n	80085f2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008508:	e853 3f00 	ldrex	r3, [r3]
 800850c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008514:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800851e:	643b      	str	r3, [r7, #64]	; 0x40
 8008520:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008524:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e6      	bne.n	8008500 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	3308      	adds	r3, #8
 8008538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	61fb      	str	r3, [r7, #28]
   return(result);
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	f023 0301 	bic.w	r3, r3, #1
 8008548:	64bb      	str	r3, [r7, #72]	; 0x48
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3308      	adds	r3, #8
 8008550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008552:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008554:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e5      	bne.n	8008532 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008578:	2b01      	cmp	r3, #1
 800857a:	d12e      	bne.n	80085da <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	e853 3f00 	ldrex	r3, [r3]
 800858e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f023 0310 	bic.w	r3, r3, #16
 8008596:	647b      	str	r3, [r7, #68]	; 0x44
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085a0:	61bb      	str	r3, [r7, #24]
 80085a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a4:	6979      	ldr	r1, [r7, #20]
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	e841 2300 	strex	r3, r2, [r1]
 80085ac:	613b      	str	r3, [r7, #16]
   return(result);
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1e6      	bne.n	8008582 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f003 0310 	and.w	r3, r3, #16
 80085be:	2b10      	cmp	r3, #16
 80085c0:	d103      	bne.n	80085ca <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2210      	movs	r2, #16
 80085c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7ff f822 	bl	800761c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085d8:	e00b      	b.n	80085f2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7f8 fbec 	bl	8000db8 <HAL_UART_RxCpltCallback>
}
 80085e0:	e007      	b.n	80085f2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	699a      	ldr	r2, [r3, #24]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f042 0208 	orr.w	r2, r2, #8
 80085f0:	619a      	str	r2, [r3, #24]
}
 80085f2:	bf00      	nop
 80085f4:	3758      	adds	r7, #88	; 0x58
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b0a6      	sub	sp, #152	; 0x98
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800860a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008632:	2b22      	cmp	r3, #34	; 0x22
 8008634:	f040 814f 	bne.w	80088d6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800863e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008642:	e0f6      	b.n	8008832 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800864e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008652:	b2d9      	uxtb	r1, r3
 8008654:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008658:	b2da      	uxtb	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865e:	400a      	ands	r2, r1
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008674:	b29b      	uxth	r3, r3
 8008676:	3b01      	subs	r3, #1
 8008678:	b29a      	uxth	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800868a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	2b00      	cmp	r3, #0
 8008694:	d053      	beq.n	800873e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008696:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d011      	beq.n	80086c6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80086a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2201      	movs	r2, #1
 80086b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086bc:	f043 0201 	orr.w	r2, r3, #1
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d011      	beq.n	80086f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80086d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00b      	beq.n	80086f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2202      	movs	r2, #2
 80086e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ec:	f043 0204 	orr.w	r2, r3, #4
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086fa:	f003 0304 	and.w	r3, r3, #4
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d011      	beq.n	8008726 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008702:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00b      	beq.n	8008726 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2204      	movs	r2, #4
 8008714:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800871c:	f043 0202 	orr.w	r2, r3, #2
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d006      	beq.n	800873e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7fe ff69 	bl	8007608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008744:	b29b      	uxth	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d173      	bne.n	8008832 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008752:	e853 3f00 	ldrex	r3, [r3]
 8008756:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800875a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800875e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800876c:	66bb      	str	r3, [r7, #104]	; 0x68
 800876e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008772:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008774:	e841 2300 	strex	r3, r2, [r1]
 8008778:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800877a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e4      	bne.n	800874a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3308      	adds	r3, #8
 8008786:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800878a:	e853 3f00 	ldrex	r3, [r3]
 800878e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008796:	f023 0301 	bic.w	r3, r3, #1
 800879a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3308      	adds	r3, #8
 80087a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80087a4:	657a      	str	r2, [r7, #84]	; 0x54
 80087a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087ac:	e841 2300 	strex	r3, r2, [r1]
 80087b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80087b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1e3      	bne.n	8008780 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2220      	movs	r2, #32
 80087bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d12e      	bne.n	800882c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087dc:	e853 3f00 	ldrex	r3, [r3]
 80087e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	f023 0310 	bic.w	r3, r3, #16
 80087e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087f2:	643b      	str	r3, [r7, #64]	; 0x40
 80087f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087fa:	e841 2300 	strex	r3, r2, [r1]
 80087fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1e6      	bne.n	80087d4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	f003 0310 	and.w	r3, r3, #16
 8008810:	2b10      	cmp	r3, #16
 8008812:	d103      	bne.n	800881c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2210      	movs	r2, #16
 800881a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7fe fef9 	bl	800761c <HAL_UARTEx_RxEventCallback>
 800882a:	e002      	b.n	8008832 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7f8 fac3 	bl	8000db8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008832:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008836:	2b00      	cmp	r3, #0
 8008838:	d006      	beq.n	8008848 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800883a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800883e:	f003 0320 	and.w	r3, r3, #32
 8008842:	2b00      	cmp	r3, #0
 8008844:	f47f aefe 	bne.w	8008644 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800884e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008852:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008856:	2b00      	cmp	r3, #0
 8008858:	d045      	beq.n	80088e6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008860:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008864:	429a      	cmp	r2, r3
 8008866:	d23e      	bcs.n	80088e6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3308      	adds	r3, #8
 800886e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	61fb      	str	r3, [r7, #28]
   return(result);
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800887e:	673b      	str	r3, [r7, #112]	; 0x70
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3308      	adds	r3, #8
 8008886:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008888:	62fa      	str	r2, [r7, #44]	; 0x2c
 800888a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800888e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008890:	e841 2300 	strex	r3, r2, [r1]
 8008894:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e5      	bne.n	8008868 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a14      	ldr	r2, [pc, #80]	; (80088f0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80088a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	f043 0320 	orr.w	r3, r3, #32
 80088b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c0:	61bb      	str	r3, [r7, #24]
 80088c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	6979      	ldr	r1, [r7, #20]
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	613b      	str	r3, [r7, #16]
   return(result);
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e6      	bne.n	80088a2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088d4:	e007      	b.n	80088e6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699a      	ldr	r2, [r3, #24]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f042 0208 	orr.w	r2, r2, #8
 80088e4:	619a      	str	r2, [r3, #24]
}
 80088e6:	bf00      	nop
 80088e8:	3798      	adds	r7, #152	; 0x98
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	0800833b 	.word	0x0800833b

080088f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b0a8      	sub	sp, #160	; 0xa0
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008902:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800892a:	2b22      	cmp	r3, #34	; 0x22
 800892c:	f040 8153 	bne.w	8008bd6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008936:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800893a:	e0fa      	b.n	8008b32 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800894a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800894e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008952:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008956:	4013      	ands	r3, r2
 8008958:	b29a      	uxth	r2, r3
 800895a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800895e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008964:	1c9a      	adds	r2, r3, #2
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008970:	b29b      	uxth	r3, r3
 8008972:	3b01      	subs	r3, #1
 8008974:	b29a      	uxth	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008986:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800898a:	f003 0307 	and.w	r3, r3, #7
 800898e:	2b00      	cmp	r3, #0
 8008990:	d053      	beq.n	8008a3a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008992:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	d011      	beq.n	80089c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800899e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80089a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00b      	beq.n	80089c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2201      	movs	r2, #1
 80089b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089b8:	f043 0201 	orr.w	r2, r3, #1
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d011      	beq.n	80089f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80089ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00b      	beq.n	80089f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2202      	movs	r2, #2
 80089e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089e8:	f043 0204 	orr.w	r2, r3, #4
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d011      	beq.n	8008a22 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80089fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00b      	beq.n	8008a22 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2204      	movs	r2, #4
 8008a10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a18:	f043 0202 	orr.w	r2, r3, #2
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d006      	beq.n	8008a3a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7fe fdeb 	bl	8007608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d175      	bne.n	8008b32 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a4e:	e853 3f00 	ldrex	r3, [r3]
 8008a52:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a6a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a70:	e841 2300 	strex	r3, r2, [r1]
 8008a74:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e4      	bne.n	8008a46 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3308      	adds	r3, #8
 8008a82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a86:	e853 3f00 	ldrex	r3, [r3]
 8008a8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a92:	f023 0301 	bic.w	r3, r3, #1
 8008a96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008aa4:	65ba      	str	r2, [r7, #88]	; 0x58
 8008aa6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008aaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008aac:	e841 2300 	strex	r3, r2, [r1]
 8008ab0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1e1      	bne.n	8008a7c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d12e      	bne.n	8008b2c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	e853 3f00 	ldrex	r3, [r3]
 8008ae0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae4:	f023 0310 	bic.w	r3, r3, #16
 8008ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008af2:	647b      	str	r3, [r7, #68]	; 0x44
 8008af4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e6      	bne.n	8008ad4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	69db      	ldr	r3, [r3, #28]
 8008b0c:	f003 0310 	and.w	r3, r3, #16
 8008b10:	2b10      	cmp	r3, #16
 8008b12:	d103      	bne.n	8008b1c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2210      	movs	r2, #16
 8008b1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b22:	4619      	mov	r1, r3
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7fe fd79 	bl	800761c <HAL_UARTEx_RxEventCallback>
 8008b2a:	e002      	b.n	8008b32 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7f8 f943 	bl	8000db8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b32:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d006      	beq.n	8008b48 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008b3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b3e:	f003 0320 	and.w	r3, r3, #32
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f47f aefa 	bne.w	800893c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b4e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008b52:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d045      	beq.n	8008be6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b60:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d23e      	bcs.n	8008be6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	e853 3f00 	ldrex	r3, [r3]
 8008b76:	623b      	str	r3, [r7, #32]
   return(result);
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b7e:	677b      	str	r3, [r7, #116]	; 0x74
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3308      	adds	r3, #8
 8008b86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008b88:	633a      	str	r2, [r7, #48]	; 0x30
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b90:	e841 2300 	strex	r3, r2, [r1]
 8008b94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e5      	bne.n	8008b68 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a14      	ldr	r2, [pc, #80]	; (8008bf0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008ba0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	e853 3f00 	ldrex	r3, [r3]
 8008bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f043 0320 	orr.w	r3, r3, #32
 8008bb6:	673b      	str	r3, [r7, #112]	; 0x70
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bc0:	61fb      	str	r3, [r7, #28]
 8008bc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc4:	69b9      	ldr	r1, [r7, #24]
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	e841 2300 	strex	r3, r2, [r1]
 8008bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1e6      	bne.n	8008ba2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bd4:	e007      	b.n	8008be6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	699a      	ldr	r2, [r3, #24]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f042 0208 	orr.w	r2, r2, #8
 8008be4:	619a      	str	r2, [r3, #24]
}
 8008be6:	bf00      	nop
 8008be8:	37a0      	adds	r7, #160	; 0xa0
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	0800849b 	.word	0x0800849b

08008bf4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d101      	bne.n	8008c46 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c42:	2302      	movs	r3, #2
 8008c44:	e027      	b.n	8008c96 <HAL_UARTEx_DisableFifoMode+0x66>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2224      	movs	r2, #36	; 0x24
 8008c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 0201 	bic.w	r2, r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d101      	bne.n	8008cba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	e02d      	b.n	8008d16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2224      	movs	r2, #36	; 0x24
 8008cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0201 	bic.w	r2, r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f850 	bl	8008d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2220      	movs	r2, #32
 8008d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d32:	2302      	movs	r3, #2
 8008d34:	e02d      	b.n	8008d92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2224      	movs	r2, #36	; 0x24
 8008d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 0201 	bic.w	r2, r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f812 	bl	8008d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
	...

08008d9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d108      	bne.n	8008dbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008dbc:	e031      	b.n	8008e22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008dbe:	2308      	movs	r3, #8
 8008dc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008dc2:	2308      	movs	r3, #8
 8008dc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	0e5b      	lsrs	r3, r3, #25
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 0307 	and.w	r3, r3, #7
 8008dd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	0f5b      	lsrs	r3, r3, #29
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
 8008de8:	7b3a      	ldrb	r2, [r7, #12]
 8008dea:	4911      	ldr	r1, [pc, #68]	; (8008e30 <UARTEx_SetNbDataToProcess+0x94>)
 8008dec:	5c8a      	ldrb	r2, [r1, r2]
 8008dee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008df2:	7b3a      	ldrb	r2, [r7, #12]
 8008df4:	490f      	ldr	r1, [pc, #60]	; (8008e34 <UARTEx_SetNbDataToProcess+0x98>)
 8008df6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	7b7a      	ldrb	r2, [r7, #13]
 8008e08:	4909      	ldr	r1, [pc, #36]	; (8008e30 <UARTEx_SetNbDataToProcess+0x94>)
 8008e0a:	5c8a      	ldrb	r2, [r1, r2]
 8008e0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e10:	7b7a      	ldrb	r2, [r7, #13]
 8008e12:	4908      	ldr	r1, [pc, #32]	; (8008e34 <UARTEx_SetNbDataToProcess+0x98>)
 8008e14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e16:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e22:	bf00      	nop
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	08009a74 	.word	0x08009a74
 8008e34:	08009a7c 	.word	0x08009a7c

08008e38 <siprintf>:
 8008e38:	b40e      	push	{r1, r2, r3}
 8008e3a:	b500      	push	{lr}
 8008e3c:	b09c      	sub	sp, #112	; 0x70
 8008e3e:	ab1d      	add	r3, sp, #116	; 0x74
 8008e40:	9002      	str	r0, [sp, #8]
 8008e42:	9006      	str	r0, [sp, #24]
 8008e44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e48:	4809      	ldr	r0, [pc, #36]	; (8008e70 <siprintf+0x38>)
 8008e4a:	9107      	str	r1, [sp, #28]
 8008e4c:	9104      	str	r1, [sp, #16]
 8008e4e:	4909      	ldr	r1, [pc, #36]	; (8008e74 <siprintf+0x3c>)
 8008e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e54:	9105      	str	r1, [sp, #20]
 8008e56:	6800      	ldr	r0, [r0, #0]
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	a902      	add	r1, sp, #8
 8008e5c:	f000 f9a4 	bl	80091a8 <_svfiprintf_r>
 8008e60:	9b02      	ldr	r3, [sp, #8]
 8008e62:	2200      	movs	r2, #0
 8008e64:	701a      	strb	r2, [r3, #0]
 8008e66:	b01c      	add	sp, #112	; 0x70
 8008e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e6c:	b003      	add	sp, #12
 8008e6e:	4770      	bx	lr
 8008e70:	2000005c 	.word	0x2000005c
 8008e74:	ffff0208 	.word	0xffff0208

08008e78 <memset>:
 8008e78:	4402      	add	r2, r0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d100      	bne.n	8008e82 <memset+0xa>
 8008e80:	4770      	bx	lr
 8008e82:	f803 1b01 	strb.w	r1, [r3], #1
 8008e86:	e7f9      	b.n	8008e7c <memset+0x4>

08008e88 <strncmp>:
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	b16a      	cbz	r2, 8008ea8 <strncmp+0x20>
 8008e8c:	3901      	subs	r1, #1
 8008e8e:	1884      	adds	r4, r0, r2
 8008e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d103      	bne.n	8008ea4 <strncmp+0x1c>
 8008e9c:	42a0      	cmp	r0, r4
 8008e9e:	d001      	beq.n	8008ea4 <strncmp+0x1c>
 8008ea0:	2a00      	cmp	r2, #0
 8008ea2:	d1f5      	bne.n	8008e90 <strncmp+0x8>
 8008ea4:	1ad0      	subs	r0, r2, r3
 8008ea6:	bd10      	pop	{r4, pc}
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	e7fc      	b.n	8008ea6 <strncmp+0x1e>

08008eac <__errno>:
 8008eac:	4b01      	ldr	r3, [pc, #4]	; (8008eb4 <__errno+0x8>)
 8008eae:	6818      	ldr	r0, [r3, #0]
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	2000005c 	.word	0x2000005c

08008eb8 <__libc_init_array>:
 8008eb8:	b570      	push	{r4, r5, r6, lr}
 8008eba:	4d0d      	ldr	r5, [pc, #52]	; (8008ef0 <__libc_init_array+0x38>)
 8008ebc:	4c0d      	ldr	r4, [pc, #52]	; (8008ef4 <__libc_init_array+0x3c>)
 8008ebe:	1b64      	subs	r4, r4, r5
 8008ec0:	10a4      	asrs	r4, r4, #2
 8008ec2:	2600      	movs	r6, #0
 8008ec4:	42a6      	cmp	r6, r4
 8008ec6:	d109      	bne.n	8008edc <__libc_init_array+0x24>
 8008ec8:	4d0b      	ldr	r5, [pc, #44]	; (8008ef8 <__libc_init_array+0x40>)
 8008eca:	4c0c      	ldr	r4, [pc, #48]	; (8008efc <__libc_init_array+0x44>)
 8008ecc:	f000 fc6a 	bl	80097a4 <_init>
 8008ed0:	1b64      	subs	r4, r4, r5
 8008ed2:	10a4      	asrs	r4, r4, #2
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	42a6      	cmp	r6, r4
 8008ed8:	d105      	bne.n	8008ee6 <__libc_init_array+0x2e>
 8008eda:	bd70      	pop	{r4, r5, r6, pc}
 8008edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee0:	4798      	blx	r3
 8008ee2:	3601      	adds	r6, #1
 8008ee4:	e7ee      	b.n	8008ec4 <__libc_init_array+0xc>
 8008ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eea:	4798      	blx	r3
 8008eec:	3601      	adds	r6, #1
 8008eee:	e7f2      	b.n	8008ed6 <__libc_init_array+0x1e>
 8008ef0:	08009ac0 	.word	0x08009ac0
 8008ef4:	08009ac0 	.word	0x08009ac0
 8008ef8:	08009ac0 	.word	0x08009ac0
 8008efc:	08009ac4 	.word	0x08009ac4

08008f00 <__retarget_lock_acquire_recursive>:
 8008f00:	4770      	bx	lr

08008f02 <__retarget_lock_release_recursive>:
 8008f02:	4770      	bx	lr

08008f04 <_free_r>:
 8008f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f06:	2900      	cmp	r1, #0
 8008f08:	d044      	beq.n	8008f94 <_free_r+0x90>
 8008f0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f0e:	9001      	str	r0, [sp, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f1a1 0404 	sub.w	r4, r1, #4
 8008f16:	bfb8      	it	lt
 8008f18:	18e4      	addlt	r4, r4, r3
 8008f1a:	f000 f8df 	bl	80090dc <__malloc_lock>
 8008f1e:	4a1e      	ldr	r2, [pc, #120]	; (8008f98 <_free_r+0x94>)
 8008f20:	9801      	ldr	r0, [sp, #4]
 8008f22:	6813      	ldr	r3, [r2, #0]
 8008f24:	b933      	cbnz	r3, 8008f34 <_free_r+0x30>
 8008f26:	6063      	str	r3, [r4, #4]
 8008f28:	6014      	str	r4, [r2, #0]
 8008f2a:	b003      	add	sp, #12
 8008f2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f30:	f000 b8da 	b.w	80090e8 <__malloc_unlock>
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	d908      	bls.n	8008f4a <_free_r+0x46>
 8008f38:	6825      	ldr	r5, [r4, #0]
 8008f3a:	1961      	adds	r1, r4, r5
 8008f3c:	428b      	cmp	r3, r1
 8008f3e:	bf01      	itttt	eq
 8008f40:	6819      	ldreq	r1, [r3, #0]
 8008f42:	685b      	ldreq	r3, [r3, #4]
 8008f44:	1949      	addeq	r1, r1, r5
 8008f46:	6021      	streq	r1, [r4, #0]
 8008f48:	e7ed      	b.n	8008f26 <_free_r+0x22>
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	b10b      	cbz	r3, 8008f54 <_free_r+0x50>
 8008f50:	42a3      	cmp	r3, r4
 8008f52:	d9fa      	bls.n	8008f4a <_free_r+0x46>
 8008f54:	6811      	ldr	r1, [r2, #0]
 8008f56:	1855      	adds	r5, r2, r1
 8008f58:	42a5      	cmp	r5, r4
 8008f5a:	d10b      	bne.n	8008f74 <_free_r+0x70>
 8008f5c:	6824      	ldr	r4, [r4, #0]
 8008f5e:	4421      	add	r1, r4
 8008f60:	1854      	adds	r4, r2, r1
 8008f62:	42a3      	cmp	r3, r4
 8008f64:	6011      	str	r1, [r2, #0]
 8008f66:	d1e0      	bne.n	8008f2a <_free_r+0x26>
 8008f68:	681c      	ldr	r4, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	6053      	str	r3, [r2, #4]
 8008f6e:	440c      	add	r4, r1
 8008f70:	6014      	str	r4, [r2, #0]
 8008f72:	e7da      	b.n	8008f2a <_free_r+0x26>
 8008f74:	d902      	bls.n	8008f7c <_free_r+0x78>
 8008f76:	230c      	movs	r3, #12
 8008f78:	6003      	str	r3, [r0, #0]
 8008f7a:	e7d6      	b.n	8008f2a <_free_r+0x26>
 8008f7c:	6825      	ldr	r5, [r4, #0]
 8008f7e:	1961      	adds	r1, r4, r5
 8008f80:	428b      	cmp	r3, r1
 8008f82:	bf04      	itt	eq
 8008f84:	6819      	ldreq	r1, [r3, #0]
 8008f86:	685b      	ldreq	r3, [r3, #4]
 8008f88:	6063      	str	r3, [r4, #4]
 8008f8a:	bf04      	itt	eq
 8008f8c:	1949      	addeq	r1, r1, r5
 8008f8e:	6021      	streq	r1, [r4, #0]
 8008f90:	6054      	str	r4, [r2, #4]
 8008f92:	e7ca      	b.n	8008f2a <_free_r+0x26>
 8008f94:	b003      	add	sp, #12
 8008f96:	bd30      	pop	{r4, r5, pc}
 8008f98:	20000560 	.word	0x20000560

08008f9c <sbrk_aligned>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	4e0e      	ldr	r6, [pc, #56]	; (8008fd8 <sbrk_aligned+0x3c>)
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	6831      	ldr	r1, [r6, #0]
 8008fa4:	4605      	mov	r5, r0
 8008fa6:	b911      	cbnz	r1, 8008fae <sbrk_aligned+0x12>
 8008fa8:	f000 fba6 	bl	80096f8 <_sbrk_r>
 8008fac:	6030      	str	r0, [r6, #0]
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f000 fba1 	bl	80096f8 <_sbrk_r>
 8008fb6:	1c43      	adds	r3, r0, #1
 8008fb8:	d00a      	beq.n	8008fd0 <sbrk_aligned+0x34>
 8008fba:	1cc4      	adds	r4, r0, #3
 8008fbc:	f024 0403 	bic.w	r4, r4, #3
 8008fc0:	42a0      	cmp	r0, r4
 8008fc2:	d007      	beq.n	8008fd4 <sbrk_aligned+0x38>
 8008fc4:	1a21      	subs	r1, r4, r0
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f000 fb96 	bl	80096f8 <_sbrk_r>
 8008fcc:	3001      	adds	r0, #1
 8008fce:	d101      	bne.n	8008fd4 <sbrk_aligned+0x38>
 8008fd0:	f04f 34ff 	mov.w	r4, #4294967295
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}
 8008fd8:	20000564 	.word	0x20000564

08008fdc <_malloc_r>:
 8008fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe0:	1ccd      	adds	r5, r1, #3
 8008fe2:	f025 0503 	bic.w	r5, r5, #3
 8008fe6:	3508      	adds	r5, #8
 8008fe8:	2d0c      	cmp	r5, #12
 8008fea:	bf38      	it	cc
 8008fec:	250c      	movcc	r5, #12
 8008fee:	2d00      	cmp	r5, #0
 8008ff0:	4607      	mov	r7, r0
 8008ff2:	db01      	blt.n	8008ff8 <_malloc_r+0x1c>
 8008ff4:	42a9      	cmp	r1, r5
 8008ff6:	d905      	bls.n	8009004 <_malloc_r+0x28>
 8008ff8:	230c      	movs	r3, #12
 8008ffa:	603b      	str	r3, [r7, #0]
 8008ffc:	2600      	movs	r6, #0
 8008ffe:	4630      	mov	r0, r6
 8009000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009004:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090d8 <_malloc_r+0xfc>
 8009008:	f000 f868 	bl	80090dc <__malloc_lock>
 800900c:	f8d8 3000 	ldr.w	r3, [r8]
 8009010:	461c      	mov	r4, r3
 8009012:	bb5c      	cbnz	r4, 800906c <_malloc_r+0x90>
 8009014:	4629      	mov	r1, r5
 8009016:	4638      	mov	r0, r7
 8009018:	f7ff ffc0 	bl	8008f9c <sbrk_aligned>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	4604      	mov	r4, r0
 8009020:	d155      	bne.n	80090ce <_malloc_r+0xf2>
 8009022:	f8d8 4000 	ldr.w	r4, [r8]
 8009026:	4626      	mov	r6, r4
 8009028:	2e00      	cmp	r6, #0
 800902a:	d145      	bne.n	80090b8 <_malloc_r+0xdc>
 800902c:	2c00      	cmp	r4, #0
 800902e:	d048      	beq.n	80090c2 <_malloc_r+0xe6>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	4631      	mov	r1, r6
 8009034:	4638      	mov	r0, r7
 8009036:	eb04 0903 	add.w	r9, r4, r3
 800903a:	f000 fb5d 	bl	80096f8 <_sbrk_r>
 800903e:	4581      	cmp	r9, r0
 8009040:	d13f      	bne.n	80090c2 <_malloc_r+0xe6>
 8009042:	6821      	ldr	r1, [r4, #0]
 8009044:	1a6d      	subs	r5, r5, r1
 8009046:	4629      	mov	r1, r5
 8009048:	4638      	mov	r0, r7
 800904a:	f7ff ffa7 	bl	8008f9c <sbrk_aligned>
 800904e:	3001      	adds	r0, #1
 8009050:	d037      	beq.n	80090c2 <_malloc_r+0xe6>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	442b      	add	r3, r5
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	f8d8 3000 	ldr.w	r3, [r8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d038      	beq.n	80090d2 <_malloc_r+0xf6>
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	42a2      	cmp	r2, r4
 8009064:	d12b      	bne.n	80090be <_malloc_r+0xe2>
 8009066:	2200      	movs	r2, #0
 8009068:	605a      	str	r2, [r3, #4]
 800906a:	e00f      	b.n	800908c <_malloc_r+0xb0>
 800906c:	6822      	ldr	r2, [r4, #0]
 800906e:	1b52      	subs	r2, r2, r5
 8009070:	d41f      	bmi.n	80090b2 <_malloc_r+0xd6>
 8009072:	2a0b      	cmp	r2, #11
 8009074:	d917      	bls.n	80090a6 <_malloc_r+0xca>
 8009076:	1961      	adds	r1, r4, r5
 8009078:	42a3      	cmp	r3, r4
 800907a:	6025      	str	r5, [r4, #0]
 800907c:	bf18      	it	ne
 800907e:	6059      	strne	r1, [r3, #4]
 8009080:	6863      	ldr	r3, [r4, #4]
 8009082:	bf08      	it	eq
 8009084:	f8c8 1000 	streq.w	r1, [r8]
 8009088:	5162      	str	r2, [r4, r5]
 800908a:	604b      	str	r3, [r1, #4]
 800908c:	4638      	mov	r0, r7
 800908e:	f104 060b 	add.w	r6, r4, #11
 8009092:	f000 f829 	bl	80090e8 <__malloc_unlock>
 8009096:	f026 0607 	bic.w	r6, r6, #7
 800909a:	1d23      	adds	r3, r4, #4
 800909c:	1af2      	subs	r2, r6, r3
 800909e:	d0ae      	beq.n	8008ffe <_malloc_r+0x22>
 80090a0:	1b9b      	subs	r3, r3, r6
 80090a2:	50a3      	str	r3, [r4, r2]
 80090a4:	e7ab      	b.n	8008ffe <_malloc_r+0x22>
 80090a6:	42a3      	cmp	r3, r4
 80090a8:	6862      	ldr	r2, [r4, #4]
 80090aa:	d1dd      	bne.n	8009068 <_malloc_r+0x8c>
 80090ac:	f8c8 2000 	str.w	r2, [r8]
 80090b0:	e7ec      	b.n	800908c <_malloc_r+0xb0>
 80090b2:	4623      	mov	r3, r4
 80090b4:	6864      	ldr	r4, [r4, #4]
 80090b6:	e7ac      	b.n	8009012 <_malloc_r+0x36>
 80090b8:	4634      	mov	r4, r6
 80090ba:	6876      	ldr	r6, [r6, #4]
 80090bc:	e7b4      	b.n	8009028 <_malloc_r+0x4c>
 80090be:	4613      	mov	r3, r2
 80090c0:	e7cc      	b.n	800905c <_malloc_r+0x80>
 80090c2:	230c      	movs	r3, #12
 80090c4:	603b      	str	r3, [r7, #0]
 80090c6:	4638      	mov	r0, r7
 80090c8:	f000 f80e 	bl	80090e8 <__malloc_unlock>
 80090cc:	e797      	b.n	8008ffe <_malloc_r+0x22>
 80090ce:	6025      	str	r5, [r4, #0]
 80090d0:	e7dc      	b.n	800908c <_malloc_r+0xb0>
 80090d2:	605b      	str	r3, [r3, #4]
 80090d4:	deff      	udf	#255	; 0xff
 80090d6:	bf00      	nop
 80090d8:	20000560 	.word	0x20000560

080090dc <__malloc_lock>:
 80090dc:	4801      	ldr	r0, [pc, #4]	; (80090e4 <__malloc_lock+0x8>)
 80090de:	f7ff bf0f 	b.w	8008f00 <__retarget_lock_acquire_recursive>
 80090e2:	bf00      	nop
 80090e4:	2000055c 	.word	0x2000055c

080090e8 <__malloc_unlock>:
 80090e8:	4801      	ldr	r0, [pc, #4]	; (80090f0 <__malloc_unlock+0x8>)
 80090ea:	f7ff bf0a 	b.w	8008f02 <__retarget_lock_release_recursive>
 80090ee:	bf00      	nop
 80090f0:	2000055c 	.word	0x2000055c

080090f4 <__ssputs_r>:
 80090f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f8:	688e      	ldr	r6, [r1, #8]
 80090fa:	461f      	mov	r7, r3
 80090fc:	42be      	cmp	r6, r7
 80090fe:	680b      	ldr	r3, [r1, #0]
 8009100:	4682      	mov	sl, r0
 8009102:	460c      	mov	r4, r1
 8009104:	4690      	mov	r8, r2
 8009106:	d82c      	bhi.n	8009162 <__ssputs_r+0x6e>
 8009108:	898a      	ldrh	r2, [r1, #12]
 800910a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800910e:	d026      	beq.n	800915e <__ssputs_r+0x6a>
 8009110:	6965      	ldr	r5, [r4, #20]
 8009112:	6909      	ldr	r1, [r1, #16]
 8009114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009118:	eba3 0901 	sub.w	r9, r3, r1
 800911c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009120:	1c7b      	adds	r3, r7, #1
 8009122:	444b      	add	r3, r9
 8009124:	106d      	asrs	r5, r5, #1
 8009126:	429d      	cmp	r5, r3
 8009128:	bf38      	it	cc
 800912a:	461d      	movcc	r5, r3
 800912c:	0553      	lsls	r3, r2, #21
 800912e:	d527      	bpl.n	8009180 <__ssputs_r+0x8c>
 8009130:	4629      	mov	r1, r5
 8009132:	f7ff ff53 	bl	8008fdc <_malloc_r>
 8009136:	4606      	mov	r6, r0
 8009138:	b360      	cbz	r0, 8009194 <__ssputs_r+0xa0>
 800913a:	6921      	ldr	r1, [r4, #16]
 800913c:	464a      	mov	r2, r9
 800913e:	f000 faeb 	bl	8009718 <memcpy>
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800914c:	81a3      	strh	r3, [r4, #12]
 800914e:	6126      	str	r6, [r4, #16]
 8009150:	6165      	str	r5, [r4, #20]
 8009152:	444e      	add	r6, r9
 8009154:	eba5 0509 	sub.w	r5, r5, r9
 8009158:	6026      	str	r6, [r4, #0]
 800915a:	60a5      	str	r5, [r4, #8]
 800915c:	463e      	mov	r6, r7
 800915e:	42be      	cmp	r6, r7
 8009160:	d900      	bls.n	8009164 <__ssputs_r+0x70>
 8009162:	463e      	mov	r6, r7
 8009164:	6820      	ldr	r0, [r4, #0]
 8009166:	4632      	mov	r2, r6
 8009168:	4641      	mov	r1, r8
 800916a:	f000 faab 	bl	80096c4 <memmove>
 800916e:	68a3      	ldr	r3, [r4, #8]
 8009170:	1b9b      	subs	r3, r3, r6
 8009172:	60a3      	str	r3, [r4, #8]
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	4433      	add	r3, r6
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	2000      	movs	r0, #0
 800917c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009180:	462a      	mov	r2, r5
 8009182:	f000 fad7 	bl	8009734 <_realloc_r>
 8009186:	4606      	mov	r6, r0
 8009188:	2800      	cmp	r0, #0
 800918a:	d1e0      	bne.n	800914e <__ssputs_r+0x5a>
 800918c:	6921      	ldr	r1, [r4, #16]
 800918e:	4650      	mov	r0, sl
 8009190:	f7ff feb8 	bl	8008f04 <_free_r>
 8009194:	230c      	movs	r3, #12
 8009196:	f8ca 3000 	str.w	r3, [sl]
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091a0:	81a3      	strh	r3, [r4, #12]
 80091a2:	f04f 30ff 	mov.w	r0, #4294967295
 80091a6:	e7e9      	b.n	800917c <__ssputs_r+0x88>

080091a8 <_svfiprintf_r>:
 80091a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ac:	4698      	mov	r8, r3
 80091ae:	898b      	ldrh	r3, [r1, #12]
 80091b0:	061b      	lsls	r3, r3, #24
 80091b2:	b09d      	sub	sp, #116	; 0x74
 80091b4:	4607      	mov	r7, r0
 80091b6:	460d      	mov	r5, r1
 80091b8:	4614      	mov	r4, r2
 80091ba:	d50e      	bpl.n	80091da <_svfiprintf_r+0x32>
 80091bc:	690b      	ldr	r3, [r1, #16]
 80091be:	b963      	cbnz	r3, 80091da <_svfiprintf_r+0x32>
 80091c0:	2140      	movs	r1, #64	; 0x40
 80091c2:	f7ff ff0b 	bl	8008fdc <_malloc_r>
 80091c6:	6028      	str	r0, [r5, #0]
 80091c8:	6128      	str	r0, [r5, #16]
 80091ca:	b920      	cbnz	r0, 80091d6 <_svfiprintf_r+0x2e>
 80091cc:	230c      	movs	r3, #12
 80091ce:	603b      	str	r3, [r7, #0]
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	e0d0      	b.n	8009378 <_svfiprintf_r+0x1d0>
 80091d6:	2340      	movs	r3, #64	; 0x40
 80091d8:	616b      	str	r3, [r5, #20]
 80091da:	2300      	movs	r3, #0
 80091dc:	9309      	str	r3, [sp, #36]	; 0x24
 80091de:	2320      	movs	r3, #32
 80091e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80091e8:	2330      	movs	r3, #48	; 0x30
 80091ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009390 <_svfiprintf_r+0x1e8>
 80091ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091f2:	f04f 0901 	mov.w	r9, #1
 80091f6:	4623      	mov	r3, r4
 80091f8:	469a      	mov	sl, r3
 80091fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091fe:	b10a      	cbz	r2, 8009204 <_svfiprintf_r+0x5c>
 8009200:	2a25      	cmp	r2, #37	; 0x25
 8009202:	d1f9      	bne.n	80091f8 <_svfiprintf_r+0x50>
 8009204:	ebba 0b04 	subs.w	fp, sl, r4
 8009208:	d00b      	beq.n	8009222 <_svfiprintf_r+0x7a>
 800920a:	465b      	mov	r3, fp
 800920c:	4622      	mov	r2, r4
 800920e:	4629      	mov	r1, r5
 8009210:	4638      	mov	r0, r7
 8009212:	f7ff ff6f 	bl	80090f4 <__ssputs_r>
 8009216:	3001      	adds	r0, #1
 8009218:	f000 80a9 	beq.w	800936e <_svfiprintf_r+0x1c6>
 800921c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800921e:	445a      	add	r2, fp
 8009220:	9209      	str	r2, [sp, #36]	; 0x24
 8009222:	f89a 3000 	ldrb.w	r3, [sl]
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 80a1 	beq.w	800936e <_svfiprintf_r+0x1c6>
 800922c:	2300      	movs	r3, #0
 800922e:	f04f 32ff 	mov.w	r2, #4294967295
 8009232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009236:	f10a 0a01 	add.w	sl, sl, #1
 800923a:	9304      	str	r3, [sp, #16]
 800923c:	9307      	str	r3, [sp, #28]
 800923e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009242:	931a      	str	r3, [sp, #104]	; 0x68
 8009244:	4654      	mov	r4, sl
 8009246:	2205      	movs	r2, #5
 8009248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800924c:	4850      	ldr	r0, [pc, #320]	; (8009390 <_svfiprintf_r+0x1e8>)
 800924e:	f7f6 ffef 	bl	8000230 <memchr>
 8009252:	9a04      	ldr	r2, [sp, #16]
 8009254:	b9d8      	cbnz	r0, 800928e <_svfiprintf_r+0xe6>
 8009256:	06d0      	lsls	r0, r2, #27
 8009258:	bf44      	itt	mi
 800925a:	2320      	movmi	r3, #32
 800925c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009260:	0711      	lsls	r1, r2, #28
 8009262:	bf44      	itt	mi
 8009264:	232b      	movmi	r3, #43	; 0x2b
 8009266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800926a:	f89a 3000 	ldrb.w	r3, [sl]
 800926e:	2b2a      	cmp	r3, #42	; 0x2a
 8009270:	d015      	beq.n	800929e <_svfiprintf_r+0xf6>
 8009272:	9a07      	ldr	r2, [sp, #28]
 8009274:	4654      	mov	r4, sl
 8009276:	2000      	movs	r0, #0
 8009278:	f04f 0c0a 	mov.w	ip, #10
 800927c:	4621      	mov	r1, r4
 800927e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009282:	3b30      	subs	r3, #48	; 0x30
 8009284:	2b09      	cmp	r3, #9
 8009286:	d94d      	bls.n	8009324 <_svfiprintf_r+0x17c>
 8009288:	b1b0      	cbz	r0, 80092b8 <_svfiprintf_r+0x110>
 800928a:	9207      	str	r2, [sp, #28]
 800928c:	e014      	b.n	80092b8 <_svfiprintf_r+0x110>
 800928e:	eba0 0308 	sub.w	r3, r0, r8
 8009292:	fa09 f303 	lsl.w	r3, r9, r3
 8009296:	4313      	orrs	r3, r2
 8009298:	9304      	str	r3, [sp, #16]
 800929a:	46a2      	mov	sl, r4
 800929c:	e7d2      	b.n	8009244 <_svfiprintf_r+0x9c>
 800929e:	9b03      	ldr	r3, [sp, #12]
 80092a0:	1d19      	adds	r1, r3, #4
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	9103      	str	r1, [sp, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	bfbb      	ittet	lt
 80092aa:	425b      	neglt	r3, r3
 80092ac:	f042 0202 	orrlt.w	r2, r2, #2
 80092b0:	9307      	strge	r3, [sp, #28]
 80092b2:	9307      	strlt	r3, [sp, #28]
 80092b4:	bfb8      	it	lt
 80092b6:	9204      	strlt	r2, [sp, #16]
 80092b8:	7823      	ldrb	r3, [r4, #0]
 80092ba:	2b2e      	cmp	r3, #46	; 0x2e
 80092bc:	d10c      	bne.n	80092d8 <_svfiprintf_r+0x130>
 80092be:	7863      	ldrb	r3, [r4, #1]
 80092c0:	2b2a      	cmp	r3, #42	; 0x2a
 80092c2:	d134      	bne.n	800932e <_svfiprintf_r+0x186>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	1d1a      	adds	r2, r3, #4
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	9203      	str	r2, [sp, #12]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	bfb8      	it	lt
 80092d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80092d4:	3402      	adds	r4, #2
 80092d6:	9305      	str	r3, [sp, #20]
 80092d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80093a0 <_svfiprintf_r+0x1f8>
 80092dc:	7821      	ldrb	r1, [r4, #0]
 80092de:	2203      	movs	r2, #3
 80092e0:	4650      	mov	r0, sl
 80092e2:	f7f6 ffa5 	bl	8000230 <memchr>
 80092e6:	b138      	cbz	r0, 80092f8 <_svfiprintf_r+0x150>
 80092e8:	9b04      	ldr	r3, [sp, #16]
 80092ea:	eba0 000a 	sub.w	r0, r0, sl
 80092ee:	2240      	movs	r2, #64	; 0x40
 80092f0:	4082      	lsls	r2, r0
 80092f2:	4313      	orrs	r3, r2
 80092f4:	3401      	adds	r4, #1
 80092f6:	9304      	str	r3, [sp, #16]
 80092f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fc:	4825      	ldr	r0, [pc, #148]	; (8009394 <_svfiprintf_r+0x1ec>)
 80092fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009302:	2206      	movs	r2, #6
 8009304:	f7f6 ff94 	bl	8000230 <memchr>
 8009308:	2800      	cmp	r0, #0
 800930a:	d038      	beq.n	800937e <_svfiprintf_r+0x1d6>
 800930c:	4b22      	ldr	r3, [pc, #136]	; (8009398 <_svfiprintf_r+0x1f0>)
 800930e:	bb1b      	cbnz	r3, 8009358 <_svfiprintf_r+0x1b0>
 8009310:	9b03      	ldr	r3, [sp, #12]
 8009312:	3307      	adds	r3, #7
 8009314:	f023 0307 	bic.w	r3, r3, #7
 8009318:	3308      	adds	r3, #8
 800931a:	9303      	str	r3, [sp, #12]
 800931c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800931e:	4433      	add	r3, r6
 8009320:	9309      	str	r3, [sp, #36]	; 0x24
 8009322:	e768      	b.n	80091f6 <_svfiprintf_r+0x4e>
 8009324:	fb0c 3202 	mla	r2, ip, r2, r3
 8009328:	460c      	mov	r4, r1
 800932a:	2001      	movs	r0, #1
 800932c:	e7a6      	b.n	800927c <_svfiprintf_r+0xd4>
 800932e:	2300      	movs	r3, #0
 8009330:	3401      	adds	r4, #1
 8009332:	9305      	str	r3, [sp, #20]
 8009334:	4619      	mov	r1, r3
 8009336:	f04f 0c0a 	mov.w	ip, #10
 800933a:	4620      	mov	r0, r4
 800933c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009340:	3a30      	subs	r2, #48	; 0x30
 8009342:	2a09      	cmp	r2, #9
 8009344:	d903      	bls.n	800934e <_svfiprintf_r+0x1a6>
 8009346:	2b00      	cmp	r3, #0
 8009348:	d0c6      	beq.n	80092d8 <_svfiprintf_r+0x130>
 800934a:	9105      	str	r1, [sp, #20]
 800934c:	e7c4      	b.n	80092d8 <_svfiprintf_r+0x130>
 800934e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009352:	4604      	mov	r4, r0
 8009354:	2301      	movs	r3, #1
 8009356:	e7f0      	b.n	800933a <_svfiprintf_r+0x192>
 8009358:	ab03      	add	r3, sp, #12
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	462a      	mov	r2, r5
 800935e:	4b0f      	ldr	r3, [pc, #60]	; (800939c <_svfiprintf_r+0x1f4>)
 8009360:	a904      	add	r1, sp, #16
 8009362:	4638      	mov	r0, r7
 8009364:	f3af 8000 	nop.w
 8009368:	1c42      	adds	r2, r0, #1
 800936a:	4606      	mov	r6, r0
 800936c:	d1d6      	bne.n	800931c <_svfiprintf_r+0x174>
 800936e:	89ab      	ldrh	r3, [r5, #12]
 8009370:	065b      	lsls	r3, r3, #25
 8009372:	f53f af2d 	bmi.w	80091d0 <_svfiprintf_r+0x28>
 8009376:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009378:	b01d      	add	sp, #116	; 0x74
 800937a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937e:	ab03      	add	r3, sp, #12
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	462a      	mov	r2, r5
 8009384:	4b05      	ldr	r3, [pc, #20]	; (800939c <_svfiprintf_r+0x1f4>)
 8009386:	a904      	add	r1, sp, #16
 8009388:	4638      	mov	r0, r7
 800938a:	f000 f879 	bl	8009480 <_printf_i>
 800938e:	e7eb      	b.n	8009368 <_svfiprintf_r+0x1c0>
 8009390:	08009a84 	.word	0x08009a84
 8009394:	08009a8e 	.word	0x08009a8e
 8009398:	00000000 	.word	0x00000000
 800939c:	080090f5 	.word	0x080090f5
 80093a0:	08009a8a 	.word	0x08009a8a

080093a4 <_printf_common>:
 80093a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a8:	4616      	mov	r6, r2
 80093aa:	4699      	mov	r9, r3
 80093ac:	688a      	ldr	r2, [r1, #8]
 80093ae:	690b      	ldr	r3, [r1, #16]
 80093b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093b4:	4293      	cmp	r3, r2
 80093b6:	bfb8      	it	lt
 80093b8:	4613      	movlt	r3, r2
 80093ba:	6033      	str	r3, [r6, #0]
 80093bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093c0:	4607      	mov	r7, r0
 80093c2:	460c      	mov	r4, r1
 80093c4:	b10a      	cbz	r2, 80093ca <_printf_common+0x26>
 80093c6:	3301      	adds	r3, #1
 80093c8:	6033      	str	r3, [r6, #0]
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	0699      	lsls	r1, r3, #26
 80093ce:	bf42      	ittt	mi
 80093d0:	6833      	ldrmi	r3, [r6, #0]
 80093d2:	3302      	addmi	r3, #2
 80093d4:	6033      	strmi	r3, [r6, #0]
 80093d6:	6825      	ldr	r5, [r4, #0]
 80093d8:	f015 0506 	ands.w	r5, r5, #6
 80093dc:	d106      	bne.n	80093ec <_printf_common+0x48>
 80093de:	f104 0a19 	add.w	sl, r4, #25
 80093e2:	68e3      	ldr	r3, [r4, #12]
 80093e4:	6832      	ldr	r2, [r6, #0]
 80093e6:	1a9b      	subs	r3, r3, r2
 80093e8:	42ab      	cmp	r3, r5
 80093ea:	dc26      	bgt.n	800943a <_printf_common+0x96>
 80093ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093f0:	1e13      	subs	r3, r2, #0
 80093f2:	6822      	ldr	r2, [r4, #0]
 80093f4:	bf18      	it	ne
 80093f6:	2301      	movne	r3, #1
 80093f8:	0692      	lsls	r2, r2, #26
 80093fa:	d42b      	bmi.n	8009454 <_printf_common+0xb0>
 80093fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009400:	4649      	mov	r1, r9
 8009402:	4638      	mov	r0, r7
 8009404:	47c0      	blx	r8
 8009406:	3001      	adds	r0, #1
 8009408:	d01e      	beq.n	8009448 <_printf_common+0xa4>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	6922      	ldr	r2, [r4, #16]
 800940e:	f003 0306 	and.w	r3, r3, #6
 8009412:	2b04      	cmp	r3, #4
 8009414:	bf02      	ittt	eq
 8009416:	68e5      	ldreq	r5, [r4, #12]
 8009418:	6833      	ldreq	r3, [r6, #0]
 800941a:	1aed      	subeq	r5, r5, r3
 800941c:	68a3      	ldr	r3, [r4, #8]
 800941e:	bf0c      	ite	eq
 8009420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009424:	2500      	movne	r5, #0
 8009426:	4293      	cmp	r3, r2
 8009428:	bfc4      	itt	gt
 800942a:	1a9b      	subgt	r3, r3, r2
 800942c:	18ed      	addgt	r5, r5, r3
 800942e:	2600      	movs	r6, #0
 8009430:	341a      	adds	r4, #26
 8009432:	42b5      	cmp	r5, r6
 8009434:	d11a      	bne.n	800946c <_printf_common+0xc8>
 8009436:	2000      	movs	r0, #0
 8009438:	e008      	b.n	800944c <_printf_common+0xa8>
 800943a:	2301      	movs	r3, #1
 800943c:	4652      	mov	r2, sl
 800943e:	4649      	mov	r1, r9
 8009440:	4638      	mov	r0, r7
 8009442:	47c0      	blx	r8
 8009444:	3001      	adds	r0, #1
 8009446:	d103      	bne.n	8009450 <_printf_common+0xac>
 8009448:	f04f 30ff 	mov.w	r0, #4294967295
 800944c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009450:	3501      	adds	r5, #1
 8009452:	e7c6      	b.n	80093e2 <_printf_common+0x3e>
 8009454:	18e1      	adds	r1, r4, r3
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	2030      	movs	r0, #48	; 0x30
 800945a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800945e:	4422      	add	r2, r4
 8009460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009468:	3302      	adds	r3, #2
 800946a:	e7c7      	b.n	80093fc <_printf_common+0x58>
 800946c:	2301      	movs	r3, #1
 800946e:	4622      	mov	r2, r4
 8009470:	4649      	mov	r1, r9
 8009472:	4638      	mov	r0, r7
 8009474:	47c0      	blx	r8
 8009476:	3001      	adds	r0, #1
 8009478:	d0e6      	beq.n	8009448 <_printf_common+0xa4>
 800947a:	3601      	adds	r6, #1
 800947c:	e7d9      	b.n	8009432 <_printf_common+0x8e>
	...

08009480 <_printf_i>:
 8009480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009484:	7e0f      	ldrb	r7, [r1, #24]
 8009486:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009488:	2f78      	cmp	r7, #120	; 0x78
 800948a:	4691      	mov	r9, r2
 800948c:	4680      	mov	r8, r0
 800948e:	460c      	mov	r4, r1
 8009490:	469a      	mov	sl, r3
 8009492:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009496:	d807      	bhi.n	80094a8 <_printf_i+0x28>
 8009498:	2f62      	cmp	r7, #98	; 0x62
 800949a:	d80a      	bhi.n	80094b2 <_printf_i+0x32>
 800949c:	2f00      	cmp	r7, #0
 800949e:	f000 80d4 	beq.w	800964a <_printf_i+0x1ca>
 80094a2:	2f58      	cmp	r7, #88	; 0x58
 80094a4:	f000 80c0 	beq.w	8009628 <_printf_i+0x1a8>
 80094a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094b0:	e03a      	b.n	8009528 <_printf_i+0xa8>
 80094b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094b6:	2b15      	cmp	r3, #21
 80094b8:	d8f6      	bhi.n	80094a8 <_printf_i+0x28>
 80094ba:	a101      	add	r1, pc, #4	; (adr r1, 80094c0 <_printf_i+0x40>)
 80094bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094c0:	08009519 	.word	0x08009519
 80094c4:	0800952d 	.word	0x0800952d
 80094c8:	080094a9 	.word	0x080094a9
 80094cc:	080094a9 	.word	0x080094a9
 80094d0:	080094a9 	.word	0x080094a9
 80094d4:	080094a9 	.word	0x080094a9
 80094d8:	0800952d 	.word	0x0800952d
 80094dc:	080094a9 	.word	0x080094a9
 80094e0:	080094a9 	.word	0x080094a9
 80094e4:	080094a9 	.word	0x080094a9
 80094e8:	080094a9 	.word	0x080094a9
 80094ec:	08009631 	.word	0x08009631
 80094f0:	08009559 	.word	0x08009559
 80094f4:	080095eb 	.word	0x080095eb
 80094f8:	080094a9 	.word	0x080094a9
 80094fc:	080094a9 	.word	0x080094a9
 8009500:	08009653 	.word	0x08009653
 8009504:	080094a9 	.word	0x080094a9
 8009508:	08009559 	.word	0x08009559
 800950c:	080094a9 	.word	0x080094a9
 8009510:	080094a9 	.word	0x080094a9
 8009514:	080095f3 	.word	0x080095f3
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	1d1a      	adds	r2, r3, #4
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	602a      	str	r2, [r5, #0]
 8009520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009528:	2301      	movs	r3, #1
 800952a:	e09f      	b.n	800966c <_printf_i+0x1ec>
 800952c:	6820      	ldr	r0, [r4, #0]
 800952e:	682b      	ldr	r3, [r5, #0]
 8009530:	0607      	lsls	r7, r0, #24
 8009532:	f103 0104 	add.w	r1, r3, #4
 8009536:	6029      	str	r1, [r5, #0]
 8009538:	d501      	bpl.n	800953e <_printf_i+0xbe>
 800953a:	681e      	ldr	r6, [r3, #0]
 800953c:	e003      	b.n	8009546 <_printf_i+0xc6>
 800953e:	0646      	lsls	r6, r0, #25
 8009540:	d5fb      	bpl.n	800953a <_printf_i+0xba>
 8009542:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009546:	2e00      	cmp	r6, #0
 8009548:	da03      	bge.n	8009552 <_printf_i+0xd2>
 800954a:	232d      	movs	r3, #45	; 0x2d
 800954c:	4276      	negs	r6, r6
 800954e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009552:	485a      	ldr	r0, [pc, #360]	; (80096bc <_printf_i+0x23c>)
 8009554:	230a      	movs	r3, #10
 8009556:	e012      	b.n	800957e <_printf_i+0xfe>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	6820      	ldr	r0, [r4, #0]
 800955c:	1d19      	adds	r1, r3, #4
 800955e:	6029      	str	r1, [r5, #0]
 8009560:	0605      	lsls	r5, r0, #24
 8009562:	d501      	bpl.n	8009568 <_printf_i+0xe8>
 8009564:	681e      	ldr	r6, [r3, #0]
 8009566:	e002      	b.n	800956e <_printf_i+0xee>
 8009568:	0641      	lsls	r1, r0, #25
 800956a:	d5fb      	bpl.n	8009564 <_printf_i+0xe4>
 800956c:	881e      	ldrh	r6, [r3, #0]
 800956e:	4853      	ldr	r0, [pc, #332]	; (80096bc <_printf_i+0x23c>)
 8009570:	2f6f      	cmp	r7, #111	; 0x6f
 8009572:	bf0c      	ite	eq
 8009574:	2308      	moveq	r3, #8
 8009576:	230a      	movne	r3, #10
 8009578:	2100      	movs	r1, #0
 800957a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800957e:	6865      	ldr	r5, [r4, #4]
 8009580:	60a5      	str	r5, [r4, #8]
 8009582:	2d00      	cmp	r5, #0
 8009584:	bfa2      	ittt	ge
 8009586:	6821      	ldrge	r1, [r4, #0]
 8009588:	f021 0104 	bicge.w	r1, r1, #4
 800958c:	6021      	strge	r1, [r4, #0]
 800958e:	b90e      	cbnz	r6, 8009594 <_printf_i+0x114>
 8009590:	2d00      	cmp	r5, #0
 8009592:	d04b      	beq.n	800962c <_printf_i+0x1ac>
 8009594:	4615      	mov	r5, r2
 8009596:	fbb6 f1f3 	udiv	r1, r6, r3
 800959a:	fb03 6711 	mls	r7, r3, r1, r6
 800959e:	5dc7      	ldrb	r7, [r0, r7]
 80095a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095a4:	4637      	mov	r7, r6
 80095a6:	42bb      	cmp	r3, r7
 80095a8:	460e      	mov	r6, r1
 80095aa:	d9f4      	bls.n	8009596 <_printf_i+0x116>
 80095ac:	2b08      	cmp	r3, #8
 80095ae:	d10b      	bne.n	80095c8 <_printf_i+0x148>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	07de      	lsls	r6, r3, #31
 80095b4:	d508      	bpl.n	80095c8 <_printf_i+0x148>
 80095b6:	6923      	ldr	r3, [r4, #16]
 80095b8:	6861      	ldr	r1, [r4, #4]
 80095ba:	4299      	cmp	r1, r3
 80095bc:	bfde      	ittt	le
 80095be:	2330      	movle	r3, #48	; 0x30
 80095c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095c8:	1b52      	subs	r2, r2, r5
 80095ca:	6122      	str	r2, [r4, #16]
 80095cc:	f8cd a000 	str.w	sl, [sp]
 80095d0:	464b      	mov	r3, r9
 80095d2:	aa03      	add	r2, sp, #12
 80095d4:	4621      	mov	r1, r4
 80095d6:	4640      	mov	r0, r8
 80095d8:	f7ff fee4 	bl	80093a4 <_printf_common>
 80095dc:	3001      	adds	r0, #1
 80095de:	d14a      	bne.n	8009676 <_printf_i+0x1f6>
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295
 80095e4:	b004      	add	sp, #16
 80095e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	f043 0320 	orr.w	r3, r3, #32
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	4833      	ldr	r0, [pc, #204]	; (80096c0 <_printf_i+0x240>)
 80095f4:	2778      	movs	r7, #120	; 0x78
 80095f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	6829      	ldr	r1, [r5, #0]
 80095fe:	061f      	lsls	r7, r3, #24
 8009600:	f851 6b04 	ldr.w	r6, [r1], #4
 8009604:	d402      	bmi.n	800960c <_printf_i+0x18c>
 8009606:	065f      	lsls	r7, r3, #25
 8009608:	bf48      	it	mi
 800960a:	b2b6      	uxthmi	r6, r6
 800960c:	07df      	lsls	r7, r3, #31
 800960e:	bf48      	it	mi
 8009610:	f043 0320 	orrmi.w	r3, r3, #32
 8009614:	6029      	str	r1, [r5, #0]
 8009616:	bf48      	it	mi
 8009618:	6023      	strmi	r3, [r4, #0]
 800961a:	b91e      	cbnz	r6, 8009624 <_printf_i+0x1a4>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	f023 0320 	bic.w	r3, r3, #32
 8009622:	6023      	str	r3, [r4, #0]
 8009624:	2310      	movs	r3, #16
 8009626:	e7a7      	b.n	8009578 <_printf_i+0xf8>
 8009628:	4824      	ldr	r0, [pc, #144]	; (80096bc <_printf_i+0x23c>)
 800962a:	e7e4      	b.n	80095f6 <_printf_i+0x176>
 800962c:	4615      	mov	r5, r2
 800962e:	e7bd      	b.n	80095ac <_printf_i+0x12c>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	6826      	ldr	r6, [r4, #0]
 8009634:	6961      	ldr	r1, [r4, #20]
 8009636:	1d18      	adds	r0, r3, #4
 8009638:	6028      	str	r0, [r5, #0]
 800963a:	0635      	lsls	r5, r6, #24
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	d501      	bpl.n	8009644 <_printf_i+0x1c4>
 8009640:	6019      	str	r1, [r3, #0]
 8009642:	e002      	b.n	800964a <_printf_i+0x1ca>
 8009644:	0670      	lsls	r0, r6, #25
 8009646:	d5fb      	bpl.n	8009640 <_printf_i+0x1c0>
 8009648:	8019      	strh	r1, [r3, #0]
 800964a:	2300      	movs	r3, #0
 800964c:	6123      	str	r3, [r4, #16]
 800964e:	4615      	mov	r5, r2
 8009650:	e7bc      	b.n	80095cc <_printf_i+0x14c>
 8009652:	682b      	ldr	r3, [r5, #0]
 8009654:	1d1a      	adds	r2, r3, #4
 8009656:	602a      	str	r2, [r5, #0]
 8009658:	681d      	ldr	r5, [r3, #0]
 800965a:	6862      	ldr	r2, [r4, #4]
 800965c:	2100      	movs	r1, #0
 800965e:	4628      	mov	r0, r5
 8009660:	f7f6 fde6 	bl	8000230 <memchr>
 8009664:	b108      	cbz	r0, 800966a <_printf_i+0x1ea>
 8009666:	1b40      	subs	r0, r0, r5
 8009668:	6060      	str	r0, [r4, #4]
 800966a:	6863      	ldr	r3, [r4, #4]
 800966c:	6123      	str	r3, [r4, #16]
 800966e:	2300      	movs	r3, #0
 8009670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009674:	e7aa      	b.n	80095cc <_printf_i+0x14c>
 8009676:	6923      	ldr	r3, [r4, #16]
 8009678:	462a      	mov	r2, r5
 800967a:	4649      	mov	r1, r9
 800967c:	4640      	mov	r0, r8
 800967e:	47d0      	blx	sl
 8009680:	3001      	adds	r0, #1
 8009682:	d0ad      	beq.n	80095e0 <_printf_i+0x160>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	079b      	lsls	r3, r3, #30
 8009688:	d413      	bmi.n	80096b2 <_printf_i+0x232>
 800968a:	68e0      	ldr	r0, [r4, #12]
 800968c:	9b03      	ldr	r3, [sp, #12]
 800968e:	4298      	cmp	r0, r3
 8009690:	bfb8      	it	lt
 8009692:	4618      	movlt	r0, r3
 8009694:	e7a6      	b.n	80095e4 <_printf_i+0x164>
 8009696:	2301      	movs	r3, #1
 8009698:	4632      	mov	r2, r6
 800969a:	4649      	mov	r1, r9
 800969c:	4640      	mov	r0, r8
 800969e:	47d0      	blx	sl
 80096a0:	3001      	adds	r0, #1
 80096a2:	d09d      	beq.n	80095e0 <_printf_i+0x160>
 80096a4:	3501      	adds	r5, #1
 80096a6:	68e3      	ldr	r3, [r4, #12]
 80096a8:	9903      	ldr	r1, [sp, #12]
 80096aa:	1a5b      	subs	r3, r3, r1
 80096ac:	42ab      	cmp	r3, r5
 80096ae:	dcf2      	bgt.n	8009696 <_printf_i+0x216>
 80096b0:	e7eb      	b.n	800968a <_printf_i+0x20a>
 80096b2:	2500      	movs	r5, #0
 80096b4:	f104 0619 	add.w	r6, r4, #25
 80096b8:	e7f5      	b.n	80096a6 <_printf_i+0x226>
 80096ba:	bf00      	nop
 80096bc:	08009a95 	.word	0x08009a95
 80096c0:	08009aa6 	.word	0x08009aa6

080096c4 <memmove>:
 80096c4:	4288      	cmp	r0, r1
 80096c6:	b510      	push	{r4, lr}
 80096c8:	eb01 0402 	add.w	r4, r1, r2
 80096cc:	d902      	bls.n	80096d4 <memmove+0x10>
 80096ce:	4284      	cmp	r4, r0
 80096d0:	4623      	mov	r3, r4
 80096d2:	d807      	bhi.n	80096e4 <memmove+0x20>
 80096d4:	1e43      	subs	r3, r0, #1
 80096d6:	42a1      	cmp	r1, r4
 80096d8:	d008      	beq.n	80096ec <memmove+0x28>
 80096da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096e2:	e7f8      	b.n	80096d6 <memmove+0x12>
 80096e4:	4402      	add	r2, r0
 80096e6:	4601      	mov	r1, r0
 80096e8:	428a      	cmp	r2, r1
 80096ea:	d100      	bne.n	80096ee <memmove+0x2a>
 80096ec:	bd10      	pop	{r4, pc}
 80096ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096f6:	e7f7      	b.n	80096e8 <memmove+0x24>

080096f8 <_sbrk_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d06      	ldr	r5, [pc, #24]	; (8009714 <_sbrk_r+0x1c>)
 80096fc:	2300      	movs	r3, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	f7f7 fea8 	bl	8001458 <_sbrk>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_sbrk_r+0x1a>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_sbrk_r+0x1a>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	20000558 	.word	0x20000558

08009718 <memcpy>:
 8009718:	440a      	add	r2, r1
 800971a:	4291      	cmp	r1, r2
 800971c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009720:	d100      	bne.n	8009724 <memcpy+0xc>
 8009722:	4770      	bx	lr
 8009724:	b510      	push	{r4, lr}
 8009726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800972a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800972e:	4291      	cmp	r1, r2
 8009730:	d1f9      	bne.n	8009726 <memcpy+0xe>
 8009732:	bd10      	pop	{r4, pc}

08009734 <_realloc_r>:
 8009734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009738:	4680      	mov	r8, r0
 800973a:	4614      	mov	r4, r2
 800973c:	460e      	mov	r6, r1
 800973e:	b921      	cbnz	r1, 800974a <_realloc_r+0x16>
 8009740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009744:	4611      	mov	r1, r2
 8009746:	f7ff bc49 	b.w	8008fdc <_malloc_r>
 800974a:	b92a      	cbnz	r2, 8009758 <_realloc_r+0x24>
 800974c:	f7ff fbda 	bl	8008f04 <_free_r>
 8009750:	4625      	mov	r5, r4
 8009752:	4628      	mov	r0, r5
 8009754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009758:	f000 f81b 	bl	8009792 <_malloc_usable_size_r>
 800975c:	4284      	cmp	r4, r0
 800975e:	4607      	mov	r7, r0
 8009760:	d802      	bhi.n	8009768 <_realloc_r+0x34>
 8009762:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009766:	d812      	bhi.n	800978e <_realloc_r+0x5a>
 8009768:	4621      	mov	r1, r4
 800976a:	4640      	mov	r0, r8
 800976c:	f7ff fc36 	bl	8008fdc <_malloc_r>
 8009770:	4605      	mov	r5, r0
 8009772:	2800      	cmp	r0, #0
 8009774:	d0ed      	beq.n	8009752 <_realloc_r+0x1e>
 8009776:	42bc      	cmp	r4, r7
 8009778:	4622      	mov	r2, r4
 800977a:	4631      	mov	r1, r6
 800977c:	bf28      	it	cs
 800977e:	463a      	movcs	r2, r7
 8009780:	f7ff ffca 	bl	8009718 <memcpy>
 8009784:	4631      	mov	r1, r6
 8009786:	4640      	mov	r0, r8
 8009788:	f7ff fbbc 	bl	8008f04 <_free_r>
 800978c:	e7e1      	b.n	8009752 <_realloc_r+0x1e>
 800978e:	4635      	mov	r5, r6
 8009790:	e7df      	b.n	8009752 <_realloc_r+0x1e>

08009792 <_malloc_usable_size_r>:
 8009792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009796:	1f18      	subs	r0, r3, #4
 8009798:	2b00      	cmp	r3, #0
 800979a:	bfbc      	itt	lt
 800979c:	580b      	ldrlt	r3, [r1, r0]
 800979e:	18c0      	addlt	r0, r0, r3
 80097a0:	4770      	bx	lr
	...

080097a4 <_init>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr

080097b0 <_fini>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	bf00      	nop
 80097b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b6:	bc08      	pop	{r3}
 80097b8:	469e      	mov	lr, r3
 80097ba:	4770      	bx	lr
